// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DisplayAdvancedColorInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DisplayAdvancedColorInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DisplayAdvancedColorInfo {
    pub fn CurrentAdvancedColorKind(&self) -> windows_core::Result<DisplayAdvancedColorKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentAdvancedColorKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RedPrimary(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RedPrimary)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GreenPrimary(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GreenPrimary)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn BluePrimary(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BluePrimary)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WhitePoint(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WhitePoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxLuminanceInNits(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxLuminanceInNits)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MinLuminanceInNits(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinLuminanceInNits)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxAverageFullFrameLuminanceInNits(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxAverageFullFrameLuminanceInNits)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SdrWhiteLevelInNits(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SdrWhiteLevelInNits)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsHdrMetadataFormatCurrentlySupported(
        &self,
        format: DisplayHdrMetadataFormat,
    ) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHdrMetadataFormatCurrentlySupported)(
                windows_core::Interface::as_raw(this),
                format,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsAdvancedColorKindAvailable(
        &self,
        kind: DisplayAdvancedColorKind,
    ) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAdvancedColorKindAvailable)(
                windows_core::Interface::as_raw(this),
                kind,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for DisplayAdvancedColorInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDisplayAdvancedColorInfo>();
}
unsafe impl windows_core::Interface for DisplayAdvancedColorInfo {
    type Vtable = <IDisplayAdvancedColorInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDisplayAdvancedColorInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DisplayAdvancedColorInfo {
    const NAME: &'static str = "Microsoft.Graphics.Display.DisplayAdvancedColorInfo";
}
unsafe impl Send for DisplayAdvancedColorInfo {}
unsafe impl Sync for DisplayAdvancedColorInfo {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DisplayAdvancedColorKind(pub i32);
impl DisplayAdvancedColorKind {
    pub const StandardDynamicRange: Self = Self(0i32);
    pub const WideColorGamut: Self = Self(1i32);
    pub const HighDynamicRange: Self = Self(2i32);
}
impl windows_core::TypeKind for DisplayAdvancedColorKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for DisplayAdvancedColorKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Display.DisplayAdvancedColorKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DisplayHdrMetadataFormat(pub i32);
impl DisplayHdrMetadataFormat {
    pub const Hdr10: Self = Self(0i32);
    pub const Hdr10Plus: Self = Self(1i32);
}
impl windows_core::TypeKind for DisplayHdrMetadataFormat {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for DisplayHdrMetadataFormat {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Display.DisplayHdrMetadataFormat;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DisplayInformation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DisplayInformation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(DisplayInformation, windows::Foundation::IClosable);
impl DisplayInformation {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::UI::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsStereoEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStereoEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsStereoEnabledChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStereoEnabledChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIsStereoEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsStereoEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetColorProfileAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetColorProfileAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetColorProfile(
        &self,
    ) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetColorProfile)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ColorProfileChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorProfileChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveColorProfileChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveColorProfileChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetAdvancedColorInfo(&self) -> windows_core::Result<DisplayAdvancedColorInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAdvancedColorInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AdvancedColorInfoChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AdvancedColorInfoChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAdvancedColorInfoChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAdvancedColorInfoChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Destroyed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Destroyed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDestroyed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDestroyed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI")]
    pub fn CreateForWindowId(
        windowid: super::super::UI::WindowId,
    ) -> windows_core::Result<DisplayInformation> {
        Self::IDisplayInformationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForWindowId)(
                windows_core::Interface::as_raw(this),
                windowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI")]
    pub fn CreateForDisplayId(
        displayid: super::super::UI::DisplayId,
    ) -> windows_core::Result<DisplayInformation> {
        Self::IDisplayInformationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForDisplayId)(
                windows_core::Interface::as_raw(this),
                displayid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDisplayInformationStatics<
        R,
        F: FnOnce(&IDisplayInformationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DisplayInformation,
            IDisplayInformationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DisplayInformation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDisplayInformation>();
}
unsafe impl windows_core::Interface for DisplayInformation {
    type Vtable = <IDisplayInformation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDisplayInformation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DisplayInformation {
    const NAME: &'static str = "Microsoft.Graphics.Display.DisplayInformation";
}
unsafe impl Send for DisplayInformation {}
unsafe impl Sync for DisplayInformation {}
windows_core::imp::define_interface!(
    IDisplayAdvancedColorInfo,
    IDisplayAdvancedColorInfo_Vtbl,
    0xb44f0f47_7065_5175_ba3e_714489c85a3e
);
impl windows_core::RuntimeType for IDisplayAdvancedColorInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDisplayAdvancedColorInfo {
    const NAME: &'static str = "Microsoft.Graphics.Display.IDisplayAdvancedColorInfo";
}
pub trait IDisplayAdvancedColorInfo_Impl: windows_core::IUnknownImpl {
    fn CurrentAdvancedColorKind(&self) -> windows_core::Result<DisplayAdvancedColorKind>;
    fn RedPrimary(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn GreenPrimary(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn BluePrimary(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn WhitePoint(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn MaxLuminanceInNits(&self) -> windows_core::Result<f64>;
    fn MinLuminanceInNits(&self) -> windows_core::Result<f64>;
    fn MaxAverageFullFrameLuminanceInNits(&self) -> windows_core::Result<f64>;
    fn SdrWhiteLevelInNits(&self) -> windows_core::Result<f64>;
    fn IsHdrMetadataFormatCurrentlySupported(
        &self,
        format: DisplayHdrMetadataFormat,
    ) -> windows_core::Result<bool>;
    fn IsAdvancedColorKindAvailable(
        &self,
        kind: DisplayAdvancedColorKind,
    ) -> windows_core::Result<bool>;
}
impl IDisplayAdvancedColorInfo_Vtbl {
    pub const fn new<Identity: IDisplayAdvancedColorInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CurrentAdvancedColorKind<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut DisplayAdvancedColorKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::CurrentAdvancedColorKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RedPrimary<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::RedPrimary(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GreenPrimary<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::GreenPrimary(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BluePrimary<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::BluePrimary(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WhitePoint<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::WhitePoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxLuminanceInNits<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::MaxLuminanceInNits(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinLuminanceInNits<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::MinLuminanceInNits(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxAverageFullFrameLuminanceInNits<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::MaxAverageFullFrameLuminanceInNits(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SdrWhiteLevelInNits<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::SdrWhiteLevelInNits(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsHdrMetadataFormatCurrentlySupported<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            format: DisplayHdrMetadataFormat,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::IsHdrMetadataFormatCurrentlySupported(
                    this, format,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsAdvancedColorKindAvailable<
            Identity: IDisplayAdvancedColorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            kind: DisplayAdvancedColorKind,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayAdvancedColorInfo_Impl::IsAdvancedColorKindAvailable(this, kind) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDisplayAdvancedColorInfo,
                OFFSET,
            >(),
            CurrentAdvancedColorKind: CurrentAdvancedColorKind::<Identity, OFFSET>,
            RedPrimary: RedPrimary::<Identity, OFFSET>,
            GreenPrimary: GreenPrimary::<Identity, OFFSET>,
            BluePrimary: BluePrimary::<Identity, OFFSET>,
            WhitePoint: WhitePoint::<Identity, OFFSET>,
            MaxLuminanceInNits: MaxLuminanceInNits::<Identity, OFFSET>,
            MinLuminanceInNits: MinLuminanceInNits::<Identity, OFFSET>,
            MaxAverageFullFrameLuminanceInNits: MaxAverageFullFrameLuminanceInNits::<
                Identity,
                OFFSET,
            >,
            SdrWhiteLevelInNits: SdrWhiteLevelInNits::<Identity, OFFSET>,
            IsHdrMetadataFormatCurrentlySupported: IsHdrMetadataFormatCurrentlySupported::<
                Identity,
                OFFSET,
            >,
            IsAdvancedColorKindAvailable: IsAdvancedColorKindAvailable::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDisplayAdvancedColorInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDisplayAdvancedColorInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CurrentAdvancedColorKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut DisplayAdvancedColorKind,
    ) -> windows_core::HRESULT,
    pub RedPrimary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub GreenPrimary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub BluePrimary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub WhitePoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub MaxLuminanceInNits:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub MinLuminanceInNits:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub MaxAverageFullFrameLuminanceInNits:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SdrWhiteLevelInNits:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub IsHdrMetadataFormatCurrentlySupported: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        DisplayHdrMetadataFormat,
        *mut bool,
    )
        -> windows_core::HRESULT,
    pub IsAdvancedColorKindAvailable: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        DisplayAdvancedColorKind,
        *mut bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDisplayInformation,
    IDisplayInformation_Vtbl,
    0xf0d58d4f_84ce_5b27_b222_4f8f7dc0aaeb
);
impl windows_core::RuntimeType for IDisplayInformation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IDisplayInformation {
    const NAME: &'static str = "Microsoft.Graphics.Display.IDisplayInformation";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IDisplayInformation_Impl: windows_core::IUnknownImpl {
    fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::UI::Dispatching::DispatcherQueue>;
    fn IsStereoEnabled(&self) -> windows_core::Result<bool>;
    fn IsStereoEnabledChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveIsStereoEnabledChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetColorProfileAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    >;
    fn GetColorProfile(
        &self,
    ) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream>;
    fn ColorProfileChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveColorProfileChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetAdvancedColorInfo(&self) -> windows_core::Result<DisplayAdvancedColorInfo>;
    fn AdvancedColorInfoChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAdvancedColorInfoChanged(&self, token: i64) -> windows_core::Result<()>;
    fn Destroyed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<DisplayInformation, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDestroyed(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Dispatching")]
impl IDisplayInformation_Vtbl {
    pub const fn new<Identity: IDisplayInformation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DispatcherQueue<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsStereoEnabled<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::IsStereoEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsStereoEnabledChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::IsStereoEnabledChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveIsStereoEnabledChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDisplayInformation_Impl::RemoveIsStereoEnabledChanged(this, token).into()
            }
        }
        unsafe extern "system" fn GetColorProfileAsync<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::GetColorProfileAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetColorProfile<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::GetColorProfile(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ColorProfileChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::ColorProfileChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveColorProfileChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDisplayInformation_Impl::RemoveColorProfileChanged(this, token).into()
            }
        }
        unsafe extern "system" fn GetAdvancedColorInfo<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::GetAdvancedColorInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AdvancedColorInfoChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::AdvancedColorInfoChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAdvancedColorInfoChanged<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDisplayInformation_Impl::RemoveAdvancedColorInfoChanged(this, token).into()
            }
        }
        unsafe extern "system" fn Destroyed<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformation_Impl::Destroyed(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDestroyed<
            Identity: IDisplayInformation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDisplayInformation_Impl::RemoveDestroyed(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDisplayInformation, OFFSET>(),
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            IsStereoEnabled: IsStereoEnabled::<Identity, OFFSET>,
            IsStereoEnabledChanged: IsStereoEnabledChanged::<Identity, OFFSET>,
            RemoveIsStereoEnabledChanged: RemoveIsStereoEnabledChanged::<Identity, OFFSET>,
            GetColorProfileAsync: GetColorProfileAsync::<Identity, OFFSET>,
            GetColorProfile: GetColorProfile::<Identity, OFFSET>,
            ColorProfileChanged: ColorProfileChanged::<Identity, OFFSET>,
            RemoveColorProfileChanged: RemoveColorProfileChanged::<Identity, OFFSET>,
            GetAdvancedColorInfo: GetAdvancedColorInfo::<Identity, OFFSET>,
            AdvancedColorInfoChanged: AdvancedColorInfoChanged::<Identity, OFFSET>,
            RemoveAdvancedColorInfoChanged: RemoveAdvancedColorInfoChanged::<Identity, OFFSET>,
            Destroyed: Destroyed::<Identity, OFFSET>,
            RemoveDestroyed: RemoveDestroyed::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDisplayInformation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDisplayInformation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub IsStereoEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsStereoEnabledChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveIsStereoEnabledChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetColorProfileAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetColorProfile: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ColorProfileChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveColorProfileChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetAdvancedColorInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AdvancedColorInfoChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveAdvancedColorInfoChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Destroyed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDestroyed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDisplayInformationStatics,
    IDisplayInformationStatics_Vtbl,
    0x2de85048_37fa_56c0_ac30_47e2044d7ea8
);
impl windows_core::RuntimeType for IDisplayInformationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI")]
impl windows_core::RuntimeName for IDisplayInformationStatics {
    const NAME: &'static str = "Microsoft.Graphics.Display.IDisplayInformationStatics";
}
#[cfg(feature = "UI")]
pub trait IDisplayInformationStatics_Impl: windows_core::IUnknownImpl {
    fn CreateForWindowId(
        &self,
        windowId: &super::super::UI::WindowId,
    ) -> windows_core::Result<DisplayInformation>;
    fn CreateForDisplayId(
        &self,
        displayId: &super::super::UI::DisplayId,
    ) -> windows_core::Result<DisplayInformation>;
}
#[cfg(feature = "UI")]
impl IDisplayInformationStatics_Vtbl {
    pub const fn new<Identity: IDisplayInformationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateForWindowId<
            Identity: IDisplayInformationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowid: super::super::UI::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformationStatics_Impl::CreateForWindowId(
                    this,
                    core::mem::transmute(&windowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateForDisplayId<
            Identity: IDisplayInformationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            displayid: super::super::UI::DisplayId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDisplayInformationStatics_Impl::CreateForDisplayId(
                    this,
                    core::mem::transmute(&displayid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDisplayInformationStatics,
                OFFSET,
            >(),
            CreateForWindowId: CreateForWindowId::<Identity, OFFSET>,
            CreateForDisplayId: CreateForDisplayId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDisplayInformationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDisplayInformationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub CreateForWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::UI::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI"))]
    CreateForWindowId: usize,
    #[cfg(feature = "UI")]
    pub CreateForDisplayId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::UI::DisplayId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI"))]
    CreateForDisplayId: usize,
}
