// Bindings generated by `windows-bindgen` 0.63.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2 {
    pub fn Settings(&self) -> windows_core::Result<CoreWebView2Settings> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Settings)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn BrowserProcessId(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BrowserProcessId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanGoBack(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanGoBack)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanGoForward(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanGoForward)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DocumentTitle(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DocumentTitle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ContainsFullScreenElement(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainsFullScreenElement)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NavigationStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContentLoading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ContentLoadingEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentLoading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContentLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContentLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SourceChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2SourceChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSourceChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSourceChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn HistoryChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HistoryChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveHistoryChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHistoryChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NavigationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameNavigationStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameNavigationStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameNavigationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameNavigationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameNavigationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameNavigationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameNavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameNavigationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ScriptDialogOpening<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ScriptDialogOpeningEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScriptDialogOpening)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveScriptDialogOpening(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveScriptDialogOpening)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn PermissionRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2PermissionRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePermissionRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePermissionRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ProcessFailed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ProcessFailedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessFailed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveProcessFailed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessFailed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn WebMessageReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebMessageReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebMessageReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NewWindowRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NewWindowRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NewWindowRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNewWindowRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNewWindowRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DocumentTitleChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DocumentTitleChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDocumentTitleChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDocumentTitleChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContainsFullScreenElementChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainsFullScreenElementChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContainsFullScreenElementChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContainsFullScreenElementChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn WebResourceRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebResourceRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebResourceRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWebResourceRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebResourceRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn WindowCloseRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowCloseRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWindowCloseRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWindowCloseRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Navigate(&self, uri: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Navigate)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
            )
            .ok()
        }
    }
    pub fn NavigateToString(
        &self,
        htmlcontent: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).NavigateToString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(htmlcontent),
            )
            .ok()
        }
    }
    pub fn AddScriptToExecuteOnDocumentCreatedAsync(
        &self,
        javascript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AddScriptToExecuteOnDocumentCreatedAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(javascript),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RemoveScriptToExecuteOnDocumentCreated(
        &self,
        id: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveScriptToExecuteOnDocumentCreated)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(id),
            )
            .ok()
        }
    }
    pub fn ExecuteScriptAsync(
        &self,
        javascript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExecuteScriptAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(javascript),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CapturePreviewAsync<P1>(
        &self,
        imageformat: CoreWebView2CapturePreviewImageFormat,
        imagestream: P1,
    ) -> windows_core::Result<windows_future::IAsyncAction>
    where
        P1: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePreviewAsync)(
                windows_core::Interface::as_raw(this),
                imageformat,
                imagestream.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Reload(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Reload)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn PostWebMessageAsJson(
        &self,
        webmessageasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PostWebMessageAsJson)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(webmessageasjson),
            )
            .ok()
        }
    }
    pub fn PostWebMessageAsString(
        &self,
        webmessageasstring: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PostWebMessageAsString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(webmessageasstring),
            )
            .ok()
        }
    }
    pub fn CallDevToolsProtocolMethodAsync(
        &self,
        methodname: &windows_core::HSTRING,
        parametersasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CallDevToolsProtocolMethodAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(methodname),
                core::mem::transmute_copy(parametersasjson),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GoBack(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).GoBack)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoForward(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).GoForward)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetDevToolsProtocolEventReceiver(
        &self,
        eventname: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2DevToolsProtocolEventReceiver> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDevToolsProtocolEventReceiver)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(eventname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Stop(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Stop)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn AddHostObjectToScript<P1>(
        &self,
        name: &windows_core::HSTRING,
        rawobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AddHostObjectToScript)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                rawobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveHostObjectFromScript(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHostObjectFromScript)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
            )
            .ok()
        }
    }
    pub fn OpenDevToolsWindow(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).OpenDevToolsWindow)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn AddWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        resourcecontext: CoreWebView2WebResourceContext,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AddWebResourceRequestedFilter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                resourcecontext,
            )
            .ok()
        }
    }
    pub fn RemoveWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        resourcecontext: CoreWebView2WebResourceContext,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebResourceRequestedFilter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                resourcecontext,
            )
            .ok()
        }
    }
    pub fn BasicAuthenticationRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2BasicAuthenticationRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_10>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BasicAuthenticationRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveBasicAuthenticationRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_10>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBasicAuthenticationRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextMenuRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ContextMenuRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_11>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextMenuRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextMenuRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_11>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextMenuRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CallDevToolsProtocolMethodForSessionAsync(
        &self,
        sessionid: &windows_core::HSTRING,
        methodname: &windows_core::HSTRING,
        parametersasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_11>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CallDevToolsProtocolMethodForSessionAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(sessionid),
                core::mem::transmute_copy(methodname),
                core::mem::transmute_copy(parametersasjson),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StatusBarText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_12>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StatusBarText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn StatusBarTextChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_12>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StatusBarTextChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveStatusBarTextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_12>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveStatusBarTextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Profile(&self) -> windows_core::Result<CoreWebView2Profile> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_13>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Profile)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ServerCertificateErrorDetected<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ServerCertificateErrorDetectedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_14>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ServerCertificateErrorDetected)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveServerCertificateErrorDetected(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_14>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveServerCertificateErrorDetected)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ClearServerCertificateErrorActionsAsync(
        &self,
    ) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_14>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClearServerCertificateErrorActionsAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FaviconUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_15>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FaviconUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FaviconChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_15>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FaviconChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFaviconChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_15>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFaviconChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetFaviconAsync(
        &self,
        format: CoreWebView2FaviconImageFormat,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    > {
        let this = &windows_core::Interface::cast::<ICoreWebView2_15>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFaviconAsync)(
                windows_core::Interface::as_raw(this),
                format,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn PrintAsync<P0>(
        &self,
        printsettings: P0,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2PrintStatus>>
    where
        P0: windows_core::Param<CoreWebView2PrintSettings>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_16>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrintAsync)(
                windows_core::Interface::as_raw(this),
                printsettings.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ShowPrintUI(
        &self,
        printdialogkind: CoreWebView2PrintDialogKind,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_16>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ShowPrintUI)(
                windows_core::Interface::as_raw(this),
                printdialogkind,
            )
            .ok()
        }
    }
    pub fn PrintToPdfStreamAsync<P0>(
        &self,
        printsettings: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    >
    where
        P0: windows_core::Param<CoreWebView2PrintSettings>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_16>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrintToPdfStreamAsync)(
                windows_core::Interface::as_raw(this),
                printsettings.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn PostSharedBufferToScript<P0>(
        &self,
        sharedbuffer: P0,
        access: CoreWebView2SharedBufferAccess,
        additionaldataasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2SharedBuffer>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_17>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PostSharedBufferToScript)(
                windows_core::Interface::as_raw(this),
                sharedbuffer.param().abi(),
                access,
                core::mem::transmute_copy(additionaldataasjson),
            )
            .ok()
        }
    }
    pub fn LaunchingExternalUriScheme<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2LaunchingExternalUriSchemeEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_18>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LaunchingExternalUriScheme)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLaunchingExternalUriScheme(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_18>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLaunchingExternalUriScheme)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn MemoryUsageTargetLevel(
        &self,
    ) -> windows_core::Result<CoreWebView2MemoryUsageTargetLevel> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_19>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MemoryUsageTargetLevel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMemoryUsageTargetLevel(
        &self,
        value: CoreWebView2MemoryUsageTargetLevel,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_19>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMemoryUsageTargetLevel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CookieManager(&self) -> windows_core::Result<CoreWebView2CookieManager> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CookieManager)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Environment(&self) -> windows_core::Result<CoreWebView2Environment> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Environment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn WebResourceResponseReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebResourceResponseReceivedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebResourceResponseReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWebResourceResponseReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebResourceResponseReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DOMContentLoaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DOMContentLoadedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DOMContentLoaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDOMContentLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDOMContentLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NavigateWithWebResourceRequest<P0>(&self, request: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2WebResourceRequest>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).NavigateWithWebResourceRequest)(
                windows_core::Interface::as_raw(this),
                request.param().abi(),
            )
            .ok()
        }
    }
    pub fn FrameId(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_20>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ExecuteScriptWithResultAsync(
        &self,
        javascript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2ExecuteScriptResult>>
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_21>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExecuteScriptWithResultAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(javascript),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsSuspended(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSuspended)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TrySuspendAsync(&self) -> windows_core::Result<windows_future::IAsyncOperation<bool>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrySuspendAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resume(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Resume)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn SetVirtualHostNameToFolderMapping(
        &self,
        hostname: &windows_core::HSTRING,
        folderpath: &windows_core::HSTRING,
        accesskind: CoreWebView2HostResourceAccessKind,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVirtualHostNameToFolderMapping)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(hostname),
                core::mem::transmute_copy(folderpath),
                accesskind,
            )
            .ok()
        }
    }
    pub fn ClearVirtualHostNameToFolderMapping(
        &self,
        hostname: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearVirtualHostNameToFolderMapping)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(hostname),
            )
            .ok()
        }
    }
    pub fn FrameCreated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, CoreWebView2FrameCreatedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameCreated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameCreated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameCreated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DownloadStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DownloadStartingEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DownloadStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDownloadStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDownloadStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ClientCertificateRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ClientCertificateRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClientCertificateRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClientCertificateRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClientCertificateRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OpenTaskManagerWindow(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_6>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OpenTaskManagerWindow)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn PrintToPdfAsync<P1>(
        &self,
        resultfilepath: &windows_core::HSTRING,
        printsettings: P1,
    ) -> windows_core::Result<windows_future::IAsyncOperation<bool>>
    where
        P1: windows_core::Param<CoreWebView2PrintSettings>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrintToPdfAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resultfilepath),
                printsettings.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsMuted(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsMuted)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsMuted(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsMuted)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDocumentPlayingAudio(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDocumentPlayingAudio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsMutedChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsMutedChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIsMutedChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsMutedChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn IsDocumentPlayingAudioChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDocumentPlayingAudioChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIsDocumentPlayingAudioChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsDocumentPlayingAudioChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn IsDefaultDownloadDialogOpen(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDefaultDownloadDialogOpen)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DefaultDownloadDialogCornerAlignment(
        &self,
    ) -> windows_core::Result<CoreWebView2DefaultDownloadDialogCornerAlignment> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultDownloadDialogCornerAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultDownloadDialogCornerAlignment(
        &self,
        value: CoreWebView2DefaultDownloadDialogCornerAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultDownloadDialogCornerAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultDownloadDialogMargin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultDownloadDialogMargin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultDownloadDialogMargin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultDownloadDialogMargin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDefaultDownloadDialogOpenChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDefaultDownloadDialogOpenChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIsDefaultDownloadDialogOpenChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsDefaultDownloadDialogOpenChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OpenDefaultDownloadDialog(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OpenDefaultDownloadDialog)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CloseDefaultDownloadDialog(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).CloseDefaultDownloadDialog)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn AddWebResourceRequestedFilter2(
        &self,
        uri: &windows_core::HSTRING,
        resourcecontext: CoreWebView2WebResourceContext,
        requestsourcekinds: CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_Manual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).AddWebResourceRequestedFilter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                resourcecontext,
                requestsourcekinds,
            )
            .ok()
        }
    }
    pub fn RemoveWebResourceRequestedFilter2(
        &self,
        uri: &windows_core::HSTRING,
        resourcecontext: CoreWebView2WebResourceContext,
        requestsourcekinds: CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2_Manual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebResourceRequestedFilter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                resourcecontext,
                requestsourcekinds,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2>();
}
unsafe impl windows_core::Interface for CoreWebView2 {
    type Vtable = <ICoreWebView2 as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2 as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2";
}
unsafe impl Send for CoreWebView2 {}
unsafe impl Sync for CoreWebView2 {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2AcceleratorKeyPressedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2AcceleratorKeyPressedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2AcceleratorKeyPressedEventArgs {
    pub fn KeyEventKind(&self) -> windows_core::Result<CoreWebView2KeyEventKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyEventKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VirtualKey(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VirtualKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn KeyEventLParam(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyEventLParam)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PhysicalKeyStatus(&self) -> windows_core::Result<CoreWebView2PhysicalKeyStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PhysicalKeyStatus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsBrowserAcceleratorKeyEnabled(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2AcceleratorKeyPressedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsBrowserAcceleratorKeyEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsBrowserAcceleratorKeyEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2AcceleratorKeyPressedEventArgs2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsBrowserAcceleratorKeyEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2AcceleratorKeyPressedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2AcceleratorKeyPressedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2AcceleratorKeyPressedEventArgs {
    type Vtable = <ICoreWebView2AcceleratorKeyPressedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2AcceleratorKeyPressedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2AcceleratorKeyPressedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs";
}
unsafe impl Send for CoreWebView2AcceleratorKeyPressedEventArgs {}
unsafe impl Sync for CoreWebView2AcceleratorKeyPressedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2BasicAuthenticationRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2BasicAuthenticationRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2BasicAuthenticationRequestedEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Challenge(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Challenge)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Response(&self) -> windows_core::Result<CoreWebView2BasicAuthenticationResponse> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Response)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2BasicAuthenticationRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2BasicAuthenticationRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2BasicAuthenticationRequestedEventArgs {
    type Vtable =
        <ICoreWebView2BasicAuthenticationRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2BasicAuthenticationRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2BasicAuthenticationRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs";
}
unsafe impl Send for CoreWebView2BasicAuthenticationRequestedEventArgs {}
unsafe impl Sync for CoreWebView2BasicAuthenticationRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2BasicAuthenticationResponse(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2BasicAuthenticationResponse,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2BasicAuthenticationResponse {
    pub fn UserName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UserName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetUserName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUserName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Password(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Password)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPassword(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPassword)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2BasicAuthenticationResponse {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2BasicAuthenticationResponse,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2BasicAuthenticationResponse {
    type Vtable = <ICoreWebView2BasicAuthenticationResponse as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2BasicAuthenticationResponse as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2BasicAuthenticationResponse {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse";
}
unsafe impl Send for CoreWebView2BasicAuthenticationResponse {}
unsafe impl Sync for CoreWebView2BasicAuthenticationResponse {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2BoundsMode(pub i32);
impl CoreWebView2BoundsMode {
    pub const UseRawPixels: Self = Self(0i32);
    pub const UseRasterizationScale: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2BoundsMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2BoundsMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2BrowserExtension(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2BrowserExtension,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2BrowserExtension {
    pub fn Id(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Id)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAsync(&self) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RemoveAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnableAsync(
        &self,
        isenabled: bool,
    ) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableAsync)(
                windows_core::Interface::as_raw(this),
                isenabled,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2BrowserExtension {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2BrowserExtension>();
}
unsafe impl windows_core::Interface for CoreWebView2BrowserExtension {
    type Vtable = <ICoreWebView2BrowserExtension as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2BrowserExtension as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2BrowserExtension {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension";
}
unsafe impl Send for CoreWebView2BrowserExtension {}
unsafe impl Sync for CoreWebView2BrowserExtension {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2BrowserProcessExitKind(pub i32);
impl CoreWebView2BrowserProcessExitKind {
    pub const Normal: Self = Self(0i32);
    pub const Failed: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2BrowserProcessExitKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2BrowserProcessExitKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2BrowserProcessExitedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2BrowserProcessExitedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2BrowserProcessExitedEventArgs {
    pub fn BrowserProcessExitKind(
        &self,
    ) -> windows_core::Result<CoreWebView2BrowserProcessExitKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BrowserProcessExitKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn BrowserProcessId(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BrowserProcessId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2BrowserProcessExitedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2BrowserProcessExitedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2BrowserProcessExitedEventArgs {
    type Vtable = <ICoreWebView2BrowserProcessExitedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2BrowserProcessExitedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2BrowserProcessExitedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs";
}
unsafe impl Send for CoreWebView2BrowserProcessExitedEventArgs {}
unsafe impl Sync for CoreWebView2BrowserProcessExitedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2BrowsingDataKinds(pub u32);
impl CoreWebView2BrowsingDataKinds {
    pub const FileSystems: Self = Self(1u32);
    pub const IndexedDb: Self = Self(2u32);
    pub const LocalStorage: Self = Self(4u32);
    pub const WebSql: Self = Self(8u32);
    pub const CacheStorage: Self = Self(16u32);
    pub const AllDomStorage: Self = Self(32u32);
    pub const Cookies: Self = Self(64u32);
    pub const AllSite: Self = Self(128u32);
    pub const DiskCache: Self = Self(256u32);
    pub const DownloadHistory: Self = Self(512u32);
    pub const GeneralAutofill: Self = Self(1024u32);
    pub const PasswordAutosave: Self = Self(2048u32);
    pub const BrowsingHistory: Self = Self(4096u32);
    pub const Settings: Self = Self(8192u32);
    pub const AllProfile: Self = Self(16384u32);
    pub const ServiceWorkers: Self = Self(32768u32);
}
impl windows_core::TypeKind for CoreWebView2BrowsingDataKinds {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2BrowsingDataKinds {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds;u4)",
    );
}
impl CoreWebView2BrowsingDataKinds {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CoreWebView2BrowsingDataKinds {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CoreWebView2BrowsingDataKinds {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CoreWebView2BrowsingDataKinds {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CoreWebView2BrowsingDataKinds {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CoreWebView2BrowsingDataKinds {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2CapturePreviewImageFormat(pub i32);
impl CoreWebView2CapturePreviewImageFormat {
    pub const Png: Self = Self(0i32);
    pub const Jpeg: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2CapturePreviewImageFormat {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2CapturePreviewImageFormat {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2CapturePreviewImageFormat;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Certificate(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Certificate,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Certificate {
    pub fn ToCertificate(
        &self,
    ) -> windows_core::Result<windows::Security::Cryptography::Certificates::Certificate> {
        let this = &windows_core::Interface::cast::<CoreWebView2Certificate_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToCertificate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Subject(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Subject)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Issuer(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Issuer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ValidFrom(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValidFrom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ValidTo(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValidTo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DerEncodedSerialNumber(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DerEncodedSerialNumber)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DisplayName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn PemEncodedIssuerCertificateChain(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PemEncodedIssuerCertificateChain)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ToPemEncoding(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToPemEncoding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Certificate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Certificate>();
}
unsafe impl windows_core::Interface for CoreWebView2Certificate {
    type Vtable = <ICoreWebView2Certificate as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Certificate as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Certificate {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Certificate";
}
unsafe impl Send for CoreWebView2Certificate {}
unsafe impl Sync for CoreWebView2Certificate {}
windows_core::imp::define_interface!(
    CoreWebView2Certificate_Manual,
    CoreWebView2Certificate_Manual_Vtbl,
    0x4b9b0fe5_0ad9_5594_81e7_b18ecc0636de
);
impl windows_core::RuntimeType for CoreWebView2Certificate_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for CoreWebView2Certificate_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Certificate_Manual";
}
pub trait CoreWebView2Certificate_Manual_Impl: windows_core::IUnknownImpl {
    fn ToCertificate(
        &self,
    ) -> windows_core::Result<windows::Security::Cryptography::Certificates::Certificate>;
}
impl CoreWebView2Certificate_Manual_Vtbl {
    pub const fn new<Identity: CoreWebView2Certificate_Manual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ToCertificate<
            Identity: CoreWebView2Certificate_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2Certificate_Manual_Impl::ToCertificate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                CoreWebView2Certificate_Manual,
                OFFSET,
            >(),
            ToCertificate: ToCertificate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CoreWebView2Certificate_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CoreWebView2Certificate_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ToCertificate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ChannelSearchKind(pub i32);
impl CoreWebView2ChannelSearchKind {
    pub const MostStable: Self = Self(0i32);
    pub const LeastStable: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2ChannelSearchKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ChannelSearchKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ClientCertificate(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ClientCertificate,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ClientCertificate {
    pub fn ToCertificate(
        &self,
    ) -> windows_core::Result<windows::Security::Cryptography::Certificates::Certificate> {
        let this = &windows_core::Interface::cast::<CoreWebView2ClientCertificate_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToCertificate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Subject(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Subject)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Issuer(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Issuer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ValidFrom(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValidFrom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ValidTo(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValidTo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DerEncodedSerialNumber(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DerEncodedSerialNumber)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DisplayName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn PemEncodedIssuerCertificateChain(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PemEncodedIssuerCertificateChain)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Kind(&self) -> windows_core::Result<CoreWebView2ClientCertificateKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ToPemEncoding(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToPemEncoding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ClientCertificate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ClientCertificate>();
}
unsafe impl windows_core::Interface for CoreWebView2ClientCertificate {
    type Vtable = <ICoreWebView2ClientCertificate as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ClientCertificate as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ClientCertificate {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate";
}
unsafe impl Send for CoreWebView2ClientCertificate {}
unsafe impl Sync for CoreWebView2ClientCertificate {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ClientCertificateKind(pub i32);
impl CoreWebView2ClientCertificateKind {
    pub const SmartCard: Self = Self(0i32);
    pub const Pin: Self = Self(1i32);
    pub const Other: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2ClientCertificateKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ClientCertificateKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ClientCertificateRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ClientCertificateRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ClientCertificateRequestedEventArgs {
    pub fn Host(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Host)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Port(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Port)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsProxy(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsProxy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowedCertificateAuthorities(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowedCertificateAuthorities)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MutuallyTrustedCertificates(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2ClientCertificate>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MutuallyTrustedCertificates)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SelectedCertificate(&self) -> windows_core::Result<CoreWebView2ClientCertificate> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedCertificate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSelectedCertificate<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2ClientCertificate>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedCertificate)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ClientCertificateRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2ClientCertificateRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2ClientCertificateRequestedEventArgs {
    type Vtable =
        <ICoreWebView2ClientCertificateRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ClientCertificateRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ClientCertificateRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs";
}
unsafe impl Send for CoreWebView2ClientCertificateRequestedEventArgs {}
unsafe impl Sync for CoreWebView2ClientCertificateRequestedEventArgs {}
windows_core::imp::define_interface!(
    CoreWebView2ClientCertificate_Manual,
    CoreWebView2ClientCertificate_Manual_Vtbl,
    0xfaefefc2_20c3_5d86_8a74_f6d87d6ff8fa
);
impl windows_core::RuntimeType for CoreWebView2ClientCertificate_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for CoreWebView2ClientCertificate_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate_Manual";
}
pub trait CoreWebView2ClientCertificate_Manual_Impl: windows_core::IUnknownImpl {
    fn ToCertificate(
        &self,
    ) -> windows_core::Result<windows::Security::Cryptography::Certificates::Certificate>;
}
impl CoreWebView2ClientCertificate_Manual_Vtbl {
    pub const fn new<Identity: CoreWebView2ClientCertificate_Manual_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ToCertificate<
            Identity: CoreWebView2ClientCertificate_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2ClientCertificate_Manual_Impl::ToCertificate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                CoreWebView2ClientCertificate_Manual,
                OFFSET,
            >(),
            ToCertificate: ToCertificate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CoreWebView2ClientCertificate_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CoreWebView2ClientCertificate_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ToCertificate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2CompositionController(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2CompositionController,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(CoreWebView2CompositionController, CoreWebView2Controller);
impl CoreWebView2CompositionController {
    pub fn RootVisualTarget(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RootVisualTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetRootVisualTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRootVisualTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CursorChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2CompositionController,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CursorChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCursorChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCursorChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SendMouseInput(
        &self,
        eventkind: CoreWebView2MouseEventKind,
        virtualkeys: CoreWebView2MouseEventVirtualKeys,
        mousedata: u32,
        point: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SendMouseInput)(
                windows_core::Interface::as_raw(this),
                eventkind,
                virtualkeys,
                mousedata,
                point,
            )
            .ok()
        }
    }
    pub fn SendPointerInput<P1>(
        &self,
        eventkind: CoreWebView2PointerEventKind,
        pointerinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CoreWebView2PointerInfo>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SendPointerInput)(
                windows_core::Interface::as_raw(this),
                eventkind,
                pointerinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Cursor(&self) -> windows_core::Result<windows::UI::Core::CoreCursor> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cursor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DragEnter<P0, P1>(
        &self,
        draginfo: P0,
        draguioverride: P1,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>
    where
        P0: windows_core::Param<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
        P1: windows_core::Param<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragEnter)(
                windows_core::Interface::as_raw(this),
                draginfo.param().abi(),
                draguioverride.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DragOver<P0, P1>(
        &self,
        draginfo: P0,
        draguioverride: P1,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>
    where
        P0: windows_core::Param<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
        P1: windows_core::Param<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragOver)(
                windows_core::Interface::as_raw(this),
                draginfo.param().abi(),
                draguioverride.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Drop<P0>(
        &self,
        draginfo: P0,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>
    where
        P0: windows_core::Param<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Drop)(
                windows_core::Interface::as_raw(this),
                draginfo.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DragLeave(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2CompositionController3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).DragLeave)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn NonClientRegionChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2CompositionController,
                CoreWebView2NonClientRegionChangedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2CompositionController4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NonClientRegionChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNonClientRegionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2CompositionController4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNonClientRegionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetNonClientRegionAtPoint(
        &self,
        point: windows::Foundation::Point,
    ) -> windows_core::Result<CoreWebView2NonClientRegionKind> {
        let this = &windows_core::Interface::cast::<ICoreWebView2CompositionController4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNonClientRegionAtPoint)(
                windows_core::Interface::as_raw(this),
                point,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn QueryNonClientRegion(
        &self,
        kind: CoreWebView2NonClientRegionKind,
    ) -> windows_core::Result<windows_collections::IVectorView<windows::Foundation::Rect>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2CompositionController4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QueryNonClientRegion)(
                windows_core::Interface::as_raw(this),
                kind,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Bounds(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounds)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBounds(&self, value: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBounds)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ZoomFactor(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetZoomFactor(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetZoomFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentWindow(&self) -> windows_core::Result<CoreWebView2ControllerWindowReference> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentWindow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentWindow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentWindow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CoreWebView2(&self) -> windows_core::Result<CoreWebView2> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoreWebView2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ZoomFactorChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomFactorChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveZoomFactorChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveZoomFactorChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn MoveFocusRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2MoveFocusRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveFocusRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveMoveFocusRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveMoveFocusRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AcceleratorKeyPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2AcceleratorKeyPressedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AcceleratorKeyPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAcceleratorKeyPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAcceleratorKeyPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SetBoundsAndZoomFactor(
        &self,
        bounds: windows::Foundation::Rect,
        zoomfactor: f64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBoundsAndZoomFactor)(
                windows_core::Interface::as_raw(this),
                bounds,
                zoomfactor,
            )
            .ok()
        }
    }
    pub fn MoveFocus(&self, reason: CoreWebView2MoveFocusReason) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveFocus)(
                windows_core::Interface::as_raw(this),
                reason,
            )
            .ok()
        }
    }
    pub fn NotifyParentWindowPositionChanged(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).NotifyParentWindowPositionChanged)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DefaultBackgroundColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultBackgroundColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShouldDetectMonitorScaleChanges(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDetectMonitorScaleChanges)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldDetectMonitorScaleChanges(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldDetectMonitorScaleChanges)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BoundsMode(&self) -> windows_core::Result<CoreWebView2BoundsMode> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BoundsMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBoundsMode(&self, value: CoreWebView2BoundsMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBoundsMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RasterizationScaleChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScaleChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveRasterizationScaleChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRasterizationScaleChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AllowExternalDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowExternalDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowExternalDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowExternalDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsBrowserHitTransparent(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrivatePartialController>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsBrowserHitTransparent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2CompositionController {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2CompositionController>();
}
unsafe impl windows_core::Interface for CoreWebView2CompositionController {
    type Vtable = <ICoreWebView2CompositionController as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2CompositionController as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2CompositionController {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2CompositionController";
}
unsafe impl Send for CoreWebView2CompositionController {}
unsafe impl Sync for CoreWebView2CompositionController {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ContentLoadingEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ContentLoadingEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ContentLoadingEventArgs {
    pub fn IsErrorPage(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsErrorPage)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NavigationId(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ContentLoadingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ContentLoadingEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2ContentLoadingEventArgs {
    type Vtable = <ICoreWebView2ContentLoadingEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ContentLoadingEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ContentLoadingEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs";
}
unsafe impl Send for CoreWebView2ContentLoadingEventArgs {}
unsafe impl Sync for CoreWebView2ContentLoadingEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ContextMenuItem(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ContextMenuItem,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ContextMenuItem {
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Label(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Label)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn CommandId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CommandId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShortcutKeyDescription(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShortcutKeyDescription)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Icon(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Icon)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Kind(&self) -> windows_core::Result<CoreWebView2ContextMenuItemKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsChecked(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsChecked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsChecked(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsChecked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Children(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2ContextMenuItem>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CustomItemSelected<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2ContextMenuItem,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CustomItemSelected)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCustomItemSelected(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCustomItemSelected)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ContextMenuItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ContextMenuItem>();
}
unsafe impl windows_core::Interface for CoreWebView2ContextMenuItem {
    type Vtable = <ICoreWebView2ContextMenuItem as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2ContextMenuItem as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ContextMenuItem {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem";
}
unsafe impl Send for CoreWebView2ContextMenuItem {}
unsafe impl Sync for CoreWebView2ContextMenuItem {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ContextMenuItemKind(pub i32);
impl CoreWebView2ContextMenuItemKind {
    pub const Command: Self = Self(0i32);
    pub const CheckBox: Self = Self(1i32);
    pub const Radio: Self = Self(2i32);
    pub const Separator: Self = Self(3i32);
    pub const Submenu: Self = Self(4i32);
}
impl windows_core::TypeKind for CoreWebView2ContextMenuItemKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ContextMenuItemKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ContextMenuRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ContextMenuRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ContextMenuRequestedEventArgs {
    pub fn MenuItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2ContextMenuItem>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MenuItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContextMenuTarget(&self) -> windows_core::Result<CoreWebView2ContextMenuTarget> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextMenuTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Location(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Location)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SelectedCommandId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedCommandId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectedCommandId(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedCommandId)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ContextMenuRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2ContextMenuRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2ContextMenuRequestedEventArgs {
    type Vtable = <ICoreWebView2ContextMenuRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ContextMenuRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ContextMenuRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs";
}
unsafe impl Send for CoreWebView2ContextMenuRequestedEventArgs {}
unsafe impl Sync for CoreWebView2ContextMenuRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ContextMenuTarget(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ContextMenuTarget,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ContextMenuTarget {
    pub fn Kind(&self) -> windows_core::Result<CoreWebView2ContextMenuTargetKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsEditable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEditable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsRequestedForMainFrame(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRequestedForMainFrame)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PageUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PageUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FrameUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn HasLinkUri(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasLinkUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LinkUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LinkUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn HasLinkText(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasLinkText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LinkText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LinkText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn HasSourceUri(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasSourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SourceUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn HasSelection(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasSelection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SelectionText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ContextMenuTarget {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ContextMenuTarget>();
}
unsafe impl windows_core::Interface for CoreWebView2ContextMenuTarget {
    type Vtable = <ICoreWebView2ContextMenuTarget as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ContextMenuTarget as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ContextMenuTarget {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget";
}
unsafe impl Send for CoreWebView2ContextMenuTarget {}
unsafe impl Sync for CoreWebView2ContextMenuTarget {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ContextMenuTargetKind(pub i32);
impl CoreWebView2ContextMenuTargetKind {
    pub const Page: Self = Self(0i32);
    pub const Image: Self = Self(1i32);
    pub const SelectedText: Self = Self(2i32);
    pub const Audio: Self = Self(3i32);
    pub const Video: Self = Self(4i32);
}
impl windows_core::TypeKind for CoreWebView2ContextMenuTargetKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ContextMenuTargetKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Controller(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Controller,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Controller {
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Bounds(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounds)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBounds(&self, value: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBounds)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ZoomFactor(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetZoomFactor(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetZoomFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentWindow(&self) -> windows_core::Result<CoreWebView2ControllerWindowReference> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentWindow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentWindow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentWindow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CoreWebView2(&self) -> windows_core::Result<CoreWebView2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoreWebView2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ZoomFactorChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomFactorChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveZoomFactorChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveZoomFactorChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn MoveFocusRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2MoveFocusRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveFocusRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveMoveFocusRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveMoveFocusRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AcceleratorKeyPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2AcceleratorKeyPressedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AcceleratorKeyPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAcceleratorKeyPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAcceleratorKeyPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SetBoundsAndZoomFactor(
        &self,
        bounds: windows::Foundation::Rect,
        zoomfactor: f64,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBoundsAndZoomFactor)(
                windows_core::Interface::as_raw(this),
                bounds,
                zoomfactor,
            )
            .ok()
        }
    }
    pub fn MoveFocus(&self, reason: CoreWebView2MoveFocusReason) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveFocus)(
                windows_core::Interface::as_raw(this),
                reason,
            )
            .ok()
        }
    }
    pub fn NotifyParentWindowPositionChanged(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).NotifyParentWindowPositionChanged)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DefaultBackgroundColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultBackgroundColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShouldDetectMonitorScaleChanges(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDetectMonitorScaleChanges)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldDetectMonitorScaleChanges(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldDetectMonitorScaleChanges)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BoundsMode(&self) -> windows_core::Result<CoreWebView2BoundsMode> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BoundsMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBoundsMode(&self, value: CoreWebView2BoundsMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBoundsMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RasterizationScaleChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScaleChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveRasterizationScaleChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRasterizationScaleChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AllowExternalDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowExternalDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowExternalDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Controller4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowExternalDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsBrowserHitTransparent(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrivatePartialController>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsBrowserHitTransparent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Controller {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Controller>();
}
unsafe impl windows_core::Interface for CoreWebView2Controller {
    type Vtable = <ICoreWebView2Controller as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Controller as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Controller {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Controller";
}
unsafe impl Send for CoreWebView2Controller {}
unsafe impl Sync for CoreWebView2Controller {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ControllerOptions(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ControllerOptions,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ControllerOptions {
    pub fn ProfileName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProfileName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetProfileName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetProfileName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsInPrivateModeEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsInPrivateModeEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsInPrivateModeEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsInPrivateModeEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScriptLocale(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ControllerOptions2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScriptLocale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetScriptLocale(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ControllerOptions2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScriptLocale)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ControllerOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ControllerOptions>();
}
unsafe impl windows_core::Interface for CoreWebView2ControllerOptions {
    type Vtable = <ICoreWebView2ControllerOptions as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ControllerOptions as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ControllerOptions {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions";
}
unsafe impl Send for CoreWebView2ControllerOptions {}
unsafe impl Sync for CoreWebView2ControllerOptions {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ControllerWindowReference(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ControllerWindowReference,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ControllerWindowReference {
    pub fn WindowHandle(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowHandle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CoreWindow(&self) -> windows_core::Result<windows::UI::Core::CoreWindow> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoreWindow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateFromWindowHandle(
        windowhandle: u64,
    ) -> windows_core::Result<CoreWebView2ControllerWindowReference> {
        Self::ICoreWebView2ControllerWindowReferenceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateFromWindowHandle)(
                windows_core::Interface::as_raw(this),
                windowhandle,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateFromCoreWindow<P0>(
        corewindow: P0,
    ) -> windows_core::Result<CoreWebView2ControllerWindowReference>
    where
        P0: windows_core::Param<windows::UI::Core::CoreWindow>,
    {
        Self::ICoreWebView2ControllerWindowReferenceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateFromCoreWindow)(
                windows_core::Interface::as_raw(this),
                corewindow.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ICoreWebView2ControllerWindowReferenceStatics<
        R,
        F: FnOnce(&ICoreWebView2ControllerWindowReferenceStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CoreWebView2ControllerWindowReference,
            ICoreWebView2ControllerWindowReferenceStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CoreWebView2ControllerWindowReference {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ControllerWindowReference>();
}
unsafe impl windows_core::Interface for CoreWebView2ControllerWindowReference {
    type Vtable = <ICoreWebView2ControllerWindowReference as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ControllerWindowReference as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ControllerWindowReference {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference";
}
unsafe impl Send for CoreWebView2ControllerWindowReference {}
unsafe impl Sync for CoreWebView2ControllerWindowReference {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Cookie(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Cookie,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Cookie {
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetValue(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Domain(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Domain)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Path(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Path)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Expires(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Expires)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExpires(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpires)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHttpOnly(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHttpOnly)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHttpOnly(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHttpOnly)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SameSite(&self) -> windows_core::Result<CoreWebView2CookieSameSiteKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SameSite)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSameSite(&self, value: CoreWebView2CookieSameSiteKind) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSameSite)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSecure(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSecure)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSecure(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSecure)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSession(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSession)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Cookie {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Cookie>();
}
unsafe impl windows_core::Interface for CoreWebView2Cookie {
    type Vtable = <ICoreWebView2Cookie as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Cookie as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Cookie {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Cookie";
}
unsafe impl Send for CoreWebView2Cookie {}
unsafe impl Sync for CoreWebView2Cookie {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2CookieManager(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2CookieManager,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2CookieManager {
    pub fn CreateCookie(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
        domain: &windows_core::HSTRING,
        path: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2Cookie> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCookie)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(value),
                core::mem::transmute_copy(domain),
                core::mem::transmute_copy(path),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CopyCookie<P0>(&self, cookieparam: P0) -> windows_core::Result<CoreWebView2Cookie>
    where
        P0: windows_core::Param<CoreWebView2Cookie>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CopyCookie)(
                windows_core::Interface::as_raw(this),
                cookieparam.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AddOrUpdateCookie<P0>(&self, cookie: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2Cookie>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AddOrUpdateCookie)(
                windows_core::Interface::as_raw(this),
                cookie.param().abi(),
            )
            .ok()
        }
    }
    pub fn DeleteCookie<P0>(&self, cookie: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2Cookie>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).DeleteCookie)(
                windows_core::Interface::as_raw(this),
                cookie.param().abi(),
            )
            .ok()
        }
    }
    pub fn DeleteCookies(
        &self,
        name: &windows_core::HSTRING,
        uri: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).DeleteCookies)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(uri),
            )
            .ok()
        }
    }
    pub fn DeleteCookiesWithDomainAndPath(
        &self,
        name: &windows_core::HSTRING,
        domain: &windows_core::HSTRING,
        path: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).DeleteCookiesWithDomainAndPath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(domain),
                core::mem::transmute_copy(path),
            )
            .ok()
        }
    }
    pub fn DeleteAllCookies(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).DeleteAllCookies)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GetCookiesAsync(
        &self,
        uri: &windows_core::HSTRING,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows_collections::IVectorView<CoreWebView2Cookie>>,
    > {
        let this = &windows_core::Interface::cast::<ICoreWebView2CookieManager_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCookiesAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2CookieManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2CookieManager>();
}
unsafe impl windows_core::Interface for CoreWebView2CookieManager {
    type Vtable = <ICoreWebView2CookieManager as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2CookieManager as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2CookieManager {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2CookieManager";
}
unsafe impl Send for CoreWebView2CookieManager {}
unsafe impl Sync for CoreWebView2CookieManager {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2CookieSameSiteKind(pub i32);
impl CoreWebView2CookieSameSiteKind {
    pub const None: Self = Self(0i32);
    pub const Lax: Self = Self(1i32);
    pub const Strict: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2CookieSameSiteKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2CookieSameSiteKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2CustomSchemeRegistration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2CustomSchemeRegistration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2CustomSchemeRegistration {
    pub fn TreatAsSecure(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TreatAsSecure)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTreatAsSecure(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTreatAsSecure)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HasAuthorityComponent(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasAuthorityComponent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHasAuthorityComponent(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHasAuthorityComponent)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CreateInstance(
        schemename: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2CustomSchemeRegistration> {
        Self::ICoreWebView2CustomSchemeRegistrationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(schemename),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SchemeName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2CustomSchemeRegistration_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SchemeName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn AllowedOrigins(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::HSTRING>> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2CustomSchemeRegistration_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowedOrigins)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICoreWebView2CustomSchemeRegistrationFactory<
        R,
        F: FnOnce(&ICoreWebView2CustomSchemeRegistrationFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CoreWebView2CustomSchemeRegistration,
            ICoreWebView2CustomSchemeRegistrationFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CoreWebView2CustomSchemeRegistration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2CustomSchemeRegistration>();
}
unsafe impl windows_core::Interface for CoreWebView2CustomSchemeRegistration {
    type Vtable = <ICoreWebView2CustomSchemeRegistration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2CustomSchemeRegistration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2CustomSchemeRegistration {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration";
}
unsafe impl Send for CoreWebView2CustomSchemeRegistration {}
unsafe impl Sync for CoreWebView2CustomSchemeRegistration {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2DOMContentLoadedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2DOMContentLoadedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2DOMContentLoadedEventArgs {
    pub fn NavigationId(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2DOMContentLoadedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2DOMContentLoadedEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2DOMContentLoadedEventArgs {
    type Vtable = <ICoreWebView2DOMContentLoadedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2DOMContentLoadedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2DOMContentLoadedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs";
}
unsafe impl Send for CoreWebView2DOMContentLoadedEventArgs {}
unsafe impl Sync for CoreWebView2DOMContentLoadedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2DefaultDownloadDialogCornerAlignment(pub i32);
impl CoreWebView2DefaultDownloadDialogCornerAlignment {
    pub const TopLeft: Self = Self(0i32);
    pub const TopRight: Self = Self(1i32);
    pub const BottomLeft: Self = Self(2i32);
    pub const BottomRight: Self = Self(3i32);
}
impl windows_core::TypeKind for CoreWebView2DefaultDownloadDialogCornerAlignment {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2DefaultDownloadDialogCornerAlignment {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2DevToolsProtocolEventReceivedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2DevToolsProtocolEventReceivedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2DevToolsProtocolEventReceivedEventArgs {
    pub fn ParameterObjectAsJson(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParameterObjectAsJson)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SessionId(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<
            ICoreWebView2DevToolsProtocolEventReceivedEventArgs2,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SessionId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2DevToolsProtocolEventReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2DevToolsProtocolEventReceivedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2DevToolsProtocolEventReceivedEventArgs {
    type Vtable =
        <ICoreWebView2DevToolsProtocolEventReceivedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2DevToolsProtocolEventReceivedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2DevToolsProtocolEventReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs";
}
unsafe impl Send for CoreWebView2DevToolsProtocolEventReceivedEventArgs {}
unsafe impl Sync for CoreWebView2DevToolsProtocolEventReceivedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2DevToolsProtocolEventReceiver(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2DevToolsProtocolEventReceiver,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2DevToolsProtocolEventReceiver {
    pub fn DevToolsProtocolEventReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DevToolsProtocolEventReceivedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DevToolsProtocolEventReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDevToolsProtocolEventReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDevToolsProtocolEventReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2DevToolsProtocolEventReceiver {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2DevToolsProtocolEventReceiver,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2DevToolsProtocolEventReceiver {
    type Vtable = <ICoreWebView2DevToolsProtocolEventReceiver as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2DevToolsProtocolEventReceiver as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2DevToolsProtocolEventReceiver {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver";
}
unsafe impl Send for CoreWebView2DevToolsProtocolEventReceiver {}
unsafe impl Sync for CoreWebView2DevToolsProtocolEventReceiver {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2DownloadInterruptReason(pub i32);
impl CoreWebView2DownloadInterruptReason {
    pub const None: Self = Self(0i32);
    pub const FileFailed: Self = Self(1i32);
    pub const FileAccessDenied: Self = Self(2i32);
    pub const FileNoSpace: Self = Self(3i32);
    pub const FileNameTooLong: Self = Self(4i32);
    pub const FileTooLarge: Self = Self(5i32);
    pub const FileMalicious: Self = Self(6i32);
    pub const FileTransientError: Self = Self(7i32);
    pub const FileBlockedByPolicy: Self = Self(8i32);
    pub const FileSecurityCheckFailed: Self = Self(9i32);
    pub const FileTooShort: Self = Self(10i32);
    pub const FileHashMismatch: Self = Self(11i32);
    pub const NetworkFailed: Self = Self(12i32);
    pub const NetworkTimeout: Self = Self(13i32);
    pub const NetworkDisconnected: Self = Self(14i32);
    pub const NetworkServerDown: Self = Self(15i32);
    pub const NetworkInvalidRequest: Self = Self(16i32);
    pub const ServerFailed: Self = Self(17i32);
    pub const ServerNoRange: Self = Self(18i32);
    pub const ServerBadContent: Self = Self(19i32);
    pub const ServerUnauthorized: Self = Self(20i32);
    pub const ServerCertificateProblem: Self = Self(21i32);
    pub const ServerForbidden: Self = Self(22i32);
    pub const ServerUnexpectedResponse: Self = Self(23i32);
    pub const ServerContentLengthMismatch: Self = Self(24i32);
    pub const ServerCrossOriginRedirect: Self = Self(25i32);
    pub const UserCanceled: Self = Self(26i32);
    pub const UserShutdown: Self = Self(27i32);
    pub const UserPaused: Self = Self(28i32);
    pub const DownloadProcessCrashed: Self = Self(29i32);
}
impl windows_core::TypeKind for CoreWebView2DownloadInterruptReason {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2DownloadInterruptReason {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2DownloadInterruptReason;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2DownloadOperation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2DownloadOperation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2DownloadOperation {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ContentDisposition(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentDisposition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn MimeType(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MimeType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn TotalBytesToReceive(&self) -> windows_core::Result<i64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TotalBytesToReceive)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn BytesReceived(&self) -> windows_core::Result<i64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BytesReceived)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn EstimatedEndTime(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EstimatedEndTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ResultFilePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResultFilePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn State(&self) -> windows_core::Result<CoreWebView2DownloadState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).State)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InterruptReason(&self) -> windows_core::Result<CoreWebView2DownloadInterruptReason> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InterruptReason)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanResume(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanResume)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn BytesReceivedChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BytesReceivedChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveBytesReceivedChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBytesReceivedChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn EstimatedEndTimeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EstimatedEndTimeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveEstimatedEndTimeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEstimatedEndTimeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn StateChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Pause(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Pause)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Resume(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resume)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2DownloadOperation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2DownloadOperation>();
}
unsafe impl windows_core::Interface for CoreWebView2DownloadOperation {
    type Vtable = <ICoreWebView2DownloadOperation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2DownloadOperation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2DownloadOperation {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation";
}
unsafe impl Send for CoreWebView2DownloadOperation {}
unsafe impl Sync for CoreWebView2DownloadOperation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2DownloadStartingEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2DownloadStartingEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2DownloadStartingEventArgs {
    pub fn DownloadOperation(&self) -> windows_core::Result<CoreWebView2DownloadOperation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DownloadOperation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ResultFilePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResultFilePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetResultFilePath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetResultFilePath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2DownloadStartingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2DownloadStartingEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2DownloadStartingEventArgs {
    type Vtable = <ICoreWebView2DownloadStartingEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2DownloadStartingEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2DownloadStartingEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs";
}
unsafe impl Send for CoreWebView2DownloadStartingEventArgs {}
unsafe impl Sync for CoreWebView2DownloadStartingEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2DownloadState(pub i32);
impl CoreWebView2DownloadState {
    pub const InProgress: Self = Self(0i32);
    pub const Interrupted: Self = Self(1i32);
    pub const Completed: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2DownloadState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2DownloadState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2DownloadState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Environment(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Environment,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Environment {
    pub fn BrowserVersionString(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BrowserVersionString)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn NewBrowserVersionAvailable<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NewBrowserVersionAvailable)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNewBrowserVersionAvailable(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNewBrowserVersionAvailable)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreateCoreWebView2ControllerAsync<P0>(
        &self,
        parentwindow: P0,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Controller>>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2ControllerAsync)(
                windows_core::Interface::as_raw(this),
                parentwindow.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateWebResourceResponse<P0>(
        &self,
        content: P0,
        statuscode: i32,
        reasonphrase: &windows_core::HSTRING,
        headers: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2WebResourceResponse>
    where
        P0: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWebResourceResponse)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
                statuscode,
                core::mem::transmute_copy(reasonphrase),
                core::mem::transmute_copy(headers),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateCoreWebView2ControllerOptions(
        &self,
    ) -> windows_core::Result<CoreWebView2ControllerOptions> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment10>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2ControllerOptions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FailureReportFolderPath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment11>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FailureReportFolderPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn CreateSharedBuffer(&self, size: u64) -> windows_core::Result<CoreWebView2SharedBuffer> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment12>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSharedBuffer)(
                windows_core::Interface::as_raw(this),
                size,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetProcessExtendedInfosAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2ProcessExtendedInfo>,
        >,
    > {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment13>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetProcessExtendedInfosAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateWebResourceRequest<P2>(
        &self,
        uri: &windows_core::HSTRING,
        method: &windows_core::HSTRING,
        postdata: P2,
        headers: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2WebResourceRequest>
    where
        P2: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWebResourceRequest)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(uri),
                core::mem::transmute_copy(method),
                postdata.param().abi(),
                core::mem::transmute_copy(headers),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateCoreWebView2CompositionControllerAsync<P0>(
        &self,
        parentwindow: P0,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2CompositionController>>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2CompositionControllerAsync)(
                windows_core::Interface::as_raw(this),
                parentwindow.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateCoreWebView2PointerInfo(&self) -> windows_core::Result<CoreWebView2PointerInfo> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2PointerInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn BrowserProcessExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                CoreWebView2BrowserProcessExitedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BrowserProcessExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveBrowserProcessExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBrowserProcessExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreatePrintSettings(&self) -> windows_core::Result<CoreWebView2PrintSettings> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePrintSettings)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn UserDataFolder(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UserDataFolder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ProcessInfosChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessInfosChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveProcessInfosChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessInfosChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetProcessInfos(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2ProcessInfo>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetProcessInfos)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateContextMenuItem<P1>(
        &self,
        label: &windows_core::HSTRING,
        iconstream: P1,
        kind: CoreWebView2ContextMenuItemKind,
    ) -> windows_core::Result<CoreWebView2ContextMenuItem>
    where
        P1: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateContextMenuItem)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(label),
                iconstream.param().abi(),
                kind,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateAsync(
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Environment>> {
        Self::ICoreWebView2EnvironmentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateWithOptionsAsync<P2>(
        browserexecutablefolder: &windows_core::HSTRING,
        userdatafolder: &windows_core::HSTRING,
        options: P2,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Environment>>
    where
        P2: windows_core::Param<CoreWebView2EnvironmentOptions>,
    {
        Self::ICoreWebView2EnvironmentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWithOptionsAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(browserexecutablefolder),
                core::mem::transmute_copy(userdatafolder),
                options.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAvailableBrowserVersionString() -> windows_core::Result<windows_core::HSTRING> {
        Self::ICoreWebView2EnvironmentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAvailableBrowserVersionString)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn GetAvailableBrowserVersionString2(
        browserexecutablefolder: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        Self::ICoreWebView2EnvironmentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAvailableBrowserVersionString2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(browserexecutablefolder),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn CompareBrowserVersionString(
        browserversionstring1: &windows_core::HSTRING,
        browserversionstring2: &windows_core::HSTRING,
    ) -> windows_core::Result<i32> {
        Self::ICoreWebView2EnvironmentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompareBrowserVersionString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(browserversionstring1),
                core::mem::transmute_copy(browserversionstring2),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn GetAvailableBrowserVersionStringWithOptions<P1>(
        browserexecutablefolder: &windows_core::HSTRING,
        options: P1,
    ) -> windows_core::Result<windows_core::HSTRING>
    where
        P1: windows_core::Param<CoreWebView2EnvironmentOptions>,
    {
        Self::ICoreWebView2EnvironmentStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAvailableBrowserVersionStringWithOptions)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(browserexecutablefolder),
                options.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn CreateCoreWebView2ControllerAsync2<P0, P1>(
        &self,
        parentwindow: P0,
        options: P1,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Controller>>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
        P1: windows_core::Param<CoreWebView2ControllerOptions>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2ControllerAsync)(
                windows_core::Interface::as_raw(this),
                parentwindow.param().abi(),
                options.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateCoreWebView2CompositionControllerAsync2<P0, P1>(
        &self,
        parentwindow: P0,
        options: P1,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2CompositionController>>
    where
        P0: windows_core::Param<CoreWebView2ControllerWindowReference>,
        P1: windows_core::Param<CoreWebView2ControllerOptions>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Environment_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCoreWebView2CompositionControllerAsync)(
                windows_core::Interface::as_raw(this),
                parentwindow.param().abi(),
                options.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICoreWebView2EnvironmentStatics<
        R,
        F: FnOnce(&ICoreWebView2EnvironmentStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CoreWebView2Environment,
            ICoreWebView2EnvironmentStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ICoreWebView2EnvironmentStatics2<
        R,
        F: FnOnce(&ICoreWebView2EnvironmentStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CoreWebView2Environment,
            ICoreWebView2EnvironmentStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CoreWebView2Environment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Environment>();
}
unsafe impl windows_core::Interface for CoreWebView2Environment {
    type Vtable = <ICoreWebView2Environment as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Environment as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Environment {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Environment";
}
unsafe impl Send for CoreWebView2Environment {}
unsafe impl Sync for CoreWebView2Environment {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2EnvironmentOptions(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2EnvironmentOptions,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2EnvironmentOptions {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CoreWebView2EnvironmentOptions,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn AdditionalBrowserArguments(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AdditionalBrowserArguments)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAdditionalBrowserArguments(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAdditionalBrowserArguments)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetCompatibleBrowserVersion(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetCompatibleBrowserVersion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetCompatibleBrowserVersion(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetCompatibleBrowserVersion)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn AllowSingleSignOnUsingOSPrimaryAccount(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowSingleSignOnUsingOSPrimaryAccount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowSingleSignOnUsingOSPrimaryAccount(
        &self,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowSingleSignOnUsingOSPrimaryAccount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExclusiveUserDataFolderAccess(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusiveUserDataFolderAccess)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExclusiveUserDataFolderAccess(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExclusiveUserDataFolderAccess)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsCustomCrashReportingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsCustomCrashReportingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsCustomCrashReportingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsCustomCrashReportingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableTrackingPrevention(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableTrackingPrevention)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableTrackingPrevention(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableTrackingPrevention)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AreBrowserExtensionsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreBrowserExtensionsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreBrowserExtensionsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions6>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreBrowserExtensionsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ChannelSearchKind(&self) -> windows_core::Result<CoreWebView2ChannelSearchKind> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ChannelSearchKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetChannelSearchKind(
        &self,
        value: CoreWebView2ChannelSearchKind,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions7>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetChannelSearchKind)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ReleaseChannels(&self) -> windows_core::Result<CoreWebView2ReleaseChannels> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReleaseChannels)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetReleaseChannels(
        &self,
        value: CoreWebView2ReleaseChannels,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions7>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReleaseChannels)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScrollBarStyle(&self) -> windows_core::Result<CoreWebView2ScrollbarStyle> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScrollBarStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScrollBarStyle(&self, value: CoreWebView2ScrollbarStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScrollBarStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CustomSchemeRegistrations(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2CustomSchemeRegistration>>
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions_Manual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CustomSchemeRegistrations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCustomSchemeRegistrations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IVector<CoreWebView2CustomSchemeRegistration>>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2EnvironmentOptions_Manual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCustomSchemeRegistrations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2EnvironmentOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2EnvironmentOptions>();
}
unsafe impl windows_core::Interface for CoreWebView2EnvironmentOptions {
    type Vtable = <ICoreWebView2EnvironmentOptions as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2EnvironmentOptions as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2EnvironmentOptions {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions";
}
unsafe impl Send for CoreWebView2EnvironmentOptions {}
unsafe impl Sync for CoreWebView2EnvironmentOptions {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ExecuteScriptResult(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ExecuteScriptResult,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ExecuteScriptResult {
    pub fn Succeeded(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Succeeded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ResultAsJson(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResultAsJson)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Exception(&self) -> windows_core::Result<CoreWebView2ScriptException> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Exception)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetResultAsString(
        &self,
        stringresult: &mut windows_core::HSTRING,
    ) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ExecuteScriptResult_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetResultAsString)(
                windows_core::Interface::as_raw(this),
                stringresult as *mut _ as _,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ExecuteScriptResult {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ExecuteScriptResult>();
}
unsafe impl windows_core::Interface for CoreWebView2ExecuteScriptResult {
    type Vtable = <ICoreWebView2ExecuteScriptResult as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ExecuteScriptResult as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ExecuteScriptResult {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult";
}
unsafe impl Send for CoreWebView2ExecuteScriptResult {}
unsafe impl Sync for CoreWebView2ExecuteScriptResult {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2FaviconImageFormat(pub i32);
impl CoreWebView2FaviconImageFormat {
    pub const Png: Self = Self(0i32);
    pub const Jpeg: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2FaviconImageFormat {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2FaviconImageFormat {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2FaviconImageFormat;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2File(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2File,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2File {
    pub fn Path(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Path)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2File {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2File>();
}
unsafe impl windows_core::Interface for CoreWebView2File {
    type Vtable = <ICoreWebView2File as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2File as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2File {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2File";
}
unsafe impl Send for CoreWebView2File {}
unsafe impl Sync for CoreWebView2File {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Frame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Frame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Frame {
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn NameChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2Frame, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NameChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNameChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNameChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Destroyed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2Frame, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Destroyed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDestroyed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDestroyed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHostObjectFromScript(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHostObjectFromScript)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
            )
            .ok()
        }
    }
    pub fn IsDestroyed(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDestroyed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NavigationStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContentLoading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2ContentLoadingEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentLoading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContentLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContentLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NavigationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DOMContentLoaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2DOMContentLoadedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DOMContentLoaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDOMContentLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDOMContentLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn WebMessageReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebMessageReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebMessageReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ExecuteScriptAsync(
        &self,
        javascript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExecuteScriptAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(javascript),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn PostWebMessageAsJson(
        &self,
        webmessageasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PostWebMessageAsJson)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(webmessageasjson),
            )
            .ok()
        }
    }
    pub fn PostWebMessageAsString(
        &self,
        webmessageasstring: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PostWebMessageAsString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(webmessageasstring),
            )
            .ok()
        }
    }
    pub fn PermissionRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2PermissionRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePermissionRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePermissionRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn PostSharedBufferToScript<P0>(
        &self,
        sharedbuffer: P0,
        access: CoreWebView2SharedBufferAccess,
        additionaldataasjson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2SharedBuffer>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PostSharedBufferToScript)(
                windows_core::Interface::as_raw(this),
                sharedbuffer.param().abi(),
                access,
                core::mem::transmute_copy(additionaldataasjson),
            )
            .ok()
        }
    }
    pub fn FrameId(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Frame5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Frame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Frame>();
}
unsafe impl windows_core::Interface for CoreWebView2Frame {
    type Vtable = <ICoreWebView2Frame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Frame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Frame {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Frame";
}
unsafe impl Send for CoreWebView2Frame {}
unsafe impl Sync for CoreWebView2Frame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2FrameCreatedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2FrameCreatedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2FrameCreatedEventArgs {
    pub fn Frame(&self) -> windows_core::Result<CoreWebView2Frame> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Frame)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2FrameCreatedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2FrameCreatedEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2FrameCreatedEventArgs {
    type Vtable = <ICoreWebView2FrameCreatedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2FrameCreatedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2FrameCreatedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs";
}
unsafe impl Send for CoreWebView2FrameCreatedEventArgs {}
unsafe impl Sync for CoreWebView2FrameCreatedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2FrameInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2FrameInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2FrameInfo {
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ParentFrameInfo(&self) -> windows_core::Result<CoreWebView2FrameInfo> {
        let this = &windows_core::Interface::cast::<ICoreWebView2FrameInfo2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentFrameInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FrameId(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2FrameInfo2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn FrameKind(&self) -> windows_core::Result<CoreWebView2FrameKind> {
        let this = &windows_core::Interface::cast::<ICoreWebView2FrameInfo2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2FrameInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2FrameInfo>();
}
unsafe impl windows_core::Interface for CoreWebView2FrameInfo {
    type Vtable = <ICoreWebView2FrameInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2FrameInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2FrameInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo";
}
unsafe impl Send for CoreWebView2FrameInfo {}
unsafe impl Sync for CoreWebView2FrameInfo {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2FrameKind(pub i32);
impl CoreWebView2FrameKind {
    pub const Unknown: Self = Self(0i32);
    pub const MainFrame: Self = Self(1i32);
    pub const Iframe: Self = Self(2i32);
    pub const Embed: Self = Self(3i32);
    pub const Object: Self = Self(4i32);
}
impl windows_core::TypeKind for CoreWebView2FrameKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2FrameKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2FrameKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2HostResourceAccessKind(pub i32);
impl CoreWebView2HostResourceAccessKind {
    pub const Deny: Self = Self(0i32);
    pub const Allow: Self = Self(1i32);
    pub const DenyCors: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2HostResourceAccessKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2HostResourceAccessKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2HttpHeadersCollectionIterator(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2HttpHeadersCollectionIterator,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CoreWebView2HttpHeadersCollectionIterator,
    windows_collections::IIterator<
        windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
    >
);
impl CoreWebView2HttpHeadersCollectionIterator {
    pub fn Current(
        &self,
    ) -> windows_core::Result<
        windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterator<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Current)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn HasCurrent(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterator<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasCurrent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveNext(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterator<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveNext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetMany(
        &self,
        items: &mut [Option<
            windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
        >],
    ) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterator<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2HttpHeadersCollectionIterator {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2HttpHeadersCollectionIterator,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2HttpHeadersCollectionIterator {
    type Vtable = <ICoreWebView2HttpHeadersCollectionIterator as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2HttpHeadersCollectionIterator as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2HttpHeadersCollectionIterator {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator";
}
unsafe impl Send for CoreWebView2HttpHeadersCollectionIterator {}
unsafe impl Sync for CoreWebView2HttpHeadersCollectionIterator {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2HttpRequestHeaders(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2HttpRequestHeaders,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CoreWebView2HttpRequestHeaders,
    windows_collections::IIterable<
        windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
    >
);
impl CoreWebView2HttpRequestHeaders {
    pub fn GetHeader(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHeader)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetHeaders(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2HttpHeadersCollectionIterator> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHeaders)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Contains(&self, name: &windows_core::HSTRING) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Contains)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeader(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeader)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn RemoveHeader(&self, name: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHeader)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2HttpRequestHeaders {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2HttpRequestHeaders>();
}
unsafe impl windows_core::Interface for CoreWebView2HttpRequestHeaders {
    type Vtable = <ICoreWebView2HttpRequestHeaders as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2HttpRequestHeaders as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2HttpRequestHeaders {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders";
}
unsafe impl Send for CoreWebView2HttpRequestHeaders {}
unsafe impl Sync for CoreWebView2HttpRequestHeaders {}
impl IntoIterator for CoreWebView2HttpRequestHeaders {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CoreWebView2HttpRequestHeaders {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2HttpResponseHeaders(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2HttpResponseHeaders,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CoreWebView2HttpResponseHeaders,
    windows_collections::IIterable<
        windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
    >
);
impl CoreWebView2HttpResponseHeaders {
    pub fn AppendHeader(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AppendHeader)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Contains(&self, name: &windows_core::HSTRING) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Contains)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetHeader(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHeader)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetHeaders(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2HttpHeadersCollectionIterator> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHeaders)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2HttpResponseHeaders {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2HttpResponseHeaders>();
}
unsafe impl windows_core::Interface for CoreWebView2HttpResponseHeaders {
    type Vtable = <ICoreWebView2HttpResponseHeaders as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2HttpResponseHeaders as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2HttpResponseHeaders {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders";
}
unsafe impl Send for CoreWebView2HttpResponseHeaders {}
unsafe impl Sync for CoreWebView2HttpResponseHeaders {}
impl IntoIterator for CoreWebView2HttpResponseHeaders {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CoreWebView2HttpResponseHeaders {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2KeyEventKind(pub i32);
impl CoreWebView2KeyEventKind {
    pub const KeyDown: Self = Self(0i32);
    pub const KeyUp: Self = Self(1i32);
    pub const SystemKeyDown: Self = Self(2i32);
    pub const SystemKeyUp: Self = Self(3i32);
}
impl windows_core::TypeKind for CoreWebView2KeyEventKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2KeyEventKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2LaunchingExternalUriSchemeEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2LaunchingExternalUriSchemeEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2LaunchingExternalUriSchemeEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn InitiatingOrigin(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitiatingOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn IsUserInitiated(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsUserInitiated)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2LaunchingExternalUriSchemeEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2LaunchingExternalUriSchemeEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2LaunchingExternalUriSchemeEventArgs {
    type Vtable =
        <ICoreWebView2LaunchingExternalUriSchemeEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2LaunchingExternalUriSchemeEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2LaunchingExternalUriSchemeEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs";
}
unsafe impl Send for CoreWebView2LaunchingExternalUriSchemeEventArgs {}
unsafe impl Sync for CoreWebView2LaunchingExternalUriSchemeEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2MemoryUsageTargetLevel(pub i32);
impl CoreWebView2MemoryUsageTargetLevel {
    pub const Normal: Self = Self(0i32);
    pub const Low: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2MemoryUsageTargetLevel {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2MemoryUsageTargetLevel {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2MouseEventKind(pub i32);
impl CoreWebView2MouseEventKind {
    pub const HorizontalWheel: Self = Self(526i32);
    pub const LeftButtonDoubleClick: Self = Self(515i32);
    pub const LeftButtonDown: Self = Self(513i32);
    pub const LeftButtonUp: Self = Self(514i32);
    pub const Leave: Self = Self(675i32);
    pub const MiddleButtonDoubleClick: Self = Self(521i32);
    pub const MiddleButtonDown: Self = Self(519i32);
    pub const MiddleButtonUp: Self = Self(520i32);
    pub const Move: Self = Self(512i32);
    pub const RightButtonDoubleClick: Self = Self(518i32);
    pub const RightButtonDown: Self = Self(516i32);
    pub const RightButtonUp: Self = Self(517i32);
    pub const Wheel: Self = Self(522i32);
    pub const XButtonDoubleClick: Self = Self(525i32);
    pub const XButtonDown: Self = Self(523i32);
    pub const XButtonUp: Self = Self(524i32);
    pub const NonClientRightButtonDown: Self = Self(164i32);
    pub const NonClientRightButtonUp: Self = Self(165i32);
}
impl windows_core::TypeKind for CoreWebView2MouseEventKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2MouseEventKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2MouseEventKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2MouseEventVirtualKeys(pub u32);
impl CoreWebView2MouseEventVirtualKeys {
    pub const None: Self = Self(0u32);
    pub const LeftButton: Self = Self(1u32);
    pub const RightButton: Self = Self(2u32);
    pub const Shift: Self = Self(4u32);
    pub const Control: Self = Self(8u32);
    pub const MiddleButton: Self = Self(16u32);
    pub const XButton1: Self = Self(32u32);
    pub const XButton2: Self = Self(64u32);
}
impl windows_core::TypeKind for CoreWebView2MouseEventVirtualKeys {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2MouseEventVirtualKeys {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2MouseEventVirtualKeys;u4)",
    );
}
impl CoreWebView2MouseEventVirtualKeys {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CoreWebView2MouseEventVirtualKeys {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CoreWebView2MouseEventVirtualKeys {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CoreWebView2MouseEventVirtualKeys {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CoreWebView2MouseEventVirtualKeys {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CoreWebView2MouseEventVirtualKeys {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2MoveFocusReason(pub i32);
impl CoreWebView2MoveFocusReason {
    pub const Programmatic: Self = Self(0i32);
    pub const Next: Self = Self(1i32);
    pub const Previous: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2MoveFocusReason {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2MoveFocusReason {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2MoveFocusRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2MoveFocusRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2MoveFocusRequestedEventArgs {
    pub fn Reason(&self) -> windows_core::Result<CoreWebView2MoveFocusReason> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Reason)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2MoveFocusRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2MoveFocusRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2MoveFocusRequestedEventArgs {
    type Vtable = <ICoreWebView2MoveFocusRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2MoveFocusRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2MoveFocusRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs";
}
unsafe impl Send for CoreWebView2MoveFocusRequestedEventArgs {}
unsafe impl Sync for CoreWebView2MoveFocusRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2NavigationCompletedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2NavigationCompletedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2NavigationCompletedEventArgs {
    pub fn IsSuccess(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSuccess)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WebErrorStatus(&self) -> windows_core::Result<CoreWebView2WebErrorStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebErrorStatus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NavigationId(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HttpStatusCode(&self) -> windows_core::Result<i32> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NavigationCompletedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HttpStatusCode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2NavigationCompletedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2NavigationCompletedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2NavigationCompletedEventArgs {
    type Vtable = <ICoreWebView2NavigationCompletedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2NavigationCompletedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2NavigationCompletedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs";
}
unsafe impl Send for CoreWebView2NavigationCompletedEventArgs {}
unsafe impl Sync for CoreWebView2NavigationCompletedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2NavigationKind(pub i32);
impl CoreWebView2NavigationKind {
    pub const Reload: Self = Self(0i32);
    pub const BackOrForward: Self = Self(1i32);
    pub const NewDocument: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2NavigationKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2NavigationKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2NavigationKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2NavigationStartingEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2NavigationStartingEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2NavigationStartingEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn IsUserInitiated(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsUserInitiated)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsRedirected(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRedirected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestHeaders(&self) -> windows_core::Result<CoreWebView2HttpRequestHeaders> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestHeaders)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NavigationId(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AdditionalAllowedFrameAncestors(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NavigationStartingEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AdditionalAllowedFrameAncestors)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAdditionalAllowedFrameAncestors(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NavigationStartingEventArgs2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAdditionalAllowedFrameAncestors)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn NavigationKind(&self) -> windows_core::Result<CoreWebView2NavigationKind> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NavigationStartingEventArgs3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2NavigationStartingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2NavigationStartingEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2NavigationStartingEventArgs {
    type Vtable = <ICoreWebView2NavigationStartingEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2NavigationStartingEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2NavigationStartingEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs";
}
unsafe impl Send for CoreWebView2NavigationStartingEventArgs {}
unsafe impl Sync for CoreWebView2NavigationStartingEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2NewWindowRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2NewWindowRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2NewWindowRequestedEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn NewWindow(&self) -> windows_core::Result<CoreWebView2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NewWindow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNewWindow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNewWindow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsUserInitiated(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsUserInitiated)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WindowFeatures(&self) -> windows_core::Result<CoreWebView2WindowFeatures> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowFeatures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NewWindowRequestedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn OriginalSourceFrameInfo(&self) -> windows_core::Result<CoreWebView2FrameInfo> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2NewWindowRequestedEventArgs3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginalSourceFrameInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2NewWindowRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2NewWindowRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2NewWindowRequestedEventArgs {
    type Vtable = <ICoreWebView2NewWindowRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2NewWindowRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2NewWindowRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs";
}
unsafe impl Send for CoreWebView2NewWindowRequestedEventArgs {}
unsafe impl Sync for CoreWebView2NewWindowRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2NonClientRegionChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2NonClientRegionChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2NonClientRegionChangedEventArgs {
    pub fn RegionKind(&self) -> windows_core::Result<CoreWebView2NonClientRegionKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegionKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2NonClientRegionChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2NonClientRegionChangedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2NonClientRegionChangedEventArgs {
    type Vtable = <ICoreWebView2NonClientRegionChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2NonClientRegionChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2NonClientRegionChangedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs";
}
unsafe impl Send for CoreWebView2NonClientRegionChangedEventArgs {}
unsafe impl Sync for CoreWebView2NonClientRegionChangedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2NonClientRegionKind(pub i32);
impl CoreWebView2NonClientRegionKind {
    pub const Nowhere: Self = Self(0i32);
    pub const Client: Self = Self(1i32);
    pub const Caption: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2NonClientRegionKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2NonClientRegionKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PdfToolbarItems(pub u32);
impl CoreWebView2PdfToolbarItems {
    pub const None: Self = Self(0u32);
    pub const Save: Self = Self(1u32);
    pub const Print: Self = Self(2u32);
    pub const SaveAs: Self = Self(4u32);
    pub const ZoomIn: Self = Self(8u32);
    pub const ZoomOut: Self = Self(16u32);
    pub const Rotate: Self = Self(32u32);
    pub const FitPage: Self = Self(64u32);
    pub const PageLayout: Self = Self(128u32);
    pub const Bookmarks: Self = Self(256u32);
    pub const PageSelector: Self = Self(512u32);
    pub const Search: Self = Self(1024u32);
    pub const FullScreen: Self = Self(2048u32);
    pub const MoreSettings: Self = Self(4096u32);
}
impl windows_core::TypeKind for CoreWebView2PdfToolbarItems {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PdfToolbarItems {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems;u4)",
    );
}
impl CoreWebView2PdfToolbarItems {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CoreWebView2PdfToolbarItems {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CoreWebView2PdfToolbarItems {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CoreWebView2PdfToolbarItems {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CoreWebView2PdfToolbarItems {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CoreWebView2PdfToolbarItems {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PermissionKind(pub i32);
impl CoreWebView2PermissionKind {
    pub const UnknownPermission: Self = Self(0i32);
    pub const Microphone: Self = Self(1i32);
    pub const Camera: Self = Self(2i32);
    pub const Geolocation: Self = Self(3i32);
    pub const Notifications: Self = Self(4i32);
    pub const OtherSensors: Self = Self(5i32);
    pub const ClipboardRead: Self = Self(6i32);
    pub const MultipleAutomaticDownloads: Self = Self(7i32);
    pub const FileReadWrite: Self = Self(8i32);
    pub const Autoplay: Self = Self(9i32);
    pub const LocalFonts: Self = Self(10i32);
    pub const MidiSystemExclusiveMessages: Self = Self(11i32);
    pub const WindowManagement: Self = Self(12i32);
}
impl windows_core::TypeKind for CoreWebView2PermissionKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PermissionKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2PermissionRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2PermissionRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2PermissionRequestedEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn PermissionKind(&self) -> windows_core::Result<CoreWebView2PermissionKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsUserInitiated(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsUserInitiated)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn State(&self) -> windows_core::Result<CoreWebView2PermissionState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).State)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetState(&self, value: CoreWebView2PermissionState) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetState)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2PermissionRequestedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2PermissionRequestedEventArgs2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SavesInProfile(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2PermissionRequestedEventArgs3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SavesInProfile)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSavesInProfile(&self, value: bool) -> windows_core::Result<()> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2PermissionRequestedEventArgs3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSavesInProfile)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2PermissionRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2PermissionRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2PermissionRequestedEventArgs {
    type Vtable = <ICoreWebView2PermissionRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2PermissionRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2PermissionRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs";
}
unsafe impl Send for CoreWebView2PermissionRequestedEventArgs {}
unsafe impl Sync for CoreWebView2PermissionRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2PermissionSetting(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2PermissionSetting,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2PermissionSetting {
    pub fn PermissionKind(&self) -> windows_core::Result<CoreWebView2PermissionKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PermissionOrigin(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn PermissionState(&self) -> windows_core::Result<CoreWebView2PermissionState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PermissionState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2PermissionSetting {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2PermissionSetting>();
}
unsafe impl windows_core::Interface for CoreWebView2PermissionSetting {
    type Vtable = <ICoreWebView2PermissionSetting as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2PermissionSetting as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2PermissionSetting {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting";
}
unsafe impl Send for CoreWebView2PermissionSetting {}
unsafe impl Sync for CoreWebView2PermissionSetting {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PermissionState(pub i32);
impl CoreWebView2PermissionState {
    pub const Default: Self = Self(0i32);
    pub const Allow: Self = Self(1i32);
    pub const Deny: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2PermissionState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PermissionState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PermissionState;i4)",
    );
}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct CoreWebView2PhysicalKeyStatus {
    pub RepeatCount: u32,
    pub ScanCode: u32,
    pub IsExtendedKey: i32,
    pub IsMenuKeyDown: i32,
    pub WasKeyDown: i32,
    pub IsKeyReleased: i32,
}
impl windows_core::TypeKind for CoreWebView2PhysicalKeyStatus {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PhysicalKeyStatus {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"struct(Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus;u4;u4;i4;i4;i4;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PointerEventKind(pub i32);
impl CoreWebView2PointerEventKind {
    pub const Activate: Self = Self(587i32);
    pub const Down: Self = Self(582i32);
    pub const Enter: Self = Self(585i32);
    pub const Leave: Self = Self(586i32);
    pub const Up: Self = Self(583i32);
    pub const Update: Self = Self(581i32);
}
impl windows_core::TypeKind for CoreWebView2PointerEventKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PointerEventKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PointerEventKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2PointerInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2PointerInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2PointerInfo {
    pub fn PointerKind(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPointerKind(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPointerKind)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PointerId(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPointerId(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPointerId)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FrameId(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFrameId(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFrameId)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PointerFlags(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerFlags)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPointerFlags(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPointerFlags)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PointerDeviceRect(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerDeviceRect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPointerDeviceRect(
        &self,
        value: windows::Foundation::Rect,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPointerDeviceRect)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DisplayRect(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayRect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDisplayRect(&self, value: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayRect)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PixelLocation(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PixelLocation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPixelLocation(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPixelLocation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HimetricLocation(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HimetricLocation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHimetricLocation(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHimetricLocation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PixelLocationRaw(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PixelLocationRaw)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPixelLocationRaw(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPixelLocationRaw)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HimetricLocationRaw(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HimetricLocationRaw)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHimetricLocationRaw(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHimetricLocationRaw)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Time(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Time)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTime(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HistoryCount(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HistoryCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHistoryCount(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHistoryCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InputData(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InputData)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInputData(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInputData)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyStates(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyStates)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyStates(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyStates)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PerformanceCount(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PerformanceCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPerformanceCount(&self, value: u64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPerformanceCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ButtonChangeKind(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ButtonChangeKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetButtonChangeKind(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetButtonChangeKind)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenFlags(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenFlags)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenFlags(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenFlags)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenMask(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenMask)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenMask(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenMask)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenPressure(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenPressure)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenPressure(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenPressure)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenRotation(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenRotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenRotation(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenTiltX(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenTiltX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenTiltX(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenTiltX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PenTiltY(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PenTiltY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPenTiltY(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPenTiltY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchFlags(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchFlags)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchFlags(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchFlags)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchMask(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchMask)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchMask(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchMask)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchContact(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchContact)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchContact(&self, value: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchContact)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchContactRaw(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchContactRaw)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchContactRaw(&self, value: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchContactRaw)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchOrientation(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchOrientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchOrientation(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TouchPressure(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TouchPressure)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTouchPressure(&self, value: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTouchPressure)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2PointerInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2PointerInfo>();
}
unsafe impl windows_core::Interface for CoreWebView2PointerInfo {
    type Vtable = <ICoreWebView2PointerInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2PointerInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2PointerInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo";
}
unsafe impl Send for CoreWebView2PointerInfo {}
unsafe impl Sync for CoreWebView2PointerInfo {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PreferredColorScheme(pub i32);
impl CoreWebView2PreferredColorScheme {
    pub const Auto: Self = Self(0i32);
    pub const Light: Self = Self(1i32);
    pub const Dark: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2PreferredColorScheme {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PreferredColorScheme {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintCollation(pub i32);
impl CoreWebView2PrintCollation {
    pub const Default: Self = Self(0i32);
    pub const Collated: Self = Self(1i32);
    pub const Uncollated: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2PrintCollation {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintCollation {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintColorMode(pub i32);
impl CoreWebView2PrintColorMode {
    pub const Default: Self = Self(0i32);
    pub const Color: Self = Self(1i32);
    pub const Grayscale: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2PrintColorMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintColorMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintDialogKind(pub i32);
impl CoreWebView2PrintDialogKind {
    pub const Browser: Self = Self(0i32);
    pub const System: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2PrintDialogKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintDialogKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintDialogKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintDuplex(pub i32);
impl CoreWebView2PrintDuplex {
    pub const Default: Self = Self(0i32);
    pub const OneSided: Self = Self(1i32);
    pub const TwoSidedLongEdge: Self = Self(2i32);
    pub const TwoSidedShortEdge: Self = Self(3i32);
}
impl windows_core::TypeKind for CoreWebView2PrintDuplex {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintDuplex {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintMediaSize(pub i32);
impl CoreWebView2PrintMediaSize {
    pub const Default: Self = Self(0i32);
    pub const Custom: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2PrintMediaSize {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintMediaSize {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintOrientation(pub i32);
impl CoreWebView2PrintOrientation {
    pub const Portrait: Self = Self(0i32);
    pub const Landscape: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2PrintOrientation {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintOrientation {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2PrintSettings(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2PrintSettings,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2PrintSettings {
    pub fn Orientation(&self) -> windows_core::Result<CoreWebView2PrintOrientation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(&self, value: CoreWebView2PrintOrientation) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleFactor(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleFactor(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PageWidth(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PageWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPageWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPageWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PageHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PageHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPageHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPageHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MarginTop(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MarginTop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMarginTop(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMarginTop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MarginBottom(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MarginBottom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMarginBottom(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMarginBottom)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MarginLeft(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MarginLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMarginLeft(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMarginLeft)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MarginRight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MarginRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMarginRight(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMarginRight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShouldPrintBackgrounds(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldPrintBackgrounds)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldPrintBackgrounds(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldPrintBackgrounds)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShouldPrintSelectionOnly(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldPrintSelectionOnly)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldPrintSelectionOnly(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldPrintSelectionOnly)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShouldPrintHeaderAndFooter(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldPrintHeaderAndFooter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldPrintHeaderAndFooter(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldPrintHeaderAndFooter)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HeaderTitle(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HeaderTitle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetHeaderTitle(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeaderTitle)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FooterUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FooterUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetFooterUri(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFooterUri)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PageRanges(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PageRanges)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPageRanges(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetPageRanges)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PagesPerSide(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PagesPerSide)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPagesPerSide(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetPagesPerSide)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Copies(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Copies)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCopies(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCopies)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Collation(&self) -> windows_core::Result<CoreWebView2PrintCollation> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Collation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCollation(&self, value: CoreWebView2PrintCollation) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCollation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorMode(&self) -> windows_core::Result<CoreWebView2PrintColorMode> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColorMode(&self, value: CoreWebView2PrintColorMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duplex(&self) -> windows_core::Result<CoreWebView2PrintDuplex> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duplex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuplex(&self, value: CoreWebView2PrintDuplex) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuplex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MediaSize(&self) -> windows_core::Result<CoreWebView2PrintMediaSize> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MediaSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMediaSize(&self, value: CoreWebView2PrintMediaSize) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMediaSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PrinterName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrinterName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPrinterName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2PrintSettings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetPrinterName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2PrintSettings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2PrintSettings>();
}
unsafe impl windows_core::Interface for CoreWebView2PrintSettings {
    type Vtable = <ICoreWebView2PrintSettings as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2PrintSettings as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2PrintSettings {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings";
}
unsafe impl Send for CoreWebView2PrintSettings {}
unsafe impl Sync for CoreWebView2PrintSettings {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2PrintStatus(pub i32);
impl CoreWebView2PrintStatus {
    pub const Succeeded: Self = Self(0i32);
    pub const PrinterUnavailable: Self = Self(1i32);
    pub const OtherError: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2PrintStatus {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2PrintStatus {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2PrintStatus;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ProcessExtendedInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ProcessExtendedInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ProcessExtendedInfo {
    pub fn ProcessInfo(&self) -> windows_core::Result<CoreWebView2ProcessInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AssociatedFrameInfos(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2FrameInfo>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AssociatedFrameInfos)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ProcessExtendedInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ProcessExtendedInfo>();
}
unsafe impl windows_core::Interface for CoreWebView2ProcessExtendedInfo {
    type Vtable = <ICoreWebView2ProcessExtendedInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ProcessExtendedInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ProcessExtendedInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo";
}
unsafe impl Send for CoreWebView2ProcessExtendedInfo {}
unsafe impl Sync for CoreWebView2ProcessExtendedInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ProcessFailedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ProcessFailedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ProcessFailedEventArgs {
    pub fn ProcessFailedKind(&self) -> windows_core::Result<CoreWebView2ProcessFailedKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessFailedKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Reason(&self) -> windows_core::Result<CoreWebView2ProcessFailedReason> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ProcessFailedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Reason)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ExitCode(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ProcessFailedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitCode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ProcessDescription(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ProcessFailedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessDescription)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FrameInfosForFailedProcess(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2FrameInfo>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ProcessFailedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameInfosForFailedProcess)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FailureSourceModulePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2ProcessFailedEventArgs3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FailureSourceModulePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ProcessFailedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ProcessFailedEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2ProcessFailedEventArgs {
    type Vtable = <ICoreWebView2ProcessFailedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ProcessFailedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ProcessFailedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs";
}
unsafe impl Send for CoreWebView2ProcessFailedEventArgs {}
unsafe impl Sync for CoreWebView2ProcessFailedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ProcessFailedKind(pub i32);
impl CoreWebView2ProcessFailedKind {
    pub const BrowserProcessExited: Self = Self(0i32);
    pub const RenderProcessExited: Self = Self(1i32);
    pub const RenderProcessUnresponsive: Self = Self(2i32);
    pub const FrameRenderProcessExited: Self = Self(3i32);
    pub const UtilityProcessExited: Self = Self(4i32);
    pub const SandboxHelperProcessExited: Self = Self(5i32);
    pub const GpuProcessExited: Self = Self(6i32);
    pub const PpapiPluginProcessExited: Self = Self(7i32);
    pub const PpapiBrokerProcessExited: Self = Self(8i32);
    pub const UnknownProcessExited: Self = Self(9i32);
}
impl windows_core::TypeKind for CoreWebView2ProcessFailedKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ProcessFailedKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ProcessFailedReason(pub i32);
impl CoreWebView2ProcessFailedReason {
    pub const Unexpected: Self = Self(0i32);
    pub const Unresponsive: Self = Self(1i32);
    pub const Terminated: Self = Self(2i32);
    pub const Crashed: Self = Self(3i32);
    pub const LaunchFailed: Self = Self(4i32);
    pub const OutOfMemory: Self = Self(5i32);
    pub const ProfileDeleted: Self = Self(6i32);
}
impl windows_core::TypeKind for CoreWebView2ProcessFailedReason {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ProcessFailedReason {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedReason;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ProcessInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ProcessInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ProcessInfo {
    pub fn ProcessId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Kind(&self) -> windows_core::Result<CoreWebView2ProcessKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ProcessInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ProcessInfo>();
}
unsafe impl windows_core::Interface for CoreWebView2ProcessInfo {
    type Vtable = <ICoreWebView2ProcessInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2ProcessInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ProcessInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo";
}
unsafe impl Send for CoreWebView2ProcessInfo {}
unsafe impl Sync for CoreWebView2ProcessInfo {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ProcessKind(pub i32);
impl CoreWebView2ProcessKind {
    pub const Browser: Self = Self(0i32);
    pub const Renderer: Self = Self(1i32);
    pub const Utility: Self = Self(2i32);
    pub const SandboxHelper: Self = Self(3i32);
    pub const Gpu: Self = Self(4i32);
    pub const PpapiPlugin: Self = Self(5i32);
    pub const PpapiBroker: Self = Self(6i32);
}
impl windows_core::TypeKind for CoreWebView2ProcessKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ProcessKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ProcessKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Profile(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Profile,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Profile {
    pub fn ClearBrowsingDataAsync(
        &self,
        datakinds: CoreWebView2BrowsingDataKinds,
        starttime: windows::Foundation::DateTime,
        endtime: windows::Foundation::DateTime,
    ) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<CoreWebView2Profile_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClearBrowsingDataAsync)(
                windows_core::Interface::as_raw(this),
                datakinds,
                starttime,
                endtime,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ClearBrowsingDataAsync2(&self) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<CoreWebView2Profile_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClearBrowsingDataAsync2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNonDefaultPermissionSettingsAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2PermissionSetting>,
        >,
    > {
        let this = &windows_core::Interface::cast::<CoreWebView2Profile_Manual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNonDefaultPermissionSettingsAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetBrowserExtensionsAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2BrowserExtension>,
        >,
    > {
        let this = &windows_core::Interface::cast::<CoreWebView2Profile_Manual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetBrowserExtensionsAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ProfileName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProfileName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn IsInPrivateModeEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsInPrivateModeEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ProfilePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProfilePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DefaultDownloadFolderPath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultDownloadFolderPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetDefaultDownloadFolderPath(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultDownloadFolderPath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PreferredColorScheme(&self) -> windows_core::Result<CoreWebView2PreferredColorScheme> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreferredColorScheme)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPreferredColorScheme(
        &self,
        value: CoreWebView2PreferredColorScheme,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPreferredColorScheme)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClearBrowsingDataAsync3(
        &self,
        datakinds: CoreWebView2BrowsingDataKinds,
    ) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClearBrowsingDataAsync)(
                windows_core::Interface::as_raw(this),
                datakinds,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn PreferredTrackingPreventionLevel(
        &self,
    ) -> windows_core::Result<CoreWebView2TrackingPreventionLevel> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreferredTrackingPreventionLevel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPreferredTrackingPreventionLevel(
        &self,
        value: CoreWebView2TrackingPreventionLevel,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetPreferredTrackingPreventionLevel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SetPermissionStateAsync(
        &self,
        permissionkind: CoreWebView2PermissionKind,
        origin: &windows_core::HSTRING,
        state: CoreWebView2PermissionState,
    ) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SetPermissionStateAsync)(
                windows_core::Interface::as_raw(this),
                permissionkind,
                core::mem::transmute_copy(origin),
                state,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CookieManager(&self) -> windows_core::Result<CoreWebView2CookieManager> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CookieManager)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsPasswordAutosaveEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPasswordAutosaveEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile6>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPasswordAutosaveEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsGeneralAutofillEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGeneralAutofillEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile6>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsGeneralAutofillEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AddBrowserExtensionAsync(
        &self,
        extensionfolderpath: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2BrowserExtension>> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AddBrowserExtensionAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(extensionfolderpath),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Deleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<CoreWebView2Profile, windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Deleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDeleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDeleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Delete(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Profile8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Delete)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Profile {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Profile>();
}
unsafe impl windows_core::Interface for CoreWebView2Profile {
    type Vtable = <ICoreWebView2Profile as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Profile as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Profile {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Profile";
}
unsafe impl Send for CoreWebView2Profile {}
unsafe impl Sync for CoreWebView2Profile {}
windows_core::imp::define_interface!(
    CoreWebView2Profile_Manual,
    CoreWebView2Profile_Manual_Vtbl,
    0xb42bfab4_c4bf_5469_89ac_cadc69e3b0f5
);
impl windows_core::RuntimeType for CoreWebView2Profile_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for CoreWebView2Profile_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual";
}
pub trait CoreWebView2Profile_Manual_Impl: windows_core::IUnknownImpl {
    fn ClearBrowsingDataAsync(
        &self,
        dataKinds: CoreWebView2BrowsingDataKinds,
        startTime: &windows::Foundation::DateTime,
        endTime: &windows::Foundation::DateTime,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
    fn ClearBrowsingDataAsync2(&self) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl CoreWebView2Profile_Manual_Vtbl {
    pub const fn new<Identity: CoreWebView2Profile_Manual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ClearBrowsingDataAsync<
            Identity: CoreWebView2Profile_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            datakinds: CoreWebView2BrowsingDataKinds,
            starttime: windows::Foundation::DateTime,
            endtime: windows::Foundation::DateTime,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2Profile_Manual_Impl::ClearBrowsingDataAsync(
                    this,
                    datakinds,
                    core::mem::transmute(&starttime),
                    core::mem::transmute(&endtime),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClearBrowsingDataAsync2<
            Identity: CoreWebView2Profile_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2Profile_Manual_Impl::ClearBrowsingDataAsync2(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                CoreWebView2Profile_Manual,
                OFFSET,
            >(),
            ClearBrowsingDataAsync: ClearBrowsingDataAsync::<Identity, OFFSET>,
            ClearBrowsingDataAsync2: ClearBrowsingDataAsync2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CoreWebView2Profile_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CoreWebView2Profile_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ClearBrowsingDataAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2BrowsingDataKinds,
        windows::Foundation::DateTime,
        windows::Foundation::DateTime,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClearBrowsingDataAsync2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    CoreWebView2Profile_Manual2,
    CoreWebView2Profile_Manual2_Vtbl,
    0x6e62815a_6269_5756_92c3_f08afe17649c
);
impl windows_core::RuntimeType for CoreWebView2Profile_Manual2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for CoreWebView2Profile_Manual2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual2";
}
pub trait CoreWebView2Profile_Manual2_Impl: windows_core::IUnknownImpl {
    fn GetNonDefaultPermissionSettingsAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2PermissionSetting>,
        >,
    >;
}
impl CoreWebView2Profile_Manual2_Vtbl {
    pub const fn new<Identity: CoreWebView2Profile_Manual2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetNonDefaultPermissionSettingsAsync<
            Identity: CoreWebView2Profile_Manual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2Profile_Manual2_Impl::GetNonDefaultPermissionSettingsAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                CoreWebView2Profile_Manual2,
                OFFSET,
            >(),
            GetNonDefaultPermissionSettingsAsync: GetNonDefaultPermissionSettingsAsync::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CoreWebView2Profile_Manual2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CoreWebView2Profile_Manual2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetNonDefaultPermissionSettingsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    CoreWebView2Profile_Manual3,
    CoreWebView2Profile_Manual3_Vtbl,
    0xc6129971_9ecc_5634_8896_723c1dbacd6f
);
impl windows_core::RuntimeType for CoreWebView2Profile_Manual3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for CoreWebView2Profile_Manual3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Profile_Manual3";
}
pub trait CoreWebView2Profile_Manual3_Impl: windows_core::IUnknownImpl {
    fn GetBrowserExtensionsAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2BrowserExtension>,
        >,
    >;
}
impl CoreWebView2Profile_Manual3_Vtbl {
    pub const fn new<Identity: CoreWebView2Profile_Manual3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetBrowserExtensionsAsync<
            Identity: CoreWebView2Profile_Manual3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match CoreWebView2Profile_Manual3_Impl::GetBrowserExtensionsAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                CoreWebView2Profile_Manual3,
                OFFSET,
            >(),
            GetBrowserExtensionsAsync: GetBrowserExtensionsAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CoreWebView2Profile_Manual3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CoreWebView2Profile_Manual3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetBrowserExtensionsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ReleaseChannels(pub u32);
impl CoreWebView2ReleaseChannels {
    pub const None: Self = Self(0u32);
    pub const Stable: Self = Self(1u32);
    pub const Beta: Self = Self(2u32);
    pub const Dev: Self = Self(4u32);
    pub const Canary: Self = Self(8u32);
}
impl windows_core::TypeKind for CoreWebView2ReleaseChannels {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ReleaseChannels {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels;u4)",
    );
}
impl CoreWebView2ReleaseChannels {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CoreWebView2ReleaseChannels {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CoreWebView2ReleaseChannels {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CoreWebView2ReleaseChannels {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CoreWebView2ReleaseChannels {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CoreWebView2ReleaseChannels {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ScriptDialogKind(pub i32);
impl CoreWebView2ScriptDialogKind {
    pub const Alert: Self = Self(0i32);
    pub const Confirm: Self = Self(1i32);
    pub const Prompt: Self = Self(2i32);
    pub const Beforeunload: Self = Self(3i32);
}
impl windows_core::TypeKind for CoreWebView2ScriptDialogKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ScriptDialogKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ScriptDialogOpeningEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ScriptDialogOpeningEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ScriptDialogOpeningEventArgs {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Kind(&self) -> windows_core::Result<CoreWebView2ScriptDialogKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Message(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Message)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DefaultText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ResultText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResultText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetResultText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetResultText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Accept(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Accept)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ScriptDialogOpeningEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2ScriptDialogOpeningEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2ScriptDialogOpeningEventArgs {
    type Vtable = <ICoreWebView2ScriptDialogOpeningEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ScriptDialogOpeningEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ScriptDialogOpeningEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs";
}
unsafe impl Send for CoreWebView2ScriptDialogOpeningEventArgs {}
unsafe impl Sync for CoreWebView2ScriptDialogOpeningEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ScriptException(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ScriptException,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ScriptException {
    pub fn LineNumber(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineNumber)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ColumnNumber(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnNumber)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Message(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Message)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ToJson(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToJson)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ScriptException {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2ScriptException>();
}
unsafe impl windows_core::Interface for CoreWebView2ScriptException {
    type Vtable = <ICoreWebView2ScriptException as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2ScriptException as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ScriptException {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2ScriptException";
}
unsafe impl Send for CoreWebView2ScriptException {}
unsafe impl Sync for CoreWebView2ScriptException {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ScrollbarStyle(pub i32);
impl CoreWebView2ScrollbarStyle {
    pub const Default: Self = Self(0i32);
    pub const FluentOverlay: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2ScrollbarStyle {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ScrollbarStyle {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2ServerCertificateErrorAction(pub i32);
impl CoreWebView2ServerCertificateErrorAction {
    pub const AlwaysAllow: Self = Self(0i32);
    pub const Cancel: Self = Self(1i32);
    pub const Default: Self = Self(2i32);
}
impl windows_core::TypeKind for CoreWebView2ServerCertificateErrorAction {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2ServerCertificateErrorAction {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2ServerCertificateErrorDetectedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2ServerCertificateErrorDetectedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2ServerCertificateErrorDetectedEventArgs {
    pub fn ErrorStatus(&self) -> windows_core::Result<CoreWebView2WebErrorStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ErrorStatus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestUri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ServerCertificate(&self) -> windows_core::Result<CoreWebView2Certificate> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ServerCertificate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Action(&self) -> windows_core::Result<CoreWebView2ServerCertificateErrorAction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Action)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAction(
        &self,
        value: CoreWebView2ServerCertificateErrorAction,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2ServerCertificateErrorDetectedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2ServerCertificateErrorDetectedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2ServerCertificateErrorDetectedEventArgs {
    type Vtable =
        <ICoreWebView2ServerCertificateErrorDetectedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2ServerCertificateErrorDetectedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2ServerCertificateErrorDetectedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs";
}
unsafe impl Send for CoreWebView2ServerCertificateErrorDetectedEventArgs {}
unsafe impl Sync for CoreWebView2ServerCertificateErrorDetectedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2Settings(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2Settings,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2Settings {
    pub fn IsScriptEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsScriptEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsScriptEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsScriptEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsWebMessageEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsWebMessageEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsWebMessageEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsWebMessageEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AreDefaultScriptDialogsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreDefaultScriptDialogsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreDefaultScriptDialogsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreDefaultScriptDialogsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStatusBarEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStatusBarEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsStatusBarEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsStatusBarEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AreDevToolsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreDevToolsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreDevToolsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreDevToolsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AreDefaultContextMenusEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreDefaultContextMenusEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreDefaultContextMenusEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreDefaultContextMenusEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AreHostObjectsAllowed(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreHostObjectsAllowed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreHostObjectsAllowed(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreHostObjectsAllowed)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsZoomControlEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsZoomControlEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsZoomControlEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsZoomControlEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsBuiltInErrorPageEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsBuiltInErrorPageEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsBuiltInErrorPageEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsBuiltInErrorPageEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UserAgent(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UserAgent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetUserAgent(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUserAgent)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn AreBrowserAcceleratorKeysEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreBrowserAcceleratorKeysEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreBrowserAcceleratorKeysEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreBrowserAcceleratorKeysEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPasswordAutosaveEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPasswordAutosaveEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPasswordAutosaveEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsGeneralAutofillEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGeneralAutofillEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsGeneralAutofillEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPinchZoomEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPinchZoomEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPinchZoomEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPinchZoomEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSwipeNavigationEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSwipeNavigationEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSwipeNavigationEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings6>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSwipeNavigationEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HiddenPdfToolbarItems(&self) -> windows_core::Result<CoreWebView2PdfToolbarItems> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HiddenPdfToolbarItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHiddenPdfToolbarItems(
        &self,
        value: CoreWebView2PdfToolbarItems,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings7>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHiddenPdfToolbarItems)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsReputationCheckingRequired(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReputationCheckingRequired)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsReputationCheckingRequired(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings8>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsReputationCheckingRequired)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsNonClientRegionSupportEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings9>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsNonClientRegionSupportEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsNonClientRegionSupportEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings9>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsNonClientRegionSupportEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HostObjectDispatchAdapter(&self) -> windows_core::Result<ICoreWebView2DispatchAdapter> {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HostObjectDispatchAdapter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetHostObjectDispatchAdapter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICoreWebView2DispatchAdapter>,
    {
        let this = &windows_core::Interface::cast::<ICoreWebView2Settings_Manual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHostObjectDispatchAdapter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2Settings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2Settings>();
}
unsafe impl windows_core::Interface for CoreWebView2Settings {
    type Vtable = <ICoreWebView2Settings as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2Settings as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2Settings {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2Settings";
}
unsafe impl Send for CoreWebView2Settings {}
unsafe impl Sync for CoreWebView2Settings {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2SharedBuffer(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2SharedBuffer,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(CoreWebView2SharedBuffer, windows::Foundation::IClosable);
impl CoreWebView2SharedBuffer {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OpenStream(
        &self,
    ) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenStream)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Buffer(&self) -> windows_core::Result<windows::Foundation::IMemoryBufferReference> {
        let this = &windows_core::Interface::cast::<ICoreWebView2SharedBuffer_Manual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Buffer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2SharedBuffer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2SharedBuffer>();
}
unsafe impl windows_core::Interface for CoreWebView2SharedBuffer {
    type Vtable = <ICoreWebView2SharedBuffer as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2SharedBuffer as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2SharedBuffer {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer";
}
unsafe impl Send for CoreWebView2SharedBuffer {}
unsafe impl Sync for CoreWebView2SharedBuffer {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2SharedBufferAccess(pub i32);
impl CoreWebView2SharedBufferAccess {
    pub const ReadOnly: Self = Self(0i32);
    pub const ReadWrite: Self = Self(1i32);
}
impl windows_core::TypeKind for CoreWebView2SharedBufferAccess {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2SharedBufferAccess {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2SourceChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2SourceChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2SourceChangedEventArgs {
    pub fn IsNewDocument(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsNewDocument)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2SourceChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2SourceChangedEventArgs>();
}
unsafe impl windows_core::Interface for CoreWebView2SourceChangedEventArgs {
    type Vtable = <ICoreWebView2SourceChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2SourceChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2SourceChangedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs";
}
unsafe impl Send for CoreWebView2SourceChangedEventArgs {}
unsafe impl Sync for CoreWebView2SourceChangedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2TrackingPreventionLevel(pub i32);
impl CoreWebView2TrackingPreventionLevel {
    pub const None: Self = Self(0i32);
    pub const Basic: Self = Self(1i32);
    pub const Balanced: Self = Self(2i32);
    pub const Strict: Self = Self(3i32);
}
impl windows_core::TypeKind for CoreWebView2TrackingPreventionLevel {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2TrackingPreventionLevel {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2WebErrorStatus(pub i32);
impl CoreWebView2WebErrorStatus {
    pub const Unknown: Self = Self(0i32);
    pub const CertificateCommonNameIsIncorrect: Self = Self(1i32);
    pub const CertificateExpired: Self = Self(2i32);
    pub const ClientCertificateContainsErrors: Self = Self(3i32);
    pub const CertificateRevoked: Self = Self(4i32);
    pub const CertificateIsInvalid: Self = Self(5i32);
    pub const ServerUnreachable: Self = Self(6i32);
    pub const Timeout: Self = Self(7i32);
    pub const ErrorHttpInvalidServerResponse: Self = Self(8i32);
    pub const ConnectionAborted: Self = Self(9i32);
    pub const ConnectionReset: Self = Self(10i32);
    pub const Disconnected: Self = Self(11i32);
    pub const CannotConnect: Self = Self(12i32);
    pub const HostNameNotResolved: Self = Self(13i32);
    pub const OperationCanceled: Self = Self(14i32);
    pub const RedirectFailed: Self = Self(15i32);
    pub const UnexpectedError: Self = Self(16i32);
    pub const ValidAuthenticationCredentialsRequired: Self = Self(17i32);
    pub const ValidProxyAuthenticationRequired: Self = Self(18i32);
}
impl windows_core::TypeKind for CoreWebView2WebErrorStatus {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2WebErrorStatus {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebMessageReceivedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebMessageReceivedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebMessageReceivedEventArgs {
    pub fn Source(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn WebMessageAsJson(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebMessageAsJson)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn TryGetWebMessageAsString(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetWebMessageAsString)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn AdditionalObjects(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::IInspectable>> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2WebMessageReceivedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AdditionalObjects)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebMessageReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2WebMessageReceivedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2WebMessageReceivedEventArgs {
    type Vtable = <ICoreWebView2WebMessageReceivedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebMessageReceivedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebMessageReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs";
}
unsafe impl Send for CoreWebView2WebMessageReceivedEventArgs {}
unsafe impl Sync for CoreWebView2WebMessageReceivedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2WebResourceContext(pub i32);
impl CoreWebView2WebResourceContext {
    pub const All: Self = Self(0i32);
    pub const Document: Self = Self(1i32);
    pub const Stylesheet: Self = Self(2i32);
    pub const Image: Self = Self(3i32);
    pub const Media: Self = Self(4i32);
    pub const Font: Self = Self(5i32);
    pub const Script: Self = Self(6i32);
    pub const XmlHttpRequest: Self = Self(7i32);
    pub const Fetch: Self = Self(8i32);
    pub const TextTrack: Self = Self(9i32);
    pub const EventSource: Self = Self(10i32);
    pub const Websocket: Self = Self(11i32);
    pub const Manifest: Self = Self(12i32);
    pub const SignedExchange: Self = Self(13i32);
    pub const Ping: Self = Self(14i32);
    pub const CspViolationReport: Self = Self(15i32);
    pub const Other: Self = Self(16i32);
}
impl windows_core::TypeKind for CoreWebView2WebResourceContext {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2WebResourceContext {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebResourceRequest(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebResourceRequest,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebResourceRequest {
    pub fn Uri(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetUri(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUri)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Method(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Method)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetMethod(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMethod)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Content(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Headers(&self) -> windows_core::Result<CoreWebView2HttpRequestHeaders> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Headers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebResourceRequest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2WebResourceRequest>();
}
unsafe impl windows_core::Interface for CoreWebView2WebResourceRequest {
    type Vtable = <ICoreWebView2WebResourceRequest as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebResourceRequest as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebResourceRequest {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest";
}
unsafe impl Send for CoreWebView2WebResourceRequest {}
unsafe impl Sync for CoreWebView2WebResourceRequest {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CoreWebView2WebResourceRequestSourceKinds(pub u32);
impl CoreWebView2WebResourceRequestSourceKinds {
    pub const None: Self = Self(0u32);
    pub const Document: Self = Self(1u32);
    pub const SharedWorker: Self = Self(2u32);
    pub const ServiceWorker: Self = Self(4u32);
    pub const All: Self = Self(4294967295u32);
}
impl windows_core::TypeKind for CoreWebView2WebResourceRequestSourceKinds {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CoreWebView2WebResourceRequestSourceKinds {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds;u4)",
    );
}
impl CoreWebView2WebResourceRequestSourceKinds {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CoreWebView2WebResourceRequestSourceKinds {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CoreWebView2WebResourceRequestSourceKinds {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CoreWebView2WebResourceRequestSourceKinds {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CoreWebView2WebResourceRequestSourceKinds {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CoreWebView2WebResourceRequestSourceKinds {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebResourceRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebResourceRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebResourceRequestedEventArgs {
    pub fn Request(&self) -> windows_core::Result<CoreWebView2WebResourceRequest> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Request)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Response(&self) -> windows_core::Result<CoreWebView2WebResourceResponse> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Response)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResponse<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CoreWebView2WebResourceResponse>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetResponse)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ResourceContext(&self) -> windows_core::Result<CoreWebView2WebResourceContext> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResourceContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RequestedSourceKind(
        &self,
    ) -> windows_core::Result<CoreWebView2WebResourceRequestSourceKinds> {
        let this =
            &windows_core::Interface::cast::<ICoreWebView2WebResourceRequestedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestedSourceKind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebResourceRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2WebResourceRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2WebResourceRequestedEventArgs {
    type Vtable = <ICoreWebView2WebResourceRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebResourceRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebResourceRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs";
}
unsafe impl Send for CoreWebView2WebResourceRequestedEventArgs {}
unsafe impl Sync for CoreWebView2WebResourceRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebResourceResponse(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebResourceResponse,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebResourceResponse {
    pub fn Content(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Storage::Streams::IRandomAccessStream>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Headers(&self) -> windows_core::Result<CoreWebView2HttpResponseHeaders> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Headers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StatusCode(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StatusCode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStatusCode(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStatusCode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ReasonPhrase(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReasonPhrase)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetReasonPhrase(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetReasonPhrase)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebResourceResponse {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2WebResourceResponse>();
}
unsafe impl windows_core::Interface for CoreWebView2WebResourceResponse {
    type Vtable = <ICoreWebView2WebResourceResponse as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebResourceResponse as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebResourceResponse {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse";
}
unsafe impl Send for CoreWebView2WebResourceResponse {}
unsafe impl Sync for CoreWebView2WebResourceResponse {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebResourceResponseReceivedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebResourceResponseReceivedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebResourceResponseReceivedEventArgs {
    pub fn Request(&self) -> windows_core::Result<CoreWebView2WebResourceRequest> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Request)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Response(&self) -> windows_core::Result<CoreWebView2WebResourceResponseView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Response)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebResourceResponseReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICoreWebView2WebResourceResponseReceivedEventArgs,
    >();
}
unsafe impl windows_core::Interface for CoreWebView2WebResourceResponseReceivedEventArgs {
    type Vtable =
        <ICoreWebView2WebResourceResponseReceivedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebResourceResponseReceivedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebResourceResponseReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs";
}
unsafe impl Send for CoreWebView2WebResourceResponseReceivedEventArgs {}
unsafe impl Sync for CoreWebView2WebResourceResponseReceivedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WebResourceResponseView(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WebResourceResponseView,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WebResourceResponseView {
    pub fn Headers(&self) -> windows_core::Result<CoreWebView2HttpResponseHeaders> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Headers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StatusCode(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StatusCode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReasonPhrase(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReasonPhrase)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetContentAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContentAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WebResourceResponseView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2WebResourceResponseView>();
}
unsafe impl windows_core::Interface for CoreWebView2WebResourceResponseView {
    type Vtable = <ICoreWebView2WebResourceResponseView as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICoreWebView2WebResourceResponseView as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WebResourceResponseView {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView";
}
unsafe impl Send for CoreWebView2WebResourceResponseView {}
unsafe impl Sync for CoreWebView2WebResourceResponseView {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CoreWebView2WindowFeatures(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CoreWebView2WindowFeatures,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CoreWebView2WindowFeatures {
    pub fn HasPosition(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HasSize(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Left(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Left)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Top(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Top)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Height(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldDisplayMenuBar(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDisplayMenuBar)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldDisplayStatus(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDisplayStatus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldDisplayToolbar(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDisplayToolbar)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldDisplayScrollBars(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldDisplayScrollBars)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CoreWebView2WindowFeatures {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICoreWebView2WindowFeatures>();
}
unsafe impl windows_core::Interface for CoreWebView2WindowFeatures {
    type Vtable = <ICoreWebView2WindowFeatures as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICoreWebView2WindowFeatures as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CoreWebView2WindowFeatures {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures";
}
unsafe impl Send for CoreWebView2WindowFeatures {}
unsafe impl Sync for CoreWebView2WindowFeatures {}
windows_core::imp::define_interface!(
    ICoreWebView2,
    ICoreWebView2_Vtbl,
    0x3a3f559a_e5e9_5338_bb67_4eb0504a4f14
);
impl windows_core::RuntimeType for ICoreWebView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2";
}
pub trait ICoreWebView2_Impl: windows_core::IUnknownImpl {
    fn Settings(&self) -> windows_core::Result<CoreWebView2Settings>;
    fn Source(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn BrowserProcessId(&self) -> windows_core::Result<u32>;
    fn CanGoBack(&self) -> windows_core::Result<bool>;
    fn CanGoForward(&self) -> windows_core::Result<bool>;
    fn DocumentTitle(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ContainsFullScreenElement(&self) -> windows_core::Result<bool>;
    fn NavigationStarting(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()>;
    fn ContentLoading(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ContentLoadingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveContentLoading(&self, token: i64) -> windows_core::Result<()>;
    fn SourceChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2SourceChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveSourceChanged(&self, token: i64) -> windows_core::Result<()>;
    fn HistoryChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveHistoryChanged(&self, token: i64) -> windows_core::Result<()>;
    fn NavigationCompleted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn FrameNavigationStarting(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveFrameNavigationStarting(&self, token: i64) -> windows_core::Result<()>;
    fn FrameNavigationCompleted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveFrameNavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn ScriptDialogOpening(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ScriptDialogOpeningEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveScriptDialogOpening(&self, token: i64) -> windows_core::Result<()>;
    fn PermissionRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2PermissionRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemovePermissionRequested(&self, token: i64) -> windows_core::Result<()>;
    fn ProcessFailed(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ProcessFailedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveProcessFailed(&self, token: i64) -> windows_core::Result<()>;
    fn WebMessageReceived(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()>;
    fn NewWindowRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2NewWindowRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNewWindowRequested(&self, token: i64) -> windows_core::Result<()>;
    fn DocumentTitleChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDocumentTitleChanged(&self, token: i64) -> windows_core::Result<()>;
    fn ContainsFullScreenElementChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveContainsFullScreenElementChanged(&self, token: i64) -> windows_core::Result<()>;
    fn WebResourceRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebResourceRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWebResourceRequested(&self, token: i64) -> windows_core::Result<()>;
    fn WindowCloseRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWindowCloseRequested(&self, token: i64) -> windows_core::Result<()>;
    fn Navigate(&self, uri: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn NavigateToString(&self, htmlContent: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn AddScriptToExecuteOnDocumentCreatedAsync(
        &self,
        javaScript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
    fn RemoveScriptToExecuteOnDocumentCreated(
        &self,
        id: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn ExecuteScriptAsync(
        &self,
        javaScript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
    fn CapturePreviewAsync(
        &self,
        imageFormat: CoreWebView2CapturePreviewImageFormat,
        imageStream: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
    fn Reload(&self) -> windows_core::Result<()>;
    fn PostWebMessageAsJson(
        &self,
        webMessageAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn PostWebMessageAsString(
        &self,
        webMessageAsString: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn CallDevToolsProtocolMethodAsync(
        &self,
        methodName: &windows_core::HSTRING,
        parametersAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
    fn GoBack(&self) -> windows_core::Result<()>;
    fn GoForward(&self) -> windows_core::Result<()>;
    fn GetDevToolsProtocolEventReceiver(
        &self,
        eventName: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2DevToolsProtocolEventReceiver>;
    fn Stop(&self) -> windows_core::Result<()>;
    fn AddHostObjectToScript(
        &self,
        name: &windows_core::HSTRING,
        rawObject: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn RemoveHostObjectFromScript(&self, name: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn OpenDevToolsWindow(&self) -> windows_core::Result<()>;
    fn AddWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        ResourceContext: CoreWebView2WebResourceContext,
    ) -> windows_core::Result<()>;
    fn RemoveWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        ResourceContext: CoreWebView2WebResourceContext,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_Vtbl {
    pub const fn new<Identity: ICoreWebView2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Settings<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::Settings(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Source<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BrowserProcessId<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::BrowserProcessId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanGoBack<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::CanGoBack(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanGoForward<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::CanGoForward(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DocumentTitle<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::DocumentTitle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContainsFullScreenElement<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ContainsFullScreenElement(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationStarting<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::NavigationStarting(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationStarting<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveNavigationStarting(this, token).into()
            }
        }
        unsafe extern "system" fn ContentLoading<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ContentLoading(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveContentLoading<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveContentLoading(this, token).into()
            }
        }
        unsafe extern "system" fn SourceChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::SourceChanged(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveSourceChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveSourceChanged(this, token).into()
            }
        }
        unsafe extern "system" fn HistoryChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::HistoryChanged(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveHistoryChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveHistoryChanged(this, token).into()
            }
        }
        unsafe extern "system" fn NavigationCompleted<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::NavigationCompleted(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationCompleted<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveNavigationCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn FrameNavigationStarting<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::FrameNavigationStarting(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveFrameNavigationStarting<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveFrameNavigationStarting(this, token).into()
            }
        }
        unsafe extern "system" fn FrameNavigationCompleted<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::FrameNavigationCompleted(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveFrameNavigationCompleted<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveFrameNavigationCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn ScriptDialogOpening<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ScriptDialogOpening(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveScriptDialogOpening<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveScriptDialogOpening(this, token).into()
            }
        }
        unsafe extern "system" fn PermissionRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::PermissionRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovePermissionRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemovePermissionRequested(this, token).into()
            }
        }
        unsafe extern "system" fn ProcessFailed<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ProcessFailed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveProcessFailed<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveProcessFailed(this, token).into()
            }
        }
        unsafe extern "system" fn WebMessageReceived<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::WebMessageReceived(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWebMessageReceived<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveWebMessageReceived(this, token).into()
            }
        }
        unsafe extern "system" fn NewWindowRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::NewWindowRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNewWindowRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveNewWindowRequested(this, token).into()
            }
        }
        unsafe extern "system" fn DocumentTitleChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::DocumentTitleChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDocumentTitleChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveDocumentTitleChanged(this, token).into()
            }
        }
        unsafe extern "system" fn ContainsFullScreenElementChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ContainsFullScreenElementChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveContainsFullScreenElementChanged<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveContainsFullScreenElementChanged(this, token).into()
            }
        }
        unsafe extern "system" fn WebResourceRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::WebResourceRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWebResourceRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveWebResourceRequested(this, token).into()
            }
        }
        unsafe extern "system" fn WindowCloseRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::WindowCloseRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWindowCloseRequested<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveWindowCloseRequested(this, token).into()
            }
        }
        unsafe extern "system" fn Navigate<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::Navigate(this, core::mem::transmute(&uri)).into()
            }
        }
        unsafe extern "system" fn NavigateToString<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htmlcontent: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::NavigateToString(this, core::mem::transmute(&htmlcontent))
                    .into()
            }
        }
        unsafe extern "system" fn AddScriptToExecuteOnDocumentCreatedAsync<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            javascript: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::AddScriptToExecuteOnDocumentCreatedAsync(
                    this,
                    core::mem::transmute(&javascript),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveScriptToExecuteOnDocumentCreated<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            id: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveScriptToExecuteOnDocumentCreated(
                    this,
                    core::mem::transmute(&id),
                )
                .into()
            }
        }
        unsafe extern "system" fn ExecuteScriptAsync<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            javascript: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::ExecuteScriptAsync(
                    this,
                    core::mem::transmute(&javascript),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CapturePreviewAsync<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            imageformat: CoreWebView2CapturePreviewImageFormat,
            imagestream: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::CapturePreviewAsync(
                    this,
                    imageformat,
                    core::mem::transmute_copy(&imagestream),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Reload<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::Reload(this).into()
            }
        }
        unsafe extern "system" fn PostWebMessageAsJson<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            webmessageasjson: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::PostWebMessageAsJson(
                    this,
                    core::mem::transmute(&webmessageasjson),
                )
                .into()
            }
        }
        unsafe extern "system" fn PostWebMessageAsString<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            webmessageasstring: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::PostWebMessageAsString(
                    this,
                    core::mem::transmute(&webmessageasstring),
                )
                .into()
            }
        }
        unsafe extern "system" fn CallDevToolsProtocolMethodAsync<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            methodname: *mut core::ffi::c_void,
            parametersasjson: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::CallDevToolsProtocolMethodAsync(
                    this,
                    core::mem::transmute(&methodname),
                    core::mem::transmute(&parametersasjson),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GoBack<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::GoBack(this).into()
            }
        }
        unsafe extern "system" fn GoForward<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::GoForward(this).into()
            }
        }
        unsafe extern "system" fn GetDevToolsProtocolEventReceiver<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            eventname: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_Impl::GetDevToolsProtocolEventReceiver(
                    this,
                    core::mem::transmute(&eventname),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Stop<Identity: ICoreWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::Stop(this).into()
            }
        }
        unsafe extern "system" fn AddHostObjectToScript<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            rawobject: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::AddHostObjectToScript(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute_copy(&rawobject),
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveHostObjectFromScript<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveHostObjectFromScript(this, core::mem::transmute(&name))
                    .into()
            }
        }
        unsafe extern "system" fn OpenDevToolsWindow<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::OpenDevToolsWindow(this).into()
            }
        }
        unsafe extern "system" fn AddWebResourceRequestedFilter<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            resourcecontext: CoreWebView2WebResourceContext,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::AddWebResourceRequestedFilter(
                    this,
                    core::mem::transmute(&uri),
                    resourcecontext,
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveWebResourceRequestedFilter<
            Identity: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            resourcecontext: CoreWebView2WebResourceContext,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Impl::RemoveWebResourceRequestedFilter(
                    this,
                    core::mem::transmute(&uri),
                    resourcecontext,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2, OFFSET>(),
            Settings: Settings::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            BrowserProcessId: BrowserProcessId::<Identity, OFFSET>,
            CanGoBack: CanGoBack::<Identity, OFFSET>,
            CanGoForward: CanGoForward::<Identity, OFFSET>,
            DocumentTitle: DocumentTitle::<Identity, OFFSET>,
            ContainsFullScreenElement: ContainsFullScreenElement::<Identity, OFFSET>,
            NavigationStarting: NavigationStarting::<Identity, OFFSET>,
            RemoveNavigationStarting: RemoveNavigationStarting::<Identity, OFFSET>,
            ContentLoading: ContentLoading::<Identity, OFFSET>,
            RemoveContentLoading: RemoveContentLoading::<Identity, OFFSET>,
            SourceChanged: SourceChanged::<Identity, OFFSET>,
            RemoveSourceChanged: RemoveSourceChanged::<Identity, OFFSET>,
            HistoryChanged: HistoryChanged::<Identity, OFFSET>,
            RemoveHistoryChanged: RemoveHistoryChanged::<Identity, OFFSET>,
            NavigationCompleted: NavigationCompleted::<Identity, OFFSET>,
            RemoveNavigationCompleted: RemoveNavigationCompleted::<Identity, OFFSET>,
            FrameNavigationStarting: FrameNavigationStarting::<Identity, OFFSET>,
            RemoveFrameNavigationStarting: RemoveFrameNavigationStarting::<Identity, OFFSET>,
            FrameNavigationCompleted: FrameNavigationCompleted::<Identity, OFFSET>,
            RemoveFrameNavigationCompleted: RemoveFrameNavigationCompleted::<Identity, OFFSET>,
            ScriptDialogOpening: ScriptDialogOpening::<Identity, OFFSET>,
            RemoveScriptDialogOpening: RemoveScriptDialogOpening::<Identity, OFFSET>,
            PermissionRequested: PermissionRequested::<Identity, OFFSET>,
            RemovePermissionRequested: RemovePermissionRequested::<Identity, OFFSET>,
            ProcessFailed: ProcessFailed::<Identity, OFFSET>,
            RemoveProcessFailed: RemoveProcessFailed::<Identity, OFFSET>,
            WebMessageReceived: WebMessageReceived::<Identity, OFFSET>,
            RemoveWebMessageReceived: RemoveWebMessageReceived::<Identity, OFFSET>,
            NewWindowRequested: NewWindowRequested::<Identity, OFFSET>,
            RemoveNewWindowRequested: RemoveNewWindowRequested::<Identity, OFFSET>,
            DocumentTitleChanged: DocumentTitleChanged::<Identity, OFFSET>,
            RemoveDocumentTitleChanged: RemoveDocumentTitleChanged::<Identity, OFFSET>,
            ContainsFullScreenElementChanged: ContainsFullScreenElementChanged::<Identity, OFFSET>,
            RemoveContainsFullScreenElementChanged: RemoveContainsFullScreenElementChanged::<
                Identity,
                OFFSET,
            >,
            WebResourceRequested: WebResourceRequested::<Identity, OFFSET>,
            RemoveWebResourceRequested: RemoveWebResourceRequested::<Identity, OFFSET>,
            WindowCloseRequested: WindowCloseRequested::<Identity, OFFSET>,
            RemoveWindowCloseRequested: RemoveWindowCloseRequested::<Identity, OFFSET>,
            Navigate: Navigate::<Identity, OFFSET>,
            NavigateToString: NavigateToString::<Identity, OFFSET>,
            AddScriptToExecuteOnDocumentCreatedAsync: AddScriptToExecuteOnDocumentCreatedAsync::<
                Identity,
                OFFSET,
            >,
            RemoveScriptToExecuteOnDocumentCreated: RemoveScriptToExecuteOnDocumentCreated::<
                Identity,
                OFFSET,
            >,
            ExecuteScriptAsync: ExecuteScriptAsync::<Identity, OFFSET>,
            CapturePreviewAsync: CapturePreviewAsync::<Identity, OFFSET>,
            Reload: Reload::<Identity, OFFSET>,
            PostWebMessageAsJson: PostWebMessageAsJson::<Identity, OFFSET>,
            PostWebMessageAsString: PostWebMessageAsString::<Identity, OFFSET>,
            CallDevToolsProtocolMethodAsync: CallDevToolsProtocolMethodAsync::<Identity, OFFSET>,
            GoBack: GoBack::<Identity, OFFSET>,
            GoForward: GoForward::<Identity, OFFSET>,
            GetDevToolsProtocolEventReceiver: GetDevToolsProtocolEventReceiver::<Identity, OFFSET>,
            Stop: Stop::<Identity, OFFSET>,
            AddHostObjectToScript: AddHostObjectToScript::<Identity, OFFSET>,
            RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity, OFFSET>,
            OpenDevToolsWindow: OpenDevToolsWindow::<Identity, OFFSET>,
            AddWebResourceRequestedFilter: AddWebResourceRequestedFilter::<Identity, OFFSET>,
            RemoveWebResourceRequestedFilter: RemoveWebResourceRequestedFilter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Settings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BrowserProcessId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub CanGoBack:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanGoForward:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DocumentTitle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContainsFullScreenElement:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub NavigationStarting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNavigationStarting:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ContentLoading: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveContentLoading:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SourceChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveSourceChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub HistoryChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveHistoryChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NavigationCompleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNavigationCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub FrameNavigationStarting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveFrameNavigationStarting:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub FrameNavigationCompleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveFrameNavigationCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ScriptDialogOpening: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveScriptDialogOpening:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub PermissionRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemovePermissionRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ProcessFailed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveProcessFailed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub WebMessageReceived: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveWebMessageReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NewWindowRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNewWindowRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DocumentTitleChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDocumentTitleChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ContainsFullScreenElementChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveContainsFullScreenElementChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub WebResourceRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveWebResourceRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub WindowCloseRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveWindowCloseRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Navigate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NavigateToString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AddScriptToExecuteOnDocumentCreatedAsync:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub RemoveScriptToExecuteOnDocumentCreated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub ExecuteScriptAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CapturePreviewAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2CapturePreviewImageFormat,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Reload: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub PostWebMessageAsJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PostWebMessageAsString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CallDevToolsProtocolMethodAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GoBack: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GoForward: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GetDevToolsProtocolEventReceiver: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub AddHostObjectToScript: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveHostObjectFromScript: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenDevToolsWindow:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub AddWebResourceRequestedFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2WebResourceContext,
    ) -> windows_core::HRESULT,
    pub RemoveWebResourceRequestedFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2WebResourceContext,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2AcceleratorKeyPressedEventArgs,
    ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl,
    0x41a56100_92a5_59d1_9e71_9222e33ae38b
);
impl windows_core::RuntimeType for ICoreWebView2AcceleratorKeyPressedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2AcceleratorKeyPressedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs";
}
pub trait ICoreWebView2AcceleratorKeyPressedEventArgs_Impl: windows_core::IUnknownImpl {
    fn KeyEventKind(&self) -> windows_core::Result<CoreWebView2KeyEventKind>;
    fn VirtualKey(&self) -> windows_core::Result<u32>;
    fn KeyEventLParam(&self) -> windows_core::Result<i32>;
    fn PhysicalKeyStatus(&self) -> windows_core::Result<CoreWebView2PhysicalKeyStatus>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn KeyEventKind<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2KeyEventKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::KeyEventKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VirtualKey<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::VirtualKey(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyEventLParam<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::KeyEventLParam(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PhysicalKeyStatus<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PhysicalKeyStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::PhysicalKeyStatus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2AcceleratorKeyPressedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2AcceleratorKeyPressedEventArgs,
                OFFSET,
            >(),
            KeyEventKind: KeyEventKind::<Identity, OFFSET>,
            VirtualKey: VirtualKey::<Identity, OFFSET>,
            KeyEventLParam: KeyEventLParam::<Identity, OFFSET>,
            PhysicalKeyStatus: PhysicalKeyStatus::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2AcceleratorKeyPressedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeyEventKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2KeyEventKind,
    ) -> windows_core::HRESULT,
    pub VirtualKey:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub KeyEventLParam:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub PhysicalKeyStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PhysicalKeyStatus,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2AcceleratorKeyPressedEventArgs2,
    ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl,
    0x4d03aa18_806d_5f10_9ad8_cf5d327a58fb
);
impl windows_core::RuntimeType for ICoreWebView2AcceleratorKeyPressedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2AcceleratorKeyPressedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs2";
}
pub trait ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn IsBrowserAcceleratorKeyEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsBrowserAcceleratorKeyEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsBrowserAcceleratorKeyEnabled<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl:: IsBrowserAcceleratorKeyEnabled ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ;  windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn SetIsBrowserAcceleratorKeyEnabled<
            Identity: ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2AcceleratorKeyPressedEventArgs2_Impl:: SetIsBrowserAcceleratorKeyEnabled ( this , value , ) . into ( )
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2AcceleratorKeyPressedEventArgs2,
                OFFSET,
            >(),
            IsBrowserAcceleratorKeyEnabled: IsBrowserAcceleratorKeyEnabled::<Identity, OFFSET>,
            SetIsBrowserAcceleratorKeyEnabled: SetIsBrowserAcceleratorKeyEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2AcceleratorKeyPressedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2AcceleratorKeyPressedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsBrowserAcceleratorKeyEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsBrowserAcceleratorKeyEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2BasicAuthenticationRequestedEventArgs,
    ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl,
    0x4b16330c_4ca5_555e_af21_164334405f63
);
impl windows_core::RuntimeType for ICoreWebView2BasicAuthenticationRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2BasicAuthenticationRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationRequestedEventArgs";
}
pub trait ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Challenge(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Response(&self) -> windows_core::Result<CoreWebView2BasicAuthenticationResponse>;
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Challenge<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Challenge(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Response<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Response(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::SetCancel(this, value)
                    .into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2BasicAuthenticationRequestedEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            Challenge: Challenge::<Identity, OFFSET>,
            Response: Response::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2BasicAuthenticationRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BasicAuthenticationRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Challenge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Response: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2BasicAuthenticationResponse,
    ICoreWebView2BasicAuthenticationResponse_Vtbl,
    0x08df33b9_6e38_5962_9ffd_caab3c30fbc1
);
impl windows_core::RuntimeType for ICoreWebView2BasicAuthenticationResponse {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2BasicAuthenticationResponse {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2BasicAuthenticationResponse";
}
pub trait ICoreWebView2BasicAuthenticationResponse_Impl: windows_core::IUnknownImpl {
    fn UserName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetUserName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Password(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPassword(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2BasicAuthenticationResponse_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn UserName<
            Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationResponse_Impl::UserName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUserName<
            Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2BasicAuthenticationResponse_Impl::SetUserName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Password<
            Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BasicAuthenticationResponse_Impl::Password(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPassword<
            Identity: ICoreWebView2BasicAuthenticationResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2BasicAuthenticationResponse_Impl::SetPassword(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2BasicAuthenticationResponse,
                OFFSET,
            >(),
            UserName: UserName::<Identity, OFFSET>,
            SetUserName: SetUserName::<Identity, OFFSET>,
            Password: Password::<Identity, OFFSET>,
            SetPassword: SetPassword::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2BasicAuthenticationResponse as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BasicAuthenticationResponse_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UserName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetUserName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Password: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPassword: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2BrowserExtension,
    ICoreWebView2BrowserExtension_Vtbl,
    0xbf991443_ee4f_57b8_bf2c_81cd6dbe1153
);
impl windows_core::RuntimeType for ICoreWebView2BrowserExtension {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2BrowserExtension {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2BrowserExtension";
}
pub trait ICoreWebView2BrowserExtension_Impl: windows_core::IUnknownImpl {
    fn Id(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn RemoveAsync(&self) -> windows_core::Result<windows_future::IAsyncAction>;
    fn EnableAsync(&self, IsEnabled: bool) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl ICoreWebView2BrowserExtension_Vtbl {
    pub const fn new<Identity: ICoreWebView2BrowserExtension_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Id<
            Identity: ICoreWebView2BrowserExtension_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserExtension_Impl::Id(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Name<
            Identity: ICoreWebView2BrowserExtension_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserExtension_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEnabled<
            Identity: ICoreWebView2BrowserExtension_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserExtension_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAsync<
            Identity: ICoreWebView2BrowserExtension_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserExtension_Impl::RemoveAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableAsync<
            Identity: ICoreWebView2BrowserExtension_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            isenabled: bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserExtension_Impl::EnableAsync(this, isenabled) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2BrowserExtension,
                OFFSET,
            >(),
            Id: Id::<Identity, OFFSET>,
            Name: Name::<Identity, OFFSET>,
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            RemoveAsync: RemoveAsync::<Identity, OFFSET>,
            EnableAsync: EnableAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2BrowserExtension as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BrowserExtension_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Id: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub RemoveAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2BrowserProcessExitedEventArgs,
    ICoreWebView2BrowserProcessExitedEventArgs_Vtbl,
    0x79963f77_1484_5a46_b91f_dfc5c1a0ce14
);
impl windows_core::RuntimeType for ICoreWebView2BrowserProcessExitedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2BrowserProcessExitedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2BrowserProcessExitedEventArgs";
}
pub trait ICoreWebView2BrowserProcessExitedEventArgs_Impl: windows_core::IUnknownImpl {
    fn BrowserProcessExitKind(&self) -> windows_core::Result<CoreWebView2BrowserProcessExitKind>;
    fn BrowserProcessId(&self) -> windows_core::Result<u32>;
}
impl ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn BrowserProcessExitKind<
            Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2BrowserProcessExitKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserProcessExitedEventArgs_Impl::BrowserProcessExitKind(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BrowserProcessId<
            Identity: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2BrowserProcessExitedEventArgs_Impl::BrowserProcessId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2BrowserProcessExitedEventArgs,
                OFFSET,
            >(),
            BrowserProcessExitKind: BrowserProcessExitKind::<Identity, OFFSET>,
            BrowserProcessId: BrowserProcessId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2BrowserProcessExitedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BrowserProcessExitKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2BrowserProcessExitKind,
    ) -> windows_core::HRESULT,
    pub BrowserProcessId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Certificate,
    ICoreWebView2Certificate_Vtbl,
    0x414a3b75_1bc1_55e1_9926_268c0a3462c7
);
impl windows_core::RuntimeType for ICoreWebView2Certificate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Certificate {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Certificate";
}
pub trait ICoreWebView2Certificate_Impl: windows_core::IUnknownImpl {
    fn Subject(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Issuer(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ValidFrom(&self) -> windows_core::Result<f64>;
    fn ValidTo(&self) -> windows_core::Result<f64>;
    fn DerEncodedSerialNumber(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DisplayName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn PemEncodedIssuerCertificateChain(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>>;
    fn ToPemEncoding(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2Certificate_Vtbl {
    pub const fn new<Identity: ICoreWebView2Certificate_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Subject<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::Subject(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Issuer<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::Issuer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValidFrom<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::ValidFrom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValidTo<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::ValidTo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DerEncodedSerialNumber<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::DerEncodedSerialNumber(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DisplayName<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::DisplayName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PemEncodedIssuerCertificateChain<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::PemEncodedIssuerCertificateChain(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToPemEncoding<
            Identity: ICoreWebView2Certificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Certificate_Impl::ToPemEncoding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Certificate,
                OFFSET,
            >(),
            Subject: Subject::<Identity, OFFSET>,
            Issuer: Issuer::<Identity, OFFSET>,
            ValidFrom: ValidFrom::<Identity, OFFSET>,
            ValidTo: ValidTo::<Identity, OFFSET>,
            DerEncodedSerialNumber: DerEncodedSerialNumber::<Identity, OFFSET>,
            DisplayName: DisplayName::<Identity, OFFSET>,
            PemEncodedIssuerCertificateChain: PemEncodedIssuerCertificateChain::<Identity, OFFSET>,
            ToPemEncoding: ToPemEncoding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Certificate as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Certificate_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Subject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Issuer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValidFrom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ValidTo:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub DerEncodedSerialNumber: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DisplayName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PemEncodedIssuerCertificateChain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToPemEncoding: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ClientCertificate,
    ICoreWebView2ClientCertificate_Vtbl,
    0x091b39f2_68df_52b4_8fb0_fd3561af41f2
);
impl windows_core::RuntimeType for ICoreWebView2ClientCertificate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ClientCertificate {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificate";
}
pub trait ICoreWebView2ClientCertificate_Impl: windows_core::IUnknownImpl {
    fn Subject(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Issuer(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ValidFrom(&self) -> windows_core::Result<f64>;
    fn ValidTo(&self) -> windows_core::Result<f64>;
    fn DerEncodedSerialNumber(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DisplayName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn PemEncodedIssuerCertificateChain(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>>;
    fn Kind(&self) -> windows_core::Result<CoreWebView2ClientCertificateKind>;
    fn ToPemEncoding(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2ClientCertificate_Vtbl {
    pub const fn new<Identity: ICoreWebView2ClientCertificate_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Subject<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::Subject(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Issuer<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::Issuer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValidFrom<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::ValidFrom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValidTo<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::ValidTo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DerEncodedSerialNumber<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::DerEncodedSerialNumber(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DisplayName<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::DisplayName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PemEncodedIssuerCertificateChain<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::PemEncodedIssuerCertificateChain(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Kind<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ClientCertificateKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToPemEncoding<
            Identity: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificate_Impl::ToPemEncoding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ClientCertificate,
                OFFSET,
            >(),
            Subject: Subject::<Identity, OFFSET>,
            Issuer: Issuer::<Identity, OFFSET>,
            ValidFrom: ValidFrom::<Identity, OFFSET>,
            ValidTo: ValidTo::<Identity, OFFSET>,
            DerEncodedSerialNumber: DerEncodedSerialNumber::<Identity, OFFSET>,
            DisplayName: DisplayName::<Identity, OFFSET>,
            PemEncodedIssuerCertificateChain: PemEncodedIssuerCertificateChain::<Identity, OFFSET>,
            Kind: Kind::<Identity, OFFSET>,
            ToPemEncoding: ToPemEncoding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ClientCertificate as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificate_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Subject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Issuer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValidFrom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ValidTo:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub DerEncodedSerialNumber: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DisplayName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PemEncodedIssuerCertificateChain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ClientCertificateKind,
    ) -> windows_core::HRESULT,
    pub ToPemEncoding: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ClientCertificateRequestedEventArgs,
    ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl,
    0x93287b55_31f9_55a0_b68b_d9841d7e1bf4
);
impl windows_core::RuntimeType for ICoreWebView2ClientCertificateRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ClientCertificateRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ClientCertificateRequestedEventArgs";
}
pub trait ICoreWebView2ClientCertificateRequestedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn Host(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Port(&self) -> windows_core::Result<i32>;
    fn IsProxy(&self) -> windows_core::Result<bool>;
    fn AllowedCertificateAuthorities(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::HSTRING>>;
    fn MutuallyTrustedCertificates(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2ClientCertificate>>;
    fn SelectedCertificate(&self) -> windows_core::Result<CoreWebView2ClientCertificate>;
    fn SetSelectedCertificate(
        &self,
        value: windows_core::Ref<CoreWebView2ClientCertificate>,
    ) -> windows_core::Result<()>;
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Host<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Host(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Port<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Port(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsProxy<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::IsProxy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AllowedCertificateAuthorities<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl:: AllowedCertificateAuthorities ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn MutuallyTrustedCertificates<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl:: MutuallyTrustedCertificates ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn SelectedCertificate<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SelectedCertificate(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectedCertificate<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SetSelectedCertificate(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ClientCertificateRequestedEventArgs_Impl::SetHandled(this, value)
                    .into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ClientCertificateRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ClientCertificateRequestedEventArgs,
                OFFSET,
            >(),
            Host: Host::<Identity, OFFSET>,
            Port: Port::<Identity, OFFSET>,
            IsProxy: IsProxy::<Identity, OFFSET>,
            AllowedCertificateAuthorities: AllowedCertificateAuthorities::<Identity, OFFSET>,
            MutuallyTrustedCertificates: MutuallyTrustedCertificates::<Identity, OFFSET>,
            SelectedCertificate: SelectedCertificate::<Identity, OFFSET>,
            SetSelectedCertificate: SetSelectedCertificate::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ClientCertificateRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Host: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Port: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub IsProxy:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub AllowedCertificateAuthorities: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MutuallyTrustedCertificates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectedCertificate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSelectedCertificate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionController,
    ICoreWebView2CompositionController_Vtbl,
    0x31bbb153_11b2_58e8_9beb_69f5c8e14420
);
impl windows_core::RuntimeType for ICoreWebView2CompositionController {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionController {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController";
}
pub trait ICoreWebView2CompositionController_Impl: windows_core::IUnknownImpl {
    fn RootVisualTarget(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetRootVisualTarget(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn CursorChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2CompositionController,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCursorChanged(&self, token: i64) -> windows_core::Result<()>;
    fn SendMouseInput(
        &self,
        eventKind: CoreWebView2MouseEventKind,
        virtualKeys: CoreWebView2MouseEventVirtualKeys,
        mouseData: u32,
        point: &windows::Foundation::Point,
    ) -> windows_core::Result<()>;
    fn SendPointerInput(
        &self,
        eventKind: CoreWebView2PointerEventKind,
        pointerInfo: windows_core::Ref<CoreWebView2PointerInfo>,
    ) -> windows_core::Result<()>;
    fn Cursor(&self) -> windows_core::Result<windows::UI::Core::CoreCursor>;
    fn DragEnter(
        &self,
        dragInfo: windows_core::Ref<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
        dragUIOverride: windows_core::Ref<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride,
        >,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>;
    fn DragOver(
        &self,
        dragInfo: windows_core::Ref<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
        dragUIOverride: windows_core::Ref<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride,
        >,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>;
    fn Drop(
        &self,
        dragInfo: windows_core::Ref<
            windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo,
        >,
    ) -> windows_core::Result<windows::ApplicationModel::DataTransfer::DataPackageOperation>;
}
impl ICoreWebView2CompositionController_Vtbl {
    pub const fn new<Identity: ICoreWebView2CompositionController_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn RootVisualTarget<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::RootVisualTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRootVisualTarget<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController_Impl::SetRootVisualTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn CursorChanged<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::CursorChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCursorChanged<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController_Impl::RemoveCursorChanged(this, token).into()
            }
        }
        unsafe extern "system" fn SendMouseInput<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            eventkind: CoreWebView2MouseEventKind,
            virtualkeys: CoreWebView2MouseEventVirtualKeys,
            mousedata: u32,
            point: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController_Impl::SendMouseInput(
                    this,
                    eventkind,
                    virtualkeys,
                    mousedata,
                    core::mem::transmute(&point),
                )
                .into()
            }
        }
        unsafe extern "system" fn SendPointerInput<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            eventkind: CoreWebView2PointerEventKind,
            pointerinfo: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController_Impl::SendPointerInput(
                    this,
                    eventkind,
                    core::mem::transmute_copy(&pointerinfo),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cursor<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::Cursor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DragEnter<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            draginfo: *mut core::ffi::c_void,
            draguioverride: *mut core::ffi::c_void,
            result__: *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::DragEnter(
                    this,
                    core::mem::transmute_copy(&draginfo),
                    core::mem::transmute_copy(&draguioverride),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DragOver<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            draginfo: *mut core::ffi::c_void,
            draguioverride: *mut core::ffi::c_void,
            result__: *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::DragOver(
                    this,
                    core::mem::transmute_copy(&draginfo),
                    core::mem::transmute_copy(&draguioverride),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Drop<
            Identity: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            draginfo: *mut core::ffi::c_void,
            result__: *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController_Impl::Drop(
                    this,
                    core::mem::transmute_copy(&draginfo),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionController,
                OFFSET,
            >(),
            RootVisualTarget: RootVisualTarget::<Identity, OFFSET>,
            SetRootVisualTarget: SetRootVisualTarget::<Identity, OFFSET>,
            CursorChanged: CursorChanged::<Identity, OFFSET>,
            RemoveCursorChanged: RemoveCursorChanged::<Identity, OFFSET>,
            SendMouseInput: SendMouseInput::<Identity, OFFSET>,
            SendPointerInput: SendPointerInput::<Identity, OFFSET>,
            Cursor: Cursor::<Identity, OFFSET>,
            DragEnter: DragEnter::<Identity, OFFSET>,
            DragOver: DragOver::<Identity, OFFSET>,
            Drop: Drop::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RootVisualTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetRootVisualTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CursorChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCursorChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SendMouseInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2MouseEventKind,
        CoreWebView2MouseEventVirtualKeys,
        u32,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SendPointerInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PointerEventKind,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cursor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DragEnter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> windows_core::HRESULT,
    pub DragOver: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> windows_core::HRESULT,
    pub Drop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionController2,
    ICoreWebView2CompositionController2_Vtbl,
    0x8cef61b9_fa55_547d_aae6_7bcaed4249a2
);
impl windows_core::RuntimeType for ICoreWebView2CompositionController2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionController2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController2";
}
pub trait ICoreWebView2CompositionController2_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2CompositionController2_Vtbl {
    pub const fn new<Identity: ICoreWebView2CompositionController2_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionController2,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionController3,
    ICoreWebView2CompositionController3_Vtbl,
    0xbbbecdcf_0f03_50f0_8f85_9cbf6c9bbe10
);
impl windows_core::RuntimeType for ICoreWebView2CompositionController3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionController3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController3";
}
pub trait ICoreWebView2CompositionController3_Impl: windows_core::IUnknownImpl {
    fn DragLeave(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2CompositionController3_Vtbl {
    pub const fn new<Identity: ICoreWebView2CompositionController3_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DragLeave<
            Identity: ICoreWebView2CompositionController3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController3_Impl::DragLeave(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionController3,
                OFFSET,
            >(),
            DragLeave: DragLeave::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DragLeave: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionController4,
    ICoreWebView2CompositionController4_Vtbl,
    0xc950cb84_2648_5ad5_badd_bfe659682fb6
);
impl windows_core::RuntimeType for ICoreWebView2CompositionController4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionController4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController4";
}
pub trait ICoreWebView2CompositionController4_Impl: windows_core::IUnknownImpl {
    fn NonClientRegionChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2CompositionController,
                CoreWebView2NonClientRegionChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNonClientRegionChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetNonClientRegionAtPoint(
        &self,
        point: &windows::Foundation::Point,
    ) -> windows_core::Result<CoreWebView2NonClientRegionKind>;
    fn QueryNonClientRegion(
        &self,
        Kind: CoreWebView2NonClientRegionKind,
    ) -> windows_core::Result<windows_collections::IVectorView<windows::Foundation::Rect>>;
}
impl ICoreWebView2CompositionController4_Vtbl {
    pub const fn new<Identity: ICoreWebView2CompositionController4_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn NonClientRegionChanged<
            Identity: ICoreWebView2CompositionController4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController4_Impl::NonClientRegionChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNonClientRegionChanged<
            Identity: ICoreWebView2CompositionController4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CompositionController4_Impl::RemoveNonClientRegionChanged(this, token)
                    .into()
            }
        }
        unsafe extern "system" fn GetNonClientRegionAtPoint<
            Identity: ICoreWebView2CompositionController4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            point: windows::Foundation::Point,
            result__: *mut CoreWebView2NonClientRegionKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController4_Impl::GetNonClientRegionAtPoint(
                    this,
                    core::mem::transmute(&point),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn QueryNonClientRegion<
            Identity: ICoreWebView2CompositionController4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            kind: CoreWebView2NonClientRegionKind,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CompositionController4_Impl::QueryNonClientRegion(this, kind) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionController4,
                OFFSET,
            >(),
            NonClientRegionChanged: NonClientRegionChanged::<Identity, OFFSET>,
            RemoveNonClientRegionChanged: RemoveNonClientRegionChanged::<Identity, OFFSET>,
            GetNonClientRegionAtPoint: GetNonClientRegionAtPoint::<Identity, OFFSET>,
            QueryNonClientRegion: QueryNonClientRegion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NonClientRegionChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNonClientRegionChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetNonClientRegionAtPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
        *mut CoreWebView2NonClientRegionKind,
    ) -> windows_core::HRESULT,
    pub QueryNonClientRegion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2NonClientRegionKind,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionControllerStatics,
    ICoreWebView2CompositionControllerStatics_Vtbl,
    0x4df0ab1f_7f2a_573b_b81a_b9b531224736
);
impl windows_core::RuntimeType for ICoreWebView2CompositionControllerStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionControllerStatics {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics";
}
pub trait ICoreWebView2CompositionControllerStatics_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2CompositionControllerStatics_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2CompositionControllerStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionControllerStatics,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionControllerStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionControllerStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2CompositionControllerStatics2_Manual,
    ICoreWebView2CompositionControllerStatics2_Manual_Vtbl,
    0x48a321e7_4f40_526e_837e_1eb0c477b69d
);
impl windows_core::RuntimeType for ICoreWebView2CompositionControllerStatics2_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CompositionControllerStatics2_Manual {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2CompositionControllerStatics2_Manual";
}
pub trait ICoreWebView2CompositionControllerStatics2_Manual_Impl:
    windows_core::IUnknownImpl
{
}
impl ICoreWebView2CompositionControllerStatics2_Manual_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2CompositionControllerStatics2_Manual_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CompositionControllerStatics2_Manual,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionControllerStatics2_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionControllerStatics2_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2ContentLoadingEventArgs,
    ICoreWebView2ContentLoadingEventArgs_Vtbl,
    0x6cf95373_946c_5dae_9b3e_0fe23d5aa29f
);
impl windows_core::RuntimeType for ICoreWebView2ContentLoadingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ContentLoadingEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgs";
}
pub trait ICoreWebView2ContentLoadingEventArgs_Impl: windows_core::IUnknownImpl {
    fn IsErrorPage(&self) -> windows_core::Result<bool>;
    fn NavigationId(&self) -> windows_core::Result<u64>;
}
impl ICoreWebView2ContentLoadingEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2ContentLoadingEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn IsErrorPage<
            Identity: ICoreWebView2ContentLoadingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContentLoadingEventArgs_Impl::IsErrorPage(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationId<
            Identity: ICoreWebView2ContentLoadingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContentLoadingEventArgs_Impl::NavigationId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ContentLoadingEventArgs,
                OFFSET,
            >(),
            IsErrorPage: IsErrorPage::<Identity, OFFSET>,
            NavigationId: NavigationId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ContentLoadingEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContentLoadingEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsErrorPage:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub NavigationId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ContextMenuItem,
    ICoreWebView2ContextMenuItem_Vtbl,
    0x2a65706f_941a_52cd_8651_a165586b0abf
);
impl windows_core::RuntimeType for ICoreWebView2ContextMenuItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ContextMenuItem {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuItem";
}
pub trait ICoreWebView2ContextMenuItem_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Label(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn CommandId(&self) -> windows_core::Result<i32>;
    fn ShortcutKeyDescription(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Icon(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream>;
    fn Kind(&self) -> windows_core::Result<CoreWebView2ContextMenuItemKind>;
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsChecked(&self) -> windows_core::Result<bool>;
    fn SetIsChecked(&self, value: bool) -> windows_core::Result<()>;
    fn Children(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2ContextMenuItem>>;
    fn CustomItemSelected(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2ContextMenuItem,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCustomItemSelected(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2ContextMenuItem_Vtbl {
    pub const fn new<Identity: ICoreWebView2ContextMenuItem_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Name<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Label<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::Label(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CommandId<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::CommandId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShortcutKeyDescription<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::ShortcutKeyDescription(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Icon<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::Icon(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Kind<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ContextMenuItemKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEnabled<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsEnabled<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ContextMenuItem_Impl::SetIsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsChecked<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::IsChecked(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsChecked<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ContextMenuItem_Impl::SetIsChecked(this, value).into()
            }
        }
        unsafe extern "system" fn Children<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CustomItemSelected<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuItem_Impl::CustomItemSelected(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCustomItemSelected<
            Identity: ICoreWebView2ContextMenuItem_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ContextMenuItem_Impl::RemoveCustomItemSelected(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ContextMenuItem,
                OFFSET,
            >(),
            Name: Name::<Identity, OFFSET>,
            Label: Label::<Identity, OFFSET>,
            CommandId: CommandId::<Identity, OFFSET>,
            ShortcutKeyDescription: ShortcutKeyDescription::<Identity, OFFSET>,
            Icon: Icon::<Identity, OFFSET>,
            Kind: Kind::<Identity, OFFSET>,
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            SetIsEnabled: SetIsEnabled::<Identity, OFFSET>,
            IsChecked: IsChecked::<Identity, OFFSET>,
            SetIsChecked: SetIsChecked::<Identity, OFFSET>,
            Children: Children::<Identity, OFFSET>,
            CustomItemSelected: CustomItemSelected::<Identity, OFFSET>,
            RemoveCustomItemSelected: RemoveCustomItemSelected::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ContextMenuItem as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContextMenuItem_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Label: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CommandId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ShortcutKeyDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Icon: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ContextMenuItemKind,
    ) -> windows_core::HRESULT,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsChecked:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsChecked:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CustomItemSelected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCustomItemSelected:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ContextMenuRequestedEventArgs,
    ICoreWebView2ContextMenuRequestedEventArgs_Vtbl,
    0xd77bdd8c_9b3e_596e_ae80_320c0df4ecbc
);
impl windows_core::RuntimeType for ICoreWebView2ContextMenuRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ContextMenuRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuRequestedEventArgs";
}
pub trait ICoreWebView2ContextMenuRequestedEventArgs_Impl: windows_core::IUnknownImpl {
    fn MenuItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2ContextMenuItem>>;
    fn ContextMenuTarget(&self) -> windows_core::Result<CoreWebView2ContextMenuTarget>;
    fn Location(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SelectedCommandId(&self) -> windows_core::Result<i32>;
    fn SetSelectedCommandId(&self, value: i32) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2ContextMenuRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn MenuItems<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::MenuItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContextMenuTarget<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::ContextMenuTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Location<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::Location(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectedCommandId<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::SelectedCommandId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectedCommandId<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ContextMenuRequestedEventArgs_Impl::SetSelectedCommandId(this, value)
                    .into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ContextMenuRequestedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2ContextMenuRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ContextMenuRequestedEventArgs,
                OFFSET,
            >(),
            MenuItems: MenuItems::<Identity, OFFSET>,
            ContextMenuTarget: ContextMenuTarget::<Identity, OFFSET>,
            Location: Location::<Identity, OFFSET>,
            SelectedCommandId: SelectedCommandId::<Identity, OFFSET>,
            SetSelectedCommandId: SetSelectedCommandId::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ContextMenuRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContextMenuRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MenuItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContextMenuTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Location: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SelectedCommandId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetSelectedCommandId:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ContextMenuTarget,
    ICoreWebView2ContextMenuTarget_Vtbl,
    0x41e24e6a_4612_5bd9_8e61_e9280615205e
);
impl windows_core::RuntimeType for ICoreWebView2ContextMenuTarget {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ContextMenuTarget {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ContextMenuTarget";
}
pub trait ICoreWebView2ContextMenuTarget_Impl: windows_core::IUnknownImpl {
    fn Kind(&self) -> windows_core::Result<CoreWebView2ContextMenuTargetKind>;
    fn IsEditable(&self) -> windows_core::Result<bool>;
    fn IsRequestedForMainFrame(&self) -> windows_core::Result<bool>;
    fn PageUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn FrameUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn HasLinkUri(&self) -> windows_core::Result<bool>;
    fn LinkUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn HasLinkText(&self) -> windows_core::Result<bool>;
    fn LinkText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn HasSourceUri(&self) -> windows_core::Result<bool>;
    fn SourceUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn HasSelection(&self) -> windows_core::Result<bool>;
    fn SelectionText(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2ContextMenuTarget_Vtbl {
    pub const fn new<Identity: ICoreWebView2ContextMenuTarget_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Kind<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ContextMenuTargetKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEditable<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::IsEditable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsRequestedForMainFrame<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::IsRequestedForMainFrame(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PageUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::PageUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FrameUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::FrameUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasLinkUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::HasLinkUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LinkUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::LinkUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasLinkText<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::HasLinkText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LinkText<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::LinkText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasSourceUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::HasSourceUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SourceUri<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::SourceUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasSelection<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::HasSelection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectionText<
            Identity: ICoreWebView2ContextMenuTarget_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ContextMenuTarget_Impl::SelectionText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ContextMenuTarget,
                OFFSET,
            >(),
            Kind: Kind::<Identity, OFFSET>,
            IsEditable: IsEditable::<Identity, OFFSET>,
            IsRequestedForMainFrame: IsRequestedForMainFrame::<Identity, OFFSET>,
            PageUri: PageUri::<Identity, OFFSET>,
            FrameUri: FrameUri::<Identity, OFFSET>,
            HasLinkUri: HasLinkUri::<Identity, OFFSET>,
            LinkUri: LinkUri::<Identity, OFFSET>,
            HasLinkText: HasLinkText::<Identity, OFFSET>,
            LinkText: LinkText::<Identity, OFFSET>,
            HasSourceUri: HasSourceUri::<Identity, OFFSET>,
            SourceUri: SourceUri::<Identity, OFFSET>,
            HasSelection: HasSelection::<Identity, OFFSET>,
            SelectionText: SelectionText::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ContextMenuTarget as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContextMenuTarget_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ContextMenuTargetKind,
    ) -> windows_core::HRESULT,
    pub IsEditable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsRequestedForMainFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub PageUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FrameUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasLinkUri:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LinkUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasLinkText:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LinkText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasSourceUri:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SourceUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasSelection:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SelectionText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Controller,
    ICoreWebView2Controller_Vtbl,
    0xa588121c_53bf_590e_80e5_29d729cbd743
);
impl windows_core::RuntimeType for ICoreWebView2Controller {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Controller {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Controller";
}
pub trait ICoreWebView2Controller_Impl: windows_core::IUnknownImpl {
    fn IsVisible(&self) -> windows_core::Result<bool>;
    fn SetIsVisible(&self, value: bool) -> windows_core::Result<()>;
    fn Bounds(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn SetBounds(&self, value: &windows::Foundation::Rect) -> windows_core::Result<()>;
    fn ZoomFactor(&self) -> windows_core::Result<f64>;
    fn SetZoomFactor(&self, value: f64) -> windows_core::Result<()>;
    fn ParentWindow(&self) -> windows_core::Result<CoreWebView2ControllerWindowReference>;
    fn SetParentWindow(
        &self,
        value: windows_core::Ref<CoreWebView2ControllerWindowReference>,
    ) -> windows_core::Result<()>;
    fn CoreWebView2(&self) -> windows_core::Result<CoreWebView2>;
    fn ZoomFactorChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveZoomFactorChanged(&self, token: i64) -> windows_core::Result<()>;
    fn MoveFocusRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2MoveFocusRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveMoveFocusRequested(&self, token: i64) -> windows_core::Result<()>;
    fn GotFocus(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()>;
    fn LostFocus(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()>;
    fn AcceleratorKeyPressed(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                CoreWebView2AcceleratorKeyPressedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAcceleratorKeyPressed(&self, token: i64) -> windows_core::Result<()>;
    fn SetBoundsAndZoomFactor(
        &self,
        Bounds: &windows::Foundation::Rect,
        ZoomFactor: f64,
    ) -> windows_core::Result<()>;
    fn MoveFocus(&self, reason: CoreWebView2MoveFocusReason) -> windows_core::Result<()>;
    fn NotifyParentWindowPositionChanged(&self) -> windows_core::Result<()>;
    fn Close(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2Controller_Vtbl {
    pub const fn new<Identity: ICoreWebView2Controller_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsVisible<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::IsVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVisible<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::SetIsVisible(this, value).into()
            }
        }
        unsafe extern "system" fn Bounds<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::Bounds(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBounds<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::SetBounds(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ZoomFactor<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::ZoomFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetZoomFactor<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::SetZoomFactor(this, value).into()
            }
        }
        unsafe extern "system" fn ParentWindow<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::ParentWindow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetParentWindow<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::SetParentWindow(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn CoreWebView2<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::CoreWebView2(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ZoomFactorChanged<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::ZoomFactorChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveZoomFactorChanged<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::RemoveZoomFactorChanged(this, token).into()
            }
        }
        unsafe extern "system" fn MoveFocusRequested<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::MoveFocusRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveMoveFocusRequested<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::RemoveMoveFocusRequested(this, token).into()
            }
        }
        unsafe extern "system" fn GotFocus<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::GotFocus(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveGotFocus<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::RemoveGotFocus(this, token).into()
            }
        }
        unsafe extern "system" fn LostFocus<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::LostFocus(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveLostFocus<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::RemoveLostFocus(this, token).into()
            }
        }
        unsafe extern "system" fn AcceleratorKeyPressed<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller_Impl::AcceleratorKeyPressed(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAcceleratorKeyPressed<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::RemoveAcceleratorKeyPressed(this, token).into()
            }
        }
        unsafe extern "system" fn SetBoundsAndZoomFactor<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            bounds: windows::Foundation::Rect,
            zoomfactor: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::SetBoundsAndZoomFactor(
                    this,
                    core::mem::transmute(&bounds),
                    zoomfactor,
                )
                .into()
            }
        }
        unsafe extern "system" fn MoveFocus<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            reason: CoreWebView2MoveFocusReason,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::MoveFocus(this, reason).into()
            }
        }
        unsafe extern "system" fn NotifyParentWindowPositionChanged<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::NotifyParentWindowPositionChanged(this).into()
            }
        }
        unsafe extern "system" fn Close<
            Identity: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller_Impl::Close(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Controller, OFFSET>(
            ),
            IsVisible: IsVisible::<Identity, OFFSET>,
            SetIsVisible: SetIsVisible::<Identity, OFFSET>,
            Bounds: Bounds::<Identity, OFFSET>,
            SetBounds: SetBounds::<Identity, OFFSET>,
            ZoomFactor: ZoomFactor::<Identity, OFFSET>,
            SetZoomFactor: SetZoomFactor::<Identity, OFFSET>,
            ParentWindow: ParentWindow::<Identity, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, OFFSET>,
            CoreWebView2: CoreWebView2::<Identity, OFFSET>,
            ZoomFactorChanged: ZoomFactorChanged::<Identity, OFFSET>,
            RemoveZoomFactorChanged: RemoveZoomFactorChanged::<Identity, OFFSET>,
            MoveFocusRequested: MoveFocusRequested::<Identity, OFFSET>,
            RemoveMoveFocusRequested: RemoveMoveFocusRequested::<Identity, OFFSET>,
            GotFocus: GotFocus::<Identity, OFFSET>,
            RemoveGotFocus: RemoveGotFocus::<Identity, OFFSET>,
            LostFocus: LostFocus::<Identity, OFFSET>,
            RemoveLostFocus: RemoveLostFocus::<Identity, OFFSET>,
            AcceleratorKeyPressed: AcceleratorKeyPressed::<Identity, OFFSET>,
            RemoveAcceleratorKeyPressed: RemoveAcceleratorKeyPressed::<Identity, OFFSET>,
            SetBoundsAndZoomFactor: SetBoundsAndZoomFactor::<Identity, OFFSET>,
            MoveFocus: MoveFocus::<Identity, OFFSET>,
            NotifyParentWindowPositionChanged: NotifyParentWindowPositionChanged::<Identity, OFFSET>,
            Close: Close::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Controller as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub Bounds: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub SetBounds: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub ZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ParentWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetParentWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CoreWebView2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ZoomFactorChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveZoomFactorChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub MoveFocusRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveMoveFocusRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GotFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveGotFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub LostFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveLostFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub AcceleratorKeyPressed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveAcceleratorKeyPressed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SetBoundsAndZoomFactor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
        f64,
    ) -> windows_core::HRESULT,
    pub MoveFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2MoveFocusReason,
    ) -> windows_core::HRESULT,
    pub NotifyParentWindowPositionChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Controller2,
    ICoreWebView2Controller2_Vtbl,
    0x0069c40b_2e8a_513f_9d9d_e0c2b64f7200
);
impl windows_core::RuntimeType for ICoreWebView2Controller2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Controller2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Controller2";
}
pub trait ICoreWebView2Controller2_Impl: windows_core::IUnknownImpl {
    fn DefaultBackgroundColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetDefaultBackgroundColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
}
impl ICoreWebView2Controller2_Vtbl {
    pub const fn new<Identity: ICoreWebView2Controller2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DefaultBackgroundColor<
            Identity: ICoreWebView2Controller2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller2_Impl::DefaultBackgroundColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultBackgroundColor<
            Identity: ICoreWebView2Controller2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller2_Impl::SetDefaultBackgroundColor(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Controller2,
                OFFSET,
            >(),
            DefaultBackgroundColor: DefaultBackgroundColor::<Identity, OFFSET>,
            SetDefaultBackgroundColor: SetDefaultBackgroundColor::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Controller2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DefaultBackgroundColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetDefaultBackgroundColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Controller3,
    ICoreWebView2Controller3_Vtbl,
    0xe5bae214_791a_5d13_9b76_a257d9fda2ac
);
impl windows_core::RuntimeType for ICoreWebView2Controller3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Controller3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Controller3";
}
pub trait ICoreWebView2Controller3_Impl: windows_core::IUnknownImpl {
    fn RasterizationScale(&self) -> windows_core::Result<f64>;
    fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()>;
    fn ShouldDetectMonitorScaleChanges(&self) -> windows_core::Result<bool>;
    fn SetShouldDetectMonitorScaleChanges(&self, value: bool) -> windows_core::Result<()>;
    fn BoundsMode(&self) -> windows_core::Result<CoreWebView2BoundsMode>;
    fn SetBoundsMode(&self, value: CoreWebView2BoundsMode) -> windows_core::Result<()>;
    fn RasterizationScaleChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Controller,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveRasterizationScaleChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2Controller3_Vtbl {
    pub const fn new<Identity: ICoreWebView2Controller3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn RasterizationScale<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller3_Impl::RasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRasterizationScale<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller3_Impl::SetRasterizationScale(this, value).into()
            }
        }
        unsafe extern "system" fn ShouldDetectMonitorScaleChanges<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller3_Impl::ShouldDetectMonitorScaleChanges(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldDetectMonitorScaleChanges<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller3_Impl::SetShouldDetectMonitorScaleChanges(this, value)
                    .into()
            }
        }
        unsafe extern "system" fn BoundsMode<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2BoundsMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller3_Impl::BoundsMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBoundsMode<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2BoundsMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller3_Impl::SetBoundsMode(this, value).into()
            }
        }
        unsafe extern "system" fn RasterizationScaleChanged<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller3_Impl::RasterizationScaleChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveRasterizationScaleChanged<
            Identity: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller3_Impl::RemoveRasterizationScaleChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Controller3,
                OFFSET,
            >(),
            RasterizationScale: RasterizationScale::<Identity, OFFSET>,
            SetRasterizationScale: SetRasterizationScale::<Identity, OFFSET>,
            ShouldDetectMonitorScaleChanges: ShouldDetectMonitorScaleChanges::<Identity, OFFSET>,
            SetShouldDetectMonitorScaleChanges: SetShouldDetectMonitorScaleChanges::<
                Identity,
                OFFSET,
            >,
            BoundsMode: BoundsMode::<Identity, OFFSET>,
            SetBoundsMode: SetBoundsMode::<Identity, OFFSET>,
            RasterizationScaleChanged: RasterizationScaleChanged::<Identity, OFFSET>,
            RemoveRasterizationScaleChanged: RemoveRasterizationScaleChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Controller3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetRasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ShouldDetectMonitorScaleChanges:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldDetectMonitorScaleChanges:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub BoundsMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2BoundsMode,
    ) -> windows_core::HRESULT,
    pub SetBoundsMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2BoundsMode,
    ) -> windows_core::HRESULT,
    pub RasterizationScaleChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveRasterizationScaleChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Controller4,
    ICoreWebView2Controller4_Vtbl,
    0x94e2862d_4638_54ba_92cf_e31a31499b78
);
impl windows_core::RuntimeType for ICoreWebView2Controller4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Controller4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Controller4";
}
pub trait ICoreWebView2Controller4_Impl: windows_core::IUnknownImpl {
    fn AllowExternalDrop(&self) -> windows_core::Result<bool>;
    fn SetAllowExternalDrop(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Controller4_Vtbl {
    pub const fn new<Identity: ICoreWebView2Controller4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AllowExternalDrop<
            Identity: ICoreWebView2Controller4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Controller4_Impl::AllowExternalDrop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAllowExternalDrop<
            Identity: ICoreWebView2Controller4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Controller4_Impl::SetAllowExternalDrop(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Controller4,
                OFFSET,
            >(),
            AllowExternalDrop: AllowExternalDrop::<Identity, OFFSET>,
            SetAllowExternalDrop: SetAllowExternalDrop::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Controller4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AllowExternalDrop:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAllowExternalDrop:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ControllerFactory,
    ICoreWebView2ControllerFactory_Vtbl,
    0x270b2c5b_c3a9_53d8_a5ca_262ea9ea62e8
);
impl windows_core::RuntimeType for ICoreWebView2ControllerFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ControllerFactory {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ControllerFactory";
}
pub trait ICoreWebView2ControllerFactory_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2ControllerFactory_Vtbl {
    pub const fn new<Identity: ICoreWebView2ControllerFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ControllerFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ControllerFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ControllerFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2ControllerOptions,
    ICoreWebView2ControllerOptions_Vtbl,
    0x3337e821_3606_5a0e_8e2f_0c1e57d743f7
);
impl windows_core::RuntimeType for ICoreWebView2ControllerOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ControllerOptions {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions";
}
pub trait ICoreWebView2ControllerOptions_Impl: windows_core::IUnknownImpl {
    fn ProfileName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetProfileName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn IsInPrivateModeEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsInPrivateModeEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2ControllerOptions_Vtbl {
    pub const fn new<Identity: ICoreWebView2ControllerOptions_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ProfileName<
            Identity: ICoreWebView2ControllerOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerOptions_Impl::ProfileName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProfileName<
            Identity: ICoreWebView2ControllerOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ControllerOptions_Impl::SetProfileName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn IsInPrivateModeEnabled<
            Identity: ICoreWebView2ControllerOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerOptions_Impl::IsInPrivateModeEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsInPrivateModeEnabled<
            Identity: ICoreWebView2ControllerOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ControllerOptions_Impl::SetIsInPrivateModeEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ControllerOptions,
                OFFSET,
            >(),
            ProfileName: ProfileName::<Identity, OFFSET>,
            SetProfileName: SetProfileName::<Identity, OFFSET>,
            IsInPrivateModeEnabled: IsInPrivateModeEnabled::<Identity, OFFSET>,
            SetIsInPrivateModeEnabled: SetIsInPrivateModeEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ControllerOptions as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ControllerOptions_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProfileName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetProfileName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsInPrivateModeEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsInPrivateModeEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ControllerOptions2,
    ICoreWebView2ControllerOptions2_Vtbl,
    0x41b69e93_cc17_5c7d_a0c8_fa21c27aadb6
);
impl windows_core::RuntimeType for ICoreWebView2ControllerOptions2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ControllerOptions2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ControllerOptions2";
}
pub trait ICoreWebView2ControllerOptions2_Impl: windows_core::IUnknownImpl {
    fn ScriptLocale(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetScriptLocale(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2ControllerOptions2_Vtbl {
    pub const fn new<Identity: ICoreWebView2ControllerOptions2_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ScriptLocale<
            Identity: ICoreWebView2ControllerOptions2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerOptions2_Impl::ScriptLocale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScriptLocale<
            Identity: ICoreWebView2ControllerOptions2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ControllerOptions2_Impl::SetScriptLocale(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ControllerOptions2,
                OFFSET,
            >(),
            ScriptLocale: ScriptLocale::<Identity, OFFSET>,
            SetScriptLocale: SetScriptLocale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ControllerOptions2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ControllerOptions2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ScriptLocale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetScriptLocale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ControllerWindowReference,
    ICoreWebView2ControllerWindowReference_Vtbl,
    0x0feddad4_48a3_5cc4_9f61_e7adfd1e9c76
);
impl windows_core::RuntimeType for ICoreWebView2ControllerWindowReference {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ControllerWindowReference {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReference";
}
pub trait ICoreWebView2ControllerWindowReference_Impl: windows_core::IUnknownImpl {
    fn WindowHandle(&self) -> windows_core::Result<u64>;
    fn CoreWindow(&self) -> windows_core::Result<windows::UI::Core::CoreWindow>;
}
impl ICoreWebView2ControllerWindowReference_Vtbl {
    pub const fn new<Identity: ICoreWebView2ControllerWindowReference_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn WindowHandle<
            Identity: ICoreWebView2ControllerWindowReference_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerWindowReference_Impl::WindowHandle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CoreWindow<
            Identity: ICoreWebView2ControllerWindowReference_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerWindowReference_Impl::CoreWindow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ControllerWindowReference,
                OFFSET,
            >(),
            WindowHandle: WindowHandle::<Identity, OFFSET>,
            CoreWindow: CoreWindow::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ControllerWindowReference as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ControllerWindowReference_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub WindowHandle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    pub CoreWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ControllerWindowReferenceStatics,
    ICoreWebView2ControllerWindowReferenceStatics_Vtbl,
    0xddf6ebf1_ebc6_5a34_9008_661c3a2eb767
);
impl windows_core::RuntimeType for ICoreWebView2ControllerWindowReferenceStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ControllerWindowReferenceStatics {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStatics";
}
pub trait ICoreWebView2ControllerWindowReferenceStatics_Impl: windows_core::IUnknownImpl {
    fn CreateFromWindowHandle(
        &self,
        windowHandle: u64,
    ) -> windows_core::Result<CoreWebView2ControllerWindowReference>;
    fn CreateFromCoreWindow(
        &self,
        coreWindow: windows_core::Ref<windows::UI::Core::CoreWindow>,
    ) -> windows_core::Result<CoreWebView2ControllerWindowReference>;
}
impl ICoreWebView2ControllerWindowReferenceStatics_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ControllerWindowReferenceStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateFromWindowHandle<
            Identity: ICoreWebView2ControllerWindowReferenceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowhandle: u64,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerWindowReferenceStatics_Impl::CreateFromWindowHandle(
                    this,
                    windowhandle,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateFromCoreWindow<
            Identity: ICoreWebView2ControllerWindowReferenceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            corewindow: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ControllerWindowReferenceStatics_Impl::CreateFromCoreWindow(
                    this,
                    core::mem::transmute_copy(&corewindow),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ControllerWindowReferenceStatics,
                OFFSET,
            >(),
            CreateFromWindowHandle: CreateFromWindowHandle::<Identity, OFFSET>,
            CreateFromCoreWindow: CreateFromCoreWindow::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ControllerWindowReferenceStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ControllerWindowReferenceStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateFromWindowHandle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateFromCoreWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Cookie,
    ICoreWebView2Cookie_Vtbl,
    0x52f670fe_8ca2_5aad_aedb_25f7903b7038
);
impl windows_core::RuntimeType for ICoreWebView2Cookie {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Cookie {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Cookie";
}
pub trait ICoreWebView2Cookie_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Value(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetValue(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Domain(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Path(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Expires(&self) -> windows_core::Result<f64>;
    fn SetExpires(&self, value: f64) -> windows_core::Result<()>;
    fn IsHttpOnly(&self) -> windows_core::Result<bool>;
    fn SetIsHttpOnly(&self, value: bool) -> windows_core::Result<()>;
    fn SameSite(&self) -> windows_core::Result<CoreWebView2CookieSameSiteKind>;
    fn SetSameSite(&self, value: CoreWebView2CookieSameSiteKind) -> windows_core::Result<()>;
    fn IsSecure(&self) -> windows_core::Result<bool>;
    fn SetIsSecure(&self, value: bool) -> windows_core::Result<()>;
    fn IsSession(&self) -> windows_core::Result<bool>;
}
impl ICoreWebView2Cookie_Vtbl {
    pub const fn new<Identity: ICoreWebView2Cookie_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Name<Identity: ICoreWebView2Cookie_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Value<Identity: ICoreWebView2Cookie_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Cookie_Impl::SetValue(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Domain<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::Domain(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Path<Identity: ICoreWebView2Cookie_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::Path(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Expires<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::Expires(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExpires<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Cookie_Impl::SetExpires(this, value).into()
            }
        }
        unsafe extern "system" fn IsHttpOnly<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::IsHttpOnly(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHttpOnly<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Cookie_Impl::SetIsHttpOnly(this, value).into()
            }
        }
        unsafe extern "system" fn SameSite<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2CookieSameSiteKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::SameSite(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSameSite<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2CookieSameSiteKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Cookie_Impl::SetSameSite(this, value).into()
            }
        }
        unsafe extern "system" fn IsSecure<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::IsSecure(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSecure<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Cookie_Impl::SetIsSecure(this, value).into()
            }
        }
        unsafe extern "system" fn IsSession<
            Identity: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Cookie_Impl::IsSession(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Cookie, OFFSET>(),
            Name: Name::<Identity, OFFSET>,
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            Domain: Domain::<Identity, OFFSET>,
            Path: Path::<Identity, OFFSET>,
            Expires: Expires::<Identity, OFFSET>,
            SetExpires: SetExpires::<Identity, OFFSET>,
            IsHttpOnly: IsHttpOnly::<Identity, OFFSET>,
            SetIsHttpOnly: SetIsHttpOnly::<Identity, OFFSET>,
            SameSite: SameSite::<Identity, OFFSET>,
            SetSameSite: SetSameSite::<Identity, OFFSET>,
            IsSecure: IsSecure::<Identity, OFFSET>,
            SetIsSecure: SetIsSecure::<Identity, OFFSET>,
            IsSession: IsSession::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Cookie as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Cookie_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Domain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Path: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Expires:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetExpires: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub IsHttpOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsHttpOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub SameSite: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2CookieSameSiteKind,
    ) -> windows_core::HRESULT,
    pub SetSameSite: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2CookieSameSiteKind,
    ) -> windows_core::HRESULT,
    pub IsSecure:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSecure:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsSession:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CookieManager,
    ICoreWebView2CookieManager_Vtbl,
    0x4098f516_adca_5563_aaa5_d7affd847aa3
);
impl windows_core::RuntimeType for ICoreWebView2CookieManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CookieManager {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager";
}
pub trait ICoreWebView2CookieManager_Impl: windows_core::IUnknownImpl {
    fn CreateCookie(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
        Domain: &windows_core::HSTRING,
        Path: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2Cookie>;
    fn CopyCookie(
        &self,
        cookieParam: windows_core::Ref<CoreWebView2Cookie>,
    ) -> windows_core::Result<CoreWebView2Cookie>;
    fn AddOrUpdateCookie(
        &self,
        cookie: windows_core::Ref<CoreWebView2Cookie>,
    ) -> windows_core::Result<()>;
    fn DeleteCookie(
        &self,
        cookie: windows_core::Ref<CoreWebView2Cookie>,
    ) -> windows_core::Result<()>;
    fn DeleteCookies(
        &self,
        name: &windows_core::HSTRING,
        uri: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn DeleteCookiesWithDomainAndPath(
        &self,
        name: &windows_core::HSTRING,
        Domain: &windows_core::HSTRING,
        Path: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn DeleteAllCookies(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2CookieManager_Vtbl {
    pub const fn new<Identity: ICoreWebView2CookieManager_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateCookie<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            domain: *mut core::ffi::c_void,
            path: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CookieManager_Impl::CreateCookie(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&value),
                    core::mem::transmute(&domain),
                    core::mem::transmute(&path),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CopyCookie<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            cookieparam: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CookieManager_Impl::CopyCookie(
                    this,
                    core::mem::transmute_copy(&cookieparam),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AddOrUpdateCookie<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            cookie: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CookieManager_Impl::AddOrUpdateCookie(
                    this,
                    core::mem::transmute_copy(&cookie),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteCookie<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            cookie: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CookieManager_Impl::DeleteCookie(
                    this,
                    core::mem::transmute_copy(&cookie),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteCookies<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CookieManager_Impl::DeleteCookies(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&uri),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteCookiesWithDomainAndPath<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            domain: *mut core::ffi::c_void,
            path: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CookieManager_Impl::DeleteCookiesWithDomainAndPath(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&domain),
                    core::mem::transmute(&path),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteAllCookies<
            Identity: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CookieManager_Impl::DeleteAllCookies(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CookieManager,
                OFFSET,
            >(),
            CreateCookie: CreateCookie::<Identity, OFFSET>,
            CopyCookie: CopyCookie::<Identity, OFFSET>,
            AddOrUpdateCookie: AddOrUpdateCookie::<Identity, OFFSET>,
            DeleteCookie: DeleteCookie::<Identity, OFFSET>,
            DeleteCookies: DeleteCookies::<Identity, OFFSET>,
            DeleteCookiesWithDomainAndPath: DeleteCookiesWithDomainAndPath::<Identity, OFFSET>,
            DeleteAllCookies: DeleteAllCookies::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CookieManager as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CookieManager_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateCookie: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CopyCookie: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AddOrUpdateCookie: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeleteCookie: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeleteCookies: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeleteCookiesWithDomainAndPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeleteAllCookies:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CookieManager_Manual,
    ICoreWebView2CookieManager_Manual_Vtbl,
    0x9bcca0ea_7225_577a_bb23_c7c98023154e
);
impl windows_core::RuntimeType for ICoreWebView2CookieManager_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CookieManager_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager_Manual";
}
pub trait ICoreWebView2CookieManager_Manual_Impl: windows_core::IUnknownImpl {
    fn GetCookiesAsync(
        &self,
        uri: &windows_core::HSTRING,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows_collections::IVectorView<CoreWebView2Cookie>>,
    >;
}
impl ICoreWebView2CookieManager_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2CookieManager_Manual_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GetCookiesAsync<
            Identity: ICoreWebView2CookieManager_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CookieManager_Manual_Impl::GetCookiesAsync(
                    this,
                    core::mem::transmute(&uri),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CookieManager_Manual,
                OFFSET,
            >(),
            GetCookiesAsync: GetCookiesAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CookieManager_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CookieManager_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetCookiesAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CustomSchemeRegistration,
    ICoreWebView2CustomSchemeRegistration_Vtbl,
    0x16dc60d9_ddec_5c3d_bc1f_4408d1875af1
);
impl windows_core::RuntimeType for ICoreWebView2CustomSchemeRegistration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CustomSchemeRegistration {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration";
}
pub trait ICoreWebView2CustomSchemeRegistration_Impl: windows_core::IUnknownImpl {
    fn TreatAsSecure(&self) -> windows_core::Result<i32>;
    fn SetTreatAsSecure(&self, value: i32) -> windows_core::Result<()>;
    fn HasAuthorityComponent(&self) -> windows_core::Result<bool>;
    fn SetHasAuthorityComponent(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2CustomSchemeRegistration_Vtbl {
    pub const fn new<Identity: ICoreWebView2CustomSchemeRegistration_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn TreatAsSecure<
            Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CustomSchemeRegistration_Impl::TreatAsSecure(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTreatAsSecure<
            Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CustomSchemeRegistration_Impl::SetTreatAsSecure(this, value).into()
            }
        }
        unsafe extern "system" fn HasAuthorityComponent<
            Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CustomSchemeRegistration_Impl::HasAuthorityComponent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHasAuthorityComponent<
            Identity: ICoreWebView2CustomSchemeRegistration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2CustomSchemeRegistration_Impl::SetHasAuthorityComponent(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CustomSchemeRegistration,
                OFFSET,
            >(),
            TreatAsSecure: TreatAsSecure::<Identity, OFFSET>,
            SetTreatAsSecure: SetTreatAsSecure::<Identity, OFFSET>,
            HasAuthorityComponent: HasAuthorityComponent::<Identity, OFFSET>,
            SetHasAuthorityComponent: SetHasAuthorityComponent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CustomSchemeRegistration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CustomSchemeRegistration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TreatAsSecure:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetTreatAsSecure:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub HasAuthorityComponent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHasAuthorityComponent:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CustomSchemeRegistrationFactory,
    ICoreWebView2CustomSchemeRegistrationFactory_Vtbl,
    0x309dddfa_ff3e_5d8d_a18a_c1341f325ea7
);
impl windows_core::RuntimeType for ICoreWebView2CustomSchemeRegistrationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CustomSchemeRegistrationFactory {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistrationFactory";
}
pub trait ICoreWebView2CustomSchemeRegistrationFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        schemeName: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2CustomSchemeRegistration>;
}
impl ICoreWebView2CustomSchemeRegistrationFactory_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2CustomSchemeRegistrationFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ICoreWebView2CustomSchemeRegistrationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            schemename: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CustomSchemeRegistrationFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&schemename),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CustomSchemeRegistrationFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CustomSchemeRegistrationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CustomSchemeRegistrationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2CustomSchemeRegistration_Manual,
    ICoreWebView2CustomSchemeRegistration_Manual_Vtbl,
    0x074ff15c_7d7f_5101_a02e_c077c5e21c41
);
impl windows_core::RuntimeType for ICoreWebView2CustomSchemeRegistration_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2CustomSchemeRegistration_Manual {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2CustomSchemeRegistration_Manual";
}
pub trait ICoreWebView2CustomSchemeRegistration_Manual_Impl: windows_core::IUnknownImpl {
    fn SchemeName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn AllowedOrigins(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::HSTRING>>;
}
impl ICoreWebView2CustomSchemeRegistration_Manual_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2CustomSchemeRegistration_Manual_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn SchemeName<
            Identity: ICoreWebView2CustomSchemeRegistration_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CustomSchemeRegistration_Manual_Impl::SchemeName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AllowedOrigins<
            Identity: ICoreWebView2CustomSchemeRegistration_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2CustomSchemeRegistration_Manual_Impl::AllowedOrigins(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2CustomSchemeRegistration_Manual,
                OFFSET,
            >(),
            SchemeName: SchemeName::<Identity, OFFSET>,
            AllowedOrigins: AllowedOrigins::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2CustomSchemeRegistration_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CustomSchemeRegistration_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SchemeName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AllowedOrigins: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DOMContentLoadedEventArgs,
    ICoreWebView2DOMContentLoadedEventArgs_Vtbl,
    0xc474d0a3_24ac_59fc_b78b_da7562a6a052
);
impl windows_core::RuntimeType for ICoreWebView2DOMContentLoadedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DOMContentLoadedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgs";
}
pub trait ICoreWebView2DOMContentLoadedEventArgs_Impl: windows_core::IUnknownImpl {
    fn NavigationId(&self) -> windows_core::Result<u64>;
}
impl ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2DOMContentLoadedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn NavigationId<
            Identity: ICoreWebView2DOMContentLoadedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DOMContentLoadedEventArgs_Impl::NavigationId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DOMContentLoadedEventArgs,
                OFFSET,
            >(),
            NavigationId: NavigationId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2DOMContentLoadedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NavigationId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DevToolsProtocolEventReceivedEventArgs,
    ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl,
    0xb6a4b41d_fd18_59fa_923a_c57555d960ce
);
impl windows_core::RuntimeType for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs";
}
pub trait ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn ParameterObjectAsJson(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn ParameterObjectAsJson<
            Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl:: ParameterObjectAsJson ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DevToolsProtocolEventReceivedEventArgs,
                OFFSET,
            >(),
            ParameterObjectAsJson: ParameterObjectAsJson::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < ICoreWebView2DevToolsProtocolEventReceivedEventArgs as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ParameterObjectAsJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DevToolsProtocolEventReceivedEventArgs2,
    ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl,
    0x221728ba_635e_50d2_bd3c_fd22f4113978
);
impl windows_core::RuntimeType for ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs2";
}
pub trait ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl:
    windows_core::IUnknownImpl
{
    fn SessionId(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn SessionId<
            Identity: ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Impl::SessionId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DevToolsProtocolEventReceivedEventArgs2,
                OFFSET,
            >(),
            SessionId: SessionId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < ICoreWebView2DevToolsProtocolEventReceivedEventArgs2 as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SessionId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DevToolsProtocolEventReceiver,
    ICoreWebView2DevToolsProtocolEventReceiver_Vtbl,
    0xb2a2be79_65fc_5537_8715_3d92bf31090b
);
impl windows_core::RuntimeType for ICoreWebView2DevToolsProtocolEventReceiver {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DevToolsProtocolEventReceiver {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiver";
}
pub trait ICoreWebView2DevToolsProtocolEventReceiver_Impl: windows_core::IUnknownImpl {
    fn DevToolsProtocolEventReceived(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DevToolsProtocolEventReceivedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDevToolsProtocolEventReceived(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn DevToolsProtocolEventReceived<
            Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DevToolsProtocolEventReceiver_Impl::DevToolsProtocolEventReceived(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDevToolsProtocolEventReceived<
            Identity: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DevToolsProtocolEventReceiver_Impl:: RemoveDevToolsProtocolEventReceived ( this , token , ) . into ( )
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DevToolsProtocolEventReceiver,
                OFFSET,
            >(),
            DevToolsProtocolEventReceived: DevToolsProtocolEventReceived::<Identity, OFFSET>,
            RemoveDevToolsProtocolEventReceived: RemoveDevToolsProtocolEventReceived::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2DevToolsProtocolEventReceiver as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DevToolsProtocolEventReceived: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDevToolsProtocolEventReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DispatchAdapter,
    ICoreWebView2DispatchAdapter_Vtbl,
    0x7888a42d_18f3_5966_80cb_8cc25351bd0a
);
impl windows_core::RuntimeType for ICoreWebView2DispatchAdapter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICoreWebView2DispatchAdapter,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICoreWebView2DispatchAdapter {
    pub fn WrapNamedObject<P1>(
        &self,
        name: &windows_core::HSTRING,
        adapter: P1,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P1: windows_core::Param<ICoreWebView2DispatchAdapter>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WrapNamedObject)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                adapter.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn WrapObject<P0, P1>(
        &self,
        unwrapped: P0,
        adapter: P1,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<ICoreWebView2DispatchAdapter>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WrapObject)(
                windows_core::Interface::as_raw(this),
                unwrapped.param().abi(),
                adapter.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn UnwrapObject<P0>(&self, wrapped: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UnwrapObject)(
                windows_core::Interface::as_raw(this),
                wrapped.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Clean(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clean)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for ICoreWebView2DispatchAdapter {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter";
}
pub trait ICoreWebView2DispatchAdapter_Impl: windows_core::IUnknownImpl {
    fn WrapNamedObject(
        &self,
        name: &windows_core::HSTRING,
        adapter: windows_core::Ref<ICoreWebView2DispatchAdapter>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn WrapObject(
        &self,
        unwrapped: windows_core::Ref<windows_core::IInspectable>,
        adapter: windows_core::Ref<ICoreWebView2DispatchAdapter>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn UnwrapObject(
        &self,
        wrapped: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn Clean(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2DispatchAdapter_Vtbl {
    pub const fn new<Identity: ICoreWebView2DispatchAdapter_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn WrapNamedObject<
            Identity: ICoreWebView2DispatchAdapter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            adapter: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DispatchAdapter_Impl::WrapNamedObject(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute_copy(&adapter),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WrapObject<
            Identity: ICoreWebView2DispatchAdapter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            unwrapped: *mut core::ffi::c_void,
            adapter: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DispatchAdapter_Impl::WrapObject(
                    this,
                    core::mem::transmute_copy(&unwrapped),
                    core::mem::transmute_copy(&adapter),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn UnwrapObject<
            Identity: ICoreWebView2DispatchAdapter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            wrapped: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DispatchAdapter_Impl::UnwrapObject(
                    this,
                    core::mem::transmute_copy(&wrapped),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Clean<
            Identity: ICoreWebView2DispatchAdapter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DispatchAdapter_Impl::Clean(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DispatchAdapter,
                OFFSET,
            >(),
            WrapNamedObject: WrapNamedObject::<Identity, OFFSET>,
            WrapObject: WrapObject::<Identity, OFFSET>,
            UnwrapObject: UnwrapObject::<Identity, OFFSET>,
            Clean: Clean::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2DispatchAdapter as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DispatchAdapter_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub WrapNamedObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WrapObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UnwrapObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Clean: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DownloadOperation,
    ICoreWebView2DownloadOperation_Vtbl,
    0xafe73e6b_e760_5a06_9bf6_1e743c13cd2d
);
impl windows_core::RuntimeType for ICoreWebView2DownloadOperation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DownloadOperation {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2DownloadOperation";
}
pub trait ICoreWebView2DownloadOperation_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ContentDisposition(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn MimeType(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn TotalBytesToReceive(&self) -> windows_core::Result<i64>;
    fn BytesReceived(&self) -> windows_core::Result<i64>;
    fn EstimatedEndTime(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ResultFilePath(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn State(&self) -> windows_core::Result<CoreWebView2DownloadState>;
    fn InterruptReason(&self) -> windows_core::Result<CoreWebView2DownloadInterruptReason>;
    fn CanResume(&self) -> windows_core::Result<bool>;
    fn BytesReceivedChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveBytesReceivedChanged(&self, token: i64) -> windows_core::Result<()>;
    fn EstimatedEndTimeChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveEstimatedEndTimeChanged(&self, token: i64) -> windows_core::Result<()>;
    fn StateChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2DownloadOperation,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()>;
    fn Cancel(&self) -> windows_core::Result<()>;
    fn Pause(&self) -> windows_core::Result<()>;
    fn Resume(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2DownloadOperation_Vtbl {
    pub const fn new<Identity: ICoreWebView2DownloadOperation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentDisposition<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::ContentDisposition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MimeType<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::MimeType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TotalBytesToReceive<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::TotalBytesToReceive(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BytesReceived<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::BytesReceived(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EstimatedEndTime<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::EstimatedEndTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ResultFilePath<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::ResultFilePath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn State<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2DownloadState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::State(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InterruptReason<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2DownloadInterruptReason,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::InterruptReason(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanResume<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::CanResume(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BytesReceivedChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::BytesReceivedChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveBytesReceivedChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::RemoveBytesReceivedChanged(this, token).into()
            }
        }
        unsafe extern "system" fn EstimatedEndTimeChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::EstimatedEndTimeChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveEstimatedEndTimeChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::RemoveEstimatedEndTimeChanged(this, token)
                    .into()
            }
        }
        unsafe extern "system" fn StateChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadOperation_Impl::StateChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveStateChanged<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::RemoveStateChanged(this, token).into()
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::Cancel(this).into()
            }
        }
        unsafe extern "system" fn Pause<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::Pause(this).into()
            }
        }
        unsafe extern "system" fn Resume<
            Identity: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadOperation_Impl::Resume(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DownloadOperation,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            ContentDisposition: ContentDisposition::<Identity, OFFSET>,
            MimeType: MimeType::<Identity, OFFSET>,
            TotalBytesToReceive: TotalBytesToReceive::<Identity, OFFSET>,
            BytesReceived: BytesReceived::<Identity, OFFSET>,
            EstimatedEndTime: EstimatedEndTime::<Identity, OFFSET>,
            ResultFilePath: ResultFilePath::<Identity, OFFSET>,
            State: State::<Identity, OFFSET>,
            InterruptReason: InterruptReason::<Identity, OFFSET>,
            CanResume: CanResume::<Identity, OFFSET>,
            BytesReceivedChanged: BytesReceivedChanged::<Identity, OFFSET>,
            RemoveBytesReceivedChanged: RemoveBytesReceivedChanged::<Identity, OFFSET>,
            EstimatedEndTimeChanged: EstimatedEndTimeChanged::<Identity, OFFSET>,
            RemoveEstimatedEndTimeChanged: RemoveEstimatedEndTimeChanged::<Identity, OFFSET>,
            StateChanged: StateChanged::<Identity, OFFSET>,
            RemoveStateChanged: RemoveStateChanged::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            Pause: Pause::<Identity, OFFSET>,
            Resume: Resume::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2DownloadOperation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DownloadOperation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentDisposition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MimeType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TotalBytesToReceive:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub BytesReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub EstimatedEndTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ResultFilePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub State: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2DownloadState,
    ) -> windows_core::HRESULT,
    pub InterruptReason: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2DownloadInterruptReason,
    ) -> windows_core::HRESULT,
    pub CanResume:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub BytesReceivedChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveBytesReceivedChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub EstimatedEndTimeChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveEstimatedEndTimeChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub StateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveStateChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Pause: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2DownloadStartingEventArgs,
    ICoreWebView2DownloadStartingEventArgs_Vtbl,
    0x45d982ba_9256_5b35_b023_26a438599110
);
impl windows_core::RuntimeType for ICoreWebView2DownloadStartingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2DownloadStartingEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2DownloadStartingEventArgs";
}
pub trait ICoreWebView2DownloadStartingEventArgs_Impl: windows_core::IUnknownImpl {
    fn DownloadOperation(&self) -> windows_core::Result<CoreWebView2DownloadOperation>;
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn ResultFilePath(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetResultFilePath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2DownloadStartingEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2DownloadStartingEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DownloadOperation<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadStartingEventArgs_Impl::DownloadOperation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadStartingEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadStartingEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn ResultFilePath<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadStartingEventArgs_Impl::ResultFilePath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetResultFilePath<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadStartingEventArgs_Impl::SetResultFilePath(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadStartingEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2DownloadStartingEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2DownloadStartingEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2DownloadStartingEventArgs,
                OFFSET,
            >(),
            DownloadOperation: DownloadOperation::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            ResultFilePath: ResultFilePath::<Identity, OFFSET>,
            SetResultFilePath: SetResultFilePath::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2DownloadStartingEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DownloadStartingEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DownloadOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ResultFilePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetResultFilePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment,
    ICoreWebView2Environment_Vtbl,
    0xd8cc7831_b783_556b_b9ce_899c1e95d585
);
impl windows_core::RuntimeType for ICoreWebView2Environment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment";
}
pub trait ICoreWebView2Environment_Impl: windows_core::IUnknownImpl {
    fn BrowserVersionString(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn NewBrowserVersionAvailable(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNewBrowserVersionAvailable(&self, token: i64) -> windows_core::Result<()>;
    fn CreateCoreWebView2ControllerAsync(
        &self,
        ParentWindow: windows_core::Ref<CoreWebView2ControllerWindowReference>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Controller>>;
    fn CreateWebResourceResponse(
        &self,
        Content: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
        StatusCode: i32,
        ReasonPhrase: &windows_core::HSTRING,
        Headers: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2WebResourceResponse>;
}
impl ICoreWebView2Environment_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BrowserVersionString<
            Identity: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Impl::BrowserVersionString(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NewBrowserVersionAvailable<
            Identity: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Impl::NewBrowserVersionAvailable(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNewBrowserVersionAvailable<
            Identity: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Environment_Impl::RemoveNewBrowserVersionAvailable(this, token).into()
            }
        }
        unsafe extern "system" fn CreateCoreWebView2ControllerAsync<
            Identity: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parentwindow: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Impl::CreateCoreWebView2ControllerAsync(
                    this,
                    core::mem::transmute_copy(&parentwindow),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateWebResourceResponse<
            Identity: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            content: *mut core::ffi::c_void,
            statuscode: i32,
            reasonphrase: *mut core::ffi::c_void,
            headers: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Impl::CreateWebResourceResponse(
                    this,
                    core::mem::transmute_copy(&content),
                    statuscode,
                    core::mem::transmute(&reasonphrase),
                    core::mem::transmute(&headers),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment,
                OFFSET,
            >(),
            BrowserVersionString: BrowserVersionString::<Identity, OFFSET>,
            NewBrowserVersionAvailable: NewBrowserVersionAvailable::<Identity, OFFSET>,
            RemoveNewBrowserVersionAvailable: RemoveNewBrowserVersionAvailable::<Identity, OFFSET>,
            CreateCoreWebView2ControllerAsync: CreateCoreWebView2ControllerAsync::<Identity, OFFSET>,
            CreateWebResourceResponse: CreateWebResourceResponse::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BrowserVersionString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NewBrowserVersionAvailable: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNewBrowserVersionAvailable:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub CreateCoreWebView2ControllerAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateWebResourceResponse: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment10,
    ICoreWebView2Environment10_Vtbl,
    0xc224e69c_1efd_5ecc_adc8_2b52e7b97ce5
);
impl windows_core::RuntimeType for ICoreWebView2Environment10 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment10 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment10";
}
pub trait ICoreWebView2Environment10_Impl: windows_core::IUnknownImpl {
    fn CreateCoreWebView2ControllerOptions(
        &self,
    ) -> windows_core::Result<CoreWebView2ControllerOptions>;
}
impl ICoreWebView2Environment10_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment10_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateCoreWebView2ControllerOptions<
            Identity: ICoreWebView2Environment10_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment10_Impl::CreateCoreWebView2ControllerOptions(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment10,
                OFFSET,
            >(),
            CreateCoreWebView2ControllerOptions: CreateCoreWebView2ControllerOptions::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment10 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment10_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateCoreWebView2ControllerOptions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment11,
    ICoreWebView2Environment11_Vtbl,
    0xda23d64c_8b61_5b6c_8581_f6a688abd7cd
);
impl windows_core::RuntimeType for ICoreWebView2Environment11 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment11 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment11";
}
pub trait ICoreWebView2Environment11_Impl: windows_core::IUnknownImpl {
    fn FailureReportFolderPath(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2Environment11_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment11_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FailureReportFolderPath<
            Identity: ICoreWebView2Environment11_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment11_Impl::FailureReportFolderPath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment11,
                OFFSET,
            >(),
            FailureReportFolderPath: FailureReportFolderPath::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment11 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment11_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FailureReportFolderPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment12,
    ICoreWebView2Environment12_Vtbl,
    0x82531ddb_be63_5254_812f_880d9f0ec54e
);
impl windows_core::RuntimeType for ICoreWebView2Environment12 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment12 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment12";
}
pub trait ICoreWebView2Environment12_Impl: windows_core::IUnknownImpl {
    fn CreateSharedBuffer(&self, Size: u64) -> windows_core::Result<CoreWebView2SharedBuffer>;
}
impl ICoreWebView2Environment12_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment12_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateSharedBuffer<
            Identity: ICoreWebView2Environment12_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            size: u64,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment12_Impl::CreateSharedBuffer(this, size) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment12,
                OFFSET,
            >(),
            CreateSharedBuffer: CreateSharedBuffer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment12 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment12_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateSharedBuffer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment13,
    ICoreWebView2Environment13_Vtbl,
    0x22c97f2f_8a28_5794_941c_a25bcc3cf47e
);
impl windows_core::RuntimeType for ICoreWebView2Environment13 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment13 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment13";
}
pub trait ICoreWebView2Environment13_Impl: windows_core::IUnknownImpl {
    fn GetProcessExtendedInfosAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows_collections::IVectorView<CoreWebView2ProcessExtendedInfo>,
        >,
    >;
}
impl ICoreWebView2Environment13_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment13_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetProcessExtendedInfosAsync<
            Identity: ICoreWebView2Environment13_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment13_Impl::GetProcessExtendedInfosAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment13,
                OFFSET,
            >(),
            GetProcessExtendedInfosAsync: GetProcessExtendedInfosAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment13 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment13_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetProcessExtendedInfosAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment2,
    ICoreWebView2Environment2_Vtbl,
    0x0b634668_1017_5fc7_9921_f1f51866a8c0
);
impl windows_core::RuntimeType for ICoreWebView2Environment2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment2";
}
pub trait ICoreWebView2Environment2_Impl: windows_core::IUnknownImpl {
    fn CreateWebResourceRequest(
        &self,
        uri: &windows_core::HSTRING,
        Method: &windows_core::HSTRING,
        postData: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
        Headers: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2WebResourceRequest>;
}
impl ICoreWebView2Environment2_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateWebResourceRequest<
            Identity: ICoreWebView2Environment2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            method: *mut core::ffi::c_void,
            postdata: *mut core::ffi::c_void,
            headers: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment2_Impl::CreateWebResourceRequest(
                    this,
                    core::mem::transmute(&uri),
                    core::mem::transmute(&method),
                    core::mem::transmute_copy(&postdata),
                    core::mem::transmute(&headers),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment2,
                OFFSET,
            >(),
            CreateWebResourceRequest: CreateWebResourceRequest::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateWebResourceRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment3,
    ICoreWebView2Environment3_Vtbl,
    0x5e33f46c_c0b9_5126_8840_17f9c11b3a8a
);
impl windows_core::RuntimeType for ICoreWebView2Environment3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment3";
}
pub trait ICoreWebView2Environment3_Impl: windows_core::IUnknownImpl {
    fn CreateCoreWebView2CompositionControllerAsync(
        &self,
        ParentWindow: windows_core::Ref<CoreWebView2ControllerWindowReference>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2CompositionController>>;
    fn CreateCoreWebView2PointerInfo(&self) -> windows_core::Result<CoreWebView2PointerInfo>;
}
impl ICoreWebView2Environment3_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateCoreWebView2CompositionControllerAsync<
            Identity: ICoreWebView2Environment3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parentwindow: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment3_Impl::CreateCoreWebView2CompositionControllerAsync(
                    this,
                    core::mem::transmute_copy(&parentwindow),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateCoreWebView2PointerInfo<
            Identity: ICoreWebView2Environment3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment3_Impl::CreateCoreWebView2PointerInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment3,
                OFFSET,
            >(),
            CreateCoreWebView2CompositionControllerAsync:
                CreateCoreWebView2CompositionControllerAsync::<Identity, OFFSET>,
            CreateCoreWebView2PointerInfo: CreateCoreWebView2PointerInfo::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateCoreWebView2CompositionControllerAsync:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub CreateCoreWebView2PointerInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment4,
    ICoreWebView2Environment4_Vtbl,
    0x6db697da_eebd_5818_8790_1fe57ef319e2
);
impl windows_core::RuntimeType for ICoreWebView2Environment4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment4";
}
pub trait ICoreWebView2Environment4_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2Environment4_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment4_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment4,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment5,
    ICoreWebView2Environment5_Vtbl,
    0xf33399af_e4d3_59dc_ac38_8397aadcedb1
);
impl windows_core::RuntimeType for ICoreWebView2Environment5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment5";
}
pub trait ICoreWebView2Environment5_Impl: windows_core::IUnknownImpl {
    fn BrowserProcessExited(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                CoreWebView2BrowserProcessExitedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveBrowserProcessExited(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2Environment5_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BrowserProcessExited<
            Identity: ICoreWebView2Environment5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment5_Impl::BrowserProcessExited(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveBrowserProcessExited<
            Identity: ICoreWebView2Environment5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Environment5_Impl::RemoveBrowserProcessExited(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment5,
                OFFSET,
            >(),
            BrowserProcessExited: BrowserProcessExited::<Identity, OFFSET>,
            RemoveBrowserProcessExited: RemoveBrowserProcessExited::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BrowserProcessExited: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveBrowserProcessExited:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment6,
    ICoreWebView2Environment6_Vtbl,
    0x965d538f_5958_5d98_8972_f622021df402
);
impl windows_core::RuntimeType for ICoreWebView2Environment6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment6 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment6";
}
pub trait ICoreWebView2Environment6_Impl: windows_core::IUnknownImpl {
    fn CreatePrintSettings(&self) -> windows_core::Result<CoreWebView2PrintSettings>;
}
impl ICoreWebView2Environment6_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment6_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreatePrintSettings<
            Identity: ICoreWebView2Environment6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment6_Impl::CreatePrintSettings(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment6,
                OFFSET,
            >(),
            CreatePrintSettings: CreatePrintSettings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreatePrintSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment7,
    ICoreWebView2Environment7_Vtbl,
    0xe1f44fe2_fc54_5383_a383_c87e1da96b83
);
impl windows_core::RuntimeType for ICoreWebView2Environment7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment7 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment7";
}
pub trait ICoreWebView2Environment7_Impl: windows_core::IUnknownImpl {
    fn UserDataFolder(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2Environment7_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment7_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn UserDataFolder<
            Identity: ICoreWebView2Environment7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment7_Impl::UserDataFolder(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment7,
                OFFSET,
            >(),
            UserDataFolder: UserDataFolder::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UserDataFolder: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment8,
    ICoreWebView2Environment8_Vtbl,
    0xdb67c807_d0db_5980_a3a9_75ef8f63d6f6
);
impl windows_core::RuntimeType for ICoreWebView2Environment8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment8 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment8";
}
pub trait ICoreWebView2Environment8_Impl: windows_core::IUnknownImpl {
    fn ProcessInfosChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Environment,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveProcessInfosChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetProcessInfos(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2ProcessInfo>>;
}
impl ICoreWebView2Environment8_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment8_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ProcessInfosChanged<
            Identity: ICoreWebView2Environment8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment8_Impl::ProcessInfosChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveProcessInfosChanged<
            Identity: ICoreWebView2Environment8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Environment8_Impl::RemoveProcessInfosChanged(this, token).into()
            }
        }
        unsafe extern "system" fn GetProcessInfos<
            Identity: ICoreWebView2Environment8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment8_Impl::GetProcessInfos(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment8,
                OFFSET,
            >(),
            ProcessInfosChanged: ProcessInfosChanged::<Identity, OFFSET>,
            RemoveProcessInfosChanged: RemoveProcessInfosChanged::<Identity, OFFSET>,
            GetProcessInfos: GetProcessInfos::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProcessInfosChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveProcessInfosChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetProcessInfos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment9,
    ICoreWebView2Environment9_Vtbl,
    0xc8213ec7_7dc9_5468_a88b_15c6b7144478
);
impl windows_core::RuntimeType for ICoreWebView2Environment9 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment9 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment9";
}
pub trait ICoreWebView2Environment9_Impl: windows_core::IUnknownImpl {
    fn CreateContextMenuItem(
        &self,
        Label: &windows_core::HSTRING,
        iconStream: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
        Kind: CoreWebView2ContextMenuItemKind,
    ) -> windows_core::Result<CoreWebView2ContextMenuItem>;
}
impl ICoreWebView2Environment9_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment9_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateContextMenuItem<
            Identity: ICoreWebView2Environment9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            label: *mut core::ffi::c_void,
            iconstream: *mut core::ffi::c_void,
            kind: CoreWebView2ContextMenuItemKind,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment9_Impl::CreateContextMenuItem(
                    this,
                    core::mem::transmute(&label),
                    core::mem::transmute_copy(&iconstream),
                    kind,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment9,
                OFFSET,
            >(),
            CreateContextMenuItem: CreateContextMenuItem::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment9 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment9_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateContextMenuItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2ContextMenuItemKind,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions,
    ICoreWebView2EnvironmentOptions_Vtbl,
    0x25d6dc39_0062_5735_8b09_a6f535f19e97
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions";
}
pub trait ICoreWebView2EnvironmentOptions_Impl: windows_core::IUnknownImpl {
    fn AdditionalBrowserArguments(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAdditionalBrowserArguments(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn Language(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn TargetCompatibleBrowserVersion(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetCompatibleBrowserVersion(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn AllowSingleSignOnUsingOSPrimaryAccount(&self) -> windows_core::Result<bool>;
    fn SetAllowSingleSignOnUsingOSPrimaryAccount(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn AdditionalBrowserArguments<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions_Impl::AdditionalBrowserArguments(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAdditionalBrowserArguments<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions_Impl::SetAdditionalBrowserArguments(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Language<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions_Impl::Language(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLanguage<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions_Impl::SetLanguage(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn TargetCompatibleBrowserVersion<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions_Impl::TargetCompatibleBrowserVersion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetCompatibleBrowserVersion<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions_Impl::SetTargetCompatibleBrowserVersion(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn AllowSingleSignOnUsingOSPrimaryAccount<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions_Impl::AllowSingleSignOnUsingOSPrimaryAccount(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAllowSingleSignOnUsingOSPrimaryAccount<
            Identity: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions_Impl::SetAllowSingleSignOnUsingOSPrimaryAccount(
                    this, value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions,
                OFFSET,
            >(),
            AdditionalBrowserArguments: AdditionalBrowserArguments::<Identity, OFFSET>,
            SetAdditionalBrowserArguments: SetAdditionalBrowserArguments::<Identity, OFFSET>,
            Language: Language::<Identity, OFFSET>,
            SetLanguage: SetLanguage::<Identity, OFFSET>,
            TargetCompatibleBrowserVersion: TargetCompatibleBrowserVersion::<Identity, OFFSET>,
            SetTargetCompatibleBrowserVersion: SetTargetCompatibleBrowserVersion::<Identity, OFFSET>,
            AllowSingleSignOnUsingOSPrimaryAccount: AllowSingleSignOnUsingOSPrimaryAccount::<
                Identity,
                OFFSET,
            >,
            SetAllowSingleSignOnUsingOSPrimaryAccount: SetAllowSingleSignOnUsingOSPrimaryAccount::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AdditionalBrowserArguments: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAdditionalBrowserArguments: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TargetCompatibleBrowserVersion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetCompatibleBrowserVersion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AllowSingleSignOnUsingOSPrimaryAccount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAllowSingleSignOnUsingOSPrimaryAccount:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions2,
    ICoreWebView2EnvironmentOptions2_Vtbl,
    0xe77350fb_77a1_56f7_be95_eb7f8a7a3072
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions2";
}
pub trait ICoreWebView2EnvironmentOptions2_Impl: windows_core::IUnknownImpl {
    fn ExclusiveUserDataFolderAccess(&self) -> windows_core::Result<bool>;
    fn SetExclusiveUserDataFolderAccess(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions2_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions2_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ExclusiveUserDataFolderAccess<
            Identity: ICoreWebView2EnvironmentOptions2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions2_Impl::ExclusiveUserDataFolderAccess(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExclusiveUserDataFolderAccess<
            Identity: ICoreWebView2EnvironmentOptions2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions2_Impl::SetExclusiveUserDataFolderAccess(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions2,
                OFFSET,
            >(),
            ExclusiveUserDataFolderAccess: ExclusiveUserDataFolderAccess::<Identity, OFFSET>,
            SetExclusiveUserDataFolderAccess: SetExclusiveUserDataFolderAccess::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExclusiveUserDataFolderAccess:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetExclusiveUserDataFolderAccess:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions3,
    ICoreWebView2EnvironmentOptions3_Vtbl,
    0x48ab919d_2444_5e8c_a6f6_aba840d6c5ff
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions3";
}
pub trait ICoreWebView2EnvironmentOptions3_Impl: windows_core::IUnknownImpl {
    fn IsCustomCrashReportingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsCustomCrashReportingEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions3_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions3_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn IsCustomCrashReportingEnabled<
            Identity: ICoreWebView2EnvironmentOptions3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions3_Impl::IsCustomCrashReportingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsCustomCrashReportingEnabled<
            Identity: ICoreWebView2EnvironmentOptions3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions3_Impl::SetIsCustomCrashReportingEnabled(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions3,
                OFFSET,
            >(),
            IsCustomCrashReportingEnabled: IsCustomCrashReportingEnabled::<Identity, OFFSET>,
            SetIsCustomCrashReportingEnabled: SetIsCustomCrashReportingEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsCustomCrashReportingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsCustomCrashReportingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions4,
    ICoreWebView2EnvironmentOptions4_Vtbl,
    0xa2cb850f_cd14_5a7d_9c98_53fd51ec9858
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions4";
}
pub trait ICoreWebView2EnvironmentOptions4_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2EnvironmentOptions4_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions4_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions4,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions5,
    ICoreWebView2EnvironmentOptions5_Vtbl,
    0x36b1ca6c_e06c_5050_8ef9_247c5a7aa9c9
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions5";
}
pub trait ICoreWebView2EnvironmentOptions5_Impl: windows_core::IUnknownImpl {
    fn EnableTrackingPrevention(&self) -> windows_core::Result<bool>;
    fn SetEnableTrackingPrevention(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions5_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions5_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn EnableTrackingPrevention<
            Identity: ICoreWebView2EnvironmentOptions5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions5_Impl::EnableTrackingPrevention(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableTrackingPrevention<
            Identity: ICoreWebView2EnvironmentOptions5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions5_Impl::SetEnableTrackingPrevention(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions5,
                OFFSET,
            >(),
            EnableTrackingPrevention: EnableTrackingPrevention::<Identity, OFFSET>,
            SetEnableTrackingPrevention: SetEnableTrackingPrevention::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EnableTrackingPrevention:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableTrackingPrevention:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions6,
    ICoreWebView2EnvironmentOptions6_Vtbl,
    0xeb5b14c2_6f05_514e_b19a_76744d1ce684
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions6 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions6";
}
pub trait ICoreWebView2EnvironmentOptions6_Impl: windows_core::IUnknownImpl {
    fn AreBrowserExtensionsEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreBrowserExtensionsEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions6_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions6_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn AreBrowserExtensionsEnabled<
            Identity: ICoreWebView2EnvironmentOptions6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions6_Impl::AreBrowserExtensionsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreBrowserExtensionsEnabled<
            Identity: ICoreWebView2EnvironmentOptions6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions6_Impl::SetAreBrowserExtensionsEnabled(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions6,
                OFFSET,
            >(),
            AreBrowserExtensionsEnabled: AreBrowserExtensionsEnabled::<Identity, OFFSET>,
            SetAreBrowserExtensionsEnabled: SetAreBrowserExtensionsEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AreBrowserExtensionsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreBrowserExtensionsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions7,
    ICoreWebView2EnvironmentOptions7_Vtbl,
    0x7447b9ed_a60d_5af8_ab2a_56c544bc356a
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions7 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions7";
}
pub trait ICoreWebView2EnvironmentOptions7_Impl: windows_core::IUnknownImpl {
    fn ChannelSearchKind(&self) -> windows_core::Result<CoreWebView2ChannelSearchKind>;
    fn SetChannelSearchKind(
        &self,
        value: CoreWebView2ChannelSearchKind,
    ) -> windows_core::Result<()>;
    fn ReleaseChannels(&self) -> windows_core::Result<CoreWebView2ReleaseChannels>;
    fn SetReleaseChannels(&self, value: CoreWebView2ReleaseChannels) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions7_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions7_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ChannelSearchKind<
            Identity: ICoreWebView2EnvironmentOptions7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ChannelSearchKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions7_Impl::ChannelSearchKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetChannelSearchKind<
            Identity: ICoreWebView2EnvironmentOptions7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2ChannelSearchKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions7_Impl::SetChannelSearchKind(this, value).into()
            }
        }
        unsafe extern "system" fn ReleaseChannels<
            Identity: ICoreWebView2EnvironmentOptions7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ReleaseChannels,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions7_Impl::ReleaseChannels(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetReleaseChannels<
            Identity: ICoreWebView2EnvironmentOptions7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2ReleaseChannels,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions7_Impl::SetReleaseChannels(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions7,
                OFFSET,
            >(),
            ChannelSearchKind: ChannelSearchKind::<Identity, OFFSET>,
            SetChannelSearchKind: SetChannelSearchKind::<Identity, OFFSET>,
            ReleaseChannels: ReleaseChannels::<Identity, OFFSET>,
            SetReleaseChannels: SetReleaseChannels::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ChannelSearchKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ChannelSearchKind,
    ) -> windows_core::HRESULT,
    pub SetChannelSearchKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2ChannelSearchKind,
    ) -> windows_core::HRESULT,
    pub ReleaseChannels: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ReleaseChannels,
    ) -> windows_core::HRESULT,
    pub SetReleaseChannels: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2ReleaseChannels,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions8,
    ICoreWebView2EnvironmentOptions8_Vtbl,
    0xf143e9d2_2669_5b6a_8f88_7b05c9e1ef4d
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions8 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions8";
}
pub trait ICoreWebView2EnvironmentOptions8_Impl: windows_core::IUnknownImpl {
    fn ScrollBarStyle(&self) -> windows_core::Result<CoreWebView2ScrollbarStyle>;
    fn SetScrollBarStyle(&self, value: CoreWebView2ScrollbarStyle) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions8_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions8_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ScrollBarStyle<
            Identity: ICoreWebView2EnvironmentOptions8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ScrollbarStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions8_Impl::ScrollBarStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScrollBarStyle<
            Identity: ICoreWebView2EnvironmentOptions8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2ScrollbarStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions8_Impl::SetScrollBarStyle(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions8,
                OFFSET,
            >(),
            ScrollBarStyle: ScrollBarStyle::<Identity, OFFSET>,
            SetScrollBarStyle: SetScrollBarStyle::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ScrollBarStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ScrollbarStyle,
    ) -> windows_core::HRESULT,
    pub SetScrollBarStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2ScrollbarStyle,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions_Manual,
    ICoreWebView2EnvironmentOptions_Manual_Vtbl,
    0x1f104443_ea93_5a37_b791_34e6a31172ed
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual";
}
pub trait ICoreWebView2EnvironmentOptions_Manual_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2EnvironmentOptions_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentOptions_Manual_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions_Manual,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentOptions_Manual3,
    ICoreWebView2EnvironmentOptions_Manual3_Vtbl,
    0x665e9c11_ca1b_5255_a6f5_d741ac39e18f
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentOptions_Manual3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentOptions_Manual3 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions_Manual3";
}
pub trait ICoreWebView2EnvironmentOptions_Manual3_Impl: windows_core::IUnknownImpl {
    fn CustomSchemeRegistrations(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<CoreWebView2CustomSchemeRegistration>>;
    fn SetCustomSchemeRegistrations(
        &self,
        value: windows_core::Ref<
            windows_collections::IVector<CoreWebView2CustomSchemeRegistration>,
        >,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions_Manual3_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2EnvironmentOptions_Manual3_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CustomSchemeRegistrations<
            Identity: ICoreWebView2EnvironmentOptions_Manual3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentOptions_Manual3_Impl::CustomSchemeRegistrations(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCustomSchemeRegistrations<
            Identity: ICoreWebView2EnvironmentOptions_Manual3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2EnvironmentOptions_Manual3_Impl::SetCustomSchemeRegistrations(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentOptions_Manual3,
                OFFSET,
            >(),
            CustomSchemeRegistrations: CustomSchemeRegistrations::<Identity, OFFSET>,
            SetCustomSchemeRegistrations: SetCustomSchemeRegistrations::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions_Manual3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions_Manual3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CustomSchemeRegistrations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCustomSchemeRegistrations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentStatics,
    ICoreWebView2EnvironmentStatics_Vtbl,
    0x0e33f804_f20b_5635_8491_162aaa27517b
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentStatics {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics";
}
pub trait ICoreWebView2EnvironmentStatics_Impl: windows_core::IUnknownImpl {
    fn CreateAsync(
        &self,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Environment>>;
    fn CreateWithOptionsAsync(
        &self,
        browserExecutableFolder: &windows_core::HSTRING,
        userDataFolder: &windows_core::HSTRING,
        options: windows_core::Ref<CoreWebView2EnvironmentOptions>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Environment>>;
    fn GetAvailableBrowserVersionString(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn GetAvailableBrowserVersionString2(
        &self,
        browserExecutableFolder: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn CompareBrowserVersionString(
        &self,
        browserVersionString1: &windows_core::HSTRING,
        browserVersionString2: &windows_core::HSTRING,
    ) -> windows_core::Result<i32>;
}
impl ICoreWebView2EnvironmentStatics_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateAsync<
            Identity: ICoreWebView2EnvironmentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics_Impl::CreateAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateWithOptionsAsync<
            Identity: ICoreWebView2EnvironmentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            browserexecutablefolder: *mut core::ffi::c_void,
            userdatafolder: *mut core::ffi::c_void,
            options: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics_Impl::CreateWithOptionsAsync(
                    this,
                    core::mem::transmute(&browserexecutablefolder),
                    core::mem::transmute(&userdatafolder),
                    core::mem::transmute_copy(&options),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAvailableBrowserVersionString<
            Identity: ICoreWebView2EnvironmentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics_Impl::GetAvailableBrowserVersionString(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAvailableBrowserVersionString2<
            Identity: ICoreWebView2EnvironmentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            browserexecutablefolder: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics_Impl::GetAvailableBrowserVersionString2(
                    this,
                    core::mem::transmute(&browserexecutablefolder),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CompareBrowserVersionString<
            Identity: ICoreWebView2EnvironmentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            browserversionstring1: *mut core::ffi::c_void,
            browserversionstring2: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics_Impl::CompareBrowserVersionString(
                    this,
                    core::mem::transmute(&browserversionstring1),
                    core::mem::transmute(&browserversionstring2),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentStatics,
                OFFSET,
            >(),
            CreateAsync: CreateAsync::<Identity, OFFSET>,
            CreateWithOptionsAsync: CreateWithOptionsAsync::<Identity, OFFSET>,
            GetAvailableBrowserVersionString: GetAvailableBrowserVersionString::<Identity, OFFSET>,
            GetAvailableBrowserVersionString2: GetAvailableBrowserVersionString2::<Identity, OFFSET>,
            CompareBrowserVersionString: CompareBrowserVersionString::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateWithOptionsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAvailableBrowserVersionString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAvailableBrowserVersionString2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CompareBrowserVersionString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2EnvironmentStatics2,
    ICoreWebView2EnvironmentStatics2_Vtbl,
    0xdcba13e4_ee49_5860_8499_c49161a7d8ce
);
impl windows_core::RuntimeType for ICoreWebView2EnvironmentStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2EnvironmentStatics2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics2";
}
pub trait ICoreWebView2EnvironmentStatics2_Impl: windows_core::IUnknownImpl {
    fn GetAvailableBrowserVersionStringWithOptions(
        &self,
        browserExecutableFolder: &windows_core::HSTRING,
        options: windows_core::Ref<CoreWebView2EnvironmentOptions>,
    ) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2EnvironmentStatics2_Vtbl {
    pub const fn new<Identity: ICoreWebView2EnvironmentStatics2_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GetAvailableBrowserVersionStringWithOptions<
            Identity: ICoreWebView2EnvironmentStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            browserexecutablefolder: *mut core::ffi::c_void,
            options: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2EnvironmentStatics2_Impl:: GetAvailableBrowserVersionStringWithOptions ( this , core::mem::transmute ( & browserexecutablefolder ) , core::mem::transmute_copy ( & options ) , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2EnvironmentStatics2,
                OFFSET,
            >(),
            GetAvailableBrowserVersionStringWithOptions:
                GetAvailableBrowserVersionStringWithOptions::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetAvailableBrowserVersionStringWithOptions:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Environment_Manual,
    ICoreWebView2Environment_Manual_Vtbl,
    0xf51cfabe_73ad_5635_a935_6386aef9238e
);
impl windows_core::RuntimeType for ICoreWebView2Environment_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Environment_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Environment_Manual";
}
pub trait ICoreWebView2Environment_Manual_Impl: windows_core::IUnknownImpl {
    fn CreateCoreWebView2ControllerAsync(
        &self,
        ParentWindow: windows_core::Ref<CoreWebView2ControllerWindowReference>,
        options: windows_core::Ref<CoreWebView2ControllerOptions>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2Controller>>;
    fn CreateCoreWebView2CompositionControllerAsync(
        &self,
        ParentWindow: windows_core::Ref<CoreWebView2ControllerWindowReference>,
        options: windows_core::Ref<CoreWebView2ControllerOptions>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2CompositionController>>;
}
impl ICoreWebView2Environment_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2Environment_Manual_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateCoreWebView2ControllerAsync<
            Identity: ICoreWebView2Environment_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parentwindow: *mut core::ffi::c_void,
            options: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Manual_Impl::CreateCoreWebView2ControllerAsync(
                    this,
                    core::mem::transmute_copy(&parentwindow),
                    core::mem::transmute_copy(&options),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateCoreWebView2CompositionControllerAsync<
            Identity: ICoreWebView2Environment_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parentwindow: *mut core::ffi::c_void,
            options: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Environment_Manual_Impl:: CreateCoreWebView2CompositionControllerAsync ( this , core::mem::transmute_copy ( & parentwindow ) , core::mem::transmute_copy ( & options ) , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Environment_Manual,
                OFFSET,
            >(),
            CreateCoreWebView2ControllerAsync: CreateCoreWebView2ControllerAsync::<Identity, OFFSET>,
            CreateCoreWebView2CompositionControllerAsync:
                CreateCoreWebView2CompositionControllerAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Environment_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateCoreWebView2ControllerAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateCoreWebView2CompositionControllerAsync:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ExecuteScriptResult,
    ICoreWebView2ExecuteScriptResult_Vtbl,
    0x9bef80f9_580c_56a0_8db9_75ec792c8421
);
impl windows_core::RuntimeType for ICoreWebView2ExecuteScriptResult {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ExecuteScriptResult {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult";
}
pub trait ICoreWebView2ExecuteScriptResult_Impl: windows_core::IUnknownImpl {
    fn Succeeded(&self) -> windows_core::Result<bool>;
    fn ResultAsJson(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Exception(&self) -> windows_core::Result<CoreWebView2ScriptException>;
}
impl ICoreWebView2ExecuteScriptResult_Vtbl {
    pub const fn new<Identity: ICoreWebView2ExecuteScriptResult_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Succeeded<
            Identity: ICoreWebView2ExecuteScriptResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ExecuteScriptResult_Impl::Succeeded(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ResultAsJson<
            Identity: ICoreWebView2ExecuteScriptResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ExecuteScriptResult_Impl::ResultAsJson(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Exception<
            Identity: ICoreWebView2ExecuteScriptResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ExecuteScriptResult_Impl::Exception(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ExecuteScriptResult,
                OFFSET,
            >(),
            Succeeded: Succeeded::<Identity, OFFSET>,
            ResultAsJson: ResultAsJson::<Identity, OFFSET>,
            Exception: Exception::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ExecuteScriptResult as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ExecuteScriptResult_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Succeeded:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ResultAsJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Exception: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ExecuteScriptResult_Manual,
    ICoreWebView2ExecuteScriptResult_Manual_Vtbl,
    0x5931bc73_376c_5ba7_bcbb_3caec6d1ff5b
);
impl windows_core::RuntimeType for ICoreWebView2ExecuteScriptResult_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ExecuteScriptResult_Manual {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ExecuteScriptResult_Manual";
}
pub trait ICoreWebView2ExecuteScriptResult_Manual_Impl: windows_core::IUnknownImpl {
    fn TryGetResultAsString(
        &self,
        stringResult: &mut windows_core::HSTRING,
    ) -> windows_core::Result<i32>;
}
impl ICoreWebView2ExecuteScriptResult_Manual_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ExecuteScriptResult_Manual_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn TryGetResultAsString<
            Identity: ICoreWebView2ExecuteScriptResult_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stringresult: *mut *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ExecuteScriptResult_Manual_Impl::TryGetResultAsString(
                    this,
                    core::mem::transmute_copy(&stringresult),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ExecuteScriptResult_Manual,
                OFFSET,
            >(),
            TryGetResultAsString: TryGetResultAsString::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ExecuteScriptResult_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ExecuteScriptResult_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TryGetResultAsString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2File,
    ICoreWebView2File_Vtbl,
    0xcab45512_9594_50f1_ac3c_9cc103b574a3
);
impl windows_core::RuntimeType for ICoreWebView2File {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2File {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2File";
}
pub trait ICoreWebView2File_Impl: windows_core::IUnknownImpl {
    fn Path(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2File_Vtbl {
    pub const fn new<Identity: ICoreWebView2File_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Path<Identity: ICoreWebView2File_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2File_Impl::Path(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2File, OFFSET>(),
            Path: Path::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2File as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2File_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Frame,
    ICoreWebView2Frame_Vtbl,
    0x02ffcbf9_19e7_5bb8_8273_346420fb1503
);
impl windows_core::RuntimeType for ICoreWebView2Frame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Frame {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Frame";
}
pub trait ICoreWebView2Frame_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn NameChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2Frame, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNameChanged(&self, token: i64) -> windows_core::Result<()>;
    fn Destroyed(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2Frame, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDestroyed(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveHostObjectFromScript(&self, name: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn IsDestroyed(&self) -> windows_core::Result<i32>;
}
impl ICoreWebView2Frame_Vtbl {
    pub const fn new<Identity: ICoreWebView2Frame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Name<Identity: ICoreWebView2Frame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NameChanged<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame_Impl::NameChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNameChanged<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame_Impl::RemoveNameChanged(this, token).into()
            }
        }
        unsafe extern "system" fn Destroyed<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame_Impl::Destroyed(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDestroyed<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame_Impl::RemoveDestroyed(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveHostObjectFromScript<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame_Impl::RemoveHostObjectFromScript(
                    this,
                    core::mem::transmute(&name),
                )
                .into()
            }
        }
        unsafe extern "system" fn IsDestroyed<
            Identity: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame_Impl::IsDestroyed(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Frame, OFFSET>(),
            Name: Name::<Identity, OFFSET>,
            NameChanged: NameChanged::<Identity, OFFSET>,
            RemoveNameChanged: RemoveNameChanged::<Identity, OFFSET>,
            Destroyed: Destroyed::<Identity, OFFSET>,
            RemoveDestroyed: RemoveDestroyed::<Identity, OFFSET>,
            RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity, OFFSET>,
            IsDestroyed: IsDestroyed::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Frame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NameChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNameChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Destroyed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDestroyed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub RemoveHostObjectFromScript: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsDestroyed:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Frame2,
    ICoreWebView2Frame2_Vtbl,
    0x33dbc9c9_a103_56e3_b722_363814200320
);
impl windows_core::RuntimeType for ICoreWebView2Frame2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Frame2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Frame2";
}
pub trait ICoreWebView2Frame2_Impl: windows_core::IUnknownImpl {
    fn NavigationStarting(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()>;
    fn ContentLoading(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2ContentLoadingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveContentLoading(&self, token: i64) -> windows_core::Result<()>;
    fn NavigationCompleted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn DOMContentLoaded(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2DOMContentLoadedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDOMContentLoaded(&self, token: i64) -> windows_core::Result<()>;
    fn WebMessageReceived(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()>;
    fn ExecuteScriptAsync(
        &self,
        javaScript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
    fn PostWebMessageAsJson(
        &self,
        webMessageAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn PostWebMessageAsString(
        &self,
        webMessageAsString: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Frame2_Vtbl {
    pub const fn new<Identity: ICoreWebView2Frame2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn NavigationStarting<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::NavigationStarting(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationStarting<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::RemoveNavigationStarting(this, token).into()
            }
        }
        unsafe extern "system" fn ContentLoading<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::ContentLoading(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveContentLoading<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::RemoveContentLoading(this, token).into()
            }
        }
        unsafe extern "system" fn NavigationCompleted<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::NavigationCompleted(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationCompleted<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::RemoveNavigationCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn DOMContentLoaded<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::DOMContentLoaded(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDOMContentLoaded<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::RemoveDOMContentLoaded(this, token).into()
            }
        }
        unsafe extern "system" fn WebMessageReceived<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::WebMessageReceived(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWebMessageReceived<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::RemoveWebMessageReceived(this, token).into()
            }
        }
        unsafe extern "system" fn ExecuteScriptAsync<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            javascript: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame2_Impl::ExecuteScriptAsync(
                    this,
                    core::mem::transmute(&javascript),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PostWebMessageAsJson<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            webmessageasjson: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::PostWebMessageAsJson(
                    this,
                    core::mem::transmute(&webmessageasjson),
                )
                .into()
            }
        }
        unsafe extern "system" fn PostWebMessageAsString<
            Identity: ICoreWebView2Frame2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            webmessageasstring: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame2_Impl::PostWebMessageAsString(
                    this,
                    core::mem::transmute(&webmessageasstring),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Frame2, OFFSET>(),
            NavigationStarting: NavigationStarting::<Identity, OFFSET>,
            RemoveNavigationStarting: RemoveNavigationStarting::<Identity, OFFSET>,
            ContentLoading: ContentLoading::<Identity, OFFSET>,
            RemoveContentLoading: RemoveContentLoading::<Identity, OFFSET>,
            NavigationCompleted: NavigationCompleted::<Identity, OFFSET>,
            RemoveNavigationCompleted: RemoveNavigationCompleted::<Identity, OFFSET>,
            DOMContentLoaded: DOMContentLoaded::<Identity, OFFSET>,
            RemoveDOMContentLoaded: RemoveDOMContentLoaded::<Identity, OFFSET>,
            WebMessageReceived: WebMessageReceived::<Identity, OFFSET>,
            RemoveWebMessageReceived: RemoveWebMessageReceived::<Identity, OFFSET>,
            ExecuteScriptAsync: ExecuteScriptAsync::<Identity, OFFSET>,
            PostWebMessageAsJson: PostWebMessageAsJson::<Identity, OFFSET>,
            PostWebMessageAsString: PostWebMessageAsString::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Frame2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NavigationStarting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNavigationStarting:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ContentLoading: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveContentLoading:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NavigationCompleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveNavigationCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DOMContentLoaded: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDOMContentLoaded:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub WebMessageReceived: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveWebMessageReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ExecuteScriptAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PostWebMessageAsJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PostWebMessageAsString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Frame3,
    ICoreWebView2Frame3_Vtbl,
    0x6545dac4_1666_50a5_bbe8_ec04842a466f
);
impl windows_core::RuntimeType for ICoreWebView2Frame3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Frame3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Frame3";
}
pub trait ICoreWebView2Frame3_Impl: windows_core::IUnknownImpl {
    fn PermissionRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2Frame,
                CoreWebView2PermissionRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemovePermissionRequested(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2Frame3_Vtbl {
    pub const fn new<Identity: ICoreWebView2Frame3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PermissionRequested<
            Identity: ICoreWebView2Frame3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame3_Impl::PermissionRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovePermissionRequested<
            Identity: ICoreWebView2Frame3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame3_Impl::RemovePermissionRequested(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Frame3, OFFSET>(),
            PermissionRequested: PermissionRequested::<Identity, OFFSET>,
            RemovePermissionRequested: RemovePermissionRequested::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Frame3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PermissionRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemovePermissionRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Frame4,
    ICoreWebView2Frame4_Vtbl,
    0xd46cd758_64b9_543e_a7b8_cac9b4c059a7
);
impl windows_core::RuntimeType for ICoreWebView2Frame4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Frame4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Frame4";
}
pub trait ICoreWebView2Frame4_Impl: windows_core::IUnknownImpl {
    fn PostSharedBufferToScript(
        &self,
        sharedBuffer: windows_core::Ref<CoreWebView2SharedBuffer>,
        access: CoreWebView2SharedBufferAccess,
        additionalDataAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Frame4_Vtbl {
    pub const fn new<Identity: ICoreWebView2Frame4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PostSharedBufferToScript<
            Identity: ICoreWebView2Frame4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sharedbuffer: *mut core::ffi::c_void,
            access: CoreWebView2SharedBufferAccess,
            additionaldataasjson: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Frame4_Impl::PostSharedBufferToScript(
                    this,
                    core::mem::transmute_copy(&sharedbuffer),
                    access,
                    core::mem::transmute(&additionaldataasjson),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Frame4, OFFSET>(),
            PostSharedBufferToScript: PostSharedBufferToScript::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Frame4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PostSharedBufferToScript: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2SharedBufferAccess,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Frame5,
    ICoreWebView2Frame5_Vtbl,
    0x27c4803d_9a7f_599a_bf72_07e8dc964a5b
);
impl windows_core::RuntimeType for ICoreWebView2Frame5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Frame5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Frame5";
}
pub trait ICoreWebView2Frame5_Impl: windows_core::IUnknownImpl {
    fn FrameId(&self) -> windows_core::Result<u32>;
}
impl ICoreWebView2Frame5_Vtbl {
    pub const fn new<Identity: ICoreWebView2Frame5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FrameId<
            Identity: ICoreWebView2Frame5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Frame5_Impl::FrameId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Frame5, OFFSET>(),
            FrameId: FrameId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Frame5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FrameId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2FrameCreatedEventArgs,
    ICoreWebView2FrameCreatedEventArgs_Vtbl,
    0x527b01b8_fc6d_5543_8dce_96cdfdb32c81
);
impl windows_core::RuntimeType for ICoreWebView2FrameCreatedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2FrameCreatedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2FrameCreatedEventArgs";
}
pub trait ICoreWebView2FrameCreatedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Frame(&self) -> windows_core::Result<CoreWebView2Frame>;
}
impl ICoreWebView2FrameCreatedEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2FrameCreatedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Frame<
            Identity: ICoreWebView2FrameCreatedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameCreatedEventArgs_Impl::Frame(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2FrameCreatedEventArgs,
                OFFSET,
            >(),
            Frame: Frame::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2FrameCreatedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameCreatedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Frame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2FrameInfo,
    ICoreWebView2FrameInfo_Vtbl,
    0xf9b82e06_73f3_513b_bc2c_445ddedba976
);
impl windows_core::RuntimeType for ICoreWebView2FrameInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2FrameInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo";
}
pub trait ICoreWebView2FrameInfo_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Source(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2FrameInfo_Vtbl {
    pub const fn new<Identity: ICoreWebView2FrameInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Name<
            Identity: ICoreWebView2FrameInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameInfo_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Source<
            Identity: ICoreWebView2FrameInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameInfo_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2FrameInfo, OFFSET>(
            ),
            Name: Name::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2FrameInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2FrameInfo2,
    ICoreWebView2FrameInfo2_Vtbl,
    0x7f0770c6_0d5e_529b_b00c_f15656f605c4
);
impl windows_core::RuntimeType for ICoreWebView2FrameInfo2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2FrameInfo2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2FrameInfo2";
}
pub trait ICoreWebView2FrameInfo2_Impl: windows_core::IUnknownImpl {
    fn ParentFrameInfo(&self) -> windows_core::Result<CoreWebView2FrameInfo>;
    fn FrameId(&self) -> windows_core::Result<u32>;
    fn FrameKind(&self) -> windows_core::Result<CoreWebView2FrameKind>;
}
impl ICoreWebView2FrameInfo2_Vtbl {
    pub const fn new<Identity: ICoreWebView2FrameInfo2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ParentFrameInfo<
            Identity: ICoreWebView2FrameInfo2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameInfo2_Impl::ParentFrameInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FrameId<
            Identity: ICoreWebView2FrameInfo2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameInfo2_Impl::FrameId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FrameKind<
            Identity: ICoreWebView2FrameInfo2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2FrameKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2FrameInfo2_Impl::FrameKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2FrameInfo2, OFFSET>(
            ),
            ParentFrameInfo: ParentFrameInfo::<Identity, OFFSET>,
            FrameId: FrameId::<Identity, OFFSET>,
            FrameKind: FrameKind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2FrameInfo2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameInfo2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ParentFrameInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FrameId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub FrameKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2FrameKind,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2HttpHeadersCollectionIterator,
    ICoreWebView2HttpHeadersCollectionIterator_Vtbl,
    0xadf264ee_d980_5f48_a60e_8705de046608
);
impl windows_core::RuntimeType for ICoreWebView2HttpHeadersCollectionIterator {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2HttpHeadersCollectionIterator {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIterator";
}
pub trait ICoreWebView2HttpHeadersCollectionIterator_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2HttpHeadersCollectionIterator_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2HttpHeadersCollectionIterator,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2HttpHeadersCollectionIterator as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2HttpRequestHeaders,
    ICoreWebView2HttpRequestHeaders_Vtbl,
    0xdc2226c7_3515_55bb_bcb2_57b78f86b91d
);
impl windows_core::RuntimeType for ICoreWebView2HttpRequestHeaders {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2HttpRequestHeaders {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeaders";
}
pub trait ICoreWebView2HttpRequestHeaders_Impl: windows_core::IUnknownImpl {
    fn GetHeader(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn GetHeaders(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2HttpHeadersCollectionIterator>;
    fn Contains(&self, name: &windows_core::HSTRING) -> windows_core::Result<bool>;
    fn SetHeader(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn RemoveHeader(&self, name: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2HttpRequestHeaders_Vtbl {
    pub const fn new<Identity: ICoreWebView2HttpRequestHeaders_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GetHeader<
            Identity: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpRequestHeaders_Impl::GetHeader(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHeaders<
            Identity: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpRequestHeaders_Impl::GetHeaders(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Contains<
            Identity: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpRequestHeaders_Impl::Contains(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeader<
            Identity: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2HttpRequestHeaders_Impl::SetHeader(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveHeader<
            Identity: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2HttpRequestHeaders_Impl::RemoveHeader(
                    this,
                    core::mem::transmute(&name),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2HttpRequestHeaders,
                OFFSET,
            >(),
            GetHeader: GetHeader::<Identity, OFFSET>,
            GetHeaders: GetHeaders::<Identity, OFFSET>,
            Contains: Contains::<Identity, OFFSET>,
            SetHeader: SetHeader::<Identity, OFFSET>,
            RemoveHeader: RemoveHeader::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2HttpRequestHeaders as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpRequestHeaders_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetHeaders: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Contains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2HttpResponseHeaders,
    ICoreWebView2HttpResponseHeaders_Vtbl,
    0xf3d383e9_747f_5574_8662_9a6b920cecd4
);
impl windows_core::RuntimeType for ICoreWebView2HttpResponseHeaders {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2HttpResponseHeaders {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeaders";
}
pub trait ICoreWebView2HttpResponseHeaders_Impl: windows_core::IUnknownImpl {
    fn AppendHeader(
        &self,
        name: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn Contains(&self, name: &windows_core::HSTRING) -> windows_core::Result<bool>;
    fn GetHeader(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn GetHeaders(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CoreWebView2HttpHeadersCollectionIterator>;
}
impl ICoreWebView2HttpResponseHeaders_Vtbl {
    pub const fn new<Identity: ICoreWebView2HttpResponseHeaders_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn AppendHeader<
            Identity: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2HttpResponseHeaders_Impl::AppendHeader(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Contains<
            Identity: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpResponseHeaders_Impl::Contains(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHeader<
            Identity: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpResponseHeaders_Impl::GetHeader(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHeaders<
            Identity: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2HttpResponseHeaders_Impl::GetHeaders(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2HttpResponseHeaders,
                OFFSET,
            >(),
            AppendHeader: AppendHeader::<Identity, OFFSET>,
            Contains: Contains::<Identity, OFFSET>,
            GetHeader: GetHeader::<Identity, OFFSET>,
            GetHeaders: GetHeaders::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2HttpResponseHeaders as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpResponseHeaders_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AppendHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Contains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub GetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetHeaders: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2LaunchingExternalUriSchemeEventArgs,
    ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl,
    0x6ab44f8d_ec6a_56a1_ae3c_9c55dff6cbc6
);
impl windows_core::RuntimeType for ICoreWebView2LaunchingExternalUriSchemeEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2LaunchingExternalUriSchemeEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2LaunchingExternalUriSchemeEventArgs";
}
pub trait ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn InitiatingOrigin(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn IsUserInitiated(&self) -> windows_core::Result<bool>;
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InitiatingOrigin<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::InitiatingOrigin(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::IsUserInitiated(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2LaunchingExternalUriSchemeEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2LaunchingExternalUriSchemeEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            InitiatingOrigin: InitiatingOrigin::<Identity, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2LaunchingExternalUriSchemeEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2LaunchingExternalUriSchemeEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitiatingOrigin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsUserInitiated:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2MoveFocusRequestedEventArgs,
    ICoreWebView2MoveFocusRequestedEventArgs_Vtbl,
    0x2e29103b_ecdd_5c1d_b288_3f066d608919
);
impl windows_core::RuntimeType for ICoreWebView2MoveFocusRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2MoveFocusRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgs";
}
pub trait ICoreWebView2MoveFocusRequestedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Reason(&self) -> windows_core::Result<CoreWebView2MoveFocusReason>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Reason<
            Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2MoveFocusReason,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2MoveFocusRequestedEventArgs_Impl::Reason(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2MoveFocusRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2MoveFocusRequestedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2MoveFocusRequestedEventArgs,
                OFFSET,
            >(),
            Reason: Reason::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2MoveFocusRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Reason: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2MoveFocusReason,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NavigationCompletedEventArgs,
    ICoreWebView2NavigationCompletedEventArgs_Vtbl,
    0x4865e238_036a_5664_95a3_447ec44cf498
);
impl windows_core::RuntimeType for ICoreWebView2NavigationCompletedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NavigationCompletedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs";
}
pub trait ICoreWebView2NavigationCompletedEventArgs_Impl: windows_core::IUnknownImpl {
    fn IsSuccess(&self) -> windows_core::Result<bool>;
    fn WebErrorStatus(&self) -> windows_core::Result<CoreWebView2WebErrorStatus>;
    fn NavigationId(&self) -> windows_core::Result<u64>;
}
impl ICoreWebView2NavigationCompletedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsSuccess<
            Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationCompletedEventArgs_Impl::IsSuccess(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WebErrorStatus<
            Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2WebErrorStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationCompletedEventArgs_Impl::WebErrorStatus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationId<
            Identity: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationCompletedEventArgs_Impl::NavigationId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NavigationCompletedEventArgs,
                OFFSET,
            >(),
            IsSuccess: IsSuccess::<Identity, OFFSET>,
            WebErrorStatus: WebErrorStatus::<Identity, OFFSET>,
            NavigationId: NavigationId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationCompletedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationCompletedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSuccess:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub WebErrorStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2WebErrorStatus,
    ) -> windows_core::HRESULT,
    pub NavigationId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NavigationCompletedEventArgs2,
    ICoreWebView2NavigationCompletedEventArgs2_Vtbl,
    0x6e4d3c33_a6e2_5896_90c5_68b4b5e55b40
);
impl windows_core::RuntimeType for ICoreWebView2NavigationCompletedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NavigationCompletedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs2";
}
pub trait ICoreWebView2NavigationCompletedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn HttpStatusCode(&self) -> windows_core::Result<i32>;
}
impl ICoreWebView2NavigationCompletedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NavigationCompletedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn HttpStatusCode<
            Identity: ICoreWebView2NavigationCompletedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationCompletedEventArgs2_Impl::HttpStatusCode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NavigationCompletedEventArgs2,
                OFFSET,
            >(),
            HttpStatusCode: HttpStatusCode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationCompletedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationCompletedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HttpStatusCode:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NavigationStartingEventArgs,
    ICoreWebView2NavigationStartingEventArgs_Vtbl,
    0x548d23d3_fea3_5616_bd05_ae08066c86d3
);
impl windows_core::RuntimeType for ICoreWebView2NavigationStartingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NavigationStartingEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs";
}
pub trait ICoreWebView2NavigationStartingEventArgs_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn IsUserInitiated(&self) -> windows_core::Result<bool>;
    fn IsRedirected(&self) -> windows_core::Result<bool>;
    fn RequestHeaders(&self) -> windows_core::Result<CoreWebView2HttpRequestHeaders>;
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn NavigationId(&self) -> windows_core::Result<u64>;
}
impl ICoreWebView2NavigationStartingEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::IsUserInitiated(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsRedirected<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::IsRedirected(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestHeaders<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::RequestHeaders(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2NavigationStartingEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn NavigationId<
            Identity: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs_Impl::NavigationId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NavigationStartingEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, OFFSET>,
            IsRedirected: IsRedirected::<Identity, OFFSET>,
            RequestHeaders: RequestHeaders::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            NavigationId: NavigationId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationStartingEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationStartingEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsUserInitiated:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsRedirected:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub RequestHeaders: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub NavigationId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NavigationStartingEventArgs2,
    ICoreWebView2NavigationStartingEventArgs2_Vtbl,
    0xd7a3824e_7654_5c4b_b069_e6501634d84c
);
impl windows_core::RuntimeType for ICoreWebView2NavigationStartingEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NavigationStartingEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs2";
}
pub trait ICoreWebView2NavigationStartingEventArgs2_Impl: windows_core::IUnknownImpl {
    fn AdditionalAllowedFrameAncestors(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAdditionalAllowedFrameAncestors(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2NavigationStartingEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NavigationStartingEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn AdditionalAllowedFrameAncestors<
            Identity: ICoreWebView2NavigationStartingEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs2_Impl:: AdditionalAllowedFrameAncestors ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn SetAdditionalAllowedFrameAncestors<
            Identity: ICoreWebView2NavigationStartingEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2NavigationStartingEventArgs2_Impl::SetAdditionalAllowedFrameAncestors(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NavigationStartingEventArgs2,
                OFFSET,
            >(),
            AdditionalAllowedFrameAncestors: AdditionalAllowedFrameAncestors::<Identity, OFFSET>,
            SetAdditionalAllowedFrameAncestors: SetAdditionalAllowedFrameAncestors::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationStartingEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationStartingEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AdditionalAllowedFrameAncestors: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAdditionalAllowedFrameAncestors: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NavigationStartingEventArgs3,
    ICoreWebView2NavigationStartingEventArgs3_Vtbl,
    0x17db72f6_e995_59f6_91ba_4411e755f3ab
);
impl windows_core::RuntimeType for ICoreWebView2NavigationStartingEventArgs3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NavigationStartingEventArgs3 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs3";
}
pub trait ICoreWebView2NavigationStartingEventArgs3_Impl: windows_core::IUnknownImpl {
    fn NavigationKind(&self) -> windows_core::Result<CoreWebView2NavigationKind>;
}
impl ICoreWebView2NavigationStartingEventArgs3_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NavigationStartingEventArgs3_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn NavigationKind<
            Identity: ICoreWebView2NavigationStartingEventArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2NavigationKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NavigationStartingEventArgs3_Impl::NavigationKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NavigationStartingEventArgs3,
                OFFSET,
            >(),
            NavigationKind: NavigationKind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationStartingEventArgs3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationStartingEventArgs3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NavigationKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2NavigationKind,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NewWindowRequestedEventArgs,
    ICoreWebView2NewWindowRequestedEventArgs_Vtbl,
    0xe6e013ba_aec8_532e_9ac9_1590af7b25ec
);
impl windows_core::RuntimeType for ICoreWebView2NewWindowRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NewWindowRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs";
}
pub trait ICoreWebView2NewWindowRequestedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn NewWindow(&self) -> windows_core::Result<CoreWebView2>;
    fn SetNewWindow(&self, value: windows_core::Ref<CoreWebView2>) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
    fn IsUserInitiated(&self) -> windows_core::Result<bool>;
    fn WindowFeatures(&self) -> windows_core::Result<CoreWebView2WindowFeatures>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NewWindow<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::NewWindow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNewWindow<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2NewWindowRequestedEventArgs_Impl::SetNewWindow(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2NewWindowRequestedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::IsUserInitiated(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowFeatures<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::WindowFeatures(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NewWindowRequestedEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            NewWindow: NewWindow::<Identity, OFFSET>,
            SetNewWindow: SetNewWindow::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, OFFSET>,
            WindowFeatures: WindowFeatures::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NewWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNewWindow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsUserInitiated:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub WindowFeatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NewWindowRequestedEventArgs2,
    ICoreWebView2NewWindowRequestedEventArgs2_Vtbl,
    0xf4806259_e63a_5c0b_a02c_5f10e11094f4
);
impl windows_core::RuntimeType for ICoreWebView2NewWindowRequestedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NewWindowRequestedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs2";
}
pub trait ICoreWebView2NewWindowRequestedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Name<
            Identity: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs2_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NewWindowRequestedEventArgs2,
                OFFSET,
            >(),
            Name: Name::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NewWindowRequestedEventArgs3,
    ICoreWebView2NewWindowRequestedEventArgs3_Vtbl,
    0x1f0f7826_8d70_5720_bb8b_d87f63cbfb9c
);
impl windows_core::RuntimeType for ICoreWebView2NewWindowRequestedEventArgs3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NewWindowRequestedEventArgs3 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs3";
}
pub trait ICoreWebView2NewWindowRequestedEventArgs3_Impl: windows_core::IUnknownImpl {
    fn OriginalSourceFrameInfo(&self) -> windows_core::Result<CoreWebView2FrameInfo>;
}
impl ICoreWebView2NewWindowRequestedEventArgs3_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NewWindowRequestedEventArgs3_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn OriginalSourceFrameInfo<
            Identity: ICoreWebView2NewWindowRequestedEventArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NewWindowRequestedEventArgs3_Impl::OriginalSourceFrameInfo(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NewWindowRequestedEventArgs3,
                OFFSET,
            >(),
            OriginalSourceFrameInfo: OriginalSourceFrameInfo::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventArgs3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventArgs3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OriginalSourceFrameInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2NonClientRegionChangedEventArgs,
    ICoreWebView2NonClientRegionChangedEventArgs_Vtbl,
    0x4f583622_cd0f_55d6_be7e_8a8f99a20e62
);
impl windows_core::RuntimeType for ICoreWebView2NonClientRegionChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2NonClientRegionChangedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2NonClientRegionChangedEventArgs";
}
pub trait ICoreWebView2NonClientRegionChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn RegionKind(&self) -> windows_core::Result<CoreWebView2NonClientRegionKind>;
}
impl ICoreWebView2NonClientRegionChangedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2NonClientRegionChangedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn RegionKind<
            Identity: ICoreWebView2NonClientRegionChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2NonClientRegionKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2NonClientRegionChangedEventArgs_Impl::RegionKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2NonClientRegionChangedEventArgs,
                OFFSET,
            >(),
            RegionKind: RegionKind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2NonClientRegionChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NonClientRegionChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RegionKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2NonClientRegionKind,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PermissionRequestedEventArgs,
    ICoreWebView2PermissionRequestedEventArgs_Vtbl,
    0x118bdd9b_cef1_5910_929e_c1a321328239
);
impl windows_core::RuntimeType for ICoreWebView2PermissionRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PermissionRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs";
}
pub trait ICoreWebView2PermissionRequestedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn PermissionKind(&self) -> windows_core::Result<CoreWebView2PermissionKind>;
    fn IsUserInitiated(&self) -> windows_core::Result<bool>;
    fn State(&self) -> windows_core::Result<CoreWebView2PermissionState>;
    fn SetState(&self, value: CoreWebView2PermissionState) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2PermissionRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PermissionKind<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PermissionKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs_Impl::PermissionKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs_Impl::IsUserInitiated(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn State<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PermissionState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs_Impl::State(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetState<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PermissionState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PermissionRequestedEventArgs_Impl::SetState(this, value).into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PermissionRequestedEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            PermissionKind: PermissionKind::<Identity, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, OFFSET>,
            State: State::<Identity, OFFSET>,
            SetState: SetState::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PermissionKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PermissionKind,
    ) -> windows_core::HRESULT,
    pub IsUserInitiated:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub State: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PermissionState,
    ) -> windows_core::HRESULT,
    pub SetState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PermissionState,
    ) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PermissionRequestedEventArgs2,
    ICoreWebView2PermissionRequestedEventArgs2_Vtbl,
    0xa6652fba_ebe5_5891_addc_cb37da8f7e66
);
impl windows_core::RuntimeType for ICoreWebView2PermissionRequestedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PermissionRequestedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs2";
}
pub trait ICoreWebView2PermissionRequestedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2PermissionRequestedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Handled<
            Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs2_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ICoreWebView2PermissionRequestedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PermissionRequestedEventArgs2_Impl::SetHandled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PermissionRequestedEventArgs2,
                OFFSET,
            >(),
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionRequestedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionRequestedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PermissionRequestedEventArgs3,
    ICoreWebView2PermissionRequestedEventArgs3_Vtbl,
    0x200e8bcc_bc11_5beb_aa7a_79d4c95d73aa
);
impl windows_core::RuntimeType for ICoreWebView2PermissionRequestedEventArgs3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PermissionRequestedEventArgs3 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs3";
}
pub trait ICoreWebView2PermissionRequestedEventArgs3_Impl: windows_core::IUnknownImpl {
    fn SavesInProfile(&self) -> windows_core::Result<bool>;
    fn SetSavesInProfile(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2PermissionRequestedEventArgs3_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn SavesInProfile<
            Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionRequestedEventArgs3_Impl::SavesInProfile(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSavesInProfile<
            Identity: ICoreWebView2PermissionRequestedEventArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PermissionRequestedEventArgs3_Impl::SetSavesInProfile(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PermissionRequestedEventArgs3,
                OFFSET,
            >(),
            SavesInProfile: SavesInProfile::<Identity, OFFSET>,
            SetSavesInProfile: SetSavesInProfile::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionRequestedEventArgs3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionRequestedEventArgs3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SavesInProfile:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetSavesInProfile:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PermissionSetting,
    ICoreWebView2PermissionSetting_Vtbl,
    0xb4158d0b_8ef8_575f_8e99_5fe02e8b579e
);
impl windows_core::RuntimeType for ICoreWebView2PermissionSetting {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PermissionSetting {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PermissionSetting";
}
pub trait ICoreWebView2PermissionSetting_Impl: windows_core::IUnknownImpl {
    fn PermissionKind(&self) -> windows_core::Result<CoreWebView2PermissionKind>;
    fn PermissionOrigin(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn PermissionState(&self) -> windows_core::Result<CoreWebView2PermissionState>;
}
impl ICoreWebView2PermissionSetting_Vtbl {
    pub const fn new<Identity: ICoreWebView2PermissionSetting_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PermissionKind<
            Identity: ICoreWebView2PermissionSetting_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PermissionKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionSetting_Impl::PermissionKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PermissionOrigin<
            Identity: ICoreWebView2PermissionSetting_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionSetting_Impl::PermissionOrigin(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PermissionState<
            Identity: ICoreWebView2PermissionSetting_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PermissionState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PermissionSetting_Impl::PermissionState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PermissionSetting,
                OFFSET,
            >(),
            PermissionKind: PermissionKind::<Identity, OFFSET>,
            PermissionOrigin: PermissionOrigin::<Identity, OFFSET>,
            PermissionState: PermissionState::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionSetting as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionSetting_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PermissionKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PermissionKind,
    ) -> windows_core::HRESULT,
    pub PermissionOrigin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PermissionState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PermissionState,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PointerInfo,
    ICoreWebView2PointerInfo_Vtbl,
    0xc3860e0d_c018_5a84_bc06_9f8f7b275dff
);
impl windows_core::RuntimeType for ICoreWebView2PointerInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PointerInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfo";
}
pub trait ICoreWebView2PointerInfo_Impl: windows_core::IUnknownImpl {
    fn PointerKind(&self) -> windows_core::Result<u32>;
    fn SetPointerKind(&self, value: u32) -> windows_core::Result<()>;
    fn PointerId(&self) -> windows_core::Result<u32>;
    fn SetPointerId(&self, value: u32) -> windows_core::Result<()>;
    fn FrameId(&self) -> windows_core::Result<u32>;
    fn SetFrameId(&self, value: u32) -> windows_core::Result<()>;
    fn PointerFlags(&self) -> windows_core::Result<u32>;
    fn SetPointerFlags(&self, value: u32) -> windows_core::Result<()>;
    fn PointerDeviceRect(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn SetPointerDeviceRect(&self, value: &windows::Foundation::Rect) -> windows_core::Result<()>;
    fn DisplayRect(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn SetDisplayRect(&self, value: &windows::Foundation::Rect) -> windows_core::Result<()>;
    fn PixelLocation(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetPixelLocation(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
    fn HimetricLocation(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetHimetricLocation(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
    fn PixelLocationRaw(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetPixelLocationRaw(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
    fn HimetricLocationRaw(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetHimetricLocationRaw(
        &self,
        value: &windows::Foundation::Point,
    ) -> windows_core::Result<()>;
    fn Time(&self) -> windows_core::Result<u32>;
    fn SetTime(&self, value: u32) -> windows_core::Result<()>;
    fn HistoryCount(&self) -> windows_core::Result<u32>;
    fn SetHistoryCount(&self, value: u32) -> windows_core::Result<()>;
    fn InputData(&self) -> windows_core::Result<i32>;
    fn SetInputData(&self, value: i32) -> windows_core::Result<()>;
    fn KeyStates(&self) -> windows_core::Result<u32>;
    fn SetKeyStates(&self, value: u32) -> windows_core::Result<()>;
    fn PerformanceCount(&self) -> windows_core::Result<u64>;
    fn SetPerformanceCount(&self, value: u64) -> windows_core::Result<()>;
    fn ButtonChangeKind(&self) -> windows_core::Result<i32>;
    fn SetButtonChangeKind(&self, value: i32) -> windows_core::Result<()>;
    fn PenFlags(&self) -> windows_core::Result<u32>;
    fn SetPenFlags(&self, value: u32) -> windows_core::Result<()>;
    fn PenMask(&self) -> windows_core::Result<u32>;
    fn SetPenMask(&self, value: u32) -> windows_core::Result<()>;
    fn PenPressure(&self) -> windows_core::Result<u32>;
    fn SetPenPressure(&self, value: u32) -> windows_core::Result<()>;
    fn PenRotation(&self) -> windows_core::Result<u32>;
    fn SetPenRotation(&self, value: u32) -> windows_core::Result<()>;
    fn PenTiltX(&self) -> windows_core::Result<i32>;
    fn SetPenTiltX(&self, value: i32) -> windows_core::Result<()>;
    fn PenTiltY(&self) -> windows_core::Result<i32>;
    fn SetPenTiltY(&self, value: i32) -> windows_core::Result<()>;
    fn TouchFlags(&self) -> windows_core::Result<u32>;
    fn SetTouchFlags(&self, value: u32) -> windows_core::Result<()>;
    fn TouchMask(&self) -> windows_core::Result<u32>;
    fn SetTouchMask(&self, value: u32) -> windows_core::Result<()>;
    fn TouchContact(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn SetTouchContact(&self, value: &windows::Foundation::Rect) -> windows_core::Result<()>;
    fn TouchContactRaw(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn SetTouchContactRaw(&self, value: &windows::Foundation::Rect) -> windows_core::Result<()>;
    fn TouchOrientation(&self) -> windows_core::Result<u32>;
    fn SetTouchOrientation(&self, value: u32) -> windows_core::Result<()>;
    fn TouchPressure(&self) -> windows_core::Result<u32>;
    fn SetTouchPressure(&self, value: u32) -> windows_core::Result<()>;
}
impl ICoreWebView2PointerInfo_Vtbl {
    pub const fn new<Identity: ICoreWebView2PointerInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PointerKind<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PointerKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPointerKind<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPointerKind(this, value).into()
            }
        }
        unsafe extern "system" fn PointerId<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PointerId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPointerId<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPointerId(this, value).into()
            }
        }
        unsafe extern "system" fn FrameId<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::FrameId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFrameId<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetFrameId(this, value).into()
            }
        }
        unsafe extern "system" fn PointerFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PointerFlags(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPointerFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPointerFlags(this, value).into()
            }
        }
        unsafe extern "system" fn PointerDeviceRect<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PointerDeviceRect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPointerDeviceRect<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPointerDeviceRect(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn DisplayRect<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::DisplayRect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDisplayRect<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetDisplayRect(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn PixelLocation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PixelLocation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPixelLocation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPixelLocation(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn HimetricLocation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::HimetricLocation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHimetricLocation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetHimetricLocation(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn PixelLocationRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PixelLocationRaw(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPixelLocationRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPixelLocationRaw(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn HimetricLocationRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::HimetricLocationRaw(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHimetricLocationRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetHimetricLocationRaw(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Time<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::Time(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTime<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTime(this, value).into()
            }
        }
        unsafe extern "system" fn HistoryCount<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::HistoryCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHistoryCount<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetHistoryCount(this, value).into()
            }
        }
        unsafe extern "system" fn InputData<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::InputData(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInputData<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetInputData(this, value).into()
            }
        }
        unsafe extern "system" fn KeyStates<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::KeyStates(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyStates<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetKeyStates(this, value).into()
            }
        }
        unsafe extern "system" fn PerformanceCount<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PerformanceCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPerformanceCount<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPerformanceCount(this, value).into()
            }
        }
        unsafe extern "system" fn ButtonChangeKind<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::ButtonChangeKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetButtonChangeKind<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetButtonChangeKind(this, value).into()
            }
        }
        unsafe extern "system" fn PenFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenFlags(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenFlags(this, value).into()
            }
        }
        unsafe extern "system" fn PenMask<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenMask(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenMask<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenMask(this, value).into()
            }
        }
        unsafe extern "system" fn PenPressure<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenPressure(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenPressure<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenPressure(this, value).into()
            }
        }
        unsafe extern "system" fn PenRotation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenRotation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenRotation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenRotation(this, value).into()
            }
        }
        unsafe extern "system" fn PenTiltX<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenTiltX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenTiltX<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenTiltX(this, value).into()
            }
        }
        unsafe extern "system" fn PenTiltY<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::PenTiltY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPenTiltY<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetPenTiltY(this, value).into()
            }
        }
        unsafe extern "system" fn TouchFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchFlags(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchFlags<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchFlags(this, value).into()
            }
        }
        unsafe extern "system" fn TouchMask<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchMask(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchMask<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchMask(this, value).into()
            }
        }
        unsafe extern "system" fn TouchContact<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchContact(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchContact<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchContact(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn TouchContactRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchContactRaw(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchContactRaw<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchContactRaw(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn TouchOrientation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchOrientation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchOrientation<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchOrientation(this, value).into()
            }
        }
        unsafe extern "system" fn TouchPressure<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PointerInfo_Impl::TouchPressure(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTouchPressure<
            Identity: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PointerInfo_Impl::SetTouchPressure(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PointerInfo,
                OFFSET,
            >(),
            PointerKind: PointerKind::<Identity, OFFSET>,
            SetPointerKind: SetPointerKind::<Identity, OFFSET>,
            PointerId: PointerId::<Identity, OFFSET>,
            SetPointerId: SetPointerId::<Identity, OFFSET>,
            FrameId: FrameId::<Identity, OFFSET>,
            SetFrameId: SetFrameId::<Identity, OFFSET>,
            PointerFlags: PointerFlags::<Identity, OFFSET>,
            SetPointerFlags: SetPointerFlags::<Identity, OFFSET>,
            PointerDeviceRect: PointerDeviceRect::<Identity, OFFSET>,
            SetPointerDeviceRect: SetPointerDeviceRect::<Identity, OFFSET>,
            DisplayRect: DisplayRect::<Identity, OFFSET>,
            SetDisplayRect: SetDisplayRect::<Identity, OFFSET>,
            PixelLocation: PixelLocation::<Identity, OFFSET>,
            SetPixelLocation: SetPixelLocation::<Identity, OFFSET>,
            HimetricLocation: HimetricLocation::<Identity, OFFSET>,
            SetHimetricLocation: SetHimetricLocation::<Identity, OFFSET>,
            PixelLocationRaw: PixelLocationRaw::<Identity, OFFSET>,
            SetPixelLocationRaw: SetPixelLocationRaw::<Identity, OFFSET>,
            HimetricLocationRaw: HimetricLocationRaw::<Identity, OFFSET>,
            SetHimetricLocationRaw: SetHimetricLocationRaw::<Identity, OFFSET>,
            Time: Time::<Identity, OFFSET>,
            SetTime: SetTime::<Identity, OFFSET>,
            HistoryCount: HistoryCount::<Identity, OFFSET>,
            SetHistoryCount: SetHistoryCount::<Identity, OFFSET>,
            InputData: InputData::<Identity, OFFSET>,
            SetInputData: SetInputData::<Identity, OFFSET>,
            KeyStates: KeyStates::<Identity, OFFSET>,
            SetKeyStates: SetKeyStates::<Identity, OFFSET>,
            PerformanceCount: PerformanceCount::<Identity, OFFSET>,
            SetPerformanceCount: SetPerformanceCount::<Identity, OFFSET>,
            ButtonChangeKind: ButtonChangeKind::<Identity, OFFSET>,
            SetButtonChangeKind: SetButtonChangeKind::<Identity, OFFSET>,
            PenFlags: PenFlags::<Identity, OFFSET>,
            SetPenFlags: SetPenFlags::<Identity, OFFSET>,
            PenMask: PenMask::<Identity, OFFSET>,
            SetPenMask: SetPenMask::<Identity, OFFSET>,
            PenPressure: PenPressure::<Identity, OFFSET>,
            SetPenPressure: SetPenPressure::<Identity, OFFSET>,
            PenRotation: PenRotation::<Identity, OFFSET>,
            SetPenRotation: SetPenRotation::<Identity, OFFSET>,
            PenTiltX: PenTiltX::<Identity, OFFSET>,
            SetPenTiltX: SetPenTiltX::<Identity, OFFSET>,
            PenTiltY: PenTiltY::<Identity, OFFSET>,
            SetPenTiltY: SetPenTiltY::<Identity, OFFSET>,
            TouchFlags: TouchFlags::<Identity, OFFSET>,
            SetTouchFlags: SetTouchFlags::<Identity, OFFSET>,
            TouchMask: TouchMask::<Identity, OFFSET>,
            SetTouchMask: SetTouchMask::<Identity, OFFSET>,
            TouchContact: TouchContact::<Identity, OFFSET>,
            SetTouchContact: SetTouchContact::<Identity, OFFSET>,
            TouchContactRaw: TouchContactRaw::<Identity, OFFSET>,
            SetTouchContactRaw: SetTouchContactRaw::<Identity, OFFSET>,
            TouchOrientation: TouchOrientation::<Identity, OFFSET>,
            SetTouchOrientation: SetTouchOrientation::<Identity, OFFSET>,
            TouchPressure: TouchPressure::<Identity, OFFSET>,
            SetTouchPressure: SetTouchPressure::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PointerInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PointerInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PointerKind:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPointerKind:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PointerId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPointerId:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub FrameId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetFrameId: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PointerFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPointerFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PointerDeviceRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub SetPointerDeviceRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub DisplayRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub SetDisplayRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub PixelLocation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetPixelLocation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub HimetricLocation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetHimetricLocation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub PixelLocationRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetPixelLocationRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub HimetricLocationRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetHimetricLocationRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub Time: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetTime: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub HistoryCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetHistoryCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub InputData:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetInputData:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub KeyStates:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetKeyStates:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PerformanceCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    pub SetPerformanceCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    pub ButtonChangeKind:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetButtonChangeKind:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub PenFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPenFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PenMask:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPenMask: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PenPressure:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPenPressure:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PenRotation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetPenRotation:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub PenTiltX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetPenTiltX:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub PenTiltY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetPenTiltY:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub TouchFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetTouchFlags:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub TouchMask:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetTouchMask:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub TouchContact: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub SetTouchContact: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub TouchContactRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub SetTouchContactRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub TouchOrientation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetTouchOrientation:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
    pub TouchPressure:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub SetTouchPressure:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PrintSettings,
    ICoreWebView2PrintSettings_Vtbl,
    0x9c75c8c0_ef3d_58a8_9a8c_18eed9fd0f16
);
impl windows_core::RuntimeType for ICoreWebView2PrintSettings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PrintSettings {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings";
}
pub trait ICoreWebView2PrintSettings_Impl: windows_core::IUnknownImpl {
    fn Orientation(&self) -> windows_core::Result<CoreWebView2PrintOrientation>;
    fn SetOrientation(&self, value: CoreWebView2PrintOrientation) -> windows_core::Result<()>;
    fn ScaleFactor(&self) -> windows_core::Result<f64>;
    fn SetScaleFactor(&self, value: f64) -> windows_core::Result<()>;
    fn PageWidth(&self) -> windows_core::Result<f64>;
    fn SetPageWidth(&self, value: f64) -> windows_core::Result<()>;
    fn PageHeight(&self) -> windows_core::Result<f64>;
    fn SetPageHeight(&self, value: f64) -> windows_core::Result<()>;
    fn MarginTop(&self) -> windows_core::Result<f64>;
    fn SetMarginTop(&self, value: f64) -> windows_core::Result<()>;
    fn MarginBottom(&self) -> windows_core::Result<f64>;
    fn SetMarginBottom(&self, value: f64) -> windows_core::Result<()>;
    fn MarginLeft(&self) -> windows_core::Result<f64>;
    fn SetMarginLeft(&self, value: f64) -> windows_core::Result<()>;
    fn MarginRight(&self) -> windows_core::Result<f64>;
    fn SetMarginRight(&self, value: f64) -> windows_core::Result<()>;
    fn ShouldPrintBackgrounds(&self) -> windows_core::Result<bool>;
    fn SetShouldPrintBackgrounds(&self, value: bool) -> windows_core::Result<()>;
    fn ShouldPrintSelectionOnly(&self) -> windows_core::Result<bool>;
    fn SetShouldPrintSelectionOnly(&self, value: bool) -> windows_core::Result<()>;
    fn ShouldPrintHeaderAndFooter(&self) -> windows_core::Result<bool>;
    fn SetShouldPrintHeaderAndFooter(&self, value: bool) -> windows_core::Result<()>;
    fn HeaderTitle(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetHeaderTitle(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FooterUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetFooterUri(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2PrintSettings_Vtbl {
    pub const fn new<Identity: ICoreWebView2PrintSettings_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Orientation<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PrintOrientation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::Orientation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOrientation<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PrintOrientation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetOrientation(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleFactor<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::ScaleFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleFactor<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetScaleFactor(this, value).into()
            }
        }
        unsafe extern "system" fn PageWidth<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::PageWidth(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPageWidth<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetPageWidth(this, value).into()
            }
        }
        unsafe extern "system" fn PageHeight<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::PageHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPageHeight<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetPageHeight(this, value).into()
            }
        }
        unsafe extern "system" fn MarginTop<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::MarginTop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMarginTop<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetMarginTop(this, value).into()
            }
        }
        unsafe extern "system" fn MarginBottom<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::MarginBottom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMarginBottom<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetMarginBottom(this, value).into()
            }
        }
        unsafe extern "system" fn MarginLeft<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::MarginLeft(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMarginLeft<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetMarginLeft(this, value).into()
            }
        }
        unsafe extern "system" fn MarginRight<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::MarginRight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMarginRight<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetMarginRight(this, value).into()
            }
        }
        unsafe extern "system" fn ShouldPrintBackgrounds<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::ShouldPrintBackgrounds(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldPrintBackgrounds<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetShouldPrintBackgrounds(this, value).into()
            }
        }
        unsafe extern "system" fn ShouldPrintSelectionOnly<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::ShouldPrintSelectionOnly(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldPrintSelectionOnly<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetShouldPrintSelectionOnly(this, value).into()
            }
        }
        unsafe extern "system" fn ShouldPrintHeaderAndFooter<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::ShouldPrintHeaderAndFooter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldPrintHeaderAndFooter<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetShouldPrintHeaderAndFooter(this, value).into()
            }
        }
        unsafe extern "system" fn HeaderTitle<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::HeaderTitle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeaderTitle<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetHeaderTitle(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn FooterUri<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings_Impl::FooterUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFooterUri<
            Identity: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings_Impl::SetFooterUri(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PrintSettings,
                OFFSET,
            >(),
            Orientation: Orientation::<Identity, OFFSET>,
            SetOrientation: SetOrientation::<Identity, OFFSET>,
            ScaleFactor: ScaleFactor::<Identity, OFFSET>,
            SetScaleFactor: SetScaleFactor::<Identity, OFFSET>,
            PageWidth: PageWidth::<Identity, OFFSET>,
            SetPageWidth: SetPageWidth::<Identity, OFFSET>,
            PageHeight: PageHeight::<Identity, OFFSET>,
            SetPageHeight: SetPageHeight::<Identity, OFFSET>,
            MarginTop: MarginTop::<Identity, OFFSET>,
            SetMarginTop: SetMarginTop::<Identity, OFFSET>,
            MarginBottom: MarginBottom::<Identity, OFFSET>,
            SetMarginBottom: SetMarginBottom::<Identity, OFFSET>,
            MarginLeft: MarginLeft::<Identity, OFFSET>,
            SetMarginLeft: SetMarginLeft::<Identity, OFFSET>,
            MarginRight: MarginRight::<Identity, OFFSET>,
            SetMarginRight: SetMarginRight::<Identity, OFFSET>,
            ShouldPrintBackgrounds: ShouldPrintBackgrounds::<Identity, OFFSET>,
            SetShouldPrintBackgrounds: SetShouldPrintBackgrounds::<Identity, OFFSET>,
            ShouldPrintSelectionOnly: ShouldPrintSelectionOnly::<Identity, OFFSET>,
            SetShouldPrintSelectionOnly: SetShouldPrintSelectionOnly::<Identity, OFFSET>,
            ShouldPrintHeaderAndFooter: ShouldPrintHeaderAndFooter::<Identity, OFFSET>,
            SetShouldPrintHeaderAndFooter: SetShouldPrintHeaderAndFooter::<Identity, OFFSET>,
            HeaderTitle: HeaderTitle::<Identity, OFFSET>,
            SetHeaderTitle: SetHeaderTitle::<Identity, OFFSET>,
            FooterUri: FooterUri::<Identity, OFFSET>,
            SetFooterUri: SetFooterUri::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PrintSettings as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrintSettings_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Orientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PrintOrientation,
    ) -> windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintOrientation,
    ) -> windows_core::HRESULT,
    pub ScaleFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetScaleFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub PageWidth:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetPageWidth:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub PageHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetPageHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub MarginTop:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetMarginTop:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub MarginBottom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetMarginBottom:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub MarginLeft:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetMarginLeft:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub MarginRight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetMarginRight:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ShouldPrintBackgrounds:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldPrintBackgrounds:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ShouldPrintSelectionOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldPrintSelectionOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ShouldPrintHeaderAndFooter:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldPrintHeaderAndFooter:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub HeaderTitle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHeaderTitle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FooterUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFooterUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PrintSettings2,
    ICoreWebView2PrintSettings2_Vtbl,
    0xd2a97895_ca6e_57fc_905d_c6f77a081768
);
impl windows_core::RuntimeType for ICoreWebView2PrintSettings2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PrintSettings2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PrintSettings2";
}
pub trait ICoreWebView2PrintSettings2_Impl: windows_core::IUnknownImpl {
    fn PageRanges(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPageRanges(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn PagesPerSide(&self) -> windows_core::Result<i32>;
    fn SetPagesPerSide(&self, value: i32) -> windows_core::Result<()>;
    fn Copies(&self) -> windows_core::Result<i32>;
    fn SetCopies(&self, value: i32) -> windows_core::Result<()>;
    fn Collation(&self) -> windows_core::Result<CoreWebView2PrintCollation>;
    fn SetCollation(&self, value: CoreWebView2PrintCollation) -> windows_core::Result<()>;
    fn ColorMode(&self) -> windows_core::Result<CoreWebView2PrintColorMode>;
    fn SetColorMode(&self, value: CoreWebView2PrintColorMode) -> windows_core::Result<()>;
    fn Duplex(&self) -> windows_core::Result<CoreWebView2PrintDuplex>;
    fn SetDuplex(&self, value: CoreWebView2PrintDuplex) -> windows_core::Result<()>;
    fn MediaSize(&self) -> windows_core::Result<CoreWebView2PrintMediaSize>;
    fn SetMediaSize(&self, value: CoreWebView2PrintMediaSize) -> windows_core::Result<()>;
    fn PrinterName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPrinterName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2PrintSettings2_Vtbl {
    pub const fn new<Identity: ICoreWebView2PrintSettings2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PageRanges<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::PageRanges(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPageRanges<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetPageRanges(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn PagesPerSide<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::PagesPerSide(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPagesPerSide<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetPagesPerSide(this, value).into()
            }
        }
        unsafe extern "system" fn Copies<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::Copies(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCopies<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetCopies(this, value).into()
            }
        }
        unsafe extern "system" fn Collation<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PrintCollation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::Collation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCollation<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PrintCollation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetCollation(this, value).into()
            }
        }
        unsafe extern "system" fn ColorMode<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PrintColorMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::ColorMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColorMode<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PrintColorMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetColorMode(this, value).into()
            }
        }
        unsafe extern "system" fn Duplex<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PrintDuplex,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::Duplex(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDuplex<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PrintDuplex,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetDuplex(this, value).into()
            }
        }
        unsafe extern "system" fn MediaSize<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PrintMediaSize,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::MediaSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMediaSize<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PrintMediaSize,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetMediaSize(this, value).into()
            }
        }
        unsafe extern "system" fn PrinterName<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrintSettings2_Impl::PrinterName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPrinterName<
            Identity: ICoreWebView2PrintSettings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2PrintSettings2_Impl::SetPrinterName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PrintSettings2,
                OFFSET,
            >(),
            PageRanges: PageRanges::<Identity, OFFSET>,
            SetPageRanges: SetPageRanges::<Identity, OFFSET>,
            PagesPerSide: PagesPerSide::<Identity, OFFSET>,
            SetPagesPerSide: SetPagesPerSide::<Identity, OFFSET>,
            Copies: Copies::<Identity, OFFSET>,
            SetCopies: SetCopies::<Identity, OFFSET>,
            Collation: Collation::<Identity, OFFSET>,
            SetCollation: SetCollation::<Identity, OFFSET>,
            ColorMode: ColorMode::<Identity, OFFSET>,
            SetColorMode: SetColorMode::<Identity, OFFSET>,
            Duplex: Duplex::<Identity, OFFSET>,
            SetDuplex: SetDuplex::<Identity, OFFSET>,
            MediaSize: MediaSize::<Identity, OFFSET>,
            SetMediaSize: SetMediaSize::<Identity, OFFSET>,
            PrinterName: PrinterName::<Identity, OFFSET>,
            SetPrinterName: SetPrinterName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PrintSettings2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrintSettings2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PageRanges: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPageRanges: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PagesPerSide:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetPagesPerSide:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Copies:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetCopies: unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Collation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PrintCollation,
    ) -> windows_core::HRESULT,
    pub SetCollation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintCollation,
    ) -> windows_core::HRESULT,
    pub ColorMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PrintColorMode,
    ) -> windows_core::HRESULT,
    pub SetColorMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintColorMode,
    ) -> windows_core::HRESULT,
    pub Duplex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PrintDuplex,
    ) -> windows_core::HRESULT,
    pub SetDuplex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintDuplex,
    ) -> windows_core::HRESULT,
    pub MediaSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PrintMediaSize,
    ) -> windows_core::HRESULT,
    pub SetMediaSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintMediaSize,
    ) -> windows_core::HRESULT,
    pub PrinterName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPrinterName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2PrivatePartial,
    ICoreWebView2PrivatePartial_Vtbl,
    0x2850f27c_0c9d_5cdc_b356_18f5b97d9fcf
);
impl windows_core::RuntimeType for ICoreWebView2PrivatePartial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PrivatePartial {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartial";
}
pub trait ICoreWebView2PrivatePartial_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2PrivatePartial_Vtbl {
    pub const fn new<Identity: ICoreWebView2PrivatePartial_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PrivatePartial,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PrivatePartial as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrivatePartial_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2PrivatePartialController,
    ICoreWebView2PrivatePartialController_Vtbl,
    0x527f6678_8629_5c2a_bc3b_8d5c95e2b9bc
);
impl windows_core::RuntimeType for ICoreWebView2PrivatePartialController {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2PrivatePartialController {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2PrivatePartialController";
}
pub trait ICoreWebView2PrivatePartialController_Impl: windows_core::IUnknownImpl {
    fn IsBrowserHitTransparent(&self) -> windows_core::Result<bool>;
}
impl ICoreWebView2PrivatePartialController_Vtbl {
    pub const fn new<Identity: ICoreWebView2PrivatePartialController_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn IsBrowserHitTransparent<
            Identity: ICoreWebView2PrivatePartialController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2PrivatePartialController_Impl::IsBrowserHitTransparent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2PrivatePartialController,
                OFFSET,
            >(),
            IsBrowserHitTransparent: IsBrowserHitTransparent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2PrivatePartialController as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrivatePartialController_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsBrowserHitTransparent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ProcessExtendedInfo,
    ICoreWebView2ProcessExtendedInfo_Vtbl,
    0x60e9238b_621d_57e8_b670_74382b2380a7
);
impl windows_core::RuntimeType for ICoreWebView2ProcessExtendedInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ProcessExtendedInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ProcessExtendedInfo";
}
pub trait ICoreWebView2ProcessExtendedInfo_Impl: windows_core::IUnknownImpl {
    fn ProcessInfo(&self) -> windows_core::Result<CoreWebView2ProcessInfo>;
    fn AssociatedFrameInfos(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2FrameInfo>>;
}
impl ICoreWebView2ProcessExtendedInfo_Vtbl {
    pub const fn new<Identity: ICoreWebView2ProcessExtendedInfo_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ProcessInfo<
            Identity: ICoreWebView2ProcessExtendedInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessExtendedInfo_Impl::ProcessInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AssociatedFrameInfos<
            Identity: ICoreWebView2ProcessExtendedInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessExtendedInfo_Impl::AssociatedFrameInfos(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ProcessExtendedInfo,
                OFFSET,
            >(),
            ProcessInfo: ProcessInfo::<Identity, OFFSET>,
            AssociatedFrameInfos: AssociatedFrameInfos::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessExtendedInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessExtendedInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProcessInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AssociatedFrameInfos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ProcessFailedEventArgs,
    ICoreWebView2ProcessFailedEventArgs_Vtbl,
    0x25a8f8c9_d944_539d_afa3_24172b48ef47
);
impl windows_core::RuntimeType for ICoreWebView2ProcessFailedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ProcessFailedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs";
}
pub trait ICoreWebView2ProcessFailedEventArgs_Impl: windows_core::IUnknownImpl {
    fn ProcessFailedKind(&self) -> windows_core::Result<CoreWebView2ProcessFailedKind>;
}
impl ICoreWebView2ProcessFailedEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ProcessFailedKind<
            Identity: ICoreWebView2ProcessFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ProcessFailedKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs_Impl::ProcessFailedKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ProcessFailedEventArgs,
                OFFSET,
            >(),
            ProcessFailedKind: ProcessFailedKind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProcessFailedKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ProcessFailedKind,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ProcessFailedEventArgs2,
    ICoreWebView2ProcessFailedEventArgs2_Vtbl,
    0xc5d9c952_b456_5dc7_9f76_fde967484af5
);
impl windows_core::RuntimeType for ICoreWebView2ProcessFailedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ProcessFailedEventArgs2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs2";
}
pub trait ICoreWebView2ProcessFailedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn Reason(&self) -> windows_core::Result<CoreWebView2ProcessFailedReason>;
    fn ExitCode(&self) -> windows_core::Result<i32>;
    fn ProcessDescription(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn FrameInfosForFailedProcess(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CoreWebView2FrameInfo>>;
}
impl ICoreWebView2ProcessFailedEventArgs2_Vtbl {
    pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs2_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Reason<
            Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ProcessFailedReason,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs2_Impl::Reason(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitCode<
            Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs2_Impl::ExitCode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProcessDescription<
            Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs2_Impl::ProcessDescription(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FrameInfosForFailedProcess<
            Identity: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs2_Impl::FrameInfosForFailedProcess(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ProcessFailedEventArgs2,
                OFFSET,
            >(),
            Reason: Reason::<Identity, OFFSET>,
            ExitCode: ExitCode::<Identity, OFFSET>,
            ProcessDescription: ProcessDescription::<Identity, OFFSET>,
            FrameInfosForFailedProcess: FrameInfosForFailedProcess::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Reason: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ProcessFailedReason,
    ) -> windows_core::HRESULT,
    pub ExitCode:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ProcessDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FrameInfosForFailedProcess: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ProcessFailedEventArgs3,
    ICoreWebView2ProcessFailedEventArgs3_Vtbl,
    0xd129a419_adae_5c3c_8fce_5592994e9cd3
);
impl windows_core::RuntimeType for ICoreWebView2ProcessFailedEventArgs3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ProcessFailedEventArgs3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs3";
}
pub trait ICoreWebView2ProcessFailedEventArgs3_Impl: windows_core::IUnknownImpl {
    fn FailureSourceModulePath(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2ProcessFailedEventArgs3_Vtbl {
    pub const fn new<Identity: ICoreWebView2ProcessFailedEventArgs3_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn FailureSourceModulePath<
            Identity: ICoreWebView2ProcessFailedEventArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessFailedEventArgs3_Impl::FailureSourceModulePath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ProcessFailedEventArgs3,
                OFFSET,
            >(),
            FailureSourceModulePath: FailureSourceModulePath::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventArgs3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventArgs3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FailureSourceModulePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ProcessInfo,
    ICoreWebView2ProcessInfo_Vtbl,
    0xb6ec37e1_23eb_5924_b346_e837890aa9d5
);
impl windows_core::RuntimeType for ICoreWebView2ProcessInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ProcessInfo {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ProcessInfo";
}
pub trait ICoreWebView2ProcessInfo_Impl: windows_core::IUnknownImpl {
    fn ProcessId(&self) -> windows_core::Result<i32>;
    fn Kind(&self) -> windows_core::Result<CoreWebView2ProcessKind>;
}
impl ICoreWebView2ProcessInfo_Vtbl {
    pub const fn new<Identity: ICoreWebView2ProcessInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ProcessId<
            Identity: ICoreWebView2ProcessInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessInfo_Impl::ProcessId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Kind<
            Identity: ICoreWebView2ProcessInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ProcessKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ProcessInfo_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ProcessInfo,
                OFFSET,
            >(),
            ProcessId: ProcessId::<Identity, OFFSET>,
            Kind: Kind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProcessId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ProcessKind,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile,
    ICoreWebView2Profile_Vtbl,
    0xd4bdd25c_a2db_5c03_9659_abdeb9793621
);
impl windows_core::RuntimeType for ICoreWebView2Profile {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile";
}
pub trait ICoreWebView2Profile_Impl: windows_core::IUnknownImpl {
    fn ProfileName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn IsInPrivateModeEnabled(&self) -> windows_core::Result<bool>;
    fn ProfilePath(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DefaultDownloadFolderPath(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetDefaultDownloadFolderPath(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn PreferredColorScheme(&self) -> windows_core::Result<CoreWebView2PreferredColorScheme>;
    fn SetPreferredColorScheme(
        &self,
        value: CoreWebView2PreferredColorScheme,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Profile_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ProfileName<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile_Impl::ProfileName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsInPrivateModeEnabled<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile_Impl::IsInPrivateModeEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProfilePath<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile_Impl::ProfilePath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DefaultDownloadFolderPath<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile_Impl::DefaultDownloadFolderPath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultDownloadFolderPath<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile_Impl::SetDefaultDownloadFolderPath(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn PreferredColorScheme<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PreferredColorScheme,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile_Impl::PreferredColorScheme(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPreferredColorScheme<
            Identity: ICoreWebView2Profile_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PreferredColorScheme,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile_Impl::SetPreferredColorScheme(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile, OFFSET>(
            ),
            ProfileName: ProfileName::<Identity, OFFSET>,
            IsInPrivateModeEnabled: IsInPrivateModeEnabled::<Identity, OFFSET>,
            ProfilePath: ProfilePath::<Identity, OFFSET>,
            DefaultDownloadFolderPath: DefaultDownloadFolderPath::<Identity, OFFSET>,
            SetDefaultDownloadFolderPath: SetDefaultDownloadFolderPath::<Identity, OFFSET>,
            PreferredColorScheme: PreferredColorScheme::<Identity, OFFSET>,
            SetPreferredColorScheme: SetPreferredColorScheme::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProfileName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsInPrivateModeEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ProfilePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DefaultDownloadFolderPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDefaultDownloadFolderPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PreferredColorScheme: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PreferredColorScheme,
    ) -> windows_core::HRESULT,
    pub SetPreferredColorScheme: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PreferredColorScheme,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile2,
    ICoreWebView2Profile2_Vtbl,
    0x93d21e18_1b06_59d0_9687_10f4844b016d
);
impl windows_core::RuntimeType for ICoreWebView2Profile2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile2";
}
pub trait ICoreWebView2Profile2_Impl: windows_core::IUnknownImpl {
    fn ClearBrowsingDataAsync(
        &self,
        dataKinds: CoreWebView2BrowsingDataKinds,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl ICoreWebView2Profile2_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ClearBrowsingDataAsync<
            Identity: ICoreWebView2Profile2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            datakinds: CoreWebView2BrowsingDataKinds,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile2_Impl::ClearBrowsingDataAsync(this, datakinds) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile2, OFFSET>(
            ),
            ClearBrowsingDataAsync: ClearBrowsingDataAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ClearBrowsingDataAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2BrowsingDataKinds,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile3,
    ICoreWebView2Profile3_Vtbl,
    0x507ed587_c511_5e47_be5b_fc9ccdf179b6
);
impl windows_core::RuntimeType for ICoreWebView2Profile3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile3";
}
pub trait ICoreWebView2Profile3_Impl: windows_core::IUnknownImpl {
    fn PreferredTrackingPreventionLevel(
        &self,
    ) -> windows_core::Result<CoreWebView2TrackingPreventionLevel>;
    fn SetPreferredTrackingPreventionLevel(
        &self,
        value: CoreWebView2TrackingPreventionLevel,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Profile3_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PreferredTrackingPreventionLevel<
            Identity: ICoreWebView2Profile3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2TrackingPreventionLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile3_Impl::PreferredTrackingPreventionLevel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPreferredTrackingPreventionLevel<
            Identity: ICoreWebView2Profile3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2TrackingPreventionLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile3_Impl::SetPreferredTrackingPreventionLevel(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile3, OFFSET>(
            ),
            PreferredTrackingPreventionLevel: PreferredTrackingPreventionLevel::<Identity, OFFSET>,
            SetPreferredTrackingPreventionLevel: SetPreferredTrackingPreventionLevel::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PreferredTrackingPreventionLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2TrackingPreventionLevel,
    ) -> windows_core::HRESULT,
    pub SetPreferredTrackingPreventionLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2TrackingPreventionLevel,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile4,
    ICoreWebView2Profile4_Vtbl,
    0xeeae109a_f641_5a5b_942f_9922594ffb4d
);
impl windows_core::RuntimeType for ICoreWebView2Profile4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile4";
}
pub trait ICoreWebView2Profile4_Impl: windows_core::IUnknownImpl {
    fn SetPermissionStateAsync(
        &self,
        PermissionKind: CoreWebView2PermissionKind,
        origin: &windows_core::HSTRING,
        State: CoreWebView2PermissionState,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl ICoreWebView2Profile4_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetPermissionStateAsync<
            Identity: ICoreWebView2Profile4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            permissionkind: CoreWebView2PermissionKind,
            origin: *mut core::ffi::c_void,
            state: CoreWebView2PermissionState,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile4_Impl::SetPermissionStateAsync(
                    this,
                    permissionkind,
                    core::mem::transmute(&origin),
                    state,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile4, OFFSET>(
            ),
            SetPermissionStateAsync: SetPermissionStateAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetPermissionStateAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PermissionKind,
        *mut core::ffi::c_void,
        CoreWebView2PermissionState,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile5,
    ICoreWebView2Profile5_Vtbl,
    0xc9aac8f7_e502_5485_b033_99e4940ee0f1
);
impl windows_core::RuntimeType for ICoreWebView2Profile5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile5";
}
pub trait ICoreWebView2Profile5_Impl: windows_core::IUnknownImpl {
    fn CookieManager(&self) -> windows_core::Result<CoreWebView2CookieManager>;
}
impl ICoreWebView2Profile5_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CookieManager<
            Identity: ICoreWebView2Profile5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile5_Impl::CookieManager(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile5, OFFSET>(
            ),
            CookieManager: CookieManager::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CookieManager: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile6,
    ICoreWebView2Profile6_Vtbl,
    0xc16a4665_9d44_5768_94a3_69b3976fc3d6
);
impl windows_core::RuntimeType for ICoreWebView2Profile6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile6 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile6";
}
pub trait ICoreWebView2Profile6_Impl: windows_core::IUnknownImpl {
    fn IsPasswordAutosaveEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsGeneralAutofillEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Profile6_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile6_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsPasswordAutosaveEnabled<
            Identity: ICoreWebView2Profile6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile6_Impl::IsPasswordAutosaveEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPasswordAutosaveEnabled<
            Identity: ICoreWebView2Profile6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile6_Impl::SetIsPasswordAutosaveEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsGeneralAutofillEnabled<
            Identity: ICoreWebView2Profile6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile6_Impl::IsGeneralAutofillEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsGeneralAutofillEnabled<
            Identity: ICoreWebView2Profile6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile6_Impl::SetIsGeneralAutofillEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile6, OFFSET>(
            ),
            IsPasswordAutosaveEnabled: IsPasswordAutosaveEnabled::<Identity, OFFSET>,
            SetIsPasswordAutosaveEnabled: SetIsPasswordAutosaveEnabled::<Identity, OFFSET>,
            IsGeneralAutofillEnabled: IsGeneralAutofillEnabled::<Identity, OFFSET>,
            SetIsGeneralAutofillEnabled: SetIsGeneralAutofillEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsPasswordAutosaveEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPasswordAutosaveEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsGeneralAutofillEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsGeneralAutofillEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile7,
    ICoreWebView2Profile7_Vtbl,
    0x5f665761_5c12_5f39_b9fe_607e6e94add1
);
impl windows_core::RuntimeType for ICoreWebView2Profile7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile7 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile7";
}
pub trait ICoreWebView2Profile7_Impl: windows_core::IUnknownImpl {
    fn AddBrowserExtensionAsync(
        &self,
        extensionFolderPath: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2BrowserExtension>>;
}
impl ICoreWebView2Profile7_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile7_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AddBrowserExtensionAsync<
            Identity: ICoreWebView2Profile7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            extensionfolderpath: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile7_Impl::AddBrowserExtensionAsync(
                    this,
                    core::mem::transmute(&extensionfolderpath),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile7, OFFSET>(
            ),
            AddBrowserExtensionAsync: AddBrowserExtensionAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AddBrowserExtensionAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Profile8,
    ICoreWebView2Profile8_Vtbl,
    0x9362d39c_d521_59e9_88fd_7c5aa1167da6
);
impl windows_core::RuntimeType for ICoreWebView2Profile8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Profile8 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Profile8";
}
pub trait ICoreWebView2Profile8_Impl: windows_core::IUnknownImpl {
    fn Deleted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2Profile, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDeleted(&self, token: i64) -> windows_core::Result<()>;
    fn Delete(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2Profile8_Vtbl {
    pub const fn new<Identity: ICoreWebView2Profile8_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Deleted<
            Identity: ICoreWebView2Profile8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Profile8_Impl::Deleted(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDeleted<
            Identity: ICoreWebView2Profile8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile8_Impl::RemoveDeleted(this, token).into()
            }
        }
        unsafe extern "system" fn Delete<
            Identity: ICoreWebView2Profile8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Profile8_Impl::Delete(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Profile8, OFFSET>(
            ),
            Deleted: Deleted::<Identity, OFFSET>,
            RemoveDeleted: RemoveDeleted::<Identity, OFFSET>,
            Delete: Delete::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Profile8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Profile8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Deleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDeleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Delete: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ScriptDialogOpeningEventArgs,
    ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl,
    0xa4315212_c7eb_568a_86e4_c61e31ba6cda
);
impl windows_core::RuntimeType for ICoreWebView2ScriptDialogOpeningEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ScriptDialogOpeningEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgs";
}
pub trait ICoreWebView2ScriptDialogOpeningEventArgs_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Kind(&self) -> windows_core::Result<CoreWebView2ScriptDialogKind>;
    fn Message(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DefaultText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ResultText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetResultText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Accept(&self) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Kind<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ScriptDialogKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Message<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Message(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DefaultText<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::DefaultText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ResultText<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::ResultText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetResultText<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ScriptDialogOpeningEventArgs_Impl::SetResultText(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Accept<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ScriptDialogOpeningEventArgs_Impl::Accept(this).into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptDialogOpeningEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ScriptDialogOpeningEventArgs,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            Kind: Kind::<Identity, OFFSET>,
            Message: Message::<Identity, OFFSET>,
            DefaultText: DefaultText::<Identity, OFFSET>,
            ResultText: ResultText::<Identity, OFFSET>,
            SetResultText: SetResultText::<Identity, OFFSET>,
            Accept: Accept::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ScriptDialogOpeningEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ScriptDialogKind,
    ) -> windows_core::HRESULT,
    pub Message: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DefaultText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ResultText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetResultText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Accept: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ScriptException,
    ICoreWebView2ScriptException_Vtbl,
    0x09bc3ce3_3978_50a5_86ae_5c596d371c4e
);
impl windows_core::RuntimeType for ICoreWebView2ScriptException {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ScriptException {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2ScriptException";
}
pub trait ICoreWebView2ScriptException_Impl: windows_core::IUnknownImpl {
    fn LineNumber(&self) -> windows_core::Result<u32>;
    fn ColumnNumber(&self) -> windows_core::Result<u32>;
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Message(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ToJson(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2ScriptException_Vtbl {
    pub const fn new<Identity: ICoreWebView2ScriptException_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LineNumber<
            Identity: ICoreWebView2ScriptException_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptException_Impl::LineNumber(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ColumnNumber<
            Identity: ICoreWebView2ScriptException_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptException_Impl::ColumnNumber(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Name<
            Identity: ICoreWebView2ScriptException_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptException_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Message<
            Identity: ICoreWebView2ScriptException_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptException_Impl::Message(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToJson<
            Identity: ICoreWebView2ScriptException_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ScriptException_Impl::ToJson(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ScriptException,
                OFFSET,
            >(),
            LineNumber: LineNumber::<Identity, OFFSET>,
            ColumnNumber: ColumnNumber::<Identity, OFFSET>,
            Name: Name::<Identity, OFFSET>,
            Message: Message::<Identity, OFFSET>,
            ToJson: ToJson::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2ScriptException as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ScriptException_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LineNumber:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub ColumnNumber:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Message: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2ServerCertificateErrorDetectedEventArgs,
    ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl,
    0x90fdc703_5a9e_56f6_a422_7c114c736420
);
impl windows_core::RuntimeType for ICoreWebView2ServerCertificateErrorDetectedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2ServerCertificateErrorDetectedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2ServerCertificateErrorDetectedEventArgs";
}
pub trait ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn ErrorStatus(&self) -> windows_core::Result<CoreWebView2WebErrorStatus>;
    fn RequestUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ServerCertificate(&self) -> windows_core::Result<CoreWebView2Certificate>;
    fn Action(&self) -> windows_core::Result<CoreWebView2ServerCertificateErrorAction>;
    fn SetAction(
        &self,
        value: CoreWebView2ServerCertificateErrorAction,
    ) -> windows_core::Result<()>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn ErrorStatus<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2WebErrorStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::ErrorStatus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestUri<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::RequestUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ServerCertificate<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::ServerCertificate(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Action<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2ServerCertificateErrorAction,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::Action(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAction<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2ServerCertificateErrorAction,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::SetAction(this, value)
                    .into()
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2ServerCertificateErrorDetectedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2ServerCertificateErrorDetectedEventArgs,
                OFFSET,
            >(),
            ErrorStatus: ErrorStatus::<Identity, OFFSET>,
            RequestUri: RequestUri::<Identity, OFFSET>,
            ServerCertificate: ServerCertificate::<Identity, OFFSET>,
            Action: Action::<Identity, OFFSET>,
            SetAction: SetAction::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < ICoreWebView2ServerCertificateErrorDetectedEventArgs as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ServerCertificateErrorDetectedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ErrorStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2WebErrorStatus,
    ) -> windows_core::HRESULT,
    pub RequestUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ServerCertificate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Action: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2ServerCertificateErrorAction,
    ) -> windows_core::HRESULT,
    pub SetAction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2ServerCertificateErrorAction,
    ) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings,
    ICoreWebView2Settings_Vtbl,
    0x003b325e_74cd_52dd_8024_ebb8be38e48e
);
impl windows_core::RuntimeType for ICoreWebView2Settings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings";
}
pub trait ICoreWebView2Settings_Impl: windows_core::IUnknownImpl {
    fn IsScriptEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsScriptEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsWebMessageEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsWebMessageEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn AreDefaultScriptDialogsEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreDefaultScriptDialogsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsStatusBarEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsStatusBarEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn AreDevToolsEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreDevToolsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn AreDefaultContextMenusEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreDefaultContextMenusEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn AreHostObjectsAllowed(&self) -> windows_core::Result<bool>;
    fn SetAreHostObjectsAllowed(&self, value: bool) -> windows_core::Result<()>;
    fn IsZoomControlEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsZoomControlEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsBuiltInErrorPageEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsBuiltInErrorPageEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsScriptEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::IsScriptEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsScriptEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetIsScriptEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsWebMessageEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::IsWebMessageEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsWebMessageEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetIsWebMessageEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn AreDefaultScriptDialogsEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::AreDefaultScriptDialogsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreDefaultScriptDialogsEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetAreDefaultScriptDialogsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsStatusBarEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::IsStatusBarEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStatusBarEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetIsStatusBarEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn AreDevToolsEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::AreDevToolsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreDevToolsEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetAreDevToolsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn AreDefaultContextMenusEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::AreDefaultContextMenusEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreDefaultContextMenusEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetAreDefaultContextMenusEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn AreHostObjectsAllowed<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::AreHostObjectsAllowed(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreHostObjectsAllowed<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetAreHostObjectsAllowed(this, value).into()
            }
        }
        unsafe extern "system" fn IsZoomControlEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::IsZoomControlEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsZoomControlEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetIsZoomControlEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsBuiltInErrorPageEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Impl::IsBuiltInErrorPageEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsBuiltInErrorPageEnabled<
            Identity: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Impl::SetIsBuiltInErrorPageEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings, OFFSET>(
            ),
            IsScriptEnabled: IsScriptEnabled::<Identity, OFFSET>,
            SetIsScriptEnabled: SetIsScriptEnabled::<Identity, OFFSET>,
            IsWebMessageEnabled: IsWebMessageEnabled::<Identity, OFFSET>,
            SetIsWebMessageEnabled: SetIsWebMessageEnabled::<Identity, OFFSET>,
            AreDefaultScriptDialogsEnabled: AreDefaultScriptDialogsEnabled::<Identity, OFFSET>,
            SetAreDefaultScriptDialogsEnabled: SetAreDefaultScriptDialogsEnabled::<Identity, OFFSET>,
            IsStatusBarEnabled: IsStatusBarEnabled::<Identity, OFFSET>,
            SetIsStatusBarEnabled: SetIsStatusBarEnabled::<Identity, OFFSET>,
            AreDevToolsEnabled: AreDevToolsEnabled::<Identity, OFFSET>,
            SetAreDevToolsEnabled: SetAreDevToolsEnabled::<Identity, OFFSET>,
            AreDefaultContextMenusEnabled: AreDefaultContextMenusEnabled::<Identity, OFFSET>,
            SetAreDefaultContextMenusEnabled: SetAreDefaultContextMenusEnabled::<Identity, OFFSET>,
            AreHostObjectsAllowed: AreHostObjectsAllowed::<Identity, OFFSET>,
            SetAreHostObjectsAllowed: SetAreHostObjectsAllowed::<Identity, OFFSET>,
            IsZoomControlEnabled: IsZoomControlEnabled::<Identity, OFFSET>,
            SetIsZoomControlEnabled: SetIsZoomControlEnabled::<Identity, OFFSET>,
            IsBuiltInErrorPageEnabled: IsBuiltInErrorPageEnabled::<Identity, OFFSET>,
            SetIsBuiltInErrorPageEnabled: SetIsBuiltInErrorPageEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsScriptEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsScriptEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsWebMessageEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsWebMessageEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AreDefaultScriptDialogsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreDefaultScriptDialogsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsStatusBarEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsStatusBarEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AreDevToolsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreDevToolsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AreDefaultContextMenusEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreDefaultContextMenusEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AreHostObjectsAllowed:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreHostObjectsAllowed:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsZoomControlEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsZoomControlEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsBuiltInErrorPageEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsBuiltInErrorPageEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings2,
    ICoreWebView2Settings2_Vtbl,
    0x377d3480_fdb2_56e7_bade_507d352887e9
);
impl windows_core::RuntimeType for ICoreWebView2Settings2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings2";
}
pub trait ICoreWebView2Settings2_Impl: windows_core::IUnknownImpl {
    fn UserAgent(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetUserAgent(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings2_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn UserAgent<
            Identity: ICoreWebView2Settings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings2_Impl::UserAgent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUserAgent<
            Identity: ICoreWebView2Settings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings2_Impl::SetUserAgent(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings2, OFFSET>(
            ),
            UserAgent: UserAgent::<Identity, OFFSET>,
            SetUserAgent: SetUserAgent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UserAgent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetUserAgent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings3,
    ICoreWebView2Settings3_Vtbl,
    0x52200f01_5309_5b2e_a03c_3d2677591940
);
impl windows_core::RuntimeType for ICoreWebView2Settings3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings3";
}
pub trait ICoreWebView2Settings3_Impl: windows_core::IUnknownImpl {
    fn AreBrowserAcceleratorKeysEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreBrowserAcceleratorKeysEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings3_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AreBrowserAcceleratorKeysEnabled<
            Identity: ICoreWebView2Settings3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings3_Impl::AreBrowserAcceleratorKeysEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreBrowserAcceleratorKeysEnabled<
            Identity: ICoreWebView2Settings3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings3_Impl::SetAreBrowserAcceleratorKeysEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings3, OFFSET>(
            ),
            AreBrowserAcceleratorKeysEnabled: AreBrowserAcceleratorKeysEnabled::<Identity, OFFSET>,
            SetAreBrowserAcceleratorKeysEnabled: SetAreBrowserAcceleratorKeysEnabled::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AreBrowserAcceleratorKeysEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreBrowserAcceleratorKeysEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings4,
    ICoreWebView2Settings4_Vtbl,
    0xd6a955f0_daef_5a6a_a6f6_c72f0ede7620
);
impl windows_core::RuntimeType for ICoreWebView2Settings4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings4";
}
pub trait ICoreWebView2Settings4_Impl: windows_core::IUnknownImpl {
    fn IsPasswordAutosaveEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPasswordAutosaveEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsGeneralAutofillEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsGeneralAutofillEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings4_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsPasswordAutosaveEnabled<
            Identity: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings4_Impl::IsPasswordAutosaveEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPasswordAutosaveEnabled<
            Identity: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings4_Impl::SetIsPasswordAutosaveEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsGeneralAutofillEnabled<
            Identity: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings4_Impl::IsGeneralAutofillEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsGeneralAutofillEnabled<
            Identity: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings4_Impl::SetIsGeneralAutofillEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings4, OFFSET>(
            ),
            IsPasswordAutosaveEnabled: IsPasswordAutosaveEnabled::<Identity, OFFSET>,
            SetIsPasswordAutosaveEnabled: SetIsPasswordAutosaveEnabled::<Identity, OFFSET>,
            IsGeneralAutofillEnabled: IsGeneralAutofillEnabled::<Identity, OFFSET>,
            SetIsGeneralAutofillEnabled: SetIsGeneralAutofillEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsPasswordAutosaveEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPasswordAutosaveEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsGeneralAutofillEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsGeneralAutofillEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings5,
    ICoreWebView2Settings5_Vtbl,
    0xafc42b23_4839_5d73_acf7_e0335631abf5
);
impl windows_core::RuntimeType for ICoreWebView2Settings5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings5";
}
pub trait ICoreWebView2Settings5_Impl: windows_core::IUnknownImpl {
    fn IsPinchZoomEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPinchZoomEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings5_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsPinchZoomEnabled<
            Identity: ICoreWebView2Settings5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings5_Impl::IsPinchZoomEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPinchZoomEnabled<
            Identity: ICoreWebView2Settings5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings5_Impl::SetIsPinchZoomEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings5, OFFSET>(
            ),
            IsPinchZoomEnabled: IsPinchZoomEnabled::<Identity, OFFSET>,
            SetIsPinchZoomEnabled: SetIsPinchZoomEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsPinchZoomEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPinchZoomEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings6,
    ICoreWebView2Settings6_Vtbl,
    0x3fe4ae85_0540_5bf1_b4d9_99ec57aa64f5
);
impl windows_core::RuntimeType for ICoreWebView2Settings6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings6 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings6";
}
pub trait ICoreWebView2Settings6_Impl: windows_core::IUnknownImpl {
    fn IsSwipeNavigationEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsSwipeNavigationEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings6_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings6_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsSwipeNavigationEnabled<
            Identity: ICoreWebView2Settings6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings6_Impl::IsSwipeNavigationEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSwipeNavigationEnabled<
            Identity: ICoreWebView2Settings6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings6_Impl::SetIsSwipeNavigationEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings6, OFFSET>(
            ),
            IsSwipeNavigationEnabled: IsSwipeNavigationEnabled::<Identity, OFFSET>,
            SetIsSwipeNavigationEnabled: SetIsSwipeNavigationEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSwipeNavigationEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSwipeNavigationEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings7,
    ICoreWebView2Settings7_Vtbl,
    0x688027cd_9f84_59e8_8d5c_91123df24b92
);
impl windows_core::RuntimeType for ICoreWebView2Settings7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings7 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings7";
}
pub trait ICoreWebView2Settings7_Impl: windows_core::IUnknownImpl {
    fn HiddenPdfToolbarItems(&self) -> windows_core::Result<CoreWebView2PdfToolbarItems>;
    fn SetHiddenPdfToolbarItems(
        &self,
        value: CoreWebView2PdfToolbarItems,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings7_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings7_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HiddenPdfToolbarItems<
            Identity: ICoreWebView2Settings7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2PdfToolbarItems,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings7_Impl::HiddenPdfToolbarItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHiddenPdfToolbarItems<
            Identity: ICoreWebView2Settings7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2PdfToolbarItems,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings7_Impl::SetHiddenPdfToolbarItems(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings7, OFFSET>(
            ),
            HiddenPdfToolbarItems: HiddenPdfToolbarItems::<Identity, OFFSET>,
            SetHiddenPdfToolbarItems: SetHiddenPdfToolbarItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HiddenPdfToolbarItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2PdfToolbarItems,
    ) -> windows_core::HRESULT,
    pub SetHiddenPdfToolbarItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PdfToolbarItems,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings8,
    ICoreWebView2Settings8_Vtbl,
    0x956f1a8f_3198_5577_b250_7d91d17f7eed
);
impl windows_core::RuntimeType for ICoreWebView2Settings8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings8 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings8";
}
pub trait ICoreWebView2Settings8_Impl: windows_core::IUnknownImpl {
    fn IsReputationCheckingRequired(&self) -> windows_core::Result<bool>;
    fn SetIsReputationCheckingRequired(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings8_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings8_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsReputationCheckingRequired<
            Identity: ICoreWebView2Settings8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings8_Impl::IsReputationCheckingRequired(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsReputationCheckingRequired<
            Identity: ICoreWebView2Settings8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings8_Impl::SetIsReputationCheckingRequired(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings8, OFFSET>(
            ),
            IsReputationCheckingRequired: IsReputationCheckingRequired::<Identity, OFFSET>,
            SetIsReputationCheckingRequired: SetIsReputationCheckingRequired::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsReputationCheckingRequired:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsReputationCheckingRequired:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings9,
    ICoreWebView2Settings9_Vtbl,
    0x4c346681_714d_5a3d_8105_2a7b80beeab5
);
impl windows_core::RuntimeType for ICoreWebView2Settings9 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings9 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings9";
}
pub trait ICoreWebView2Settings9_Impl: windows_core::IUnknownImpl {
    fn IsNonClientRegionSupportEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsNonClientRegionSupportEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings9_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings9_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsNonClientRegionSupportEnabled<
            Identity: ICoreWebView2Settings9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings9_Impl::IsNonClientRegionSupportEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsNonClientRegionSupportEnabled<
            Identity: ICoreWebView2Settings9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings9_Impl::SetIsNonClientRegionSupportEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2Settings9, OFFSET>(
            ),
            IsNonClientRegionSupportEnabled: IsNonClientRegionSupportEnabled::<Identity, OFFSET>,
            SetIsNonClientRegionSupportEnabled: SetIsNonClientRegionSupportEnabled::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings9 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings9_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsNonClientRegionSupportEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsNonClientRegionSupportEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2Settings_Manual,
    ICoreWebView2Settings_Manual_Vtbl,
    0x0a538c87_e000_511c_87ca_ded3413d03da
);
impl windows_core::RuntimeType for ICoreWebView2Settings_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2Settings_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2Settings_Manual";
}
pub trait ICoreWebView2Settings_Manual_Impl: windows_core::IUnknownImpl {
    fn HostObjectDispatchAdapter(&self) -> windows_core::Result<ICoreWebView2DispatchAdapter>;
    fn SetHostObjectDispatchAdapter(
        &self,
        value: windows_core::Ref<ICoreWebView2DispatchAdapter>,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2Settings_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2Settings_Manual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HostObjectDispatchAdapter<
            Identity: ICoreWebView2Settings_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2Settings_Manual_Impl::HostObjectDispatchAdapter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHostObjectDispatchAdapter<
            Identity: ICoreWebView2Settings_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2Settings_Manual_Impl::SetHostObjectDispatchAdapter(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2Settings_Manual,
                OFFSET,
            >(),
            HostObjectDispatchAdapter: HostObjectDispatchAdapter::<Identity, OFFSET>,
            SetHostObjectDispatchAdapter: SetHostObjectDispatchAdapter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2Settings_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HostObjectDispatchAdapter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHostObjectDispatchAdapter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2SharedBuffer,
    ICoreWebView2SharedBuffer_Vtbl,
    0x2907cc84_f843_5959_8734_f871766f8f13
);
impl windows_core::RuntimeType for ICoreWebView2SharedBuffer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2SharedBuffer {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer";
}
pub trait ICoreWebView2SharedBuffer_Impl: windows_core::IUnknownImpl {
    fn Size(&self) -> windows_core::Result<u64>;
    fn OpenStream(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream>;
}
impl ICoreWebView2SharedBuffer_Vtbl {
    pub const fn new<Identity: ICoreWebView2SharedBuffer_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Size<
            Identity: ICoreWebView2SharedBuffer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2SharedBuffer_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OpenStream<
            Identity: ICoreWebView2SharedBuffer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2SharedBuffer_Impl::OpenStream(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2SharedBuffer,
                OFFSET,
            >(),
            Size: Size::<Identity, OFFSET>,
            OpenStream: OpenStream::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2SharedBuffer as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2SharedBuffer_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Size: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    pub OpenStream: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2SharedBuffer_Manual,
    ICoreWebView2SharedBuffer_Manual_Vtbl,
    0x1aa4e213_ace3_5f74_a2ae_c6489ceb3239
);
impl windows_core::RuntimeType for ICoreWebView2SharedBuffer_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2SharedBuffer_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2SharedBuffer_Manual";
}
pub trait ICoreWebView2SharedBuffer_Manual_Impl: windows_core::IUnknownImpl {
    fn Buffer(&self) -> windows_core::Result<windows::Foundation::IMemoryBufferReference>;
}
impl ICoreWebView2SharedBuffer_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2SharedBuffer_Manual_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Buffer<
            Identity: ICoreWebView2SharedBuffer_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2SharedBuffer_Manual_Impl::Buffer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2SharedBuffer_Manual,
                OFFSET,
            >(),
            Buffer: Buffer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2SharedBuffer_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2SharedBuffer_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Buffer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2SourceChangedEventArgs,
    ICoreWebView2SourceChangedEventArgs_Vtbl,
    0xca437b2c_6a18_5552_b749_b198f8cc34d9
);
impl windows_core::RuntimeType for ICoreWebView2SourceChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2SourceChangedEventArgs {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgs";
}
pub trait ICoreWebView2SourceChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn IsNewDocument(&self) -> windows_core::Result<bool>;
}
impl ICoreWebView2SourceChangedEventArgs_Vtbl {
    pub const fn new<Identity: ICoreWebView2SourceChangedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn IsNewDocument<
            Identity: ICoreWebView2SourceChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2SourceChangedEventArgs_Impl::IsNewDocument(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2SourceChangedEventArgs,
                OFFSET,
            >(),
            IsNewDocument: IsNewDocument::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2SourceChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2SourceChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsNewDocument:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebMessageReceivedEventArgs,
    ICoreWebView2WebMessageReceivedEventArgs_Vtbl,
    0xeb066159_b725_5d5b_adc8_f5d7b9290304
);
impl windows_core::RuntimeType for ICoreWebView2WebMessageReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebMessageReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs";
}
pub trait ICoreWebView2WebMessageReceivedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Source(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn WebMessageAsJson(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn TryGetWebMessageAsString(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Source<
            Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebMessageReceivedEventArgs_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WebMessageAsJson<
            Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebMessageReceivedEventArgs_Impl::WebMessageAsJson(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetWebMessageAsString<
            Identity: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebMessageReceivedEventArgs_Impl::TryGetWebMessageAsString(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebMessageReceivedEventArgs,
                OFFSET,
            >(),
            Source: Source::<Identity, OFFSET>,
            WebMessageAsJson: WebMessageAsJson::<Identity, OFFSET>,
            TryGetWebMessageAsString: TryGetWebMessageAsString::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebMessageReceivedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WebMessageAsJson: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryGetWebMessageAsString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebMessageReceivedEventArgs2,
    ICoreWebView2WebMessageReceivedEventArgs2_Vtbl,
    0x71dc5fa0_08a0_5dea_9363_799df5021452
);
impl windows_core::RuntimeType for ICoreWebView2WebMessageReceivedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebMessageReceivedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs2";
}
pub trait ICoreWebView2WebMessageReceivedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn AdditionalObjects(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::IInspectable>>;
}
impl ICoreWebView2WebMessageReceivedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2WebMessageReceivedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn AdditionalObjects<
            Identity: ICoreWebView2WebMessageReceivedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebMessageReceivedEventArgs2_Impl::AdditionalObjects(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebMessageReceivedEventArgs2,
                OFFSET,
            >(),
            AdditionalObjects: AdditionalObjects::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebMessageReceivedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebMessageReceivedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AdditionalObjects: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceRequest,
    ICoreWebView2WebResourceRequest_Vtbl,
    0x5c742259_67d2_5df2_8382_0f201b4d7197
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceRequest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceRequest {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequest";
}
pub trait ICoreWebView2WebResourceRequest_Impl: windows_core::IUnknownImpl {
    fn Uri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetUri(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Method(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetMethod(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Content(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream>;
    fn SetContent(
        &self,
        value: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
    ) -> windows_core::Result<()>;
    fn Headers(&self) -> windows_core::Result<CoreWebView2HttpRequestHeaders>;
}
impl ICoreWebView2WebResourceRequest_Vtbl {
    pub const fn new<Identity: ICoreWebView2WebResourceRequest_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Uri<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequest_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUri<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceRequest_Impl::SetUri(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Method<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequest_Impl::Method(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMethod<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceRequest_Impl::SetMethod(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Content<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequest_Impl::Content(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceRequest_Impl::SetContent(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Headers<
            Identity: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequest_Impl::Headers(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceRequest,
                OFFSET,
            >(),
            Uri: Uri::<Identity, OFFSET>,
            SetUri: SetUri::<Identity, OFFSET>,
            Method: Method::<Identity, OFFSET>,
            SetMethod: SetMethod::<Identity, OFFSET>,
            Content: Content::<Identity, OFFSET>,
            SetContent: SetContent::<Identity, OFFSET>,
            Headers: Headers::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequest as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequest_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Method: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMethod: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Content: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Headers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceRequestedEventArgs,
    ICoreWebView2WebResourceRequestedEventArgs_Vtbl,
    0x577f1fc4_c943_54a9_9700_bd469b48bd41
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs";
}
pub trait ICoreWebView2WebResourceRequestedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Request(&self) -> windows_core::Result<CoreWebView2WebResourceRequest>;
    fn Response(&self) -> windows_core::Result<CoreWebView2WebResourceResponse>;
    fn SetResponse(
        &self,
        value: windows_core::Ref<CoreWebView2WebResourceResponse>,
    ) -> windows_core::Result<()>;
    fn ResourceContext(&self) -> windows_core::Result<CoreWebView2WebResourceContext>;
    fn GetDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Request<
            Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequestedEventArgs_Impl::Request(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Response<
            Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequestedEventArgs_Impl::Response(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetResponse<
            Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceRequestedEventArgs_Impl::SetResponse(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ResourceContext<
            Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2WebResourceContext,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequestedEventArgs_Impl::ResourceContext(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequestedEventArgs_Impl::GetDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceRequestedEventArgs,
                OFFSET,
            >(),
            Request: Request::<Identity, OFFSET>,
            Response: Response::<Identity, OFFSET>,
            SetResponse: SetResponse::<Identity, OFFSET>,
            ResourceContext: ResourceContext::<Identity, OFFSET>,
            GetDeferral: GetDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Request: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Response: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetResponse: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ResourceContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2WebResourceContext,
    ) -> windows_core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceRequestedEventArgs2,
    ICoreWebView2WebResourceRequestedEventArgs2_Vtbl,
    0x0bbe4b89_88a9_575a_b09e_7946ee415e94
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceRequestedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceRequestedEventArgs2 {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs2";
}
pub trait ICoreWebView2WebResourceRequestedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn RequestedSourceKind(
        &self,
    ) -> windows_core::Result<CoreWebView2WebResourceRequestSourceKinds>;
}
impl ICoreWebView2WebResourceRequestedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2WebResourceRequestedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn RequestedSourceKind<
            Identity: ICoreWebView2WebResourceRequestedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2WebResourceRequestSourceKinds,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceRequestedEventArgs2_Impl::RequestedSourceKind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceRequestedEventArgs2,
                OFFSET,
            >(),
            RequestedSourceKind: RequestedSourceKind::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequestedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequestedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RequestedSourceKind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceResponse,
    ICoreWebView2WebResourceResponse_Vtbl,
    0x14621923_e485_5f44_8f5d_bd4243bc398f
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceResponse {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceResponse {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponse";
}
pub trait ICoreWebView2WebResourceResponse_Impl: windows_core::IUnknownImpl {
    fn Content(&self) -> windows_core::Result<windows::Storage::Streams::IRandomAccessStream>;
    fn SetContent(
        &self,
        value: windows_core::Ref<windows::Storage::Streams::IRandomAccessStream>,
    ) -> windows_core::Result<()>;
    fn Headers(&self) -> windows_core::Result<CoreWebView2HttpResponseHeaders>;
    fn StatusCode(&self) -> windows_core::Result<i32>;
    fn SetStatusCode(&self, value: i32) -> windows_core::Result<()>;
    fn ReasonPhrase(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetReasonPhrase(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICoreWebView2WebResourceResponse_Vtbl {
    pub const fn new<Identity: ICoreWebView2WebResourceResponse_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Content<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponse_Impl::Content(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceResponse_Impl::SetContent(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Headers<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponse_Impl::Headers(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StatusCode<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponse_Impl::StatusCode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStatusCode<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceResponse_Impl::SetStatusCode(this, value).into()
            }
        }
        unsafe extern "system" fn ReasonPhrase<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponse_Impl::ReasonPhrase(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetReasonPhrase<
            Identity: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2WebResourceResponse_Impl::SetReasonPhrase(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceResponse,
                OFFSET,
            >(),
            Content: Content::<Identity, OFFSET>,
            SetContent: SetContent::<Identity, OFFSET>,
            Headers: Headers::<Identity, OFFSET>,
            StatusCode: StatusCode::<Identity, OFFSET>,
            SetStatusCode: SetStatusCode::<Identity, OFFSET>,
            ReasonPhrase: ReasonPhrase::<Identity, OFFSET>,
            SetReasonPhrase: SetReasonPhrase::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceResponse as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponse_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Headers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StatusCode:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetStatusCode:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub ReasonPhrase: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetReasonPhrase: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceResponseReceivedEventArgs,
    ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl,
    0x12424671_9711_54f4_bcdf_5f307add6ec2
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceResponseReceivedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceResponseReceivedEventArgs {
    const NAME: &'static str =
        "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgs";
}
pub trait ICoreWebView2WebResourceResponseReceivedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn Request(&self) -> windows_core::Result<CoreWebView2WebResourceRequest>;
    fn Response(&self) -> windows_core::Result<CoreWebView2WebResourceResponseView>;
}
impl ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Request<
            Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseReceivedEventArgs_Impl::Request(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Response<
            Identity: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseReceivedEventArgs_Impl::Response(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceResponseReceivedEventArgs,
                OFFSET,
            >(),
            Request: Request::<Identity, OFFSET>,
            Response: Response::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceResponseReceivedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Request: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Response: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WebResourceResponseView,
    ICoreWebView2WebResourceResponseView_Vtbl,
    0x33ee060b_b578_5698_b541_fef87fe7fe72
);
impl windows_core::RuntimeType for ICoreWebView2WebResourceResponseView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WebResourceResponseView {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseView";
}
pub trait ICoreWebView2WebResourceResponseView_Impl: windows_core::IUnknownImpl {
    fn Headers(&self) -> windows_core::Result<CoreWebView2HttpResponseHeaders>;
    fn StatusCode(&self) -> windows_core::Result<i32>;
    fn ReasonPhrase(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn GetContentAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    >;
}
impl ICoreWebView2WebResourceResponseView_Vtbl {
    pub const fn new<Identity: ICoreWebView2WebResourceResponseView_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Headers<
            Identity: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseView_Impl::Headers(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StatusCode<
            Identity: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseView_Impl::StatusCode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ReasonPhrase<
            Identity: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseView_Impl::ReasonPhrase(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetContentAsync<
            Identity: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WebResourceResponseView_Impl::GetContentAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WebResourceResponseView,
                OFFSET,
            >(),
            Headers: Headers::<Identity, OFFSET>,
            StatusCode: StatusCode::<Identity, OFFSET>,
            ReasonPhrase: ReasonPhrase::<Identity, OFFSET>,
            GetContentAsync: GetContentAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceResponseView as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseView_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Headers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StatusCode:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ReasonPhrase: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetContentAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2WindowFeatures,
    ICoreWebView2WindowFeatures_Vtbl,
    0xee8686d6_056f_5e06_824f_4e2a24c1c1d6
);
impl windows_core::RuntimeType for ICoreWebView2WindowFeatures {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2WindowFeatures {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeatures";
}
pub trait ICoreWebView2WindowFeatures_Impl: windows_core::IUnknownImpl {
    fn HasPosition(&self) -> windows_core::Result<bool>;
    fn HasSize(&self) -> windows_core::Result<bool>;
    fn Left(&self) -> windows_core::Result<u32>;
    fn Top(&self) -> windows_core::Result<u32>;
    fn Height(&self) -> windows_core::Result<u32>;
    fn Width(&self) -> windows_core::Result<u32>;
    fn ShouldDisplayMenuBar(&self) -> windows_core::Result<bool>;
    fn ShouldDisplayStatus(&self) -> windows_core::Result<bool>;
    fn ShouldDisplayToolbar(&self) -> windows_core::Result<bool>;
    fn ShouldDisplayScrollBars(&self) -> windows_core::Result<bool>;
}
impl ICoreWebView2WindowFeatures_Vtbl {
    pub const fn new<Identity: ICoreWebView2WindowFeatures_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HasPosition<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::HasPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasSize<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::HasSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Left<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::Left(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Top<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::Top(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Height<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::Height(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Width<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::Width(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldDisplayMenuBar<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::ShouldDisplayMenuBar(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldDisplayStatus<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::ShouldDisplayStatus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldDisplayToolbar<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::ShouldDisplayToolbar(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldDisplayScrollBars<
            Identity: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2WindowFeatures_Impl::ShouldDisplayScrollBars(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICoreWebView2WindowFeatures,
                OFFSET,
            >(),
            HasPosition: HasPosition::<Identity, OFFSET>,
            HasSize: HasSize::<Identity, OFFSET>,
            Left: Left::<Identity, OFFSET>,
            Top: Top::<Identity, OFFSET>,
            Height: Height::<Identity, OFFSET>,
            Width: Width::<Identity, OFFSET>,
            ShouldDisplayMenuBar: ShouldDisplayMenuBar::<Identity, OFFSET>,
            ShouldDisplayStatus: ShouldDisplayStatus::<Identity, OFFSET>,
            ShouldDisplayToolbar: ShouldDisplayToolbar::<Identity, OFFSET>,
            ShouldDisplayScrollBars: ShouldDisplayScrollBars::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2WindowFeatures as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WindowFeatures_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HasPosition:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub HasSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Left: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub Top: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub Height:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub Width: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub ShouldDisplayMenuBar:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ShouldDisplayStatus:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ShouldDisplayToolbar:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ShouldDisplayScrollBars:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_10,
    ICoreWebView2_10_Vtbl,
    0xa7b20434_970f_54b1_aa63_3c42671fa9ab
);
impl windows_core::RuntimeType for ICoreWebView2_10 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_10 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_10";
}
pub trait ICoreWebView2_10_Impl: windows_core::IUnknownImpl {
    fn BasicAuthenticationRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2BasicAuthenticationRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveBasicAuthenticationRequested(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_10_Vtbl {
    pub const fn new<Identity: ICoreWebView2_10_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BasicAuthenticationRequested<
            Identity: ICoreWebView2_10_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_10_Impl::BasicAuthenticationRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveBasicAuthenticationRequested<
            Identity: ICoreWebView2_10_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_10_Impl::RemoveBasicAuthenticationRequested(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_10, OFFSET>(),
            BasicAuthenticationRequested: BasicAuthenticationRequested::<Identity, OFFSET>,
            RemoveBasicAuthenticationRequested: RemoveBasicAuthenticationRequested::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_10 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_10_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BasicAuthenticationRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveBasicAuthenticationRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_11,
    ICoreWebView2_11_Vtbl,
    0xc00acbb1_ae32_501f_ad19_9d0ac32d6142
);
impl windows_core::RuntimeType for ICoreWebView2_11 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_11 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_11";
}
pub trait ICoreWebView2_11_Impl: windows_core::IUnknownImpl {
    fn ContextMenuRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ContextMenuRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveContextMenuRequested(&self, token: i64) -> windows_core::Result<()>;
    fn CallDevToolsProtocolMethodForSessionAsync(
        &self,
        sessionId: &windows_core::HSTRING,
        methodName: &windows_core::HSTRING,
        parametersAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
}
impl ICoreWebView2_11_Vtbl {
    pub const fn new<Identity: ICoreWebView2_11_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ContextMenuRequested<
            Identity: ICoreWebView2_11_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_11_Impl::ContextMenuRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveContextMenuRequested<
            Identity: ICoreWebView2_11_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_11_Impl::RemoveContextMenuRequested(this, token).into()
            }
        }
        unsafe extern "system" fn CallDevToolsProtocolMethodForSessionAsync<
            Identity: ICoreWebView2_11_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sessionid: *mut core::ffi::c_void,
            methodname: *mut core::ffi::c_void,
            parametersasjson: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_11_Impl::CallDevToolsProtocolMethodForSessionAsync(
                    this,
                    core::mem::transmute(&sessionid),
                    core::mem::transmute(&methodname),
                    core::mem::transmute(&parametersasjson),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_11, OFFSET>(),
            ContextMenuRequested: ContextMenuRequested::<Identity, OFFSET>,
            RemoveContextMenuRequested: RemoveContextMenuRequested::<Identity, OFFSET>,
            CallDevToolsProtocolMethodForSessionAsync: CallDevToolsProtocolMethodForSessionAsync::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_11 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_11_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ContextMenuRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveContextMenuRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub CallDevToolsProtocolMethodForSessionAsync:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_12,
    ICoreWebView2_12_Vtbl,
    0xdbbbe9a1_18d3_5f67_b362_0f4ae937d754
);
impl windows_core::RuntimeType for ICoreWebView2_12 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_12 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_12";
}
pub trait ICoreWebView2_12_Impl: windows_core::IUnknownImpl {
    fn StatusBarText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn StatusBarTextChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveStatusBarTextChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_12_Vtbl {
    pub const fn new<Identity: ICoreWebView2_12_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn StatusBarText<
            Identity: ICoreWebView2_12_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_12_Impl::StatusBarText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StatusBarTextChanged<
            Identity: ICoreWebView2_12_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_12_Impl::StatusBarTextChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveStatusBarTextChanged<
            Identity: ICoreWebView2_12_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_12_Impl::RemoveStatusBarTextChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_12, OFFSET>(),
            StatusBarText: StatusBarText::<Identity, OFFSET>,
            StatusBarTextChanged: StatusBarTextChanged::<Identity, OFFSET>,
            RemoveStatusBarTextChanged: RemoveStatusBarTextChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_12 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_12_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub StatusBarText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StatusBarTextChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveStatusBarTextChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_13,
    ICoreWebView2_13_Vtbl,
    0x314b5846_dbc7_5de4_a792_647ea0f3296a
);
impl windows_core::RuntimeType for ICoreWebView2_13 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_13 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_13";
}
pub trait ICoreWebView2_13_Impl: windows_core::IUnknownImpl {
    fn Profile(&self) -> windows_core::Result<CoreWebView2Profile>;
}
impl ICoreWebView2_13_Vtbl {
    pub const fn new<Identity: ICoreWebView2_13_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Profile<Identity: ICoreWebView2_13_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_13_Impl::Profile(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_13, OFFSET>(),
            Profile: Profile::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_13 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_13_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Profile: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_14,
    ICoreWebView2_14_Vtbl,
    0xa7647b24_3b1e_50a9_be24_6e8ac63fe491
);
impl windows_core::RuntimeType for ICoreWebView2_14 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_14 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_14";
}
pub trait ICoreWebView2_14_Impl: windows_core::IUnknownImpl {
    fn ServerCertificateErrorDetected(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ServerCertificateErrorDetectedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveServerCertificateErrorDetected(&self, token: i64) -> windows_core::Result<()>;
    fn ClearServerCertificateErrorActionsAsync(
        &self,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl ICoreWebView2_14_Vtbl {
    pub const fn new<Identity: ICoreWebView2_14_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ServerCertificateErrorDetected<
            Identity: ICoreWebView2_14_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_14_Impl::ServerCertificateErrorDetected(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveServerCertificateErrorDetected<
            Identity: ICoreWebView2_14_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_14_Impl::RemoveServerCertificateErrorDetected(this, token).into()
            }
        }
        unsafe extern "system" fn ClearServerCertificateErrorActionsAsync<
            Identity: ICoreWebView2_14_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_14_Impl::ClearServerCertificateErrorActionsAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_14, OFFSET>(),
            ServerCertificateErrorDetected: ServerCertificateErrorDetected::<Identity, OFFSET>,
            RemoveServerCertificateErrorDetected: RemoveServerCertificateErrorDetected::<
                Identity,
                OFFSET,
            >,
            ClearServerCertificateErrorActionsAsync: ClearServerCertificateErrorActionsAsync::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_14 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_14_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ServerCertificateErrorDetected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveServerCertificateErrorDetected:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ClearServerCertificateErrorActionsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_15,
    ICoreWebView2_15_Vtbl,
    0x4443f532_d2ba_5ae2_a9b3_8de62bd5d4a9
);
impl windows_core::RuntimeType for ICoreWebView2_15 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_15 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_15";
}
pub trait ICoreWebView2_15_Impl: windows_core::IUnknownImpl {
    fn FaviconUri(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn FaviconChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveFaviconChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetFaviconAsync(
        &self,
        format: CoreWebView2FaviconImageFormat,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    >;
}
impl ICoreWebView2_15_Vtbl {
    pub const fn new<Identity: ICoreWebView2_15_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FaviconUri<
            Identity: ICoreWebView2_15_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_15_Impl::FaviconUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FaviconChanged<
            Identity: ICoreWebView2_15_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_15_Impl::FaviconChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveFaviconChanged<
            Identity: ICoreWebView2_15_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_15_Impl::RemoveFaviconChanged(this, token).into()
            }
        }
        unsafe extern "system" fn GetFaviconAsync<
            Identity: ICoreWebView2_15_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            format: CoreWebView2FaviconImageFormat,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_15_Impl::GetFaviconAsync(this, format) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_15, OFFSET>(),
            FaviconUri: FaviconUri::<Identity, OFFSET>,
            FaviconChanged: FaviconChanged::<Identity, OFFSET>,
            RemoveFaviconChanged: RemoveFaviconChanged::<Identity, OFFSET>,
            GetFaviconAsync: GetFaviconAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_15 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_15_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FaviconUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FaviconChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveFaviconChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetFaviconAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2FaviconImageFormat,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_16,
    ICoreWebView2_16_Vtbl,
    0x61d0a57c_6c4f_50ff_a137_314b0099a2b8
);
impl windows_core::RuntimeType for ICoreWebView2_16 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_16 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_16";
}
pub trait ICoreWebView2_16_Impl: windows_core::IUnknownImpl {
    fn PrintAsync(
        &self,
        printSettings: windows_core::Ref<CoreWebView2PrintSettings>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2PrintStatus>>;
    fn ShowPrintUI(&self, printDialogKind: CoreWebView2PrintDialogKind)
        -> windows_core::Result<()>;
    fn PrintToPdfStreamAsync(
        &self,
        printSettings: windows_core::Ref<CoreWebView2PrintSettings>,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows::Storage::Streams::IRandomAccessStream>,
    >;
}
impl ICoreWebView2_16_Vtbl {
    pub const fn new<Identity: ICoreWebView2_16_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PrintAsync<
            Identity: ICoreWebView2_16_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            printsettings: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_16_Impl::PrintAsync(
                    this,
                    core::mem::transmute_copy(&printsettings),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShowPrintUI<
            Identity: ICoreWebView2_16_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            printdialogkind: CoreWebView2PrintDialogKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_16_Impl::ShowPrintUI(this, printdialogkind).into()
            }
        }
        unsafe extern "system" fn PrintToPdfStreamAsync<
            Identity: ICoreWebView2_16_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            printsettings: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_16_Impl::PrintToPdfStreamAsync(
                    this,
                    core::mem::transmute_copy(&printsettings),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_16, OFFSET>(),
            PrintAsync: PrintAsync::<Identity, OFFSET>,
            ShowPrintUI: ShowPrintUI::<Identity, OFFSET>,
            PrintToPdfStreamAsync: PrintToPdfStreamAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_16 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_16_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PrintAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ShowPrintUI: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2PrintDialogKind,
    ) -> windows_core::HRESULT,
    pub PrintToPdfStreamAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_17,
    ICoreWebView2_17_Vtbl,
    0x2345f9db_5488_559a_82af_9086cc4f7988
);
impl windows_core::RuntimeType for ICoreWebView2_17 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_17 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_17";
}
pub trait ICoreWebView2_17_Impl: windows_core::IUnknownImpl {
    fn PostSharedBufferToScript(
        &self,
        sharedBuffer: windows_core::Ref<CoreWebView2SharedBuffer>,
        access: CoreWebView2SharedBufferAccess,
        additionalDataAsJson: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_17_Vtbl {
    pub const fn new<Identity: ICoreWebView2_17_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PostSharedBufferToScript<
            Identity: ICoreWebView2_17_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sharedbuffer: *mut core::ffi::c_void,
            access: CoreWebView2SharedBufferAccess,
            additionaldataasjson: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_17_Impl::PostSharedBufferToScript(
                    this,
                    core::mem::transmute_copy(&sharedbuffer),
                    access,
                    core::mem::transmute(&additionaldataasjson),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_17, OFFSET>(),
            PostSharedBufferToScript: PostSharedBufferToScript::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_17 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_17_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PostSharedBufferToScript: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2SharedBufferAccess,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_18,
    ICoreWebView2_18_Vtbl,
    0x94f52e61_9d75_5a81_acd3_830ff29ce6f7
);
impl windows_core::RuntimeType for ICoreWebView2_18 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_18 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_18";
}
pub trait ICoreWebView2_18_Impl: windows_core::IUnknownImpl {
    fn LaunchingExternalUriScheme(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2LaunchingExternalUriSchemeEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveLaunchingExternalUriScheme(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_18_Vtbl {
    pub const fn new<Identity: ICoreWebView2_18_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LaunchingExternalUriScheme<
            Identity: ICoreWebView2_18_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_18_Impl::LaunchingExternalUriScheme(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveLaunchingExternalUriScheme<
            Identity: ICoreWebView2_18_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_18_Impl::RemoveLaunchingExternalUriScheme(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_18, OFFSET>(),
            LaunchingExternalUriScheme: LaunchingExternalUriScheme::<Identity, OFFSET>,
            RemoveLaunchingExternalUriScheme: RemoveLaunchingExternalUriScheme::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_18 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_18_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LaunchingExternalUriScheme: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveLaunchingExternalUriScheme:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_19,
    ICoreWebView2_19_Vtbl,
    0x35a94a5c_e027_5dc5_8c2b_c2fc7d589159
);
impl windows_core::RuntimeType for ICoreWebView2_19 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_19 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_19";
}
pub trait ICoreWebView2_19_Impl: windows_core::IUnknownImpl {
    fn MemoryUsageTargetLevel(&self) -> windows_core::Result<CoreWebView2MemoryUsageTargetLevel>;
    fn SetMemoryUsageTargetLevel(
        &self,
        value: CoreWebView2MemoryUsageTargetLevel,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_19_Vtbl {
    pub const fn new<Identity: ICoreWebView2_19_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MemoryUsageTargetLevel<
            Identity: ICoreWebView2_19_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2MemoryUsageTargetLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_19_Impl::MemoryUsageTargetLevel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMemoryUsageTargetLevel<
            Identity: ICoreWebView2_19_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2MemoryUsageTargetLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_19_Impl::SetMemoryUsageTargetLevel(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_19, OFFSET>(),
            MemoryUsageTargetLevel: MemoryUsageTargetLevel::<Identity, OFFSET>,
            SetMemoryUsageTargetLevel: SetMemoryUsageTargetLevel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_19 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_19_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MemoryUsageTargetLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2MemoryUsageTargetLevel,
    ) -> windows_core::HRESULT,
    pub SetMemoryUsageTargetLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2MemoryUsageTargetLevel,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_2,
    ICoreWebView2_2_Vtbl,
    0x578cb133_2873_5408_bd9e_389bbe9fa7fa
);
impl windows_core::RuntimeType for ICoreWebView2_2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_2 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_2";
}
pub trait ICoreWebView2_2_Impl: windows_core::IUnknownImpl {
    fn CookieManager(&self) -> windows_core::Result<CoreWebView2CookieManager>;
    fn Environment(&self) -> windows_core::Result<CoreWebView2Environment>;
    fn WebResourceResponseReceived(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2WebResourceResponseReceivedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWebResourceResponseReceived(&self, token: i64) -> windows_core::Result<()>;
    fn DOMContentLoaded(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DOMContentLoadedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDOMContentLoaded(&self, token: i64) -> windows_core::Result<()>;
    fn NavigateWithWebResourceRequest(
        &self,
        Request: windows_core::Ref<CoreWebView2WebResourceRequest>,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_2_Vtbl {
    pub const fn new<Identity: ICoreWebView2_2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CookieManager<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_2_Impl::CookieManager(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Environment<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_2_Impl::Environment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WebResourceResponseReceived<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_2_Impl::WebResourceResponseReceived(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWebResourceResponseReceived<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_2_Impl::RemoveWebResourceResponseReceived(this, token).into()
            }
        }
        unsafe extern "system" fn DOMContentLoaded<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_2_Impl::DOMContentLoaded(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDOMContentLoaded<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_2_Impl::RemoveDOMContentLoaded(this, token).into()
            }
        }
        unsafe extern "system" fn NavigateWithWebResourceRequest<
            Identity: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            request: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_2_Impl::NavigateWithWebResourceRequest(
                    this,
                    core::mem::transmute_copy(&request),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_2, OFFSET>(),
            CookieManager: CookieManager::<Identity, OFFSET>,
            Environment: Environment::<Identity, OFFSET>,
            WebResourceResponseReceived: WebResourceResponseReceived::<Identity, OFFSET>,
            RemoveWebResourceResponseReceived: RemoveWebResourceResponseReceived::<Identity, OFFSET>,
            DOMContentLoaded: DOMContentLoaded::<Identity, OFFSET>,
            RemoveDOMContentLoaded: RemoveDOMContentLoaded::<Identity, OFFSET>,
            NavigateWithWebResourceRequest: NavigateWithWebResourceRequest::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CookieManager: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Environment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WebResourceResponseReceived: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveWebResourceResponseReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DOMContentLoaded: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDOMContentLoaded:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NavigateWithWebResourceRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_20,
    ICoreWebView2_20_Vtbl,
    0x859c4805_e988_50d5_85d7_a50643fc815e
);
impl windows_core::RuntimeType for ICoreWebView2_20 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_20 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_20";
}
pub trait ICoreWebView2_20_Impl: windows_core::IUnknownImpl {
    fn FrameId(&self) -> windows_core::Result<u32>;
}
impl ICoreWebView2_20_Vtbl {
    pub const fn new<Identity: ICoreWebView2_20_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FrameId<Identity: ICoreWebView2_20_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_20_Impl::FrameId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_20, OFFSET>(),
            FrameId: FrameId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_20 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_20_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FrameId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_21,
    ICoreWebView2_21_Vtbl,
    0xf7fc7705_7922_5abc_9e24_c64f1c14b185
);
impl windows_core::RuntimeType for ICoreWebView2_21 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_21 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_21";
}
pub trait ICoreWebView2_21_Impl: windows_core::IUnknownImpl {
    fn ExecuteScriptWithResultAsync(
        &self,
        javaScript: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<CoreWebView2ExecuteScriptResult>>;
}
impl ICoreWebView2_21_Vtbl {
    pub const fn new<Identity: ICoreWebView2_21_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ExecuteScriptWithResultAsync<
            Identity: ICoreWebView2_21_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            javascript: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_21_Impl::ExecuteScriptWithResultAsync(
                    this,
                    core::mem::transmute(&javascript),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_21, OFFSET>(),
            ExecuteScriptWithResultAsync: ExecuteScriptWithResultAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_21 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_21_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExecuteScriptWithResultAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_22,
    ICoreWebView2_22_Vtbl,
    0xd58aa4cf_9b67_5419_8565_f401a98feeb2
);
impl windows_core::RuntimeType for ICoreWebView2_22 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_22 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_22";
}
pub trait ICoreWebView2_22_Impl: windows_core::IUnknownImpl {}
impl ICoreWebView2_22_Vtbl {
    pub const fn new<Identity: ICoreWebView2_22_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_22, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_22 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_22_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICoreWebView2_3,
    ICoreWebView2_3_Vtbl,
    0xa8c76ae7_6170_5dfe_8f00_79cd76a9b4d9
);
impl windows_core::RuntimeType for ICoreWebView2_3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_3 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_3";
}
pub trait ICoreWebView2_3_Impl: windows_core::IUnknownImpl {
    fn IsSuspended(&self) -> windows_core::Result<bool>;
    fn TrySuspendAsync(&self) -> windows_core::Result<windows_future::IAsyncOperation<bool>>;
    fn Resume(&self) -> windows_core::Result<()>;
    fn SetVirtualHostNameToFolderMapping(
        &self,
        hostName: &windows_core::HSTRING,
        folderPath: &windows_core::HSTRING,
        accessKind: CoreWebView2HostResourceAccessKind,
    ) -> windows_core::Result<()>;
    fn ClearVirtualHostNameToFolderMapping(
        &self,
        hostName: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_3_Vtbl {
    pub const fn new<Identity: ICoreWebView2_3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsSuspended<
            Identity: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_3_Impl::IsSuspended(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TrySuspendAsync<
            Identity: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_3_Impl::TrySuspendAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Resume<Identity: ICoreWebView2_3_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_3_Impl::Resume(this).into()
            }
        }
        unsafe extern "system" fn SetVirtualHostNameToFolderMapping<
            Identity: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            hostname: *mut core::ffi::c_void,
            folderpath: *mut core::ffi::c_void,
            accesskind: CoreWebView2HostResourceAccessKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_3_Impl::SetVirtualHostNameToFolderMapping(
                    this,
                    core::mem::transmute(&hostname),
                    core::mem::transmute(&folderpath),
                    accesskind,
                )
                .into()
            }
        }
        unsafe extern "system" fn ClearVirtualHostNameToFolderMapping<
            Identity: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            hostname: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_3_Impl::ClearVirtualHostNameToFolderMapping(
                    this,
                    core::mem::transmute(&hostname),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_3, OFFSET>(),
            IsSuspended: IsSuspended::<Identity, OFFSET>,
            TrySuspendAsync: TrySuspendAsync::<Identity, OFFSET>,
            Resume: Resume::<Identity, OFFSET>,
            SetVirtualHostNameToFolderMapping: SetVirtualHostNameToFolderMapping::<Identity, OFFSET>,
            ClearVirtualHostNameToFolderMapping: ClearVirtualHostNameToFolderMapping::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSuspended:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub TrySuspendAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub SetVirtualHostNameToFolderMapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2HostResourceAccessKind,
    ) -> windows_core::HRESULT,
    pub ClearVirtualHostNameToFolderMapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_4,
    ICoreWebView2_4_Vtbl,
    0x4ac595ce_1502_5775_b2c8_22c11a369c25
);
impl windows_core::RuntimeType for ICoreWebView2_4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_4 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_4";
}
pub trait ICoreWebView2_4_Impl: windows_core::IUnknownImpl {
    fn FrameCreated(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, CoreWebView2FrameCreatedEventArgs>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveFrameCreated(&self, token: i64) -> windows_core::Result<()>;
    fn DownloadStarting(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2DownloadStartingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveDownloadStarting(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_4_Vtbl {
    pub const fn new<Identity: ICoreWebView2_4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FrameCreated<
            Identity: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_4_Impl::FrameCreated(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveFrameCreated<
            Identity: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_4_Impl::RemoveFrameCreated(this, token).into()
            }
        }
        unsafe extern "system" fn DownloadStarting<
            Identity: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_4_Impl::DownloadStarting(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDownloadStarting<
            Identity: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_4_Impl::RemoveDownloadStarting(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_4, OFFSET>(),
            FrameCreated: FrameCreated::<Identity, OFFSET>,
            RemoveFrameCreated: RemoveFrameCreated::<Identity, OFFSET>,
            DownloadStarting: DownloadStarting::<Identity, OFFSET>,
            RemoveDownloadStarting: RemoveDownloadStarting::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FrameCreated: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveFrameCreated:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DownloadStarting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDownloadStarting:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_5,
    ICoreWebView2_5_Vtbl,
    0xdd6af643_220c_5dc6_b0a8_22c41e472595
);
impl windows_core::RuntimeType for ICoreWebView2_5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_5 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_5";
}
pub trait ICoreWebView2_5_Impl: windows_core::IUnknownImpl {
    fn ClientCertificateRequested(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                CoreWebView2,
                CoreWebView2ClientCertificateRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveClientCertificateRequested(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_5_Vtbl {
    pub const fn new<Identity: ICoreWebView2_5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ClientCertificateRequested<
            Identity: ICoreWebView2_5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_5_Impl::ClientCertificateRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveClientCertificateRequested<
            Identity: ICoreWebView2_5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_5_Impl::RemoveClientCertificateRequested(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_5, OFFSET>(),
            ClientCertificateRequested: ClientCertificateRequested::<Identity, OFFSET>,
            RemoveClientCertificateRequested: RemoveClientCertificateRequested::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ClientCertificateRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveClientCertificateRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_6,
    ICoreWebView2_6_Vtbl,
    0x92b34b96_853d_5bb6_ac52_30297ce805f1
);
impl windows_core::RuntimeType for ICoreWebView2_6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_6 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_6";
}
pub trait ICoreWebView2_6_Impl: windows_core::IUnknownImpl {
    fn OpenTaskManagerWindow(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2_6_Vtbl {
    pub const fn new<Identity: ICoreWebView2_6_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OpenTaskManagerWindow<
            Identity: ICoreWebView2_6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_6_Impl::OpenTaskManagerWindow(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_6, OFFSET>(),
            OpenTaskManagerWindow: OpenTaskManagerWindow::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OpenTaskManagerWindow:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_7,
    ICoreWebView2_7_Vtbl,
    0xf9b7107a_2e09_5596_a033_911ba12315f7
);
impl windows_core::RuntimeType for ICoreWebView2_7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_7 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_7";
}
pub trait ICoreWebView2_7_Impl: windows_core::IUnknownImpl {
    fn PrintToPdfAsync(
        &self,
        ResultFilePath: &windows_core::HSTRING,
        printSettings: windows_core::Ref<CoreWebView2PrintSettings>,
    ) -> windows_core::Result<windows_future::IAsyncOperation<bool>>;
}
impl ICoreWebView2_7_Vtbl {
    pub const fn new<Identity: ICoreWebView2_7_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PrintToPdfAsync<
            Identity: ICoreWebView2_7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            resultfilepath: *mut core::ffi::c_void,
            printsettings: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_7_Impl::PrintToPdfAsync(
                    this,
                    core::mem::transmute(&resultfilepath),
                    core::mem::transmute_copy(&printsettings),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_7, OFFSET>(),
            PrintToPdfAsync: PrintToPdfAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PrintToPdfAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_8,
    ICoreWebView2_8_Vtbl,
    0xaa2503c0_8d1c_5a3d_b898_f55f7595268a
);
impl windows_core::RuntimeType for ICoreWebView2_8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_8 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_8";
}
pub trait ICoreWebView2_8_Impl: windows_core::IUnknownImpl {
    fn IsMuted(&self) -> windows_core::Result<bool>;
    fn SetIsMuted(&self, value: bool) -> windows_core::Result<()>;
    fn IsDocumentPlayingAudio(&self) -> windows_core::Result<bool>;
    fn IsMutedChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveIsMutedChanged(&self, token: i64) -> windows_core::Result<()>;
    fn IsDocumentPlayingAudioChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveIsDocumentPlayingAudioChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl ICoreWebView2_8_Vtbl {
    pub const fn new<Identity: ICoreWebView2_8_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsMuted<Identity: ICoreWebView2_8_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_8_Impl::IsMuted(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsMuted<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_8_Impl::SetIsMuted(this, value).into()
            }
        }
        unsafe extern "system" fn IsDocumentPlayingAudio<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_8_Impl::IsDocumentPlayingAudio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsMutedChanged<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_8_Impl::IsMutedChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveIsMutedChanged<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_8_Impl::RemoveIsMutedChanged(this, token).into()
            }
        }
        unsafe extern "system" fn IsDocumentPlayingAudioChanged<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_8_Impl::IsDocumentPlayingAudioChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveIsDocumentPlayingAudioChanged<
            Identity: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_8_Impl::RemoveIsDocumentPlayingAudioChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_8, OFFSET>(),
            IsMuted: IsMuted::<Identity, OFFSET>,
            SetIsMuted: SetIsMuted::<Identity, OFFSET>,
            IsDocumentPlayingAudio: IsDocumentPlayingAudio::<Identity, OFFSET>,
            IsMutedChanged: IsMutedChanged::<Identity, OFFSET>,
            RemoveIsMutedChanged: RemoveIsMutedChanged::<Identity, OFFSET>,
            IsDocumentPlayingAudioChanged: IsDocumentPlayingAudioChanged::<Identity, OFFSET>,
            RemoveIsDocumentPlayingAudioChanged: RemoveIsDocumentPlayingAudioChanged::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsMuted:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsMuted:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsDocumentPlayingAudio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsMutedChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveIsMutedChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub IsDocumentPlayingAudioChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveIsDocumentPlayingAudioChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_9,
    ICoreWebView2_9_Vtbl,
    0x64b2ec16_0b29_5216_bf86_e575c88f7031
);
impl windows_core::RuntimeType for ICoreWebView2_9 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_9 {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_9";
}
pub trait ICoreWebView2_9_Impl: windows_core::IUnknownImpl {
    fn IsDefaultDownloadDialogOpen(&self) -> windows_core::Result<bool>;
    fn DefaultDownloadDialogCornerAlignment(
        &self,
    ) -> windows_core::Result<CoreWebView2DefaultDownloadDialogCornerAlignment>;
    fn SetDefaultDownloadDialogCornerAlignment(
        &self,
        value: CoreWebView2DefaultDownloadDialogCornerAlignment,
    ) -> windows_core::Result<()>;
    fn DefaultDownloadDialogMargin(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetDefaultDownloadDialogMargin(
        &self,
        value: &windows::Foundation::Point,
    ) -> windows_core::Result<()>;
    fn IsDefaultDownloadDialogOpenChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<CoreWebView2, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveIsDefaultDownloadDialogOpenChanged(&self, token: i64) -> windows_core::Result<()>;
    fn OpenDefaultDownloadDialog(&self) -> windows_core::Result<()>;
    fn CloseDefaultDownloadDialog(&self) -> windows_core::Result<()>;
}
impl ICoreWebView2_9_Vtbl {
    pub const fn new<Identity: ICoreWebView2_9_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsDefaultDownloadDialogOpen<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_9_Impl::IsDefaultDownloadDialogOpen(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DefaultDownloadDialogCornerAlignment<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CoreWebView2DefaultDownloadDialogCornerAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_9_Impl::DefaultDownloadDialogCornerAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultDownloadDialogCornerAlignment<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CoreWebView2DefaultDownloadDialogCornerAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_9_Impl::SetDefaultDownloadDialogCornerAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn DefaultDownloadDialogMargin<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_9_Impl::DefaultDownloadDialogMargin(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultDownloadDialogMargin<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_9_Impl::SetDefaultDownloadDialogMargin(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn IsDefaultDownloadDialogOpenChanged<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICoreWebView2_9_Impl::IsDefaultDownloadDialogOpenChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveIsDefaultDownloadDialogOpenChanged<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_9_Impl::RemoveIsDefaultDownloadDialogOpenChanged(this, token).into()
            }
        }
        unsafe extern "system" fn OpenDefaultDownloadDialog<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_9_Impl::OpenDefaultDownloadDialog(this).into()
            }
        }
        unsafe extern "system" fn CloseDefaultDownloadDialog<
            Identity: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_9_Impl::CloseDefaultDownloadDialog(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_9, OFFSET>(),
            IsDefaultDownloadDialogOpen: IsDefaultDownloadDialogOpen::<Identity, OFFSET>,
            DefaultDownloadDialogCornerAlignment: DefaultDownloadDialogCornerAlignment::<
                Identity,
                OFFSET,
            >,
            SetDefaultDownloadDialogCornerAlignment: SetDefaultDownloadDialogCornerAlignment::<
                Identity,
                OFFSET,
            >,
            DefaultDownloadDialogMargin: DefaultDownloadDialogMargin::<Identity, OFFSET>,
            SetDefaultDownloadDialogMargin: SetDefaultDownloadDialogMargin::<Identity, OFFSET>,
            IsDefaultDownloadDialogOpenChanged: IsDefaultDownloadDialogOpenChanged::<
                Identity,
                OFFSET,
            >,
            RemoveIsDefaultDownloadDialogOpenChanged: RemoveIsDefaultDownloadDialogOpenChanged::<
                Identity,
                OFFSET,
            >,
            OpenDefaultDownloadDialog: OpenDefaultDownloadDialog::<Identity, OFFSET>,
            CloseDefaultDownloadDialog: CloseDefaultDownloadDialog::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_9 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_9_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsDefaultDownloadDialogOpen:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DefaultDownloadDialogCornerAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CoreWebView2DefaultDownloadDialogCornerAlignment,
    )
        -> windows_core::HRESULT,
    pub SetDefaultDownloadDialogCornerAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CoreWebView2DefaultDownloadDialogCornerAlignment,
    )
        -> windows_core::HRESULT,
    pub DefaultDownloadDialogMargin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetDefaultDownloadDialogMargin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub IsDefaultDownloadDialogOpenChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveIsDefaultDownloadDialogOpenChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub OpenDefaultDownloadDialog:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub CloseDefaultDownloadDialog:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICoreWebView2_Manual,
    ICoreWebView2_Manual_Vtbl,
    0x2d988546_9962_516b_be53_859fb0f50179
);
impl windows_core::RuntimeType for ICoreWebView2_Manual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICoreWebView2_Manual {
    const NAME: &'static str = "Microsoft.Web.WebView2.Core.ICoreWebView2_Manual";
}
pub trait ICoreWebView2_Manual_Impl: windows_core::IUnknownImpl {
    fn AddWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        resourceContext: CoreWebView2WebResourceContext,
        requestSourceKinds: CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::Result<()>;
    fn RemoveWebResourceRequestedFilter(
        &self,
        uri: &windows_core::HSTRING,
        resourceContext: CoreWebView2WebResourceContext,
        requestSourceKinds: CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::Result<()>;
}
impl ICoreWebView2_Manual_Vtbl {
    pub const fn new<Identity: ICoreWebView2_Manual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AddWebResourceRequestedFilter<
            Identity: ICoreWebView2_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            resourcecontext: CoreWebView2WebResourceContext,
            requestsourcekinds: CoreWebView2WebResourceRequestSourceKinds,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Manual_Impl::AddWebResourceRequestedFilter(
                    this,
                    core::mem::transmute(&uri),
                    resourcecontext,
                    requestsourcekinds,
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveWebResourceRequestedFilter<
            Identity: ICoreWebView2_Manual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uri: *mut core::ffi::c_void,
            resourcecontext: CoreWebView2WebResourceContext,
            requestsourcekinds: CoreWebView2WebResourceRequestSourceKinds,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICoreWebView2_Manual_Impl::RemoveWebResourceRequestedFilter(
                    this,
                    core::mem::transmute(&uri),
                    resourcecontext,
                    requestsourcekinds,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICoreWebView2_Manual, OFFSET>(
            ),
            AddWebResourceRequestedFilter: AddWebResourceRequestedFilter::<Identity, OFFSET>,
            RemoveWebResourceRequestedFilter: RemoveWebResourceRequestedFilter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICoreWebView2_Manual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_Manual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AddWebResourceRequestedFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2WebResourceContext,
        CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::HRESULT,
    pub RemoveWebResourceRequestedFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CoreWebView2WebResourceContext,
        CoreWebView2WebResourceRequestSourceKinds,
    ) -> windows_core::HRESULT,
}
