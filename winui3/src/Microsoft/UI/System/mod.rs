// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    IThemeSettings,
    IThemeSettings_Vtbl,
    0x2228ee7e_6d15_563c_8f3c_e8783ba13846
);
impl windows_core::RuntimeType for IThemeSettings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IThemeSettings {
    const NAME: &'static str = "Microsoft.UI.System.IThemeSettings";
}
pub trait IThemeSettings_Impl: windows_core::IUnknownImpl {
    fn Changed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<ThemeSettings, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveChanged(&self, token: i64) -> windows_core::Result<()>;
    fn HighContrast(&self) -> windows_core::Result<bool>;
    fn HighContrastScheme(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IThemeSettings_Vtbl {
    pub const fn new<Identity: IThemeSettings_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Changed<Identity: IThemeSettings_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IThemeSettings_Impl::Changed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveChanged<
            Identity: IThemeSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IThemeSettings_Impl::RemoveChanged(this, token).into()
            }
        }
        unsafe extern "system" fn HighContrast<
            Identity: IThemeSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IThemeSettings_Impl::HighContrast(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HighContrastScheme<
            Identity: IThemeSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IThemeSettings_Impl::HighContrastScheme(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IThemeSettings, OFFSET>(),
            Changed: Changed::<Identity, OFFSET>,
            RemoveChanged: RemoveChanged::<Identity, OFFSET>,
            HighContrast: HighContrast::<Identity, OFFSET>,
            HighContrastScheme: HighContrastScheme::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IThemeSettings as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IThemeSettings_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Changed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub HighContrast:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub HighContrastScheme: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IThemeSettingsStatics,
    IThemeSettingsStatics_Vtbl,
    0x1586907d_30db_5f97_8fa1_8940c75dccc0
);
impl windows_core::RuntimeType for IThemeSettingsStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IThemeSettingsStatics {
    const NAME: &'static str = "Microsoft.UI.System.IThemeSettingsStatics";
}
pub trait IThemeSettingsStatics_Impl: windows_core::IUnknownImpl {
    fn CreateForWindowId(&self, windowId: &super::WindowId) -> windows_core::Result<ThemeSettings>;
}
impl IThemeSettingsStatics_Vtbl {
    pub const fn new<Identity: IThemeSettingsStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateForWindowId<
            Identity: IThemeSettingsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowid: super::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IThemeSettingsStatics_Impl::CreateForWindowId(
                    this,
                    core::mem::transmute(&windowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IThemeSettingsStatics, OFFSET>(
            ),
            CreateForWindowId: CreateForWindowId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IThemeSettingsStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IThemeSettingsStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateForWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ThemeSettings(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ThemeSettings,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ThemeSettings {
    pub fn Changed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<ThemeSettings, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Changed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn HighContrast(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HighContrast)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HighContrastScheme(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HighContrastScheme)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn CreateForWindowId(windowid: super::WindowId) -> windows_core::Result<ThemeSettings> {
        Self::IThemeSettingsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForWindowId)(
                windows_core::Interface::as_raw(this),
                windowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IThemeSettingsStatics<R, F: FnOnce(&IThemeSettingsStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ThemeSettings, IThemeSettingsStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ThemeSettings {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IThemeSettings>();
}
unsafe impl windows_core::Interface for ThemeSettings {
    type Vtable = <IThemeSettings as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IThemeSettings as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ThemeSettings {
    const NAME: &'static str = "Microsoft.UI.System.ThemeSettings";
}
unsafe impl Send for ThemeSettings {}
unsafe impl Sync for ThemeSettings {}
