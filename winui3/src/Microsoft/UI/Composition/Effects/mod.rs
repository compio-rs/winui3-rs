// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    ISceneLightingEffect,
    ISceneLightingEffect_Vtbl,
    0xeb1e7316_114c_5950_8480_20a29a3bb1ee
);
impl windows_core::RuntimeType for ISceneLightingEffect {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneLightingEffect {
    const NAME: &'static str = "Microsoft.UI.Composition.Effects.ISceneLightingEffect";
}
pub trait ISceneLightingEffect_Impl: windows_core::IUnknownImpl {
    fn AmbientAmount(&self) -> windows_core::Result<f32>;
    fn SetAmbientAmount(&self, value: f32) -> windows_core::Result<()>;
    fn DiffuseAmount(&self) -> windows_core::Result<f32>;
    fn SetDiffuseAmount(&self, value: f32) -> windows_core::Result<()>;
    fn NormalMapSource(
        &self,
    ) -> windows_core::Result<windows::Graphics::Effects::IGraphicsEffectSource>;
    fn SetNormalMapSource(
        &self,
        value: windows_core::Ref<'_, windows::Graphics::Effects::IGraphicsEffectSource>,
    ) -> windows_core::Result<()>;
    fn SpecularAmount(&self) -> windows_core::Result<f32>;
    fn SetSpecularAmount(&self, value: f32) -> windows_core::Result<()>;
    fn SpecularShine(&self) -> windows_core::Result<f32>;
    fn SetSpecularShine(&self, value: f32) -> windows_core::Result<()>;
}
impl ISceneLightingEffect_Vtbl {
    pub const fn new<Identity: ISceneLightingEffect_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AmbientAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect_Impl::AmbientAmount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAmbientAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect_Impl::SetAmbientAmount(this, value).into()
            }
        }
        unsafe extern "system" fn DiffuseAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect_Impl::DiffuseAmount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDiffuseAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect_Impl::SetDiffuseAmount(this, value).into()
            }
        }
        unsafe extern "system" fn NormalMapSource<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect_Impl::NormalMapSource(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNormalMapSource<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect_Impl::SetNormalMapSource(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SpecularAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect_Impl::SpecularAmount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSpecularAmount<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect_Impl::SetSpecularAmount(this, value).into()
            }
        }
        unsafe extern "system" fn SpecularShine<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect_Impl::SpecularShine(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSpecularShine<
            Identity: ISceneLightingEffect_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect_Impl::SetSpecularShine(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneLightingEffect, OFFSET>(
            ),
            AmbientAmount: AmbientAmount::<Identity, OFFSET>,
            SetAmbientAmount: SetAmbientAmount::<Identity, OFFSET>,
            DiffuseAmount: DiffuseAmount::<Identity, OFFSET>,
            SetDiffuseAmount: SetDiffuseAmount::<Identity, OFFSET>,
            NormalMapSource: NormalMapSource::<Identity, OFFSET>,
            SetNormalMapSource: SetNormalMapSource::<Identity, OFFSET>,
            SpecularAmount: SpecularAmount::<Identity, OFFSET>,
            SetSpecularAmount: SetSpecularAmount::<Identity, OFFSET>,
            SpecularShine: SpecularShine::<Identity, OFFSET>,
            SetSpecularShine: SetSpecularShine::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneLightingEffect as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneLightingEffect_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AmbientAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetAmbientAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub DiffuseAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetDiffuseAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub NormalMapSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNormalMapSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SpecularAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetSpecularAmount:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub SpecularShine:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetSpecularShine:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneLightingEffect2,
    ISceneLightingEffect2_Vtbl,
    0x6b6496b2_468d_50d1_bbe9_593b8263ad80
);
impl windows_core::RuntimeType for ISceneLightingEffect2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneLightingEffect2 {
    const NAME: &'static str = "Microsoft.UI.Composition.Effects.ISceneLightingEffect2";
}
pub trait ISceneLightingEffect2_Impl: windows_core::IUnknownImpl {
    fn ReflectanceModel(&self) -> windows_core::Result<SceneLightingEffectReflectanceModel>;
    fn SetReflectanceModel(
        &self,
        value: SceneLightingEffectReflectanceModel,
    ) -> windows_core::Result<()>;
}
impl ISceneLightingEffect2_Vtbl {
    pub const fn new<Identity: ISceneLightingEffect2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ReflectanceModel<
            Identity: ISceneLightingEffect2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SceneLightingEffectReflectanceModel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneLightingEffect2_Impl::ReflectanceModel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetReflectanceModel<
            Identity: ISceneLightingEffect2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SceneLightingEffectReflectanceModel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneLightingEffect2_Impl::SetReflectanceModel(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneLightingEffect2, OFFSET>(
            ),
            ReflectanceModel: ReflectanceModel::<Identity, OFFSET>,
            SetReflectanceModel: SetReflectanceModel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneLightingEffect2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneLightingEffect2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ReflectanceModel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SceneLightingEffectReflectanceModel,
    ) -> windows_core::HRESULT,
    pub SetReflectanceModel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SceneLightingEffectReflectanceModel,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneLightingEffect(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneLightingEffect,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneLightingEffect,
    windows::Graphics::Effects::IGraphicsEffect,
    windows::Graphics::Effects::IGraphicsEffectSource
);
impl SceneLightingEffect {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SceneLightingEffect,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this =
            &windows_core::Interface::cast::<windows::Graphics::Effects::IGraphicsEffect>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, name: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this =
            &windows_core::Interface::cast::<windows::Graphics::Effects::IGraphicsEffect>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
            )
            .ok()
        }
    }
    pub fn AmbientAmount(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AmbientAmount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAmbientAmount(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAmbientAmount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DiffuseAmount(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DiffuseAmount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDiffuseAmount(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDiffuseAmount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NormalMapSource(
        &self,
    ) -> windows_core::Result<windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NormalMapSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNormalMapSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Graphics::Effects::IGraphicsEffectSource>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNormalMapSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SpecularAmount(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpecularAmount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpecularAmount(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpecularAmount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpecularShine(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpecularShine)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpecularShine(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpecularShine)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ReflectanceModel(&self) -> windows_core::Result<SceneLightingEffectReflectanceModel> {
        let this = &windows_core::Interface::cast::<ISceneLightingEffect2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReflectanceModel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetReflectanceModel(
        &self,
        value: SceneLightingEffectReflectanceModel,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ISceneLightingEffect2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReflectanceModel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneLightingEffect {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneLightingEffect>();
}
unsafe impl windows_core::Interface for SceneLightingEffect {
    type Vtable = <ISceneLightingEffect as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneLightingEffect as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneLightingEffect {
    const NAME: &'static str = "Microsoft.UI.Composition.Effects.SceneLightingEffect";
}
unsafe impl Send for SceneLightingEffect {}
unsafe impl Sync for SceneLightingEffect {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SceneLightingEffectReflectanceModel(pub i32);
impl SceneLightingEffectReflectanceModel {
    pub const BlinnPhong: Self = Self(0i32);
    pub const PhysicallyBasedBlinnPhong: Self = Self(1i32);
}
impl windows_core::TypeKind for SceneLightingEffectReflectanceModel {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SceneLightingEffectReflectanceModel {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Effects.SceneLightingEffectReflectanceModel;i4)",
    );
}
