// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[cfg(feature = "UI_Composition_Core")]
pub mod Core;
#[cfg(feature = "UI_Composition_Diagnostics")]
pub mod Diagnostics;
#[cfg(feature = "UI_Composition_Effects")]
pub mod Effects;
#[cfg(feature = "UI_Composition_Interactions")]
pub mod Interactions;
#[cfg(feature = "UI_Composition_Scenes")]
pub mod Scenes;
#[cfg(feature = "UI_Composition_SystemBackdrops")]
pub mod SystemBackdrops;
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AmbientLight(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AmbientLight,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    AmbientLight,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionLight,
    CompositionObject
);
impl AmbientLight {
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IAmbientLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Intensity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IAmbientLight2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIntensity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Targets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusionsFromTargets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AmbientLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAmbientLight>();
}
unsafe impl windows_core::Interface for AmbientLight {
    type Vtable = <IAmbientLight as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAmbientLight as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AmbientLight {
    const NAME: &'static str = "Microsoft.UI.Composition.AmbientLight";
}
unsafe impl Send for AmbientLight {}
unsafe impl Sync for AmbientLight {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimationController(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimationController,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    AnimationController,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl AnimationController {
    pub fn PlaybackRate(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPlaybackRate(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlaybackRate)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Progress(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Progress)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProgress(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetProgress)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProgressBehavior(&self) -> windows_core::Result<AnimationControllerProgressBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProgressBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProgressBehavior(
        &self,
        value: AnimationControllerProgressBehavior,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetProgressBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Pause(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Pause)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Resume(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resume)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn MaxPlaybackRate() -> windows_core::Result<f32> {
        Self::IAnimationControllerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxPlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn MinPlaybackRate() -> windows_core::Result<f32> {
        Self::IAnimationControllerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinPlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    fn IAnimationControllerStatics<
        R,
        F: FnOnce(&IAnimationControllerStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimationController,
            IAnimationControllerStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for AnimationController {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAnimationController>();
}
unsafe impl windows_core::Interface for AnimationController {
    type Vtable = <IAnimationController as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAnimationController as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimationController {
    const NAME: &'static str = "Microsoft.UI.Composition.AnimationController";
}
unsafe impl Send for AnimationController {}
unsafe impl Sync for AnimationController {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationControllerProgressBehavior(pub i32);
impl AnimationControllerProgressBehavior {
    pub const Default: Self = Self(0i32);
    pub const IncludesDelayTime: Self = Self(1i32);
}
impl windows_core::TypeKind for AnimationControllerProgressBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationControllerProgressBehavior {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationControllerProgressBehavior;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationDelayBehavior(pub i32);
impl AnimationDelayBehavior {
    pub const SetInitialValueAfterDelay: Self = Self(0i32);
    pub const SetInitialValueBeforeDelay: Self = Self(1i32);
}
impl windows_core::TypeKind for AnimationDelayBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationDelayBehavior {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationDelayBehavior;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationDirection(pub i32);
impl AnimationDirection {
    pub const Normal: Self = Self(0i32);
    pub const Reverse: Self = Self(1i32);
    pub const Alternate: Self = Self(2i32);
    pub const AlternateReverse: Self = Self(3i32);
}
impl windows_core::TypeKind for AnimationDirection {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationDirection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationIterationBehavior(pub i32);
impl AnimationIterationBehavior {
    pub const Count: Self = Self(0i32);
    pub const Forever: Self = Self(1i32);
}
impl windows_core::TypeKind for AnimationIterationBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationIterationBehavior {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationIterationBehavior;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationPropertyAccessMode(pub i32);
impl AnimationPropertyAccessMode {
    pub const None: Self = Self(0i32);
    pub const ReadOnly: Self = Self(1i32);
    pub const WriteOnly: Self = Self(2i32);
    pub const ReadWrite: Self = Self(3i32);
}
impl windows_core::TypeKind for AnimationPropertyAccessMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationPropertyAccessMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationPropertyAccessMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimationPropertyInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimationPropertyInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    AnimationPropertyInfo,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl AnimationPropertyInfo {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessMode(&self) -> windows_core::Result<AnimationPropertyAccessMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAccessMode(&self, value: AnimationPropertyAccessMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetResolvedCompositionObject(&self) -> windows_core::Result<CompositionObject> {
        let this = &windows_core::Interface::cast::<IAnimationPropertyInfo2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetResolvedCompositionObject)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetResolvedCompositionObjectProperty(
        &self,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<IAnimationPropertyInfo2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetResolvedCompositionObjectProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimationPropertyInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAnimationPropertyInfo>();
}
unsafe impl windows_core::Interface for AnimationPropertyInfo {
    type Vtable = <IAnimationPropertyInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAnimationPropertyInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimationPropertyInfo {
    const NAME: &'static str = "Microsoft.UI.Composition.AnimationPropertyInfo";
}
unsafe impl Send for AnimationPropertyInfo {}
unsafe impl Sync for AnimationPropertyInfo {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnimationStopBehavior(pub i32);
impl AnimationStopBehavior {
    pub const LeaveCurrentValue: Self = Self(0i32);
    pub const SetToInitialValue: Self = Self(1i32);
    pub const SetToFinalValue: Self = Self(2i32);
}
impl windows_core::TypeKind for AnimationStopBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnimationStopBehavior {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationStopBehavior;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BackEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BackEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BackEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl BackEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Amplitude(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Amplitude)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BackEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBackEasingFunction>();
}
unsafe impl windows_core::Interface for BackEasingFunction {
    type Vtable = <IBackEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBackEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BackEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.BackEasingFunction";
}
unsafe impl Send for BackEasingFunction {}
unsafe impl Sync for BackEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BooleanKeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BooleanKeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BooleanKeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl BooleanKeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BooleanKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBooleanKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for BooleanKeyFrameAnimation {
    type Vtable = <IBooleanKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBooleanKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BooleanKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BooleanKeyFrameAnimation";
}
unsafe impl Send for BooleanKeyFrameAnimation {}
unsafe impl Sync for BooleanKeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BounceEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BounceEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BounceEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl BounceEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Bounces(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounces)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Bounciness(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounciness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BounceEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBounceEasingFunction>();
}
unsafe impl windows_core::Interface for BounceEasingFunction {
    type Vtable = <IBounceEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBounceEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BounceEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceEasingFunction";
}
unsafe impl Send for BounceEasingFunction {}
unsafe impl Sync for BounceEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BounceScalarNaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BounceScalarNaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BounceScalarNaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    ScalarNaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl BounceScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Acceleration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAcceleration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Restitution)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRestitution)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BounceScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBounceScalarNaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for BounceScalarNaturalMotionAnimation {
    type Vtable = <IBounceScalarNaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IBounceScalarNaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BounceScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation";
}
unsafe impl Send for BounceScalarNaturalMotionAnimation {}
unsafe impl Sync for BounceScalarNaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BounceVector2NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BounceVector2NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BounceVector2NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    Vector2NaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl BounceVector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Acceleration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAcceleration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Restitution)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRestitution)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BounceVector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBounceVector2NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for BounceVector2NaturalMotionAnimation {
    type Vtable = <IBounceVector2NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IBounceVector2NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BounceVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation";
}
unsafe impl Send for BounceVector2NaturalMotionAnimation {}
unsafe impl Sync for BounceVector2NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BounceVector3NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BounceVector3NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BounceVector3NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    Vector3NaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl BounceVector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Acceleration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAcceleration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Restitution)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRestitution)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BounceVector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBounceVector3NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for BounceVector3NaturalMotionAnimation {
    type Vtable = <IBounceVector3NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IBounceVector3NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BounceVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation";
}
unsafe impl Send for BounceVector3NaturalMotionAnimation {}
unsafe impl Sync for BounceVector3NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CircleEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CircleEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CircleEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl CircleEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CircleEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICircleEasingFunction>();
}
unsafe impl windows_core::Interface for CircleEasingFunction {
    type Vtable = <ICircleEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICircleEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CircleEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CircleEasingFunction";
}
unsafe impl Send for CircleEasingFunction {}
unsafe impl Sync for CircleEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ColorKeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ColorKeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ColorKeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl ColorKeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn InterpolationColorSpace(&self) -> windows_core::Result<CompositionColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InterpolationColorSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInterpolationColorSpace(
        &self,
        value: CompositionColorSpace,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInterpolationColorSpace)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: windows::UI::Color,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ColorKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IColorKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for ColorKeyFrameAnimation {
    type Vtable = <IColorKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IColorKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ColorKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ColorKeyFrameAnimation";
}
unsafe impl Send for ColorKeyFrameAnimation {}
unsafe impl Sync for ColorKeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    CompositionObject
);
impl CompositionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionAnimation>();
}
unsafe impl windows_core::Interface for CompositionAnimation {
    type Vtable = <ICompositionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionAnimation";
}
unsafe impl Send for CompositionAnimation {}
unsafe impl Sync for CompositionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionAnimationGroup(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionAnimationGroup,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionAnimationGroup,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    windows_collections::IIterable<CompositionAnimation>,
    CompositionObject
);
impl CompositionAnimationGroup {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Add<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Add)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<CompositionAnimation>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<CompositionAnimation>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CompositionAnimationGroup {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionAnimationGroup>();
}
unsafe impl windows_core::Interface for CompositionAnimationGroup {
    type Vtable = <ICompositionAnimationGroup as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionAnimationGroup as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionAnimationGroup {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionAnimationGroup";
}
unsafe impl Send for CompositionAnimationGroup {}
unsafe impl Sync for CompositionAnimationGroup {}
impl IntoIterator for CompositionAnimationGroup {
    type Item = CompositionAnimation;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionAnimationGroup {
    type Item = CompositionAnimation;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
pub struct CompositionApiInformation;
impl CompositionApiInformation {
    pub fn ApiVersion() -> windows_core::Result<u64> {
        Self::ICompositionApiInformationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApiVersion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn ICompositionApiInformationStatics<
        R,
        F: FnOnce(&ICompositionApiInformationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionApiInformation,
            ICompositionApiInformationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeName for CompositionApiInformation {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionApiInformation";
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionBackdropBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionBackdropBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionBackdropBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionBackdropBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionBackdropBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionBackdropBrush>();
}
unsafe impl windows_core::Interface for CompositionBackdropBrush {
    type Vtable = <ICompositionBackdropBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionBackdropBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionBackdropBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBackdropBrush";
}
unsafe impl Send for CompositionBackdropBrush {}
unsafe impl Sync for CompositionBackdropBrush {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionBackfaceVisibility(pub i32);
impl CompositionBackfaceVisibility {
    pub const Inherit: Self = Self(0i32);
    pub const Visible: Self = Self(1i32);
    pub const Hidden: Self = Self(2i32);
}
impl windows_core::TypeKind for CompositionBackfaceVisibility {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionBackfaceVisibility {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBackfaceVisibility;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionBatchCompletedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionBatchCompletedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionBatchCompletedEventArgs,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionBatchCompletedEventArgs {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionBatchCompletedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionBatchCompletedEventArgs>();
}
unsafe impl windows_core::Interface for CompositionBatchCompletedEventArgs {
    type Vtable = <ICompositionBatchCompletedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionBatchCompletedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionBatchCompletedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBatchCompletedEventArgs";
}
unsafe impl Send for CompositionBatchCompletedEventArgs {}
unsafe impl Sync for CompositionBatchCompletedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionBatchTypes(pub u32);
impl CompositionBatchTypes {
    pub const None: Self = Self(0u32);
    pub const Animation: Self = Self(1u32);
    pub const Effect: Self = Self(2u32);
    pub const InfiniteAnimation: Self = Self(4u32);
    pub const AllAnimations: Self = Self(5u32);
}
impl windows_core::TypeKind for CompositionBatchTypes {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionBatchTypes {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBatchTypes;u4)",
    );
}
impl CompositionBatchTypes {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for CompositionBatchTypes {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for CompositionBatchTypes {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for CompositionBatchTypes {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for CompositionBatchTypes {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for CompositionBatchTypes {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionBitmapInterpolationMode(pub i32);
impl CompositionBitmapInterpolationMode {
    pub const NearestNeighbor: Self = Self(0i32);
    pub const Linear: Self = Self(1i32);
    pub const MagLinearMinLinearMipLinear: Self = Self(2i32);
    pub const MagLinearMinLinearMipNearest: Self = Self(3i32);
    pub const MagLinearMinNearestMipLinear: Self = Self(4i32);
    pub const MagLinearMinNearestMipNearest: Self = Self(5i32);
    pub const MagNearestMinLinearMipLinear: Self = Self(6i32);
    pub const MagNearestMinLinearMipNearest: Self = Self(7i32);
    pub const MagNearestMinNearestMipLinear: Self = Self(8i32);
    pub const MagNearestMinNearestMipNearest: Self = Self(9i32);
}
impl windows_core::TypeKind for CompositionBitmapInterpolationMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionBitmapInterpolationMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBitmapInterpolationMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionBorderMode(pub i32);
impl CompositionBorderMode {
    pub const Inherit: Self = Self(0i32);
    pub const Soft: Self = Self(1i32);
    pub const Hard: Self = Self(2i32);
}
impl windows_core::TypeKind for CompositionBorderMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionBorderMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBorderMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionBrush>();
}
unsafe impl windows_core::Interface for CompositionBrush {
    type Vtable = <ICompositionBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBrush";
}
unsafe impl Send for CompositionBrush {}
unsafe impl Sync for CompositionBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionCapabilities(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionCapabilities,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CompositionCapabilities {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionCapabilities,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn AreEffectsSupported(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreEffectsSupported)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AreEffectsFast(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreEffectsFast)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Changed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CompositionCapabilities,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Changed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionCapabilities {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionCapabilities>();
}
unsafe impl windows_core::Interface for CompositionCapabilities {
    type Vtable = <ICompositionCapabilities as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionCapabilities as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionCapabilities {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionCapabilities";
}
unsafe impl Send for CompositionCapabilities {}
unsafe impl Sync for CompositionCapabilities {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionClip(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionClip,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionClip,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionClip {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionClip>();
}
unsafe impl windows_core::Interface for CompositionClip {
    type Vtable = <ICompositionClip as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionClip as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionClip {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionClip";
}
unsafe impl Send for CompositionClip {}
unsafe impl Sync for CompositionClip {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionColorBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionColorBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionColorBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionColorBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionColorBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionColorBrush>();
}
unsafe impl windows_core::Interface for CompositionColorBrush {
    type Vtable = <ICompositionColorBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionColorBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionColorBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorBrush";
}
unsafe impl Send for CompositionColorBrush {}
unsafe impl Sync for CompositionColorBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionColorGradientStop(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionColorGradientStop,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionColorGradientStop,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionColorGradientStop {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionColorGradientStop {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionColorGradientStop>();
}
unsafe impl windows_core::Interface for CompositionColorGradientStop {
    type Vtable = <ICompositionColorGradientStop as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionColorGradientStop as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionColorGradientStop {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorGradientStop";
}
unsafe impl Send for CompositionColorGradientStop {}
unsafe impl Sync for CompositionColorGradientStop {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionColorGradientStopCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionColorGradientStopCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionColorGradientStopCollection,
    windows_collections::IIterable<CompositionColorGradientStop>,
    windows_collections::IVector<CompositionColorGradientStop>
);
impl CompositionColorGradientStopCollection {
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<CompositionColorGradientStop>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<CompositionColorGradientStop> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CompositionColorGradientStop>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<CompositionColorGradientStop>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionColorGradientStop>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionColorGradientStop>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionColorGradientStop>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<CompositionColorGradientStop>],
    ) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[Option<CompositionColorGradientStop>],
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionColorGradientStopCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionColorGradientStopCollection>(
        );
}
unsafe impl windows_core::Interface for CompositionColorGradientStopCollection {
    type Vtable = <ICompositionColorGradientStopCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionColorGradientStopCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionColorGradientStopCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorGradientStopCollection";
}
unsafe impl Send for CompositionColorGradientStopCollection {}
unsafe impl Sync for CompositionColorGradientStopCollection {}
impl IntoIterator for CompositionColorGradientStopCollection {
    type Item = CompositionColorGradientStop;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionColorGradientStopCollection {
    type Item = CompositionColorGradientStop;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionColorSpace(pub i32);
impl CompositionColorSpace {
    pub const Auto: Self = Self(0i32);
    pub const Hsl: Self = Self(1i32);
    pub const Rgb: Self = Self(2i32);
    pub const HslLinear: Self = Self(3i32);
    pub const RgbLinear: Self = Self(4i32);
}
impl windows_core::TypeKind for CompositionColorSpace {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionColorSpace {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionColorSpace;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionCommitBatch(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionCommitBatch,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionCommitBatch,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionCommitBatch {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsActive(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsActive)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsEnded(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                windows_core::IInspectable,
                CompositionBatchCompletedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionCommitBatch {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionCommitBatch>();
}
unsafe impl windows_core::Interface for CompositionCommitBatch {
    type Vtable = <ICompositionCommitBatch as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionCommitBatch as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionCommitBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionCommitBatch";
}
unsafe impl Send for CompositionCommitBatch {}
unsafe impl Sync for CompositionCommitBatch {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionCompositeMode(pub i32);
impl CompositionCompositeMode {
    pub const Inherit: Self = Self(0i32);
    pub const SourceOver: Self = Self(1i32);
    pub const DestinationInvert: Self = Self(2i32);
    pub const MinBlend: Self = Self(3i32);
}
impl windows_core::TypeKind for CompositionCompositeMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionCompositeMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionCompositeMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionContainerShape(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionContainerShape,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionContainerShape,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionShape,
    CompositionObject
);
impl CompositionContainerShape {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Shapes(&self) -> windows_core::Result<CompositionShapeCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shapes)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionContainerShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionContainerShape>();
}
unsafe impl windows_core::Interface for CompositionContainerShape {
    type Vtable = <ICompositionContainerShape as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionContainerShape as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionContainerShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionContainerShape";
}
unsafe impl Send for CompositionContainerShape {}
unsafe impl Sync for CompositionContainerShape {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionDrawingSurface(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionDrawingSurface,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionDrawingSurface,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionSurface,
    CompositionObject
);
impl CompositionDrawingSurface {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PixelFormat)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SizeInt32(&self) -> windows_core::Result<windows::Graphics::SizeInt32> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeInt32)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Resize(&self, sizepixels: windows::Graphics::SizeInt32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                sizepixels,
            )
            .ok()
        }
    }
    pub fn Scroll(&self, offset: windows::Graphics::PointInt32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Scroll)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ScrollRect(
        &self,
        offset: windows::Graphics::PointInt32,
        scrollrect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollRect)(
                windows_core::Interface::as_raw(this),
                offset,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn ScrollWithClip(
        &self,
        offset: windows::Graphics::PointInt32,
        cliprect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollWithClip)(
                windows_core::Interface::as_raw(this),
                offset,
                cliprect,
            )
            .ok()
        }
    }
    pub fn ScrollRectWithClip(
        &self,
        offset: windows::Graphics::PointInt32,
        cliprect: windows::Graphics::RectInt32,
        scrollrect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollRectWithClip)(
                windows_core::Interface::as_raw(this),
                offset,
                cliprect,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionDrawingSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionDrawingSurface>();
}
unsafe impl windows_core::Interface for CompositionDrawingSurface {
    type Vtable = <ICompositionDrawingSurface as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionDrawingSurface as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionDrawingSurface";
}
unsafe impl Send for CompositionDrawingSurface {}
unsafe impl Sync for CompositionDrawingSurface {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionDropShadowSourcePolicy(pub i32);
impl CompositionDropShadowSourcePolicy {
    pub const Default: Self = Self(0i32);
    pub const InheritFromVisualContent: Self = Self(1i32);
}
impl windows_core::TypeKind for CompositionDropShadowSourcePolicy {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionDropShadowSourcePolicy {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionDropShadowSourcePolicy;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CreateCubicBezierEasingFunction<P0>(
        owner: P0,
        controlpoint1: windows_numerics::Vector2,
        controlpoint2: windows_numerics::Vector2,
    ) -> windows_core::Result<CubicBezierEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCubicBezierEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                controlpoint1,
                controlpoint2,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateLinearEasingFunction<P0>(owner: P0) -> windows_core::Result<LinearEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateLinearEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateStepEasingFunction<P0>(owner: P0) -> windows_core::Result<StepEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateStepEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateStepEasingFunctionWithStepCount<P0>(
        owner: P0,
        stepcount: i32,
    ) -> windows_core::Result<StepEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateStepEasingFunctionWithStepCount)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                stepcount,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateBackEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
        amplitude: f32,
    ) -> windows_core::Result<BackEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBackEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                amplitude,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateBounceEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
        bounces: i32,
        bounciness: f32,
    ) -> windows_core::Result<BounceEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBounceEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                bounces,
                bounciness,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateCircleEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
    ) -> windows_core::Result<CircleEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCircleEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateElasticEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
        oscillations: i32,
        springiness: f32,
    ) -> windows_core::Result<ElasticEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateElasticEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                oscillations,
                springiness,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateExponentialEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
        exponent: f32,
    ) -> windows_core::Result<ExponentialEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateExponentialEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                exponent,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreatePowerEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
        power: f32,
    ) -> windows_core::Result<PowerEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePowerEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                power,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateSineEasingFunction<P0>(
        owner: P0,
        mode: CompositionEasingFunctionMode,
    ) -> windows_core::Result<SineEasingFunction>
    where
        P0: windows_core::Param<Compositor>,
    {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSineEasingFunction)(
                windows_core::Interface::as_raw(this),
                owner.param().abi(),
                mode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    fn ICompositionEasingFunctionStatics<
        R,
        F: FnOnce(&ICompositionEasingFunctionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionEasingFunction,
            ICompositionEasingFunctionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionEasingFunction>();
}
unsafe impl windows_core::Interface for CompositionEasingFunction {
    type Vtable = <ICompositionEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEasingFunction";
}
unsafe impl Send for CompositionEasingFunction {}
unsafe impl Sync for CompositionEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionEasingFunctionMode(pub i32);
impl CompositionEasingFunctionMode {
    pub const In: Self = Self(0i32);
    pub const Out: Self = Self(1i32);
    pub const InOut: Self = Self(2i32);
}
impl windows_core::TypeKind for CompositionEasingFunctionMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionEasingFunctionMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionEasingFunctionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionEffectBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionEffectBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionEffectBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionEffectBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetSourceParameter(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetSourceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSourceParameter<P1>(
        &self,
        name: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSourceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionEffectBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionEffectBrush>();
}
unsafe impl windows_core::Interface for CompositionEffectBrush {
    type Vtable = <ICompositionEffectBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionEffectBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionEffectBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectBrush";
}
unsafe impl Send for CompositionEffectBrush {}
unsafe impl Sync for CompositionEffectBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionEffectFactory(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionEffectFactory,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionEffectFactory,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionEffectFactory {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CreateBrush(&self) -> windows_core::Result<CompositionEffectBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExtendedError(&self) -> windows_core::Result<windows_core::HRESULT> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendedError)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LoadStatus(&self) -> windows_core::Result<CompositionEffectFactoryLoadStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LoadStatus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionEffectFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionEffectFactory>();
}
unsafe impl windows_core::Interface for CompositionEffectFactory {
    type Vtable = <ICompositionEffectFactory as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionEffectFactory as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionEffectFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectFactory";
}
unsafe impl Send for CompositionEffectFactory {}
unsafe impl Sync for CompositionEffectFactory {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionEffectFactoryLoadStatus(pub i32);
impl CompositionEffectFactoryLoadStatus {
    pub const Success: Self = Self(0i32);
    pub const EffectTooComplex: Self = Self(1i32);
    pub const Pending: Self = Self(2i32);
    pub const Other: Self = Self(-1i32);
}
impl windows_core::TypeKind for CompositionEffectFactoryLoadStatus {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionEffectFactoryLoadStatus {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionEffectFactoryLoadStatus;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionEffectSourceParameter(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionEffectSourceParameter,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionEffectSourceParameter,
    windows::Graphics::Effects::IGraphicsEffectSource
);
impl CompositionEffectSourceParameter {
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Create(
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CompositionEffectSourceParameter> {
        Self::ICompositionEffectSourceParameterFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ICompositionEffectSourceParameterFactory<
        R,
        F: FnOnce(&ICompositionEffectSourceParameterFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionEffectSourceParameter,
            ICompositionEffectSourceParameterFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionEffectSourceParameter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionEffectSourceParameter>();
}
unsafe impl windows_core::Interface for CompositionEffectSourceParameter {
    type Vtable = <ICompositionEffectSourceParameter as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionEffectSourceParameter as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionEffectSourceParameter {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectSourceParameter";
}
unsafe impl Send for CompositionEffectSourceParameter {}
unsafe impl Sync for CompositionEffectSourceParameter {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionEllipseGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionEllipseGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionEllipseGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGeometry,
    CompositionObject
);
impl CompositionEllipseGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Center(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Center)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenter(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenter)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Radius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Radius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRadius(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionEllipseGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionEllipseGeometry>();
}
unsafe impl windows_core::Interface for CompositionEllipseGeometry {
    type Vtable = <ICompositionEllipseGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionEllipseGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionEllipseGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEllipseGeometry";
}
unsafe impl Send for CompositionEllipseGeometry {}
unsafe impl Sync for CompositionEllipseGeometry {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionGeometricClip(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionGeometricClip,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionGeometricClip,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionClip,
    CompositionObject
);
impl CompositionGeometricClip {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Geometry(&self) -> windows_core::Result<CompositionGeometry> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Geometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetGeometry<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionGeometry>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetGeometry)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ViewBox(&self) -> windows_core::Result<CompositionViewBox> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ViewBox)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetViewBox<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionViewBox>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetViewBox)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionGeometricClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionGeometricClip>();
}
unsafe impl windows_core::Interface for CompositionGeometricClip {
    type Vtable = <ICompositionGeometricClip as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionGeometricClip as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionGeometricClip {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGeometricClip";
}
unsafe impl Send for CompositionGeometricClip {}
unsafe impl Sync for CompositionGeometricClip {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionGeometry>();
}
unsafe impl windows_core::Interface for CompositionGeometry {
    type Vtable = <ICompositionGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGeometry";
}
unsafe impl Send for CompositionGeometry {}
unsafe impl Sync for CompositionGeometry {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionGetValueStatus(pub i32);
impl CompositionGetValueStatus {
    pub const Succeeded: Self = Self(0i32);
    pub const TypeMismatch: Self = Self(1i32);
    pub const NotFound: Self = Self(2i32);
}
impl windows_core::TypeKind for CompositionGetValueStatus {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionGetValueStatus {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionGetValueStatus;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionGradientBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionGradientBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionGradientBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionGradientBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> windows_core::Result<CompositionColorGradientStopCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorStops)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExtendMode(&self) -> windows_core::Result<CompositionGradientExtendMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExtendMode(&self, value: CompositionGradientExtendMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExtendMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> windows_core::Result<CompositionColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InterpolationSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInterpolationSpace(&self, value: CompositionColorSpace) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInterpolationSpace)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> windows_core::Result<CompositionMappingMode> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MappingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMappingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionGradientBrush>();
}
unsafe impl windows_core::Interface for CompositionGradientBrush {
    type Vtable = <ICompositionGradientBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionGradientBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGradientBrush";
}
unsafe impl Send for CompositionGradientBrush {}
unsafe impl Sync for CompositionGradientBrush {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionGradientExtendMode(pub i32);
impl CompositionGradientExtendMode {
    pub const Clamp: Self = Self(0i32);
    pub const Wrap: Self = Self(1i32);
    pub const Mirror: Self = Self(2i32);
}
impl windows_core::TypeKind for CompositionGradientExtendMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionGradientExtendMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionGradientExtendMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionGraphicsDevice(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionGraphicsDevice,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionGraphicsDevice,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionGraphicsDevice {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateDrawingSurface(
        &self,
        sizepixels: windows::Foundation::Size,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionDrawingSurface> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateDrawingSurface)(
                windows_core::Interface::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RenderingDeviceReplaced<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                CompositionGraphicsDevice,
                RenderingDeviceReplacedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderingDeviceReplaced)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveRenderingDeviceReplaced(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRenderingDeviceReplaced)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateDrawingSurface2(
        &self,
        sizepixels: windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionDrawingSurface> {
        let this = &windows_core::Interface::cast::<ICompositionGraphicsDevice2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateDrawingSurface2)(
                windows_core::Interface::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateVirtualDrawingSurface(
        &self,
        sizepixels: windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionVirtualDrawingSurface> {
        let this = &windows_core::Interface::cast::<ICompositionGraphicsDevice2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateVirtualDrawingSurface)(
                windows_core::Interface::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateMipmapSurface(
        &self,
        sizepixels: windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionMipmapSurface> {
        let this = &windows_core::Interface::cast::<ICompositionGraphicsDevice3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateMipmapSurface)(
                windows_core::Interface::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Trim(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGraphicsDevice3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Trim)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CaptureAsync<P0>(
        &self,
        capturevisual: P0,
        size: windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        sdrboost: f32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<ICompositionSurface>>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<ICompositionGraphicsDevice4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CaptureAsync)(
                windows_core::Interface::as_raw(this),
                capturevisual.param().abi(),
                size,
                pixelformat,
                alphamode,
                sdrboost,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionGraphicsDevice {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionGraphicsDevice>();
}
unsafe impl windows_core::Interface for CompositionGraphicsDevice {
    type Vtable = <ICompositionGraphicsDevice as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionGraphicsDevice as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionGraphicsDevice {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGraphicsDevice";
}
unsafe impl Send for CompositionGraphicsDevice {}
unsafe impl Sync for CompositionGraphicsDevice {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionLight(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionLight,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionLight,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionLight {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Targets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusionsFromTargets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionLight>();
}
unsafe impl windows_core::Interface for CompositionLight {
    type Vtable = <ICompositionLight as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionLight as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionLight {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLight";
}
unsafe impl Send for CompositionLight {}
unsafe impl Sync for CompositionLight {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionLineGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionLineGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionLineGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGeometry,
    CompositionObject
);
impl CompositionLineGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Start(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Start)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStart(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn End(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).End)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnd(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionLineGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionLineGeometry>();
}
unsafe impl windows_core::Interface for CompositionLineGeometry {
    type Vtable = <ICompositionLineGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionLineGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionLineGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLineGeometry";
}
unsafe impl Send for CompositionLineGeometry {}
unsafe impl Sync for CompositionLineGeometry {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionLinearGradientBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionLinearGradientBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionLinearGradientBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGradientBrush,
    CompositionBrush,
    CompositionObject
);
impl CompositionLinearGradientBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> windows_core::Result<CompositionColorGradientStopCollection> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorStops)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExtendMode(&self) -> windows_core::Result<CompositionGradientExtendMode> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExtendMode(&self, value: CompositionGradientExtendMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExtendMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> windows_core::Result<CompositionColorSpace> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InterpolationSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInterpolationSpace(&self, value: CompositionColorSpace) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInterpolationSpace)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> windows_core::Result<CompositionMappingMode> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MappingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMappingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EndPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EndPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEndPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEndPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StartPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStartPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStartPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionLinearGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionLinearGradientBrush>();
}
unsafe impl windows_core::Interface for CompositionLinearGradientBrush {
    type Vtable = <ICompositionLinearGradientBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionLinearGradientBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionLinearGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLinearGradientBrush";
}
unsafe impl Send for CompositionLinearGradientBrush {}
unsafe impl Sync for CompositionLinearGradientBrush {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionMappingMode(pub i32);
impl CompositionMappingMode {
    pub const Absolute: Self = Self(0i32);
    pub const Relative: Self = Self(1i32);
}
impl windows_core::TypeKind for CompositionMappingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionMappingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionMappingMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionMaskBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionMaskBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionMaskBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionMaskBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Mask(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mask)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMask<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMask)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionMaskBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionMaskBrush>();
}
unsafe impl windows_core::Interface for CompositionMaskBrush {
    type Vtable = <ICompositionMaskBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionMaskBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionMaskBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionMaskBrush";
}
unsafe impl Send for CompositionMaskBrush {}
unsafe impl Sync for CompositionMaskBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionMipmapSurface(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionMipmapSurface,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionMipmapSurface,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionSurface,
    CompositionObject
);
impl CompositionMipmapSurface {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn LevelCount(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LevelCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PixelFormat)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SizeInt32(&self) -> windows_core::Result<windows::Graphics::SizeInt32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeInt32)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetDrawingSurfaceForLevel(
        &self,
        level: u32,
    ) -> windows_core::Result<CompositionDrawingSurface> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDrawingSurfaceForLevel)(
                windows_core::Interface::as_raw(this),
                level,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionMipmapSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionMipmapSurface>();
}
unsafe impl windows_core::Interface for CompositionMipmapSurface {
    type Vtable = <ICompositionMipmapSurface as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionMipmapSurface as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionMipmapSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionMipmapSurface";
}
unsafe impl Send for CompositionMipmapSurface {}
unsafe impl Sync for CompositionMipmapSurface {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionNineGridBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionNineGridBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionNineGridBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionNineGridBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn BottomInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BottomInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottomInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottomInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomInsetScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BottomInsetScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottomInsetScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottomInsetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsCenterHollow(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsCenterHollow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsCenterHollow(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsCenterHollow)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LeftInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLeftInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLeftInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInsetScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LeftInsetScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLeftInsetScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLeftInsetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RightInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRightInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRightInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInsetScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RightInsetScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRightInsetScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRightInsetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn TopInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTopInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopInsetScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopInsetScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTopInsetScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopInsetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SetInsets(&self, inset: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInsets)(
                windows_core::Interface::as_raw(this),
                inset,
            )
            .ok()
        }
    }
    pub fn SetInsetsWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInsetsWithValues)(
                windows_core::Interface::as_raw(this),
                left,
                top,
                right,
                bottom,
            )
            .ok()
        }
    }
    pub fn SetInsetScales(&self, scale: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInsetScales)(
                windows_core::Interface::as_raw(this),
                scale,
            )
            .ok()
        }
    }
    pub fn SetInsetScalesWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInsetScalesWithValues)(
                windows_core::Interface::as_raw(this),
                left,
                top,
                right,
                bottom,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionNineGridBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionNineGridBrush>();
}
unsafe impl windows_core::Interface for CompositionNineGridBrush {
    type Vtable = <ICompositionNineGridBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionNineGridBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionNineGridBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionNineGridBrush";
}
unsafe impl Send for CompositionNineGridBrush {}
unsafe impl Sync for CompositionNineGridBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionObject(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionObject,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionObject,
    IAnimationObject,
    windows::Foundation::IClosable
);
impl CompositionObject {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationWithIAnimationObject<P0, P2>(
        target: P0,
        propertyname: &windows_core::HSTRING,
        animation: P2,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IAnimationObject>,
        P2: windows_core::Param<CompositionAnimation>,
    {
        Self::ICompositionObjectStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithIAnimationObject)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        })
    }
    pub fn StartAnimationGroupWithIAnimationObject<P0, P1>(
        target: P0,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IAnimationObject>,
        P1: windows_core::Param<ICompositionAnimationBase>,
    {
        Self::ICompositionObjectStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroupWithIAnimationObject)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                animation.param().abi(),
            )
            .ok()
        })
    }
    fn ICompositionObjectStatics<
        R,
        F: FnOnce(&ICompositionObjectStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionObject,
            ICompositionObjectStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionObject {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionObject>();
}
unsafe impl windows_core::Interface for CompositionObject {
    type Vtable = <ICompositionObject as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionObject as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionObject {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionObject";
}
unsafe impl Send for CompositionObject {}
unsafe impl Sync for CompositionObject {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionPath(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionPath,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(CompositionPath, windows::Graphics::IGeometrySource2D);
impl CompositionPath {
    pub fn Create<P0>(source: P0) -> windows_core::Result<CompositionPath>
    where
        P0: windows_core::Param<windows::Graphics::IGeometrySource2D>,
    {
        Self::ICompositionPathFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                source.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ICompositionPathFactory<
        R,
        F: FnOnce(&ICompositionPathFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<CompositionPath, ICompositionPathFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionPath {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionPath>();
}
unsafe impl windows_core::Interface for CompositionPath {
    type Vtable = <ICompositionPath as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionPath as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionPath {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPath";
}
unsafe impl Send for CompositionPath {}
unsafe impl Sync for CompositionPath {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionPathGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionPathGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionPathGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGeometry,
    CompositionObject
);
impl CompositionPathGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Path(&self) -> windows_core::Result<CompositionPath> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Path)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetPath<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionPath>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPath)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionPathGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionPathGeometry>();
}
unsafe impl windows_core::Interface for CompositionPathGeometry {
    type Vtable = <ICompositionPathGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionPathGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionPathGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPathGeometry";
}
unsafe impl Send for CompositionPathGeometry {}
unsafe impl Sync for CompositionPathGeometry {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionProjectedShadow(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionProjectedShadow,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionProjectedShadow,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionProjectedShadow {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BlurRadiusMultiplier(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BlurRadiusMultiplier)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBlurRadiusMultiplier(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBlurRadiusMultiplier)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Casters(&self) -> windows_core::Result<CompositionProjectedShadowCasterCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Casters)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LightSource(&self) -> windows_core::Result<CompositionLight> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LightSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLightSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionLight>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLightSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn MaxBlurRadius(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxBlurRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxBlurRadius(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxBlurRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinBlurRadius(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinBlurRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinBlurRadius(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinBlurRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Receivers(
        &self,
    ) -> windows_core::Result<CompositionProjectedShadowReceiverUnorderedCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Receivers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CompositionProjectedShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionProjectedShadow>();
}
unsafe impl windows_core::Interface for CompositionProjectedShadow {
    type Vtable = <ICompositionProjectedShadow as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionProjectedShadow as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionProjectedShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadow";
}
unsafe impl Send for CompositionProjectedShadow {}
unsafe impl Sync for CompositionProjectedShadow {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionProjectedShadowCaster(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionProjectedShadowCaster,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionProjectedShadowCaster,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionProjectedShadowCaster {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Brush(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Brush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CastingVisual(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CastingVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCastingVisual<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCastingVisual)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionProjectedShadowCaster {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionProjectedShadowCaster>();
}
unsafe impl windows_core::Interface for CompositionProjectedShadowCaster {
    type Vtable = <ICompositionProjectedShadowCaster as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionProjectedShadowCaster as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionProjectedShadowCaster {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadowCaster";
}
unsafe impl Send for CompositionProjectedShadowCaster {}
unsafe impl Sync for CompositionProjectedShadowCaster {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionProjectedShadowCasterCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionProjectedShadowCasterCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionProjectedShadowCasterCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<CompositionProjectedShadowCaster>,
    CompositionObject
);
impl CompositionProjectedShadowCasterCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InsertAbove<P0, P1>(&self, newcaster: P0, reference: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowCaster>,
        P1: windows_core::Param<CompositionProjectedShadowCaster>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAbove)(
                windows_core::Interface::as_raw(this),
                newcaster.param().abi(),
                reference.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtBottom<P0>(&self, newcaster: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowCaster>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAtBottom)(
                windows_core::Interface::as_raw(this),
                newcaster.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtTop<P0>(&self, newcaster: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowCaster>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAtTop)(
                windows_core::Interface::as_raw(this),
                newcaster.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertBelow<P0, P1>(&self, newcaster: P0, reference: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowCaster>,
        P1: windows_core::Param<CompositionProjectedShadowCaster>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertBelow)(
                windows_core::Interface::as_raw(this),
                newcaster.param().abi(),
                reference.param().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<P0>(&self, caster: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowCaster>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                caster.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn MaxRespectedCasters() -> windows_core::Result<i32> {
        Self::ICompositionProjectedShadowCasterCollectionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxRespectedCasters)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<CompositionProjectedShadowCaster>>
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<CompositionProjectedShadowCaster>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICompositionProjectedShadowCasterCollectionStatics<
        R,
        F: FnOnce(&ICompositionProjectedShadowCasterCollectionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionProjectedShadowCasterCollection,
            ICompositionProjectedShadowCasterCollectionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionProjectedShadowCasterCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICompositionProjectedShadowCasterCollection,
    >();
}
unsafe impl windows_core::Interface for CompositionProjectedShadowCasterCollection {
    type Vtable = <ICompositionProjectedShadowCasterCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionProjectedShadowCasterCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionProjectedShadowCasterCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection";
}
unsafe impl Send for CompositionProjectedShadowCasterCollection {}
unsafe impl Sync for CompositionProjectedShadowCasterCollection {}
impl IntoIterator for CompositionProjectedShadowCasterCollection {
    type Item = CompositionProjectedShadowCaster;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionProjectedShadowCasterCollection {
    type Item = CompositionProjectedShadowCaster;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionProjectedShadowReceiver(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionProjectedShadowReceiver,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionProjectedShadowReceiver,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionProjectedShadowReceiver {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReceivingVisual(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReceivingVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetReceivingVisual<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetReceivingVisual)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionProjectedShadowReceiver {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionProjectedShadowReceiver>();
}
unsafe impl windows_core::Interface for CompositionProjectedShadowReceiver {
    type Vtable = <ICompositionProjectedShadowReceiver as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionProjectedShadowReceiver as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionProjectedShadowReceiver {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadowReceiver";
}
unsafe impl Send for CompositionProjectedShadowReceiver {}
unsafe impl Sync for CompositionProjectedShadowReceiver {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionProjectedShadowReceiverUnorderedCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionProjectedShadowReceiverUnorderedCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionProjectedShadowReceiverUnorderedCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<CompositionProjectedShadowReceiver>,
    CompositionObject
);
impl CompositionProjectedShadowReceiverUnorderedCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Add<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowReceiver>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Add)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Remove<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionProjectedShadowReceiver>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<CompositionProjectedShadowReceiver>>
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<CompositionProjectedShadowReceiver>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CompositionProjectedShadowReceiverUnorderedCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        ICompositionProjectedShadowReceiverUnorderedCollection,
    >();
}
unsafe impl windows_core::Interface for CompositionProjectedShadowReceiverUnorderedCollection {
    type Vtable =
        <ICompositionProjectedShadowReceiverUnorderedCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionProjectedShadowReceiverUnorderedCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionProjectedShadowReceiverUnorderedCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection";
}
unsafe impl Send for CompositionProjectedShadowReceiverUnorderedCollection {}
unsafe impl Sync for CompositionProjectedShadowReceiverUnorderedCollection {}
impl IntoIterator for CompositionProjectedShadowReceiverUnorderedCollection {
    type Item = CompositionProjectedShadowReceiver;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionProjectedShadowReceiverUnorderedCollection {
    type Item = CompositionProjectedShadowReceiver;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionPropertySet(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionPropertySet,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionPropertySet,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionPropertySet {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertColor(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertColor)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertMatrix3x2(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertMatrix3x2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertMatrix4x4(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertMatrix4x4)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertQuaternion(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertQuaternion)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertScalar(
        &self,
        propertyname: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertScalar)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector2(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertVector2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector3(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertVector3)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector4(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertVector4)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn TryGetColor(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows::UI::Color,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetColor)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetMatrix3x2(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows_numerics::Matrix3x2,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetMatrix3x2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetMatrix4x4(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows_numerics::Matrix4x4,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetMatrix4x4)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetQuaternion(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetQuaternion)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetScalar(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut f32,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetScalar)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetVector2(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector2,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetVector2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetVector3(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector3,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetVector3)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryGetVector4(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector4,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetVector4)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InsertBoolean(
        &self,
        propertyname: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionPropertySet2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertBoolean)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn TryGetBoolean(
        &self,
        propertyname: &windows_core::HSTRING,
        value: &mut bool,
    ) -> windows_core::Result<CompositionGetValueStatus> {
        let this = &windows_core::Interface::cast::<ICompositionPropertySet2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetBoolean)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CompositionPropertySet {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionPropertySet>();
}
unsafe impl windows_core::Interface for CompositionPropertySet {
    type Vtable = <ICompositionPropertySet as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionPropertySet as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionPropertySet {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPropertySet";
}
unsafe impl Send for CompositionPropertySet {}
unsafe impl Sync for CompositionPropertySet {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionRadialGradientBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionRadialGradientBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionRadialGradientBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGradientBrush,
    CompositionBrush,
    CompositionObject
);
impl CompositionRadialGradientBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> windows_core::Result<CompositionColorGradientStopCollection> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorStops)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExtendMode(&self) -> windows_core::Result<CompositionGradientExtendMode> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExtendMode(&self, value: CompositionGradientExtendMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExtendMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> windows_core::Result<CompositionColorSpace> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InterpolationSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInterpolationSpace(&self, value: CompositionColorSpace) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInterpolationSpace)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> windows_core::Result<CompositionMappingMode> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MappingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMappingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn EllipseCenter(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EllipseCenter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEllipseCenter(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEllipseCenter)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EllipseRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EllipseRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEllipseRadius(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEllipseRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GradientOriginOffset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GradientOriginOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetGradientOriginOffset(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetGradientOriginOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionRadialGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionRadialGradientBrush>();
}
unsafe impl windows_core::Interface for CompositionRadialGradientBrush {
    type Vtable = <ICompositionRadialGradientBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionRadialGradientBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionRadialGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRadialGradientBrush";
}
unsafe impl Send for CompositionRadialGradientBrush {}
unsafe impl Sync for CompositionRadialGradientBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionRectangleGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionRectangleGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionRectangleGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGeometry,
    CompositionObject
);
impl CompositionRectangleGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionRectangleGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionRectangleGeometry>();
}
unsafe impl windows_core::Interface for CompositionRectangleGeometry {
    type Vtable = <ICompositionRectangleGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionRectangleGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRectangleGeometry";
}
unsafe impl Send for CompositionRectangleGeometry {}
unsafe impl Sync for CompositionRectangleGeometry {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionRoundedRectangleGeometry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionRoundedRectangleGeometry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionRoundedRectangleGeometry,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionGeometry,
    CompositionObject
);
impl CompositionRoundedRectangleGeometry {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimEnd)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TrimStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTrimStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn CornerRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CornerRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCornerRadius(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCornerRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionRoundedRectangleGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionRoundedRectangleGeometry>();
}
unsafe impl windows_core::Interface for CompositionRoundedRectangleGeometry {
    type Vtable = <ICompositionRoundedRectangleGeometry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionRoundedRectangleGeometry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionRoundedRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRoundedRectangleGeometry";
}
unsafe impl Send for CompositionRoundedRectangleGeometry {}
unsafe impl Sync for CompositionRoundedRectangleGeometry {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionScopedBatch(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionScopedBatch,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionScopedBatch,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionScopedBatch {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsActive(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsActive)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsEnded(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn End(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).End)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn Resume(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resume)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Suspend(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Suspend)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                windows_core::IInspectable,
                CompositionBatchCompletedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionScopedBatch {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionScopedBatch>();
}
unsafe impl windows_core::Interface for CompositionScopedBatch {
    type Vtable = <ICompositionScopedBatch as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionScopedBatch as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionScopedBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionScopedBatch";
}
unsafe impl Send for CompositionScopedBatch {}
unsafe impl Sync for CompositionScopedBatch {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionShadow(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionShadow,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionShadow,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionShadow {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionShadow>();
}
unsafe impl windows_core::Interface for CompositionShadow {
    type Vtable = <ICompositionShadow as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionShadow as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShadow";
}
unsafe impl Send for CompositionShadow {}
unsafe impl Sync for CompositionShadow {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionShape(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionShape,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionShape,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionShape {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionShape>();
}
unsafe impl windows_core::Interface for CompositionShape {
    type Vtable = <ICompositionShape as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionShape as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShape";
}
unsafe impl Send for CompositionShape {}
unsafe impl Sync for CompositionShape {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionShapeCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionShapeCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<CompositionShape>
);
windows_core::imp::required_hierarchy!(
    CompositionShapeCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<CompositionShape>,
    CompositionObject
);
impl CompositionShapeCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<CompositionShape>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<CompositionShape>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<CompositionShape> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<CompositionShape>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<CompositionShape>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionShape>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionShape>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionShape>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<CompositionShape>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<CompositionShape>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionShapeCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<CompositionShape>,
    >();
}
unsafe impl windows_core::Interface for CompositionShapeCollection {
    type Vtable =
        <windows_collections::IVector<CompositionShape> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<CompositionShape> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionShapeCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShapeCollection";
}
unsafe impl Send for CompositionShapeCollection {}
unsafe impl Sync for CompositionShapeCollection {}
impl IntoIterator for CompositionShapeCollection {
    type Item = CompositionShape;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionShapeCollection {
    type Item = CompositionShape;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionSpriteShape(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionSpriteShape,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionSpriteShape,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionShape,
    CompositionObject
);
impl CompositionSpriteShape {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBrush(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFillBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Geometry(&self) -> windows_core::Result<CompositionGeometry> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Geometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetGeometry<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionGeometry>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetGeometry)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsStrokeNonScaling(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStrokeNonScaling)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsStrokeNonScaling(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsStrokeNonScaling)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeBrush(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetStrokeBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StrokeDashArray(&self) -> windows_core::Result<CompositionStrokeDashArray> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeDashArray)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StrokeDashCap(&self) -> windows_core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeDashCap)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeDashCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeDashCap)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeDashOffset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeDashOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeDashOffset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeDashOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeEndCap(&self) -> windows_core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeEndCap)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeEndCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeEndCap)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeLineJoin(&self) -> windows_core::Result<CompositionStrokeLineJoin> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeLineJoin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeLineJoin(&self, value: CompositionStrokeLineJoin) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeLineJoin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeMiterLimit(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeMiterLimit)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeMiterLimit(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeMiterLimit)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeStartCap(&self) -> windows_core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeStartCap)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeStartCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeStartCap)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeThickness(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StrokeThickness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStrokeThickness(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStrokeThickness)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionSpriteShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionSpriteShape>();
}
unsafe impl windows_core::Interface for CompositionSpriteShape {
    type Vtable = <ICompositionSpriteShape as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionSpriteShape as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionSpriteShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionSpriteShape";
}
unsafe impl Send for CompositionSpriteShape {}
unsafe impl Sync for CompositionSpriteShape {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionStretch(pub i32);
impl CompositionStretch {
    pub const None: Self = Self(0i32);
    pub const Fill: Self = Self(1i32);
    pub const Uniform: Self = Self(2i32);
    pub const UniformToFill: Self = Self(3i32);
}
impl windows_core::TypeKind for CompositionStretch {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionStretch {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStretch;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionStrokeCap(pub i32);
impl CompositionStrokeCap {
    pub const Flat: Self = Self(0i32);
    pub const Square: Self = Self(1i32);
    pub const Round: Self = Self(2i32);
    pub const Triangle: Self = Self(3i32);
}
impl windows_core::TypeKind for CompositionStrokeCap {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionStrokeCap {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStrokeCap;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionStrokeDashArray(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionStrokeDashArray,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<f32>
);
windows_core::imp::required_hierarchy!(
    CompositionStrokeDashArray,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<f32>,
    CompositionObject
);
impl CompositionStrokeDashArray {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<f32>> {
        let this = &windows_core::Interface::cast::<windows_collections::IIterable<f32>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf(&self, value: f32, index: &mut u32) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value,
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt(&self, index: u32, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value,
            )
            .ok()
        }
    }
    pub fn InsertAt(&self, index: u32, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value,
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(&self, startindex: u32, items: &mut [f32]) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                items.as_mut_ptr(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[f32]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                items.as_ptr(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionStrokeDashArray {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, windows_collections::IVector<f32>>();
}
unsafe impl windows_core::Interface for CompositionStrokeDashArray {
    type Vtable = <windows_collections::IVector<f32> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<f32> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionStrokeDashArray {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionStrokeDashArray";
}
unsafe impl Send for CompositionStrokeDashArray {}
unsafe impl Sync for CompositionStrokeDashArray {}
impl IntoIterator for CompositionStrokeDashArray {
    type Item = f32;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionStrokeDashArray {
    type Item = f32;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct CompositionStrokeLineJoin(pub i32);
impl CompositionStrokeLineJoin {
    pub const Miter: Self = Self(0i32);
    pub const Bevel: Self = Self(1i32);
    pub const Round: Self = Self(2i32);
    pub const MiterOrBevel: Self = Self(3i32);
}
impl windows_core::TypeKind for CompositionStrokeLineJoin {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for CompositionStrokeLineJoin {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStrokeLineJoin;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionSurfaceBrush(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionSurfaceBrush,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionSurfaceBrush,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionBrush,
    CompositionObject
);
impl CompositionSurfaceBrush {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BitmapInterpolationMode(
        &self,
    ) -> windows_core::Result<CompositionBitmapInterpolationMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BitmapInterpolationMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBitmapInterpolationMode(
        &self,
        value: CompositionBitmapInterpolationMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBitmapInterpolationMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignmentRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Stretch(&self) -> windows_core::Result<CompositionStretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Stretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStretch(&self, value: CompositionStretch) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Surface(&self) -> windows_core::Result<ICompositionSurface> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Surface)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSurface<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionSurface>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSurface)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignmentRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SnapToPixels(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SnapToPixels)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSnapToPixels(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionSurfaceBrush3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSnapToPixels)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionSurfaceBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionSurfaceBrush>();
}
unsafe impl windows_core::Interface for CompositionSurfaceBrush {
    type Vtable = <ICompositionSurfaceBrush as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionSurfaceBrush as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionSurfaceBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionSurfaceBrush";
}
unsafe impl Send for CompositionSurfaceBrush {}
unsafe impl Sync for CompositionSurfaceBrush {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionTransform(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionTransform,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionTransform,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionTransform {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionTransform {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionTransform>();
}
unsafe impl windows_core::Interface for CompositionTransform {
    type Vtable = <ICompositionTransform as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionTransform as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionTransform {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionTransform";
}
unsafe impl Send for CompositionTransform {}
unsafe impl Sync for CompositionTransform {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionViewBox(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionViewBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionViewBox,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl CompositionViewBox {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignmentRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Stretch(&self) -> windows_core::Result<CompositionStretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Stretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStretch(&self, value: CompositionStretch) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignmentRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignmentRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionViewBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionViewBox>();
}
unsafe impl windows_core::Interface for CompositionViewBox {
    type Vtable = <ICompositionViewBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionViewBox as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionViewBox {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionViewBox";
}
unsafe impl Send for CompositionViewBox {}
unsafe impl Sync for CompositionViewBox {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionVirtualDrawingSurface(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionVirtualDrawingSurface,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionVirtualDrawingSurface,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionSurface,
    CompositionDrawingSurface,
    CompositionObject
);
impl CompositionVirtualDrawingSurface {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PixelFormat)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SizeInt32(&self) -> windows_core::Result<windows::Graphics::SizeInt32> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeInt32)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Resize(&self, sizepixels: windows::Graphics::SizeInt32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                sizepixels,
            )
            .ok()
        }
    }
    pub fn Scroll(&self, offset: windows::Graphics::PointInt32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Scroll)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ScrollRect(
        &self,
        offset: windows::Graphics::PointInt32,
        scrollrect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollRect)(
                windows_core::Interface::as_raw(this),
                offset,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn ScrollWithClip(
        &self,
        offset: windows::Graphics::PointInt32,
        cliprect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollWithClip)(
                windows_core::Interface::as_raw(this),
                offset,
                cliprect,
            )
            .ok()
        }
    }
    pub fn ScrollRectWithClip(
        &self,
        offset: windows::Graphics::PointInt32,
        cliprect: windows::Graphics::RectInt32,
        scrollrect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollRectWithClip)(
                windows_core::Interface::as_raw(this),
                offset,
                cliprect,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Trim(&self, rects: &[windows::Graphics::RectInt32]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Trim)(
                windows_core::Interface::as_raw(this),
                rects.len().try_into().unwrap(),
                rects.as_ptr(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionVirtualDrawingSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionVirtualDrawingSurface>();
}
unsafe impl windows_core::Interface for CompositionVirtualDrawingSurface {
    type Vtable = <ICompositionVirtualDrawingSurface as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionVirtualDrawingSurface as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionVirtualDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionVirtualDrawingSurface";
}
unsafe impl Send for CompositionVirtualDrawingSurface {}
unsafe impl Sync for CompositionVirtualDrawingSurface {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionVisualSurface(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionVisualSurface,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionVisualSurface,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionSurface,
    CompositionObject
);
impl CompositionVisualSurface {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn SourceVisual(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSourceVisual<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSourceVisual)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SourceOffset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSourceOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSourceOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SourceSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSourceSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSourceSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for CompositionVisualSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionVisualSurface>();
}
unsafe impl windows_core::Interface for CompositionVisualSurface {
    type Vtable = <ICompositionVisualSurface as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionVisualSurface as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionVisualSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionVisualSurface";
}
unsafe impl Send for CompositionVisualSurface {}
unsafe impl Sync for CompositionVisualSurface {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Compositor(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Compositor,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Compositor, windows::Foundation::IClosable);
impl Compositor {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            Compositor,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CreateColorKeyFrameAnimation(&self) -> windows_core::Result<ColorKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateColorKeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateColorBrush(&self) -> windows_core::Result<CompositionColorBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateColorBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateColorBrushWithColor(
        &self,
        color: windows::UI::Color,
    ) -> windows_core::Result<CompositionColorBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateColorBrushWithColor)(
                windows_core::Interface::as_raw(this),
                color,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateContainerVisual(&self) -> windows_core::Result<ContainerVisual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateContainerVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateCubicBezierEasingFunction(
        &self,
        controlpoint1: windows_numerics::Vector2,
        controlpoint2: windows_numerics::Vector2,
    ) -> windows_core::Result<CubicBezierEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateCubicBezierEasingFunction)(
                windows_core::Interface::as_raw(this),
                controlpoint1,
                controlpoint2,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateEffectFactory<P0>(
        &self,
        graphicseffect: P0,
    ) -> windows_core::Result<CompositionEffectFactory>
    where
        P0: windows_core::Param<windows::Graphics::Effects::IGraphicsEffect>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateEffectFactory)(
                windows_core::Interface::as_raw(this),
                graphicseffect.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateEffectFactoryWithProperties<P0, P1>(
        &self,
        graphicseffect: P0,
        animatableproperties: P1,
    ) -> windows_core::Result<CompositionEffectFactory>
    where
        P0: windows_core::Param<windows::Graphics::Effects::IGraphicsEffect>,
        P1: windows_core::Param<windows_collections::IIterable<windows_core::HSTRING>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateEffectFactoryWithProperties)(
                windows_core::Interface::as_raw(this),
                graphicseffect.param().abi(),
                animatableproperties.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateExpressionAnimation(&self) -> windows_core::Result<ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateExpressionAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateExpressionAnimationWithExpression(
        &self,
        expression: &windows_core::HSTRING,
    ) -> windows_core::Result<ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateExpressionAnimationWithExpression)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(expression),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateInsetClip(&self) -> windows_core::Result<InsetClip> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInsetClip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateInsetClipWithInsets(
        &self,
        leftinset: f32,
        topinset: f32,
        rightinset: f32,
        bottominset: f32,
    ) -> windows_core::Result<InsetClip> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInsetClipWithInsets)(
                windows_core::Interface::as_raw(this),
                leftinset,
                topinset,
                rightinset,
                bottominset,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateLinearEasingFunction(&self) -> windows_core::Result<LinearEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateLinearEasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreatePropertySet(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePropertySet)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateQuaternionKeyFrameAnimation(
        &self,
    ) -> windows_core::Result<QuaternionKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateQuaternionKeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateScalarKeyFrameAnimation(&self) -> windows_core::Result<ScalarKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateScalarKeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateScopedBatch(
        &self,
        batchtype: CompositionBatchTypes,
    ) -> windows_core::Result<CompositionScopedBatch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateScopedBatch)(
                windows_core::Interface::as_raw(this),
                batchtype,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpriteVisual(&self) -> windows_core::Result<SpriteVisual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpriteVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSurfaceBrush(&self) -> windows_core::Result<CompositionSurfaceBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSurfaceBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSurfaceBrushWithSurface<P0>(
        &self,
        surface: P0,
    ) -> windows_core::Result<CompositionSurfaceBrush>
    where
        P0: windows_core::Param<ICompositionSurface>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSurfaceBrushWithSurface)(
                windows_core::Interface::as_raw(this),
                surface.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateVector2KeyFrameAnimation(&self) -> windows_core::Result<Vector2KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateVector2KeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateVector3KeyFrameAnimation(&self) -> windows_core::Result<Vector3KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateVector3KeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateVector4KeyFrameAnimation(&self) -> windows_core::Result<Vector4KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateVector4KeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetCommitBatch(
        &self,
        batchtype: CompositionBatchTypes,
    ) -> windows_core::Result<CompositionCommitBatch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCommitBatch)(
                windows_core::Interface::as_raw(this),
                batchtype,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateAmbientLight(&self) -> windows_core::Result<AmbientLight> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateAmbientLight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateAnimationGroup(&self) -> windows_core::Result<CompositionAnimationGroup> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateAnimationGroup)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateBackdropBrush(&self) -> windows_core::Result<CompositionBackdropBrush> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBackdropBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateDistantLight(&self) -> windows_core::Result<DistantLight> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateDistantLight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateDropShadow(&self) -> windows_core::Result<DropShadow> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateDropShadow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateImplicitAnimationCollection(
        &self,
    ) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateImplicitAnimationCollection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateLayerVisual(&self) -> windows_core::Result<LayerVisual> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateLayerVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateMaskBrush(&self) -> windows_core::Result<CompositionMaskBrush> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateMaskBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateNineGridBrush(&self) -> windows_core::Result<CompositionNineGridBrush> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateNineGridBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreatePointLight(&self) -> windows_core::Result<PointLight> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePointLight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpotLight(&self) -> windows_core::Result<SpotLight> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpotLight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateStepEasingFunction(&self) -> windows_core::Result<StepEasingFunction> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateStepEasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateStepEasingFunctionWithStepCount(
        &self,
        stepcount: i32,
    ) -> windows_core::Result<StepEasingFunction> {
        let this = &windows_core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateStepEasingFunctionWithStepCount)(
                windows_core::Interface::as_raw(this),
                stepcount,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateColorGradientStop(&self) -> windows_core::Result<CompositionColorGradientStop> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateColorGradientStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateColorGradientStopWithOffsetAndColor(
        &self,
        offset: f32,
        color: windows::UI::Color,
    ) -> windows_core::Result<CompositionColorGradientStop> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateColorGradientStopWithOffsetAndColor)(
                windows_core::Interface::as_raw(this),
                offset,
                color,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateLinearGradientBrush(
        &self,
    ) -> windows_core::Result<CompositionLinearGradientBrush> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateLinearGradientBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpringScalarAnimation(
        &self,
    ) -> windows_core::Result<SpringScalarNaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpringScalarAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpringVector2Animation(
        &self,
    ) -> windows_core::Result<SpringVector2NaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpringVector2Animation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpringVector3Animation(
        &self,
    ) -> windows_core::Result<SpringVector3NaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpringVector3Animation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn GlobalPlaybackRate(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GlobalPlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetGlobalPlaybackRate(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetGlobalPlaybackRate)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CreateBounceScalarAnimation(
        &self,
    ) -> windows_core::Result<BounceScalarNaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBounceScalarAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateBounceVector2Animation(
        &self,
    ) -> windows_core::Result<BounceVector2NaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBounceVector2Animation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateBounceVector3Animation(
        &self,
    ) -> windows_core::Result<BounceVector3NaturalMotionAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBounceVector3Animation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateContainerShape(&self) -> windows_core::Result<CompositionContainerShape> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateContainerShape)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateEllipseGeometry(&self) -> windows_core::Result<CompositionEllipseGeometry> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateEllipseGeometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateLineGeometry(&self) -> windows_core::Result<CompositionLineGeometry> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateLineGeometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreatePathGeometry(&self) -> windows_core::Result<CompositionPathGeometry> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePathGeometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreatePathGeometryWithPath<P0>(
        &self,
        path: P0,
    ) -> windows_core::Result<CompositionPathGeometry>
    where
        P0: windows_core::Param<CompositionPath>,
    {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePathGeometryWithPath)(
                windows_core::Interface::as_raw(this),
                path.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreatePathKeyFrameAnimation(&self) -> windows_core::Result<PathKeyFrameAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreatePathKeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRectangleGeometry(&self) -> windows_core::Result<CompositionRectangleGeometry> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRectangleGeometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRoundedRectangleGeometry(
        &self,
    ) -> windows_core::Result<CompositionRoundedRectangleGeometry> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRoundedRectangleGeometry)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateShapeVisual(&self) -> windows_core::Result<ShapeVisual> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateShapeVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpriteShape(&self) -> windows_core::Result<CompositionSpriteShape> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpriteShape)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateSpriteShapeWithGeometry<P0>(
        &self,
        geometry: P0,
    ) -> windows_core::Result<CompositionSpriteShape>
    where
        P0: windows_core::Param<CompositionGeometry>,
    {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateSpriteShapeWithGeometry)(
                windows_core::Interface::as_raw(this),
                geometry.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateViewBox(&self) -> windows_core::Result<CompositionViewBox> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateViewBox)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RequestCommitAsync(&self) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = &windows_core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestCommitAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateGeometricClip(&self) -> windows_core::Result<CompositionGeometricClip> {
        let this = &windows_core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateGeometricClip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateGeometricClipWithGeometry<P0>(
        &self,
        geometry: P0,
    ) -> windows_core::Result<CompositionGeometricClip>
    where
        P0: windows_core::Param<CompositionGeometry>,
    {
        let this = &windows_core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateGeometricClipWithGeometry)(
                windows_core::Interface::as_raw(this),
                geometry.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRedirectVisual(&self) -> windows_core::Result<RedirectVisual> {
        let this = &windows_core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRedirectVisual)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRedirectVisualWithSourceVisual<P0>(
        &self,
        source: P0,
    ) -> windows_core::Result<RedirectVisual>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRedirectVisualWithSourceVisual)(
                windows_core::Interface::as_raw(this),
                source.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateBooleanKeyFrameAnimation(&self) -> windows_core::Result<BooleanKeyFrameAnimation> {
        let this = &windows_core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateBooleanKeyFrameAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateAnimationPropertyInfo(&self) -> windows_core::Result<AnimationPropertyInfo> {
        let this = &windows_core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateAnimationPropertyInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRectangleClip(&self) -> windows_core::Result<RectangleClip> {
        let this = &windows_core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRectangleClip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRectangleClipWithSides(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<RectangleClip> {
        let this = &windows_core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRectangleClipWithSides)(
                windows_core::Interface::as_raw(this),
                left,
                top,
                right,
                bottom,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRectangleClipWithSidesAndRadius(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
        topleftradius: windows_numerics::Vector2,
        toprightradius: windows_numerics::Vector2,
        bottomrightradius: windows_numerics::Vector2,
        bottomleftradius: windows_numerics::Vector2,
    ) -> windows_core::Result<RectangleClip> {
        let this = &windows_core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRectangleClipWithSidesAndRadius)(
                windows_core::Interface::as_raw(this),
                left,
                top,
                right,
                bottom,
                topleftradius,
                toprightradius,
                bottomrightradius,
                bottomleftradius,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateAnimationController(&self) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositor8>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateAnimationController)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MaxGlobalPlaybackRate() -> windows_core::Result<f32> {
        Self::ICompositorStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxGlobalPlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn MinGlobalPlaybackRate() -> windows_core::Result<f32> {
        Self::ICompositorStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinGlobalPlaybackRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn CreateProjectedShadowCaster(
        &self,
    ) -> windows_core::Result<CompositionProjectedShadowCaster> {
        let this = &windows_core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateProjectedShadowCaster)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateProjectedShadow(&self) -> windows_core::Result<CompositionProjectedShadow> {
        let this = &windows_core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateProjectedShadow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateProjectedShadowReceiver(
        &self,
    ) -> windows_core::Result<CompositionProjectedShadowReceiver> {
        let this = &windows_core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateProjectedShadowReceiver)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateRadialGradientBrush(
        &self,
    ) -> windows_core::Result<CompositionRadialGradientBrush> {
        let this = &windows_core::Interface::cast::<ICompositorWithRadialGradient>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateRadialGradientBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateVisualSurface(&self) -> windows_core::Result<CompositionVisualSurface> {
        let this = &windows_core::Interface::cast::<ICompositorWithVisualSurface>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateVisualSurface)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICompositorStatics<R, F: FnOnce(&ICompositorStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Compositor, ICompositorStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Compositor {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositor>();
}
unsafe impl windows_core::Interface for Compositor {
    type Vtable = <ICompositor as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositor as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Compositor {
    const NAME: &'static str = "Microsoft.UI.Composition.Compositor";
}
unsafe impl Send for Compositor {}
unsafe impl Sync for Compositor {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContainerVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContainerVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ContainerVisual,
    IAnimationObject,
    windows::Foundation::IClosable,
    Visual,
    CompositionObject
);
impl ContainerVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<VisualCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ContainerVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContainerVisual>();
}
unsafe impl windows_core::Interface for ContainerVisual {
    type Vtable = <IContainerVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContainerVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContainerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ContainerVisual";
}
unsafe impl Send for ContainerVisual {}
unsafe impl Sync for ContainerVisual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CubicBezierEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CubicBezierEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CubicBezierEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl CubicBezierEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ControlPoint1(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlPoint1)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ControlPoint2(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlPoint2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CubicBezierEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICubicBezierEasingFunction>();
}
unsafe impl windows_core::Interface for CubicBezierEasingFunction {
    type Vtable = <ICubicBezierEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICubicBezierEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CubicBezierEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CubicBezierEasingFunction";
}
unsafe impl Send for CubicBezierEasingFunction {}
unsafe impl Sync for CubicBezierEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DistantLight(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DistantLight,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DistantLight,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionLight,
    CompositionObject
);
impl DistantLight {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Targets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusionsFromTargets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCoordinateSpace<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCoordinateSpace)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IDistantLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Intensity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDistantLight2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIntensity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DistantLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDistantLight>();
}
unsafe impl windows_core::Interface for DistantLight {
    type Vtable = <IDistantLight as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDistantLight as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DistantLight {
    const NAME: &'static str = "Microsoft.UI.Composition.DistantLight";
}
unsafe impl Send for DistantLight {}
unsafe impl Sync for DistantLight {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DropShadow(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DropShadow,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DropShadow,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionShadow,
    CompositionObject
);
impl DropShadow {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BlurRadius(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BlurRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBlurRadius(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBlurRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Mask(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mask)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMask<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMask)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SourcePolicy(&self) -> windows_core::Result<CompositionDropShadowSourcePolicy> {
        let this = &windows_core::Interface::cast::<IDropShadow2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePolicy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSourcePolicy(
        &self,
        value: CompositionDropShadowSourcePolicy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDropShadow2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSourcePolicy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DropShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDropShadow>();
}
unsafe impl windows_core::Interface for DropShadow {
    type Vtable = <IDropShadow as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDropShadow as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DropShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.DropShadow";
}
unsafe impl Send for DropShadow {}
unsafe impl Sync for DropShadow {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ElasticEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ElasticEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ElasticEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl ElasticEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Oscillations(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Oscillations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Springiness(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Springiness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ElasticEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IElasticEasingFunction>();
}
unsafe impl windows_core::Interface for ElasticEasingFunction {
    type Vtable = <IElasticEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IElasticEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ElasticEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ElasticEasingFunction";
}
unsafe impl Send for ElasticEasingFunction {}
unsafe impl Sync for ElasticEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ExponentialEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ExponentialEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ExponentialEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl ExponentialEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Exponent(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Exponent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ExponentialEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IExponentialEasingFunction>();
}
unsafe impl windows_core::Interface for ExponentialEasingFunction {
    type Vtable = <IExponentialEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IExponentialEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ExponentialEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ExponentialEasingFunction";
}
unsafe impl Send for ExponentialEasingFunction {}
unsafe impl Sync for ExponentialEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ExpressionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ExpressionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ExpressionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    CompositionAnimation,
    CompositionObject
);
impl ExpressionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Expression(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Expression)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetExpression(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpression)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ExpressionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IExpressionAnimation>();
}
unsafe impl windows_core::Interface for ExpressionAnimation {
    type Vtable = <IExpressionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IExpressionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ExpressionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ExpressionAnimation";
}
unsafe impl Send for ExpressionAnimation {}
unsafe impl Sync for ExpressionAnimation {}
windows_core::imp::define_interface!(
    IAmbientLight,
    IAmbientLight_Vtbl,
    0x4540525e_b70d_5a14_bbfa_63bef42313c7
);
impl windows_core::RuntimeType for IAmbientLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAmbientLight {
    const NAME: &'static str = "Microsoft.UI.Composition.IAmbientLight";
}
pub trait IAmbientLight_Impl: windows_core::IUnknownImpl {
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
}
impl IAmbientLight_Vtbl {
    pub const fn new<Identity: IAmbientLight_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Color<Identity: IAmbientLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAmbientLight_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<Identity: IAmbientLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAmbientLight_Impl::SetColor(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAmbientLight, OFFSET>(),
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAmbientLight as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAmbientLight_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAmbientLight2,
    IAmbientLight2_Vtbl,
    0x3356f963_040c_54d4_9dfc_b61c51aaadd1
);
impl windows_core::RuntimeType for IAmbientLight2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAmbientLight2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IAmbientLight2";
}
pub trait IAmbientLight2_Impl: windows_core::IUnknownImpl {
    fn Intensity(&self) -> windows_core::Result<f32>;
    fn SetIntensity(&self, value: f32) -> windows_core::Result<()>;
}
impl IAmbientLight2_Vtbl {
    pub const fn new<Identity: IAmbientLight2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Intensity<Identity: IAmbientLight2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAmbientLight2_Impl::Intensity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIntensity<
            Identity: IAmbientLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAmbientLight2_Impl::SetIntensity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAmbientLight2, OFFSET>(),
            Intensity: Intensity::<Identity, OFFSET>,
            SetIntensity: SetIntensity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAmbientLight2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAmbientLight2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Intensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAnimationController,
    IAnimationController_Vtbl,
    0xbd0f88a8_a415_5322_8c3d_1a6d9192754f
);
impl windows_core::RuntimeType for IAnimationController {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnimationController {
    const NAME: &'static str = "Microsoft.UI.Composition.IAnimationController";
}
pub trait IAnimationController_Impl: windows_core::IUnknownImpl {
    fn PlaybackRate(&self) -> windows_core::Result<f32>;
    fn SetPlaybackRate(&self, value: f32) -> windows_core::Result<()>;
    fn Progress(&self) -> windows_core::Result<f32>;
    fn SetProgress(&self, value: f32) -> windows_core::Result<()>;
    fn ProgressBehavior(&self) -> windows_core::Result<AnimationControllerProgressBehavior>;
    fn SetProgressBehavior(
        &self,
        value: AnimationControllerProgressBehavior,
    ) -> windows_core::Result<()>;
    fn Pause(&self) -> windows_core::Result<()>;
    fn Resume(&self) -> windows_core::Result<()>;
}
impl IAnimationController_Vtbl {
    pub const fn new<Identity: IAnimationController_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PlaybackRate<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationController_Impl::PlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlaybackRate<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationController_Impl::SetPlaybackRate(this, value).into()
            }
        }
        unsafe extern "system" fn Progress<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationController_Impl::Progress(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProgress<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationController_Impl::SetProgress(this, value).into()
            }
        }
        unsafe extern "system" fn ProgressBehavior<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationControllerProgressBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationController_Impl::ProgressBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProgressBehavior<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationControllerProgressBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationController_Impl::SetProgressBehavior(this, value).into()
            }
        }
        unsafe extern "system" fn Pause<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationController_Impl::Pause(this).into()
            }
        }
        unsafe extern "system" fn Resume<
            Identity: IAnimationController_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationController_Impl::Resume(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAnimationController, OFFSET>(
            ),
            PlaybackRate: PlaybackRate::<Identity, OFFSET>,
            SetPlaybackRate: SetPlaybackRate::<Identity, OFFSET>,
            Progress: Progress::<Identity, OFFSET>,
            SetProgress: SetProgress::<Identity, OFFSET>,
            ProgressBehavior: ProgressBehavior::<Identity, OFFSET>,
            SetProgressBehavior: SetProgressBehavior::<Identity, OFFSET>,
            Pause: Pause::<Identity, OFFSET>,
            Resume: Resume::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnimationController as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationController_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Progress:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetProgress:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub ProgressBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationControllerProgressBehavior,
    ) -> windows_core::HRESULT,
    pub SetProgressBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationControllerProgressBehavior,
    ) -> windows_core::HRESULT,
    pub Pause: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAnimationControllerStatics,
    IAnimationControllerStatics_Vtbl,
    0xb63b0fb6_286b_57af_b096_16066d43dc00
);
impl windows_core::RuntimeType for IAnimationControllerStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnimationControllerStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.IAnimationControllerStatics";
}
pub trait IAnimationControllerStatics_Impl: windows_core::IUnknownImpl {
    fn MaxPlaybackRate(&self) -> windows_core::Result<f32>;
    fn MinPlaybackRate(&self) -> windows_core::Result<f32>;
}
impl IAnimationControllerStatics_Vtbl {
    pub const fn new<Identity: IAnimationControllerStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MaxPlaybackRate<
            Identity: IAnimationControllerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationControllerStatics_Impl::MaxPlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinPlaybackRate<
            Identity: IAnimationControllerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationControllerStatics_Impl::MinPlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAnimationControllerStatics,
                OFFSET,
            >(),
            MaxPlaybackRate: MaxPlaybackRate::<Identity, OFFSET>,
            MinPlaybackRate: MinPlaybackRate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnimationControllerStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationControllerStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MaxPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub MinPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAnimationObject,
    IAnimationObject_Vtbl,
    0x8f56119d_b96d_58d0_9916_d1c5e390f890
);
impl windows_core::RuntimeType for IAnimationObject {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IAnimationObject,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IAnimationObject {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IAnimationObject {
    const NAME: &'static str = "Microsoft.UI.Composition.IAnimationObject";
}
pub trait IAnimationObject_Impl: windows_core::IUnknownImpl {
    fn PopulatePropertyInfo(
        &self,
        propertyName: &windows_core::HSTRING,
        propertyInfo: windows_core::Ref<'_, AnimationPropertyInfo>,
    ) -> windows_core::Result<()>;
}
impl IAnimationObject_Vtbl {
    pub const fn new<Identity: IAnimationObject_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PopulatePropertyInfo<
            Identity: IAnimationObject_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            propertyinfo: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationObject_Impl::PopulatePropertyInfo(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&propertyinfo),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAnimationObject, OFFSET>(),
            PopulatePropertyInfo: PopulatePropertyInfo::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnimationObject as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationObject_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PopulatePropertyInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAnimationPropertyInfo,
    IAnimationPropertyInfo_Vtbl,
    0x3d721a2b_9ccd_57bd_b6c2_ce9e04ae3606
);
impl windows_core::RuntimeType for IAnimationPropertyInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnimationPropertyInfo {
    const NAME: &'static str = "Microsoft.UI.Composition.IAnimationPropertyInfo";
}
pub trait IAnimationPropertyInfo_Impl: windows_core::IUnknownImpl {
    fn AccessMode(&self) -> windows_core::Result<AnimationPropertyAccessMode>;
    fn SetAccessMode(&self, value: AnimationPropertyAccessMode) -> windows_core::Result<()>;
}
impl IAnimationPropertyInfo_Vtbl {
    pub const fn new<Identity: IAnimationPropertyInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AccessMode<
            Identity: IAnimationPropertyInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationPropertyAccessMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationPropertyInfo_Impl::AccessMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAccessMode<
            Identity: IAnimationPropertyInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationPropertyAccessMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAnimationPropertyInfo_Impl::SetAccessMode(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAnimationPropertyInfo, OFFSET>(
            ),
            AccessMode: AccessMode::<Identity, OFFSET>,
            SetAccessMode: SetAccessMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnimationPropertyInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationPropertyInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AccessMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationPropertyAccessMode,
    ) -> windows_core::HRESULT,
    pub SetAccessMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationPropertyAccessMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAnimationPropertyInfo2,
    IAnimationPropertyInfo2_Vtbl,
    0xed14fb09_de28_540d_9311_80cfdcc97338
);
impl windows_core::RuntimeType for IAnimationPropertyInfo2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnimationPropertyInfo2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IAnimationPropertyInfo2";
}
pub trait IAnimationPropertyInfo2_Impl: windows_core::IUnknownImpl {
    fn GetResolvedCompositionObject(&self) -> windows_core::Result<CompositionObject>;
    fn GetResolvedCompositionObjectProperty(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IAnimationPropertyInfo2_Vtbl {
    pub const fn new<Identity: IAnimationPropertyInfo2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetResolvedCompositionObject<
            Identity: IAnimationPropertyInfo2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationPropertyInfo2_Impl::GetResolvedCompositionObject(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetResolvedCompositionObjectProperty<
            Identity: IAnimationPropertyInfo2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnimationPropertyInfo2_Impl::GetResolvedCompositionObjectProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAnimationPropertyInfo2, OFFSET>(
            ),
            GetResolvedCompositionObject: GetResolvedCompositionObject::<Identity, OFFSET>,
            GetResolvedCompositionObjectProperty: GetResolvedCompositionObjectProperty::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnimationPropertyInfo2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationPropertyInfo2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetResolvedCompositionObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetResolvedCompositionObjectProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBackEasingFunction,
    IBackEasingFunction_Vtbl,
    0x27c75bab_317a_5362_bf25_fffbb98a51b9
);
impl windows_core::RuntimeType for IBackEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBackEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IBackEasingFunction";
}
pub trait IBackEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
    fn Amplitude(&self) -> windows_core::Result<f32>;
}
impl IBackEasingFunction_Vtbl {
    pub const fn new<Identity: IBackEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<Identity: IBackEasingFunction_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBackEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Amplitude<
            Identity: IBackEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBackEasingFunction_Impl::Amplitude(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBackEasingFunction, OFFSET>(),
            Mode: Mode::<Identity, OFFSET>,
            Amplitude: Amplitude::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBackEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
    pub Amplitude:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBooleanKeyFrameAnimation,
    IBooleanKeyFrameAnimation_Vtbl,
    0x7fe485e9_e874_5ff3_8ddc_826c3818bfc3
);
impl windows_core::RuntimeType for IBooleanKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBooleanKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IBooleanKeyFrameAnimation";
}
pub trait IBooleanKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(&self, normalizedProgressKey: f32, value: bool) -> windows_core::Result<()>;
}
impl IBooleanKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IBooleanKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IBooleanKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBooleanKeyFrameAnimation_Impl::InsertKeyFrame(this, normalizedprogresskey, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBooleanKeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBooleanKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBooleanKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceEasingFunction,
    IBounceEasingFunction_Vtbl,
    0xfa11f3c0_697b_562f_af46_c6af666b6ec4
);
impl windows_core::RuntimeType for IBounceEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IBounceEasingFunction";
}
pub trait IBounceEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
    fn Bounces(&self) -> windows_core::Result<i32>;
    fn Bounciness(&self) -> windows_core::Result<f32>;
}
impl IBounceEasingFunction_Vtbl {
    pub const fn new<Identity: IBounceEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<
            Identity: IBounceEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Bounces<
            Identity: IBounceEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEasingFunction_Impl::Bounces(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Bounciness<
            Identity: IBounceEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEasingFunction_Impl::Bounciness(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBounceEasingFunction, OFFSET>(
            ),
            Mode: Mode::<Identity, OFFSET>,
            Bounces: Bounces::<Identity, OFFSET>,
            Bounciness: Bounciness::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
    pub Bounces:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Bounciness:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceScalarNaturalMotionAnimation,
    IBounceScalarNaturalMotionAnimation_Vtbl,
    0x1c0c4b76_c4d6_5dd9_8dd6_dbe35c7b7e55
);
impl windows_core::RuntimeType for IBounceScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimation";
}
pub trait IBounceScalarNaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn Acceleration(&self) -> windows_core::Result<f32>;
    fn SetAcceleration(&self, value: f32) -> windows_core::Result<()>;
    fn Restitution(&self) -> windows_core::Result<f32>;
    fn SetRestitution(&self, value: f32) -> windows_core::Result<()>;
}
impl IBounceScalarNaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IBounceScalarNaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Acceleration<
            Identity: IBounceScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceScalarNaturalMotionAnimation_Impl::Acceleration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAcceleration<
            Identity: IBounceScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceScalarNaturalMotionAnimation_Impl::SetAcceleration(this, value).into()
            }
        }
        unsafe extern "system" fn Restitution<
            Identity: IBounceScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceScalarNaturalMotionAnimation_Impl::Restitution(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRestitution<
            Identity: IBounceScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceScalarNaturalMotionAnimation_Impl::SetRestitution(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBounceScalarNaturalMotionAnimation,
                OFFSET,
            >(),
            Acceleration: Acceleration::<Identity, OFFSET>,
            SetAcceleration: SetAcceleration::<Identity, OFFSET>,
            Restitution: Restitution::<Identity, OFFSET>,
            SetRestitution: SetRestitution::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceScalarNaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceScalarNaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Acceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetAcceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Restitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRestitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceVector2NaturalMotionAnimation,
    IBounceVector2NaturalMotionAnimation_Vtbl,
    0xec528d1f_22e2_573e_ab87_757071e50012
);
impl windows_core::RuntimeType for IBounceVector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimation";
}
pub trait IBounceVector2NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn Acceleration(&self) -> windows_core::Result<f32>;
    fn SetAcceleration(&self, value: f32) -> windows_core::Result<()>;
    fn Restitution(&self) -> windows_core::Result<f32>;
    fn SetRestitution(&self, value: f32) -> windows_core::Result<()>;
}
impl IBounceVector2NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IBounceVector2NaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Acceleration<
            Identity: IBounceVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceVector2NaturalMotionAnimation_Impl::Acceleration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAcceleration<
            Identity: IBounceVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceVector2NaturalMotionAnimation_Impl::SetAcceleration(this, value).into()
            }
        }
        unsafe extern "system" fn Restitution<
            Identity: IBounceVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceVector2NaturalMotionAnimation_Impl::Restitution(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRestitution<
            Identity: IBounceVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceVector2NaturalMotionAnimation_Impl::SetRestitution(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBounceVector2NaturalMotionAnimation,
                OFFSET,
            >(),
            Acceleration: Acceleration::<Identity, OFFSET>,
            SetAcceleration: SetAcceleration::<Identity, OFFSET>,
            Restitution: Restitution::<Identity, OFFSET>,
            SetRestitution: SetRestitution::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceVector2NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceVector2NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Acceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetAcceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Restitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRestitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceVector3NaturalMotionAnimation,
    IBounceVector3NaturalMotionAnimation_Vtbl,
    0xe3e2ee98_1211_586d_8a6d_fea5efc3957f
);
impl windows_core::RuntimeType for IBounceVector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimation";
}
pub trait IBounceVector3NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn Acceleration(&self) -> windows_core::Result<f32>;
    fn SetAcceleration(&self, value: f32) -> windows_core::Result<()>;
    fn Restitution(&self) -> windows_core::Result<f32>;
    fn SetRestitution(&self, value: f32) -> windows_core::Result<()>;
}
impl IBounceVector3NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IBounceVector3NaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Acceleration<
            Identity: IBounceVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceVector3NaturalMotionAnimation_Impl::Acceleration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAcceleration<
            Identity: IBounceVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceVector3NaturalMotionAnimation_Impl::SetAcceleration(this, value).into()
            }
        }
        unsafe extern "system" fn Restitution<
            Identity: IBounceVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceVector3NaturalMotionAnimation_Impl::Restitution(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRestitution<
            Identity: IBounceVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceVector3NaturalMotionAnimation_Impl::SetRestitution(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBounceVector3NaturalMotionAnimation,
                OFFSET,
            >(),
            Acceleration: Acceleration::<Identity, OFFSET>,
            SetAcceleration: SetAcceleration::<Identity, OFFSET>,
            Restitution: Restitution::<Identity, OFFSET>,
            SetRestitution: SetRestitution::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceVector3NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceVector3NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Acceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetAcceleration:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Restitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRestitution:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICircleEasingFunction,
    ICircleEasingFunction_Vtbl,
    0x414b172c_bf27_5ead_93e0_35915322db2c
);
impl windows_core::RuntimeType for ICircleEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICircleEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ICircleEasingFunction";
}
pub trait ICircleEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
}
impl ICircleEasingFunction_Vtbl {
    pub const fn new<Identity: ICircleEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<
            Identity: ICircleEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICircleEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICircleEasingFunction, OFFSET>(
            ),
            Mode: Mode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICircleEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICircleEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorKeyFrameAnimation,
    IColorKeyFrameAnimation_Vtbl,
    0xf0237928_353c_5867_be93_71547e989f44
);
impl windows_core::RuntimeType for IColorKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IColorKeyFrameAnimation";
}
pub trait IColorKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InterpolationColorSpace(&self) -> windows_core::Result<CompositionColorSpace>;
    fn SetInterpolationColorSpace(&self, value: CompositionColorSpace) -> windows_core::Result<()>;
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows::UI::Color,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows::UI::Color,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IColorKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IColorKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InterpolationColorSpace<
            Identity: IColorKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionColorSpace,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrameAnimation_Impl::InterpolationColorSpace(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInterpolationColorSpace<
            Identity: IColorKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionColorSpace,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorKeyFrameAnimation_Impl::SetInterpolationColorSpace(this, value).into()
            }
        }
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IColorKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorKeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IColorKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows::UI::Color,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorKeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorKeyFrameAnimation, OFFSET>(
            ),
            InterpolationColorSpace: InterpolationColorSpace::<Identity, OFFSET>,
            SetInterpolationColorSpace: SetInterpolationColorSpace::<Identity, OFFSET>,
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InterpolationColorSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionColorSpace,
    ) -> windows_core::HRESULT,
    pub SetInterpolationColorSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionColorSpace,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows::UI::Color,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionAnimation,
    ICompositionAnimation_Vtbl,
    0xa829ccc8_6fde_5b90_ad37_efd307e1b631
);
impl windows_core::RuntimeType for ICompositionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimation";
}
pub trait ICompositionAnimation_Impl: windows_core::IUnknownImpl {
    fn ClearAllParameters(&self) -> windows_core::Result<()>;
    fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows::UI::Color,
    ) -> windows_core::Result<()>;
    fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()>;
    fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()>;
    fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()>;
    fn SetReferenceParameter(
        &self,
        key: &windows_core::HSTRING,
        compositionObject: windows_core::Ref<'_, CompositionObject>,
    ) -> windows_core::Result<()>;
    fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()>;
    fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_numerics::Vector2,
    ) -> windows_core::Result<()>;
    fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_numerics::Vector3,
    ) -> windows_core::Result<()>;
    fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_numerics::Vector4,
    ) -> windows_core::Result<()>;
}
impl ICompositionAnimation_Vtbl {
    pub const fn new<Identity: ICompositionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ClearAllParameters<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::ClearAllParameters(this).into()
            }
        }
        unsafe extern "system" fn ClearParameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::ClearParameter(this, core::mem::transmute(&key)).into()
            }
        }
        unsafe extern "system" fn SetColorParameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetColorParameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetMatrix3x2Parameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetMatrix3x2Parameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetMatrix4x4Parameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetMatrix4x4Parameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetQuaternionParameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetQuaternionParameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetReferenceParameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            compositionobject: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetReferenceParameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute_copy(&compositionobject),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetScalarParameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetScalarParameter(
                    this,
                    core::mem::transmute(&key),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn SetVector2Parameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetVector2Parameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetVector3Parameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetVector3Parameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetVector4Parameter<
            Identity: ICompositionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: windows_numerics::Vector4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation_Impl::SetVector4Parameter(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionAnimation, OFFSET>(
            ),
            ClearAllParameters: ClearAllParameters::<Identity, OFFSET>,
            ClearParameter: ClearParameter::<Identity, OFFSET>,
            SetColorParameter: SetColorParameter::<Identity, OFFSET>,
            SetMatrix3x2Parameter: SetMatrix3x2Parameter::<Identity, OFFSET>,
            SetMatrix4x4Parameter: SetMatrix4x4Parameter::<Identity, OFFSET>,
            SetQuaternionParameter: SetQuaternionParameter::<Identity, OFFSET>,
            SetReferenceParameter: SetReferenceParameter::<Identity, OFFSET>,
            SetScalarParameter: SetScalarParameter::<Identity, OFFSET>,
            SetVector2Parameter: SetVector2Parameter::<Identity, OFFSET>,
            SetVector3Parameter: SetVector3Parameter::<Identity, OFFSET>,
            SetVector4Parameter: SetVector4Parameter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ClearAllParameters:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub ClearParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetColorParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetMatrix3x2Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub SetMatrix4x4Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub SetQuaternionParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub SetReferenceParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetScalarParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        f32,
    ) -> windows_core::HRESULT,
    pub SetVector2Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetVector3Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetVector4Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector4,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionAnimation2,
    ICompositionAnimation2_Vtbl,
    0x0926eb58_8965_5c74_bdac_852ebb5e8542
);
impl windows_core::RuntimeType for ICompositionAnimation2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimation2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimation2";
}
pub trait ICompositionAnimation2_Impl: windows_core::IUnknownImpl {
    fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()>;
    fn Target(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICompositionAnimation2_Vtbl {
    pub const fn new<Identity: ICompositionAnimation2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetBooleanParameter<
            Identity: ICompositionAnimation2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation2_Impl::SetBooleanParameter(
                    this,
                    core::mem::transmute(&key),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn Target<
            Identity: ICompositionAnimation2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionAnimation2_Impl::Target(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTarget<
            Identity: ICompositionAnimation2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation2_Impl::SetTarget(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionAnimation2, OFFSET>(
            ),
            SetBooleanParameter: SetBooleanParameter::<Identity, OFFSET>,
            Target: Target::<Identity, OFFSET>,
            SetTarget: SetTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimation2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetBooleanParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub Target: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionAnimation3,
    ICompositionAnimation3_Vtbl,
    0x60063f53_4167_5914_a2f1_9efcc2f86c76
);
impl windows_core::RuntimeType for ICompositionAnimation3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimation3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimation3";
}
pub trait ICompositionAnimation3_Impl: windows_core::IUnknownImpl {
    fn InitialValueExpressions(&self) -> windows_core::Result<InitialValueExpressionCollection>;
}
impl ICompositionAnimation3_Vtbl {
    pub const fn new<Identity: ICompositionAnimation3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InitialValueExpressions<
            Identity: ICompositionAnimation3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionAnimation3_Impl::InitialValueExpressions(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionAnimation3, OFFSET>(
            ),
            InitialValueExpressions: InitialValueExpressions::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimation3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InitialValueExpressions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionAnimation4,
    ICompositionAnimation4_Vtbl,
    0xc4101447_dfe4_597f_b5bc_96443f5d18a1
);
impl windows_core::RuntimeType for ICompositionAnimation4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimation4 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimation4";
}
pub trait ICompositionAnimation4_Impl: windows_core::IUnknownImpl {
    fn SetExpressionReferenceParameter(
        &self,
        parameterName: &windows_core::HSTRING,
        source: windows_core::Ref<'_, IAnimationObject>,
    ) -> windows_core::Result<()>;
}
impl ICompositionAnimation4_Vtbl {
    pub const fn new<Identity: ICompositionAnimation4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetExpressionReferenceParameter<
            Identity: ICompositionAnimation4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parametername: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimation4_Impl::SetExpressionReferenceParameter(
                    this,
                    core::mem::transmute(&parametername),
                    core::mem::transmute_copy(&source),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionAnimation4, OFFSET>(
            ),
            SetExpressionReferenceParameter: SetExpressionReferenceParameter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimation4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetExpressionReferenceParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionAnimationBase,
    ICompositionAnimationBase_Vtbl,
    0xa77c0e5a_f059_4e85_bcef_c068694cec78
);
impl windows_core::RuntimeType for ICompositionAnimationBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICompositionAnimationBase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl windows_core::RuntimeName for ICompositionAnimationBase {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimationBase";
}
pub trait ICompositionAnimationBase_Impl: windows_core::IUnknownImpl {}
impl ICompositionAnimationBase_Vtbl {
    pub const fn new<Identity: ICompositionAnimationBase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionAnimationBase,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimationBase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationBase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionAnimationFactory,
    ICompositionAnimationFactory_Vtbl,
    0x2ed278ca_4cca_5f7f_8d47_f930552a7769
);
impl windows_core::RuntimeType for ICompositionAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimationFactory";
}
pub trait ICompositionAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionAnimationFactory_Vtbl {
    pub const fn new<Identity: ICompositionAnimationFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionAnimationGroup,
    ICompositionAnimationGroup_Vtbl,
    0xa51cdcac_b972_5ae7_81d0_9d91c71ecb7a
);
impl windows_core::RuntimeType for ICompositionAnimationGroup {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionAnimationGroup {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionAnimationGroup";
}
pub trait ICompositionAnimationGroup_Impl: windows_core::IUnknownImpl {
    fn Count(&self) -> windows_core::Result<i32>;
    fn Add(&self, value: windows_core::Ref<'_, CompositionAnimation>) -> windows_core::Result<()>;
    fn Remove(
        &self,
        value: windows_core::Ref<'_, CompositionAnimation>,
    ) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl ICompositionAnimationGroup_Vtbl {
    pub const fn new<Identity: ICompositionAnimationGroup_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Count<
            Identity: ICompositionAnimationGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionAnimationGroup_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Add<
            Identity: ICompositionAnimationGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimationGroup_Impl::Add(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Remove<
            Identity: ICompositionAnimationGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimationGroup_Impl::Remove(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: ICompositionAnimationGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionAnimationGroup_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionAnimationGroup,
                OFFSET,
            >(),
            Count: Count::<Identity, OFFSET>,
            Add: Add::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionAnimationGroup as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationGroup_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Add: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionApiInformationStatics,
    ICompositionApiInformationStatics_Vtbl,
    0x85260ed3_365b_5e70_b79a_f9f1d10fa4b5
);
impl windows_core::RuntimeType for ICompositionApiInformationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionApiInformationStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionApiInformationStatics";
}
pub trait ICompositionApiInformationStatics_Impl: windows_core::IUnknownImpl {
    fn ApiVersion(&self) -> windows_core::Result<u64>;
}
impl ICompositionApiInformationStatics_Vtbl {
    pub const fn new<Identity: ICompositionApiInformationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ApiVersion<
            Identity: ICompositionApiInformationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionApiInformationStatics_Impl::ApiVersion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionApiInformationStatics,
                OFFSET,
            >(),
            ApiVersion: ApiVersion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionApiInformationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionApiInformationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ApiVersion:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionBackdropBrush,
    ICompositionBackdropBrush_Vtbl,
    0x6c866bb3_172a_570c_82ac_bf9848d99a59
);
impl windows_core::RuntimeType for ICompositionBackdropBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionBackdropBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionBackdropBrush";
}
pub trait ICompositionBackdropBrush_Impl: windows_core::IUnknownImpl {}
impl ICompositionBackdropBrush_Vtbl {
    pub const fn new<Identity: ICompositionBackdropBrush_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionBackdropBrush,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionBackdropBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBackdropBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionBatchCompletedEventArgs,
    ICompositionBatchCompletedEventArgs_Vtbl,
    0xac400334_4358_5fb0_bfc3_117fe581998f
);
impl windows_core::RuntimeType for ICompositionBatchCompletedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionBatchCompletedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionBatchCompletedEventArgs";
}
pub trait ICompositionBatchCompletedEventArgs_Impl: windows_core::IUnknownImpl {}
impl ICompositionBatchCompletedEventArgs_Vtbl {
    pub const fn new<Identity: ICompositionBatchCompletedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionBatchCompletedEventArgs,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionBatchCompletedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBatchCompletedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionBrush,
    ICompositionBrush_Vtbl,
    0x483924e7_99a5_5377_968b_dec6d40bbccd
);
impl windows_core::RuntimeType for ICompositionBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionBrush";
}
pub trait ICompositionBrush_Impl: windows_core::IUnknownImpl {}
impl ICompositionBrush_Vtbl {
    pub const fn new<Identity: ICompositionBrush_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionBrush, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionBrushFactory,
    ICompositionBrushFactory_Vtbl,
    0xabf2b354_7130_53d9_8324_365d7e02ede7
);
impl windows_core::RuntimeType for ICompositionBrushFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionBrushFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionBrushFactory";
}
pub trait ICompositionBrushFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionBrushFactory_Vtbl {
    pub const fn new<Identity: ICompositionBrushFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionBrushFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionBrushFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBrushFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionCapabilities,
    ICompositionCapabilities_Vtbl,
    0x7689bf12_75c0_52ea_81cb_463ed1c16c45
);
impl windows_core::RuntimeType for ICompositionCapabilities {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionCapabilities {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionCapabilities";
}
pub trait ICompositionCapabilities_Impl: windows_core::IUnknownImpl {
    fn AreEffectsSupported(&self) -> windows_core::Result<bool>;
    fn AreEffectsFast(&self) -> windows_core::Result<bool>;
    fn Changed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                CompositionCapabilities,
                windows_core::IInspectable,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl ICompositionCapabilities_Vtbl {
    pub const fn new<Identity: ICompositionCapabilities_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AreEffectsSupported<
            Identity: ICompositionCapabilities_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCapabilities_Impl::AreEffectsSupported(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AreEffectsFast<
            Identity: ICompositionCapabilities_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCapabilities_Impl::AreEffectsFast(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Changed<
            Identity: ICompositionCapabilities_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCapabilities_Impl::Changed(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveChanged<
            Identity: ICompositionCapabilities_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionCapabilities_Impl::RemoveChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionCapabilities,
                OFFSET,
            >(),
            AreEffectsSupported: AreEffectsSupported::<Identity, OFFSET>,
            AreEffectsFast: AreEffectsFast::<Identity, OFFSET>,
            Changed: Changed::<Identity, OFFSET>,
            RemoveChanged: RemoveChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionCapabilities as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionCapabilities_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AreEffectsSupported:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub AreEffectsFast:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Changed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionClip,
    ICompositionClip_Vtbl,
    0xb66b55cb_b5a5_5bee_8972_ae78233cb34c
);
impl windows_core::RuntimeType for ICompositionClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionClip {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionClip";
}
pub trait ICompositionClip_Impl: windows_core::IUnknownImpl {}
impl ICompositionClip_Vtbl {
    pub const fn new<Identity: ICompositionClip_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionClip, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionClip as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClip_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionClip2,
    ICompositionClip2_Vtbl,
    0xcdf6bf80_afd7_57dc_8148_6ccbbb5d78bb
);
impl windows_core::RuntimeType for ICompositionClip2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionClip2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionClip2";
}
pub trait ICompositionClip2_Impl: windows_core::IUnknownImpl {
    fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetAnchorPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCenterPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetScale(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2>;
    fn SetTransformMatrix(&self, value: &windows_numerics::Matrix3x2) -> windows_core::Result<()>;
}
impl ICompositionClip2_Vtbl {
    pub const fn new<Identity: ICompositionClip2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnchorPoint<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::AnchorPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAnchorPoint<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetAnchorPoint(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn CenterPoint<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::CenterPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterPoint<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetCenterPoint(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: ICompositionClip2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn RotationAngle<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn Scale<Identity: ICompositionClip2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TransformMatrix<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionClip2_Impl::TransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransformMatrix<
            Identity: ICompositionClip2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionClip2_Impl::SetTransformMatrix(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionClip2, OFFSET>(),
            AnchorPoint: AnchorPoint::<Identity, OFFSET>,
            SetAnchorPoint: SetAnchorPoint::<Identity, OFFSET>,
            CenterPoint: CenterPoint::<Identity, OFFSET>,
            SetCenterPoint: SetCenterPoint::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            TransformMatrix: TransformMatrix::<Identity, OFFSET>,
            SetTransformMatrix: SetTransformMatrix::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionClip2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClip2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionClipFactory,
    ICompositionClipFactory_Vtbl,
    0x611dec65_d302_52bc_92ab_a295bd141ae4
);
impl windows_core::RuntimeType for ICompositionClipFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionClipFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionClipFactory";
}
pub trait ICompositionClipFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionClipFactory_Vtbl {
    pub const fn new<Identity: ICompositionClipFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionClipFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionClipFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClipFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionColorBrush,
    ICompositionColorBrush_Vtbl,
    0x3f8ffb69_3e71_55a7_8e79_f27a214c56ae
);
impl windows_core::RuntimeType for ICompositionColorBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionColorBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionColorBrush";
}
pub trait ICompositionColorBrush_Impl: windows_core::IUnknownImpl {
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
}
impl ICompositionColorBrush_Vtbl {
    pub const fn new<Identity: ICompositionColorBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Color<
            Identity: ICompositionColorBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionColorBrush_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<
            Identity: ICompositionColorBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionColorBrush_Impl::SetColor(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionColorBrush, OFFSET>(
            ),
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionColorBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionColorGradientStop,
    ICompositionColorGradientStop_Vtbl,
    0x868030d8_c5c0_5dd8_a765_e32cd3497aa9
);
impl windows_core::RuntimeType for ICompositionColorGradientStop {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionColorGradientStop {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionColorGradientStop";
}
pub trait ICompositionColorGradientStop_Impl: windows_core::IUnknownImpl {
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<f32>;
    fn SetOffset(&self, value: f32) -> windows_core::Result<()>;
}
impl ICompositionColorGradientStop_Vtbl {
    pub const fn new<Identity: ICompositionColorGradientStop_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Color<
            Identity: ICompositionColorGradientStop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionColorGradientStop_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<
            Identity: ICompositionColorGradientStop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionColorGradientStop_Impl::SetColor(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Offset<
            Identity: ICompositionColorGradientStop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionColorGradientStop_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionColorGradientStop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionColorGradientStop_Impl::SetOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionColorGradientStop,
                OFFSET,
            >(),
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionColorGradientStop as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorGradientStop_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub Offset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionColorGradientStopCollection,
    ICompositionColorGradientStopCollection_Vtbl,
    0x4794cb29_ce9d_5837_9fc9_847df3e197de
);
impl windows_core::RuntimeType for ICompositionColorGradientStopCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionColorGradientStopCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionColorGradientStopCollection";
}
pub trait ICompositionColorGradientStopCollection_Impl: windows_core::IUnknownImpl {}
impl ICompositionColorGradientStopCollection_Vtbl {
    pub const fn new<
        Identity: ICompositionColorGradientStopCollection_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionColorGradientStopCollection,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionColorGradientStopCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorGradientStopCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionCommitBatch,
    ICompositionCommitBatch_Vtbl,
    0xc4550fa8_a7f2_5259_bf74_33b2f5240a28
);
impl windows_core::RuntimeType for ICompositionCommitBatch {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionCommitBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionCommitBatch";
}
pub trait ICompositionCommitBatch_Impl: windows_core::IUnknownImpl {
    fn IsActive(&self) -> windows_core::Result<bool>;
    fn IsEnded(&self) -> windows_core::Result<bool>;
    fn Completed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                windows_core::IInspectable,
                CompositionBatchCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()>;
}
impl ICompositionCommitBatch_Vtbl {
    pub const fn new<Identity: ICompositionCommitBatch_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsActive<
            Identity: ICompositionCommitBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCommitBatch_Impl::IsActive(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEnded<
            Identity: ICompositionCommitBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCommitBatch_Impl::IsEnded(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Completed<
            Identity: ICompositionCommitBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionCommitBatch_Impl::Completed(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCompleted<
            Identity: ICompositionCommitBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionCommitBatch_Impl::RemoveCompleted(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionCommitBatch, OFFSET>(
            ),
            IsActive: IsActive::<Identity, OFFSET>,
            IsEnded: IsEnded::<Identity, OFFSET>,
            Completed: Completed::<Identity, OFFSET>,
            RemoveCompleted: RemoveCompleted::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionCommitBatch as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionCommitBatch_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsActive:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsEnded:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionContainerShape,
    ICompositionContainerShape_Vtbl,
    0x064aabd5_2dab_52d3_824b_c72456540f29
);
impl windows_core::RuntimeType for ICompositionContainerShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionContainerShape {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionContainerShape";
}
pub trait ICompositionContainerShape_Impl: windows_core::IUnknownImpl {
    fn Shapes(&self) -> windows_core::Result<CompositionShapeCollection>;
}
impl ICompositionContainerShape_Vtbl {
    pub const fn new<Identity: ICompositionContainerShape_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Shapes<
            Identity: ICompositionContainerShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionContainerShape_Impl::Shapes(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionContainerShape,
                OFFSET,
            >(),
            Shapes: Shapes::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionContainerShape as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionContainerShape_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Shapes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionDrawingSurface,
    ICompositionDrawingSurface_Vtbl,
    0x216cab97_a2ee_5a29_ad6b_0bc2df4a1504
);
impl windows_core::RuntimeType for ICompositionDrawingSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionDrawingSurface";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionDrawingSurface_Impl: windows_core::IUnknownImpl {
    fn AlphaMode(&self) -> windows_core::Result<super::super::Graphics::DirectX::DirectXAlphaMode>;
    fn PixelFormat(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXPixelFormat>;
    fn Size(&self) -> windows_core::Result<windows::Foundation::Size>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionDrawingSurface_Vtbl {
    pub const fn new<Identity: ICompositionDrawingSurface_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AlphaMode<
            Identity: ICompositionDrawingSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Graphics::DirectX::DirectXAlphaMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionDrawingSurface_Impl::AlphaMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PixelFormat<
            Identity: ICompositionDrawingSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Graphics::DirectX::DirectXPixelFormat,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionDrawingSurface_Impl::PixelFormat(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Size<
            Identity: ICompositionDrawingSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Size,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionDrawingSurface_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionDrawingSurface,
                OFFSET,
            >(),
            AlphaMode: AlphaMode::<Identity, OFFSET>,
            PixelFormat: PixelFormat::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionDrawingSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub AlphaMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    AlphaMode: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub PixelFormat: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Graphics::DirectX::DirectXPixelFormat,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    PixelFormat: usize,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Size,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionDrawingSurface2,
    ICompositionDrawingSurface2_Vtbl,
    0x6be6f652_bec8_5adf_a6af_5acfc00a968e
);
impl windows_core::RuntimeType for ICompositionDrawingSurface2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionDrawingSurface2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionDrawingSurface2";
}
pub trait ICompositionDrawingSurface2_Impl: windows_core::IUnknownImpl {
    fn SizeInt32(&self) -> windows_core::Result<windows::Graphics::SizeInt32>;
    fn Resize(&self, sizePixels: &windows::Graphics::SizeInt32) -> windows_core::Result<()>;
    fn Scroll(&self, offset: &windows::Graphics::PointInt32) -> windows_core::Result<()>;
    fn ScrollRect(
        &self,
        offset: &windows::Graphics::PointInt32,
        scrollRect: &windows::Graphics::RectInt32,
    ) -> windows_core::Result<()>;
    fn ScrollWithClip(
        &self,
        offset: &windows::Graphics::PointInt32,
        clipRect: &windows::Graphics::RectInt32,
    ) -> windows_core::Result<()>;
    fn ScrollRectWithClip(
        &self,
        offset: &windows::Graphics::PointInt32,
        clipRect: &windows::Graphics::RectInt32,
        scrollRect: &windows::Graphics::RectInt32,
    ) -> windows_core::Result<()>;
}
impl ICompositionDrawingSurface2_Vtbl {
    pub const fn new<Identity: ICompositionDrawingSurface2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SizeInt32<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionDrawingSurface2_Impl::SizeInt32(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Resize<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sizepixels: windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionDrawingSurface2_Impl::Resize(this, core::mem::transmute(&sizepixels))
                    .into()
            }
        }
        unsafe extern "system" fn Scroll<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: windows::Graphics::PointInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionDrawingSurface2_Impl::Scroll(this, core::mem::transmute(&offset)).into()
            }
        }
        unsafe extern "system" fn ScrollRect<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: windows::Graphics::PointInt32,
            scrollrect: windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionDrawingSurface2_Impl::ScrollRect(
                    this,
                    core::mem::transmute(&offset),
                    core::mem::transmute(&scrollrect),
                )
                .into()
            }
        }
        unsafe extern "system" fn ScrollWithClip<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: windows::Graphics::PointInt32,
            cliprect: windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionDrawingSurface2_Impl::ScrollWithClip(
                    this,
                    core::mem::transmute(&offset),
                    core::mem::transmute(&cliprect),
                )
                .into()
            }
        }
        unsafe extern "system" fn ScrollRectWithClip<
            Identity: ICompositionDrawingSurface2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: windows::Graphics::PointInt32,
            cliprect: windows::Graphics::RectInt32,
            scrollrect: windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionDrawingSurface2_Impl::ScrollRectWithClip(
                    this,
                    core::mem::transmute(&offset),
                    core::mem::transmute(&cliprect),
                    core::mem::transmute(&scrollrect),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionDrawingSurface2,
                OFFSET,
            >(),
            SizeInt32: SizeInt32::<Identity, OFFSET>,
            Resize: Resize::<Identity, OFFSET>,
            Scroll: Scroll::<Identity, OFFSET>,
            ScrollRect: ScrollRect::<Identity, OFFSET>,
            ScrollWithClip: ScrollWithClip::<Identity, OFFSET>,
            ScrollRectWithClip: ScrollRectWithClip::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionDrawingSurface2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurface2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SizeInt32: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub Resize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub Scroll: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::PointInt32,
    ) -> windows_core::HRESULT,
    pub ScrollRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::PointInt32,
        windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
    pub ScrollWithClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::PointInt32,
        windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
    pub ScrollRectWithClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::PointInt32,
        windows::Graphics::RectInt32,
        windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionDrawingSurfaceFactory,
    ICompositionDrawingSurfaceFactory_Vtbl,
    0x4791e19a_c83b_58b0_ac86_dfc58494f5f9
);
impl windows_core::RuntimeType for ICompositionDrawingSurfaceFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionDrawingSurfaceFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionDrawingSurfaceFactory";
}
pub trait ICompositionDrawingSurfaceFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionDrawingSurfaceFactory_Vtbl {
    pub const fn new<Identity: ICompositionDrawingSurfaceFactory_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionDrawingSurfaceFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionDrawingSurfaceFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurfaceFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionEasingFunction,
    ICompositionEasingFunction_Vtbl,
    0x8e1ecd0d_57d8_5bc9_9bcd_e43d0dd733c4
);
impl windows_core::RuntimeType for ICompositionEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEasingFunction";
}
pub trait ICompositionEasingFunction_Impl: windows_core::IUnknownImpl {}
impl ICompositionEasingFunction_Vtbl {
    pub const fn new<Identity: ICompositionEasingFunction_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEasingFunction,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionEasingFunctionFactory,
    ICompositionEasingFunctionFactory_Vtbl,
    0x7d7d32c3_574b_5620_9902_db426851802f
);
impl windows_core::RuntimeType for ICompositionEasingFunctionFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEasingFunctionFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEasingFunctionFactory";
}
pub trait ICompositionEasingFunctionFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionEasingFunctionFactory_Vtbl {
    pub const fn new<Identity: ICompositionEasingFunctionFactory_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEasingFunctionFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEasingFunctionFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunctionFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionEasingFunctionStatics,
    ICompositionEasingFunctionStatics_Vtbl,
    0x9d4b87ff_6dca_5ce2_b69c_e52705b0fef4
);
impl windows_core::RuntimeType for ICompositionEasingFunctionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEasingFunctionStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEasingFunctionStatics";
}
pub trait ICompositionEasingFunctionStatics_Impl: windows_core::IUnknownImpl {
    fn CreateCubicBezierEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        controlPoint1: &windows_numerics::Vector2,
        controlPoint2: &windows_numerics::Vector2,
    ) -> windows_core::Result<CubicBezierEasingFunction>;
    fn CreateLinearEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
    ) -> windows_core::Result<LinearEasingFunction>;
    fn CreateStepEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
    ) -> windows_core::Result<StepEasingFunction>;
    fn CreateStepEasingFunctionWithStepCount(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        stepCount: i32,
    ) -> windows_core::Result<StepEasingFunction>;
    fn CreateBackEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
        amplitude: f32,
    ) -> windows_core::Result<BackEasingFunction>;
    fn CreateBounceEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
        bounces: i32,
        bounciness: f32,
    ) -> windows_core::Result<BounceEasingFunction>;
    fn CreateCircleEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
    ) -> windows_core::Result<CircleEasingFunction>;
    fn CreateElasticEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
        oscillations: i32,
        springiness: f32,
    ) -> windows_core::Result<ElasticEasingFunction>;
    fn CreateExponentialEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
        exponent: f32,
    ) -> windows_core::Result<ExponentialEasingFunction>;
    fn CreatePowerEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
        power: f32,
    ) -> windows_core::Result<PowerEasingFunction>;
    fn CreateSineEasingFunction(
        &self,
        owner: windows_core::Ref<'_, Compositor>,
        mode: CompositionEasingFunctionMode,
    ) -> windows_core::Result<SineEasingFunction>;
}
impl ICompositionEasingFunctionStatics_Vtbl {
    pub const fn new<Identity: ICompositionEasingFunctionStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateCubicBezierEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            controlpoint1: windows_numerics::Vector2,
            controlpoint2: windows_numerics::Vector2,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateCubicBezierEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    core::mem::transmute(&controlpoint1),
                    core::mem::transmute(&controlpoint2),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateLinearEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateLinearEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateStepEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateStepEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateStepEasingFunctionWithStepCount<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            stepcount: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateStepEasingFunctionWithStepCount(
                    this,
                    core::mem::transmute_copy(&owner),
                    stepcount,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBackEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            amplitude: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateBackEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                    amplitude,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBounceEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            bounces: i32,
            bounciness: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateBounceEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                    bounces,
                    bounciness,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateCircleEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateCircleEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateElasticEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            oscillations: i32,
            springiness: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateElasticEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                    oscillations,
                    springiness,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateExponentialEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            exponent: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateExponentialEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                    exponent,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePowerEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            power: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreatePowerEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                    power,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSineEasingFunction<
            Identity: ICompositionEasingFunctionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            mode: CompositionEasingFunctionMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEasingFunctionStatics_Impl::CreateSineEasingFunction(
                    this,
                    core::mem::transmute_copy(&owner),
                    mode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEasingFunctionStatics,
                OFFSET,
            >(),
            CreateCubicBezierEasingFunction: CreateCubicBezierEasingFunction::<Identity, OFFSET>,
            CreateLinearEasingFunction: CreateLinearEasingFunction::<Identity, OFFSET>,
            CreateStepEasingFunction: CreateStepEasingFunction::<Identity, OFFSET>,
            CreateStepEasingFunctionWithStepCount: CreateStepEasingFunctionWithStepCount::<
                Identity,
                OFFSET,
            >,
            CreateBackEasingFunction: CreateBackEasingFunction::<Identity, OFFSET>,
            CreateBounceEasingFunction: CreateBounceEasingFunction::<Identity, OFFSET>,
            CreateCircleEasingFunction: CreateCircleEasingFunction::<Identity, OFFSET>,
            CreateElasticEasingFunction: CreateElasticEasingFunction::<Identity, OFFSET>,
            CreateExponentialEasingFunction: CreateExponentialEasingFunction::<Identity, OFFSET>,
            CreatePowerEasingFunction: CreatePowerEasingFunction::<Identity, OFFSET>,
            CreateSineEasingFunction: CreateSineEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEasingFunctionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunctionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateCubicBezierEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
        windows_numerics::Vector2,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateLinearEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateStepEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateStepEasingFunctionWithStepCount: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub CreateBackEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBounceEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        i32,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateCircleEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateElasticEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        i32,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateExponentialEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePowerEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSineEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        CompositionEasingFunctionMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionEffectBrush,
    ICompositionEffectBrush_Vtbl,
    0x62e0bbab_1f45_5a44_9ddf_f0c38a02ed85
);
impl windows_core::RuntimeType for ICompositionEffectBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEffectBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEffectBrush";
}
pub trait ICompositionEffectBrush_Impl: windows_core::IUnknownImpl {
    fn GetSourceParameter(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CompositionBrush>;
    fn SetSourceParameter(
        &self,
        name: &windows_core::HSTRING,
        source: windows_core::Ref<'_, CompositionBrush>,
    ) -> windows_core::Result<()>;
}
impl ICompositionEffectBrush_Vtbl {
    pub const fn new<Identity: ICompositionEffectBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetSourceParameter<
            Identity: ICompositionEffectBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectBrush_Impl::GetSourceParameter(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSourceParameter<
            Identity: ICompositionEffectBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionEffectBrush_Impl::SetSourceParameter(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute_copy(&source),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionEffectBrush, OFFSET>(
            ),
            GetSourceParameter: GetSourceParameter::<Identity, OFFSET>,
            SetSourceParameter: SetSourceParameter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEffectBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetSourceParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSourceParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionEffectFactory,
    ICompositionEffectFactory_Vtbl,
    0xc50f407a_0231_5ed2_b7a7_ca66d3e14b3b
);
impl windows_core::RuntimeType for ICompositionEffectFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEffectFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEffectFactory";
}
pub trait ICompositionEffectFactory_Impl: windows_core::IUnknownImpl {
    fn CreateBrush(&self) -> windows_core::Result<CompositionEffectBrush>;
    fn ExtendedError(&self) -> windows_core::Result<windows_core::HRESULT>;
    fn LoadStatus(&self) -> windows_core::Result<CompositionEffectFactoryLoadStatus>;
}
impl ICompositionEffectFactory_Vtbl {
    pub const fn new<Identity: ICompositionEffectFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateBrush<
            Identity: ICompositionEffectFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectFactory_Impl::CreateBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExtendedError<
            Identity: ICompositionEffectFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectFactory_Impl::ExtendedError(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LoadStatus<
            Identity: ICompositionEffectFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEffectFactoryLoadStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectFactory_Impl::LoadStatus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEffectFactory,
                OFFSET,
            >(),
            CreateBrush: CreateBrush::<Identity, OFFSET>,
            ExtendedError: ExtendedError::<Identity, OFFSET>,
            LoadStatus: LoadStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEffectFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExtendedError: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub LoadStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEffectFactoryLoadStatus,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionEffectSourceParameter,
    ICompositionEffectSourceParameter_Vtbl,
    0xbece3367_5704_59f7_be8c_d6293af9c95f
);
impl windows_core::RuntimeType for ICompositionEffectSourceParameter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEffectSourceParameter {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEffectSourceParameter";
}
pub trait ICompositionEffectSourceParameter_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl ICompositionEffectSourceParameter_Vtbl {
    pub const fn new<Identity: ICompositionEffectSourceParameter_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Name<
            Identity: ICompositionEffectSourceParameter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectSourceParameter_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEffectSourceParameter,
                OFFSET,
            >(),
            Name: Name::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEffectSourceParameter as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectSourceParameter_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionEffectSourceParameterFactory,
    ICompositionEffectSourceParameterFactory_Vtbl,
    0x26185954_4489_5d0e_ae4d_7bc4bbbc6161
);
impl windows_core::RuntimeType for ICompositionEffectSourceParameterFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEffectSourceParameterFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEffectSourceParameterFactory";
}
pub trait ICompositionEffectSourceParameterFactory_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<CompositionEffectSourceParameter>;
}
impl ICompositionEffectSourceParameterFactory_Vtbl {
    pub const fn new<
        Identity: ICompositionEffectSourceParameterFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Create<
            Identity: ICompositionEffectSourceParameterFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEffectSourceParameterFactory_Impl::Create(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEffectSourceParameterFactory,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEffectSourceParameterFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectSourceParameterFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionEllipseGeometry,
    ICompositionEllipseGeometry_Vtbl,
    0xf2a21042_7a57_58c1_8b47_8bc8b21d3aa0
);
impl windows_core::RuntimeType for ICompositionEllipseGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionEllipseGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionEllipseGeometry";
}
pub trait ICompositionEllipseGeometry_Impl: windows_core::IUnknownImpl {
    fn Center(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCenter(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Radius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionEllipseGeometry_Vtbl {
    pub const fn new<Identity: ICompositionEllipseGeometry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Center<
            Identity: ICompositionEllipseGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEllipseGeometry_Impl::Center(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenter<
            Identity: ICompositionEllipseGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionEllipseGeometry_Impl::SetCenter(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Radius<
            Identity: ICompositionEllipseGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionEllipseGeometry_Impl::Radius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRadius<
            Identity: ICompositionEllipseGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionEllipseGeometry_Impl::SetRadius(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionEllipseGeometry,
                OFFSET,
            >(),
            Center: Center::<Identity, OFFSET>,
            SetCenter: SetCenter::<Identity, OFFSET>,
            Radius: Radius::<Identity, OFFSET>,
            SetRadius: SetRadius::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionEllipseGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEllipseGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Center: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCenter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Radius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGeometricClip,
    ICompositionGeometricClip_Vtbl,
    0xe3c0a8c5_5297_5d69_8b91_f5330bb1cb27
);
impl windows_core::RuntimeType for ICompositionGeometricClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGeometricClip {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGeometricClip";
}
pub trait ICompositionGeometricClip_Impl: windows_core::IUnknownImpl {
    fn Geometry(&self) -> windows_core::Result<CompositionGeometry>;
    fn SetGeometry(
        &self,
        value: windows_core::Ref<'_, CompositionGeometry>,
    ) -> windows_core::Result<()>;
    fn ViewBox(&self) -> windows_core::Result<CompositionViewBox>;
    fn SetViewBox(
        &self,
        value: windows_core::Ref<'_, CompositionViewBox>,
    ) -> windows_core::Result<()>;
}
impl ICompositionGeometricClip_Vtbl {
    pub const fn new<Identity: ICompositionGeometricClip_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Geometry<
            Identity: ICompositionGeometricClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGeometricClip_Impl::Geometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetGeometry<
            Identity: ICompositionGeometricClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGeometricClip_Impl::SetGeometry(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ViewBox<
            Identity: ICompositionGeometricClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGeometricClip_Impl::ViewBox(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetViewBox<
            Identity: ICompositionGeometricClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGeometricClip_Impl::SetViewBox(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGeometricClip,
                OFFSET,
            >(),
            Geometry: Geometry::<Identity, OFFSET>,
            SetGeometry: SetGeometry::<Identity, OFFSET>,
            ViewBox: ViewBox::<Identity, OFFSET>,
            SetViewBox: SetViewBox::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGeometricClip as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometricClip_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Geometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ViewBox: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetViewBox: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGeometry,
    ICompositionGeometry_Vtbl,
    0x4e40bdb2_450b_5a81_9e9b_149417980cc4
);
impl windows_core::RuntimeType for ICompositionGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGeometry";
}
pub trait ICompositionGeometry_Impl: windows_core::IUnknownImpl {
    fn TrimEnd(&self) -> windows_core::Result<f32>;
    fn SetTrimEnd(&self, value: f32) -> windows_core::Result<()>;
    fn TrimOffset(&self) -> windows_core::Result<f32>;
    fn SetTrimOffset(&self, value: f32) -> windows_core::Result<()>;
    fn TrimStart(&self) -> windows_core::Result<f32>;
    fn SetTrimStart(&self, value: f32) -> windows_core::Result<()>;
}
impl ICompositionGeometry_Vtbl {
    pub const fn new<Identity: ICompositionGeometry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TrimEnd<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGeometry_Impl::TrimEnd(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTrimEnd<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGeometry_Impl::SetTrimEnd(this, value).into()
            }
        }
        unsafe extern "system" fn TrimOffset<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGeometry_Impl::TrimOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTrimOffset<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGeometry_Impl::SetTrimOffset(this, value).into()
            }
        }
        unsafe extern "system" fn TrimStart<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGeometry_Impl::TrimStart(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTrimStart<
            Identity: ICompositionGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGeometry_Impl::SetTrimStart(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionGeometry, OFFSET>(
            ),
            TrimEnd: TrimEnd::<Identity, OFFSET>,
            SetTrimEnd: SetTrimEnd::<Identity, OFFSET>,
            TrimOffset: TrimOffset::<Identity, OFFSET>,
            SetTrimOffset: SetTrimOffset::<Identity, OFFSET>,
            TrimStart: TrimStart::<Identity, OFFSET>,
            SetTrimStart: SetTrimStart::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TrimEnd:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTrimEnd: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub TrimOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTrimOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub TrimStart:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTrimStart:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGeometryFactory,
    ICompositionGeometryFactory_Vtbl,
    0xb2fb802b_c691_5554_8312_9c6d358d6b9e
);
impl windows_core::RuntimeType for ICompositionGeometryFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGeometryFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGeometryFactory";
}
pub trait ICompositionGeometryFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionGeometryFactory_Vtbl {
    pub const fn new<Identity: ICompositionGeometryFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGeometryFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGeometryFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometryFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionGradientBrush,
    ICompositionGradientBrush_Vtbl,
    0x9165d1fb_c738_5f44_addc_309ee071d588
);
impl windows_core::RuntimeType for ICompositionGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGradientBrush";
}
pub trait ICompositionGradientBrush_Impl: windows_core::IUnknownImpl {
    fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetAnchorPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCenterPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn ColorStops(&self) -> windows_core::Result<CompositionColorGradientStopCollection>;
    fn ExtendMode(&self) -> windows_core::Result<CompositionGradientExtendMode>;
    fn SetExtendMode(&self, value: CompositionGradientExtendMode) -> windows_core::Result<()>;
    fn InterpolationSpace(&self) -> windows_core::Result<CompositionColorSpace>;
    fn SetInterpolationSpace(&self, value: CompositionColorSpace) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetScale(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2>;
    fn SetTransformMatrix(&self, value: &windows_numerics::Matrix3x2) -> windows_core::Result<()>;
}
impl ICompositionGradientBrush_Vtbl {
    pub const fn new<Identity: ICompositionGradientBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnchorPoint<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::AnchorPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAnchorPoint<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetAnchorPoint(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn CenterPoint<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::CenterPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterPoint<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetCenterPoint(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ColorStops<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::ColorStops(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExtendMode<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionGradientExtendMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::ExtendMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExtendMode<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionGradientExtendMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetExtendMode(this, value).into()
            }
        }
        unsafe extern "system" fn InterpolationSpace<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionColorSpace,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::InterpolationSpace(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInterpolationSpace<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionColorSpace,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetInterpolationSpace(this, value).into()
            }
        }
        unsafe extern "system" fn Offset<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn RotationAngle<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn Scale<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TransformMatrix<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush_Impl::TransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransformMatrix<
            Identity: ICompositionGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush_Impl::SetTransformMatrix(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGradientBrush,
                OFFSET,
            >(),
            AnchorPoint: AnchorPoint::<Identity, OFFSET>,
            SetAnchorPoint: SetAnchorPoint::<Identity, OFFSET>,
            CenterPoint: CenterPoint::<Identity, OFFSET>,
            SetCenterPoint: SetCenterPoint::<Identity, OFFSET>,
            ColorStops: ColorStops::<Identity, OFFSET>,
            ExtendMode: ExtendMode::<Identity, OFFSET>,
            SetExtendMode: SetExtendMode::<Identity, OFFSET>,
            InterpolationSpace: InterpolationSpace::<Identity, OFFSET>,
            SetInterpolationSpace: SetInterpolationSpace::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            TransformMatrix: TransformMatrix::<Identity, OFFSET>,
            SetTransformMatrix: SetTransformMatrix::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGradientBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ColorStops: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExtendMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionGradientExtendMode,
    ) -> windows_core::HRESULT,
    pub SetExtendMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionGradientExtendMode,
    ) -> windows_core::HRESULT,
    pub InterpolationSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionColorSpace,
    ) -> windows_core::HRESULT,
    pub SetInterpolationSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionColorSpace,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGradientBrush2,
    ICompositionGradientBrush2_Vtbl,
    0x03e9edf3_ee3d_58fc_8c0b_95e4b6060a94
);
impl windows_core::RuntimeType for ICompositionGradientBrush2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGradientBrush2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGradientBrush2";
}
pub trait ICompositionGradientBrush2_Impl: windows_core::IUnknownImpl {
    fn MappingMode(&self) -> windows_core::Result<CompositionMappingMode>;
    fn SetMappingMode(&self, value: CompositionMappingMode) -> windows_core::Result<()>;
}
impl ICompositionGradientBrush2_Vtbl {
    pub const fn new<Identity: ICompositionGradientBrush2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MappingMode<
            Identity: ICompositionGradientBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionMappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGradientBrush2_Impl::MappingMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMappingMode<
            Identity: ICompositionGradientBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionMappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGradientBrush2_Impl::SetMappingMode(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGradientBrush2,
                OFFSET,
            >(),
            MappingMode: MappingMode::<Identity, OFFSET>,
            SetMappingMode: SetMappingMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGradientBrush2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrush2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MappingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionMappingMode,
    ) -> windows_core::HRESULT,
    pub SetMappingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionMappingMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGradientBrushFactory,
    ICompositionGradientBrushFactory_Vtbl,
    0xb043b155_4b40_590d_a0d9_f8c1a7e0c88f
);
impl windows_core::RuntimeType for ICompositionGradientBrushFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionGradientBrushFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGradientBrushFactory";
}
pub trait ICompositionGradientBrushFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionGradientBrushFactory_Vtbl {
    pub const fn new<Identity: ICompositionGradientBrushFactory_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGradientBrushFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGradientBrushFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrushFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionGraphicsDevice,
    ICompositionGraphicsDevice_Vtbl,
    0x3d47e3f5_f76c_5f1f_88c0_54a5f2a090d6
);
impl windows_core::RuntimeType for ICompositionGraphicsDevice {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionGraphicsDevice {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGraphicsDevice";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionGraphicsDevice_Impl: windows_core::IUnknownImpl {
    fn CreateDrawingSurface(
        &self,
        sizePixels: &windows::Foundation::Size,
        pixelFormat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphaMode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionDrawingSurface>;
    fn RenderingDeviceReplaced(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                CompositionGraphicsDevice,
                RenderingDeviceReplacedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveRenderingDeviceReplaced(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionGraphicsDevice_Vtbl {
    pub const fn new<Identity: ICompositionGraphicsDevice_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateDrawingSurface<
            Identity: ICompositionGraphicsDevice_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sizepixels: windows::Foundation::Size,
            pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
            alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice_Impl::CreateDrawingSurface(
                    this,
                    core::mem::transmute(&sizepixels),
                    pixelformat,
                    alphamode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RenderingDeviceReplaced<
            Identity: ICompositionGraphicsDevice_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice_Impl::RenderingDeviceReplaced(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveRenderingDeviceReplaced<
            Identity: ICompositionGraphicsDevice_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGraphicsDevice_Impl::RemoveRenderingDeviceReplaced(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGraphicsDevice,
                OFFSET,
            >(),
            CreateDrawingSurface: CreateDrawingSurface::<Identity, OFFSET>,
            RenderingDeviceReplaced: RenderingDeviceReplaced::<Identity, OFFSET>,
            RemoveRenderingDeviceReplaced: RemoveRenderingDeviceReplaced::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGraphicsDevice as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateDrawingSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Size,
        super::super::Graphics::DirectX::DirectXPixelFormat,
        super::super::Graphics::DirectX::DirectXAlphaMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateDrawingSurface: usize,
    pub RenderingDeviceReplaced: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveRenderingDeviceReplaced:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGraphicsDevice2,
    ICompositionGraphicsDevice2_Vtbl,
    0xffd56707_1c7a_5da0_aa1a_49cb935b5dca
);
impl windows_core::RuntimeType for ICompositionGraphicsDevice2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionGraphicsDevice2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGraphicsDevice2";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionGraphicsDevice2_Impl: windows_core::IUnknownImpl {
    fn CreateDrawingSurface2(
        &self,
        sizePixels: &windows::Graphics::SizeInt32,
        pixelFormat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphaMode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionDrawingSurface>;
    fn CreateVirtualDrawingSurface(
        &self,
        sizePixels: &windows::Graphics::SizeInt32,
        pixelFormat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphaMode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionVirtualDrawingSurface>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionGraphicsDevice2_Vtbl {
    pub const fn new<Identity: ICompositionGraphicsDevice2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateDrawingSurface2<
            Identity: ICompositionGraphicsDevice2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sizepixels: windows::Graphics::SizeInt32,
            pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
            alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice2_Impl::CreateDrawingSurface2(
                    this,
                    core::mem::transmute(&sizepixels),
                    pixelformat,
                    alphamode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateVirtualDrawingSurface<
            Identity: ICompositionGraphicsDevice2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sizepixels: windows::Graphics::SizeInt32,
            pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
            alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice2_Impl::CreateVirtualDrawingSurface(
                    this,
                    core::mem::transmute(&sizepixels),
                    pixelformat,
                    alphamode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGraphicsDevice2,
                OFFSET,
            >(),
            CreateDrawingSurface2: CreateDrawingSurface2::<Identity, OFFSET>,
            CreateVirtualDrawingSurface: CreateVirtualDrawingSurface::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGraphicsDevice2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateDrawingSurface2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
        super::super::Graphics::DirectX::DirectXPixelFormat,
        super::super::Graphics::DirectX::DirectXAlphaMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateDrawingSurface2: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateVirtualDrawingSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
        super::super::Graphics::DirectX::DirectXPixelFormat,
        super::super::Graphics::DirectX::DirectXAlphaMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateVirtualDrawingSurface: usize,
}
windows_core::imp::define_interface!(
    ICompositionGraphicsDevice3,
    ICompositionGraphicsDevice3_Vtbl,
    0xfbbef487_d5a4_5db2_bf3e_9f488e659d11
);
impl windows_core::RuntimeType for ICompositionGraphicsDevice3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionGraphicsDevice3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGraphicsDevice3";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionGraphicsDevice3_Impl: windows_core::IUnknownImpl {
    fn CreateMipmapSurface(
        &self,
        sizePixels: &windows::Graphics::SizeInt32,
        pixelFormat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphaMode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::Result<CompositionMipmapSurface>;
    fn Trim(&self) -> windows_core::Result<()>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionGraphicsDevice3_Vtbl {
    pub const fn new<Identity: ICompositionGraphicsDevice3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateMipmapSurface<
            Identity: ICompositionGraphicsDevice3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sizepixels: windows::Graphics::SizeInt32,
            pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
            alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice3_Impl::CreateMipmapSurface(
                    this,
                    core::mem::transmute(&sizepixels),
                    pixelformat,
                    alphamode,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Trim<
            Identity: ICompositionGraphicsDevice3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionGraphicsDevice3_Impl::Trim(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGraphicsDevice3,
                OFFSET,
            >(),
            CreateMipmapSurface: CreateMipmapSurface::<Identity, OFFSET>,
            Trim: Trim::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGraphicsDevice3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateMipmapSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
        super::super::Graphics::DirectX::DirectXPixelFormat,
        super::super::Graphics::DirectX::DirectXAlphaMode,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateMipmapSurface: usize,
    pub Trim: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionGraphicsDevice4,
    ICompositionGraphicsDevice4_Vtbl,
    0x2b295c04_7b2e_5b0e_9762_2992313b700c
);
impl windows_core::RuntimeType for ICompositionGraphicsDevice4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionGraphicsDevice4 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionGraphicsDevice4";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionGraphicsDevice4_Impl: windows_core::IUnknownImpl {
    fn CaptureAsync(
        &self,
        captureVisual: windows_core::Ref<'_, Visual>,
        size: &windows::Graphics::SizeInt32,
        pixelFormat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphaMode: super::super::Graphics::DirectX::DirectXAlphaMode,
        sdrBoost: f32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<ICompositionSurface>>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionGraphicsDevice4_Vtbl {
    pub const fn new<Identity: ICompositionGraphicsDevice4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CaptureAsync<
            Identity: ICompositionGraphicsDevice4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            capturevisual: *mut core::ffi::c_void,
            size: windows::Graphics::SizeInt32,
            pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
            alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
            sdrboost: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionGraphicsDevice4_Impl::CaptureAsync(
                    this,
                    core::mem::transmute_copy(&capturevisual),
                    core::mem::transmute(&size),
                    pixelformat,
                    alphamode,
                    sdrboost,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionGraphicsDevice4,
                OFFSET,
            >(),
            CaptureAsync: CaptureAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionGraphicsDevice4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CaptureAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
        super::super::Graphics::DirectX::DirectXPixelFormat,
        super::super::Graphics::DirectX::DirectXAlphaMode,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CaptureAsync: usize,
}
windows_core::imp::define_interface!(
    ICompositionLight,
    ICompositionLight_Vtbl,
    0x6d633e77_a6b8_5a2d_8235_e0c380c3b47b
);
impl windows_core::RuntimeType for ICompositionLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLight {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLight";
}
pub trait ICompositionLight_Impl: windows_core::IUnknownImpl {
    fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection>;
}
impl ICompositionLight_Vtbl {
    pub const fn new<Identity: ICompositionLight_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Targets<Identity: ICompositionLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLight_Impl::Targets(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionLight, OFFSET>(),
            Targets: Targets::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLight as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Targets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionLight2,
    ICompositionLight2_Vtbl,
    0x0bb940a4_05ef_5920_bae1_918b36d44380
);
impl windows_core::RuntimeType for ICompositionLight2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLight2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLight2";
}
pub trait ICompositionLight2_Impl: windows_core::IUnknownImpl {
    fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection>;
}
impl ICompositionLight2_Vtbl {
    pub const fn new<Identity: ICompositionLight2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ExclusionsFromTargets<
            Identity: ICompositionLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLight2_Impl::ExclusionsFromTargets(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionLight2, OFFSET>(),
            ExclusionsFromTargets: ExclusionsFromTargets::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLight2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExclusionsFromTargets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionLight3,
    ICompositionLight3_Vtbl,
    0x95ce4859_dd55_5c38_a3eb_13d053cebb1e
);
impl windows_core::RuntimeType for ICompositionLight3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLight3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLight3";
}
pub trait ICompositionLight3_Impl: windows_core::IUnknownImpl {
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICompositionLight3_Vtbl {
    pub const fn new<Identity: ICompositionLight3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsEnabled<
            Identity: ICompositionLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLight3_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsEnabled<
            Identity: ICompositionLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionLight3_Impl::SetIsEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionLight3, OFFSET>(),
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            SetIsEnabled: SetIsEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLight3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionLightFactory,
    ICompositionLightFactory_Vtbl,
    0xcb29caed_9245_51a6_ba56_addbaefa54cc
);
impl windows_core::RuntimeType for ICompositionLightFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLightFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLightFactory";
}
pub trait ICompositionLightFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionLightFactory_Vtbl {
    pub const fn new<Identity: ICompositionLightFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionLightFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLightFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLightFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionLineGeometry,
    ICompositionLineGeometry_Vtbl,
    0x489f9382_c186_5936_8946_c4f927e844aa
);
impl windows_core::RuntimeType for ICompositionLineGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLineGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLineGeometry";
}
pub trait ICompositionLineGeometry_Impl: windows_core::IUnknownImpl {
    fn Start(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetStart(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn End(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetEnd(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionLineGeometry_Vtbl {
    pub const fn new<Identity: ICompositionLineGeometry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Start<
            Identity: ICompositionLineGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLineGeometry_Impl::Start(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStart<
            Identity: ICompositionLineGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionLineGeometry_Impl::SetStart(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn End<
            Identity: ICompositionLineGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLineGeometry_Impl::End(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnd<
            Identity: ICompositionLineGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionLineGeometry_Impl::SetEnd(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionLineGeometry,
                OFFSET,
            >(),
            Start: Start::<Identity, OFFSET>,
            SetStart: SetStart::<Identity, OFFSET>,
            End: End::<Identity, OFFSET>,
            SetEnd: SetEnd::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLineGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLineGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Start: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetStart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub End: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetEnd: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionLinearGradientBrush,
    ICompositionLinearGradientBrush_Vtbl,
    0xf726fb52_270c_58b1_a902_89576772dedc
);
impl windows_core::RuntimeType for ICompositionLinearGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionLinearGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionLinearGradientBrush";
}
pub trait ICompositionLinearGradientBrush_Impl: windows_core::IUnknownImpl {
    fn EndPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetEndPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn StartPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetStartPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionLinearGradientBrush_Vtbl {
    pub const fn new<Identity: ICompositionLinearGradientBrush_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn EndPoint<
            Identity: ICompositionLinearGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLinearGradientBrush_Impl::EndPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEndPoint<
            Identity: ICompositionLinearGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionLinearGradientBrush_Impl::SetEndPoint(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn StartPoint<
            Identity: ICompositionLinearGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionLinearGradientBrush_Impl::StartPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStartPoint<
            Identity: ICompositionLinearGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionLinearGradientBrush_Impl::SetStartPoint(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionLinearGradientBrush,
                OFFSET,
            >(),
            EndPoint: EndPoint::<Identity, OFFSET>,
            SetEndPoint: SetEndPoint::<Identity, OFFSET>,
            StartPoint: StartPoint::<Identity, OFFSET>,
            SetStartPoint: SetStartPoint::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionLinearGradientBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLinearGradientBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EndPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetEndPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub StartPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetStartPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionMaskBrush,
    ICompositionMaskBrush_Vtbl,
    0xc9502786_65aa_5be5_a679_c3b5dbfb0dc6
);
impl windows_core::RuntimeType for ICompositionMaskBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionMaskBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionMaskBrush";
}
pub trait ICompositionMaskBrush_Impl: windows_core::IUnknownImpl {
    fn Mask(&self) -> windows_core::Result<CompositionBrush>;
    fn SetMask(&self, value: windows_core::Ref<'_, CompositionBrush>) -> windows_core::Result<()>;
    fn Source(&self) -> windows_core::Result<CompositionBrush>;
    fn SetSource(&self, value: windows_core::Ref<'_, CompositionBrush>)
        -> windows_core::Result<()>;
}
impl ICompositionMaskBrush_Vtbl {
    pub const fn new<Identity: ICompositionMaskBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mask<
            Identity: ICompositionMaskBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMaskBrush_Impl::Mask(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMask<
            Identity: ICompositionMaskBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionMaskBrush_Impl::SetMask(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Source<
            Identity: ICompositionMaskBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMaskBrush_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<
            Identity: ICompositionMaskBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionMaskBrush_Impl::SetSource(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionMaskBrush, OFFSET>(
            ),
            Mask: Mask::<Identity, OFFSET>,
            SetMask: SetMask::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionMaskBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionMaskBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionMipmapSurface,
    ICompositionMipmapSurface_Vtbl,
    0x681f1e47_6e43_5b55_be3a_e5c858a2d5fa
);
impl windows_core::RuntimeType for ICompositionMipmapSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ICompositionMipmapSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionMipmapSurface";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ICompositionMipmapSurface_Impl: windows_core::IUnknownImpl {
    fn LevelCount(&self) -> windows_core::Result<u32>;
    fn AlphaMode(&self) -> windows_core::Result<super::super::Graphics::DirectX::DirectXAlphaMode>;
    fn PixelFormat(
        &self,
    ) -> windows_core::Result<super::super::Graphics::DirectX::DirectXPixelFormat>;
    fn SizeInt32(&self) -> windows_core::Result<windows::Graphics::SizeInt32>;
    fn GetDrawingSurfaceForLevel(
        &self,
        level: u32,
    ) -> windows_core::Result<CompositionDrawingSurface>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ICompositionMipmapSurface_Vtbl {
    pub const fn new<Identity: ICompositionMipmapSurface_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LevelCount<
            Identity: ICompositionMipmapSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMipmapSurface_Impl::LevelCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AlphaMode<
            Identity: ICompositionMipmapSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Graphics::DirectX::DirectXAlphaMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMipmapSurface_Impl::AlphaMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PixelFormat<
            Identity: ICompositionMipmapSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Graphics::DirectX::DirectXPixelFormat,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMipmapSurface_Impl::PixelFormat(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SizeInt32<
            Identity: ICompositionMipmapSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMipmapSurface_Impl::SizeInt32(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDrawingSurfaceForLevel<
            Identity: ICompositionMipmapSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            level: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionMipmapSurface_Impl::GetDrawingSurfaceForLevel(this, level) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionMipmapSurface,
                OFFSET,
            >(),
            LevelCount: LevelCount::<Identity, OFFSET>,
            AlphaMode: AlphaMode::<Identity, OFFSET>,
            PixelFormat: PixelFormat::<Identity, OFFSET>,
            SizeInt32: SizeInt32::<Identity, OFFSET>,
            GetDrawingSurfaceForLevel: GetDrawingSurfaceForLevel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionMipmapSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionMipmapSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LevelCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    #[cfg(feature = "Graphics_DirectX")]
    pub AlphaMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    AlphaMode: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub PixelFormat: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Graphics::DirectX::DirectXPixelFormat,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    PixelFormat: usize,
    pub SizeInt32: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub GetDrawingSurfaceForLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionNineGridBrush,
    ICompositionNineGridBrush_Vtbl,
    0xc77a3d21_c7ee_517a_98f4_ad9a7202bc86
);
impl windows_core::RuntimeType for ICompositionNineGridBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionNineGridBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionNineGridBrush";
}
pub trait ICompositionNineGridBrush_Impl: windows_core::IUnknownImpl {
    fn BottomInset(&self) -> windows_core::Result<f32>;
    fn SetBottomInset(&self, value: f32) -> windows_core::Result<()>;
    fn BottomInsetScale(&self) -> windows_core::Result<f32>;
    fn SetBottomInsetScale(&self, value: f32) -> windows_core::Result<()>;
    fn IsCenterHollow(&self) -> windows_core::Result<bool>;
    fn SetIsCenterHollow(&self, value: bool) -> windows_core::Result<()>;
    fn LeftInset(&self) -> windows_core::Result<f32>;
    fn SetLeftInset(&self, value: f32) -> windows_core::Result<()>;
    fn LeftInsetScale(&self) -> windows_core::Result<f32>;
    fn SetLeftInsetScale(&self, value: f32) -> windows_core::Result<()>;
    fn RightInset(&self) -> windows_core::Result<f32>;
    fn SetRightInset(&self, value: f32) -> windows_core::Result<()>;
    fn RightInsetScale(&self) -> windows_core::Result<f32>;
    fn SetRightInsetScale(&self, value: f32) -> windows_core::Result<()>;
    fn Source(&self) -> windows_core::Result<CompositionBrush>;
    fn SetSource(&self, value: windows_core::Ref<'_, CompositionBrush>)
        -> windows_core::Result<()>;
    fn TopInset(&self) -> windows_core::Result<f32>;
    fn SetTopInset(&self, value: f32) -> windows_core::Result<()>;
    fn TopInsetScale(&self) -> windows_core::Result<f32>;
    fn SetTopInsetScale(&self, value: f32) -> windows_core::Result<()>;
    fn SetInsets(&self, inset: f32) -> windows_core::Result<()>;
    fn SetInsetsWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<()>;
    fn SetInsetScales(&self, scale: f32) -> windows_core::Result<()>;
    fn SetInsetScalesWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<()>;
}
impl ICompositionNineGridBrush_Vtbl {
    pub const fn new<Identity: ICompositionNineGridBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BottomInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::BottomInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottomInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetBottomInset(this, value).into()
            }
        }
        unsafe extern "system" fn BottomInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::BottomInsetScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottomInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetBottomInsetScale(this, value).into()
            }
        }
        unsafe extern "system" fn IsCenterHollow<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::IsCenterHollow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsCenterHollow<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetIsCenterHollow(this, value).into()
            }
        }
        unsafe extern "system" fn LeftInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::LeftInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeftInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetLeftInset(this, value).into()
            }
        }
        unsafe extern "system" fn LeftInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::LeftInsetScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeftInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetLeftInsetScale(this, value).into()
            }
        }
        unsafe extern "system" fn RightInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::RightInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRightInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetRightInset(this, value).into()
            }
        }
        unsafe extern "system" fn RightInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::RightInsetScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRightInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetRightInsetScale(this, value).into()
            }
        }
        unsafe extern "system" fn Source<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetSource(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn TopInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::TopInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopInset<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetTopInset(this, value).into()
            }
        }
        unsafe extern "system" fn TopInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionNineGridBrush_Impl::TopInsetScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopInsetScale<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetTopInsetScale(this, value).into()
            }
        }
        unsafe extern "system" fn SetInsets<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            inset: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetInsets(this, inset).into()
            }
        }
        unsafe extern "system" fn SetInsetsWithValues<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetInsetsWithValues(this, left, top, right, bottom)
                    .into()
            }
        }
        unsafe extern "system" fn SetInsetScales<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            scale: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetInsetScales(this, scale).into()
            }
        }
        unsafe extern "system" fn SetInsetScalesWithValues<
            Identity: ICompositionNineGridBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionNineGridBrush_Impl::SetInsetScalesWithValues(
                    this, left, top, right, bottom,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionNineGridBrush,
                OFFSET,
            >(),
            BottomInset: BottomInset::<Identity, OFFSET>,
            SetBottomInset: SetBottomInset::<Identity, OFFSET>,
            BottomInsetScale: BottomInsetScale::<Identity, OFFSET>,
            SetBottomInsetScale: SetBottomInsetScale::<Identity, OFFSET>,
            IsCenterHollow: IsCenterHollow::<Identity, OFFSET>,
            SetIsCenterHollow: SetIsCenterHollow::<Identity, OFFSET>,
            LeftInset: LeftInset::<Identity, OFFSET>,
            SetLeftInset: SetLeftInset::<Identity, OFFSET>,
            LeftInsetScale: LeftInsetScale::<Identity, OFFSET>,
            SetLeftInsetScale: SetLeftInsetScale::<Identity, OFFSET>,
            RightInset: RightInset::<Identity, OFFSET>,
            SetRightInset: SetRightInset::<Identity, OFFSET>,
            RightInsetScale: RightInsetScale::<Identity, OFFSET>,
            SetRightInsetScale: SetRightInsetScale::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
            TopInset: TopInset::<Identity, OFFSET>,
            SetTopInset: SetTopInset::<Identity, OFFSET>,
            TopInsetScale: TopInsetScale::<Identity, OFFSET>,
            SetTopInsetScale: SetTopInsetScale::<Identity, OFFSET>,
            SetInsets: SetInsets::<Identity, OFFSET>,
            SetInsetsWithValues: SetInsetsWithValues::<Identity, OFFSET>,
            SetInsetScales: SetInsetScales::<Identity, OFFSET>,
            SetInsetScalesWithValues: SetInsetScalesWithValues::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionNineGridBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionNineGridBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BottomInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBottomInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub BottomInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBottomInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub IsCenterHollow:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsCenterHollow:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub LeftInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLeftInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub LeftInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLeftInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RightInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRightInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RightInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRightInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TopInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTopInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub TopInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTopInsetScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub SetInsets: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub SetInsetsWithValues: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        f32,
        f32,
    ) -> windows_core::HRESULT,
    pub SetInsetScales:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub SetInsetScalesWithValues: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        f32,
        f32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionObject,
    ICompositionObject_Vtbl,
    0x0e583d49_fb5e_5481_a426_d3c41e059a5a
);
impl windows_core::RuntimeType for ICompositionObject {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObject {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObject";
}
pub trait ICompositionObject_Impl: windows_core::IUnknownImpl {
    fn Compositor(&self) -> windows_core::Result<Compositor>;
    fn Properties(&self) -> windows_core::Result<CompositionPropertySet>;
    fn StartAnimation(
        &self,
        propertyName: &windows_core::HSTRING,
        animation: windows_core::Ref<'_, CompositionAnimation>,
    ) -> windows_core::Result<()>;
    fn StopAnimation(&self, propertyName: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl ICompositionObject_Vtbl {
    pub const fn new<Identity: ICompositionObject_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Compositor<
            Identity: ICompositionObject_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject_Impl::Compositor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Properties<
            Identity: ICompositionObject_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject_Impl::Properties(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StartAnimation<
            Identity: ICompositionObject_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject_Impl::StartAnimation(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        unsafe extern "system" fn StopAnimation<
            Identity: ICompositionObject_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject_Impl::StopAnimation(this, core::mem::transmute(&propertyname))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionObject, OFFSET>(),
            Compositor: Compositor::<Identity, OFFSET>,
            Properties: Properties::<Identity, OFFSET>,
            StartAnimation: StartAnimation::<Identity, OFFSET>,
            StopAnimation: StopAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObject as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Compositor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Properties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StartAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StopAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionObject2,
    ICompositionObject2_Vtbl,
    0xbcbbfebf_799c_51ce_9c82_b6e49e7e62e1
);
impl windows_core::RuntimeType for ICompositionObject2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObject2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObject2";
}
pub trait ICompositionObject2_Impl: windows_core::IUnknownImpl {
    fn Comment(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection>;
    fn SetImplicitAnimations(
        &self,
        value: windows_core::Ref<'_, ImplicitAnimationCollection>,
    ) -> windows_core::Result<()>;
    fn StartAnimationGroup(
        &self,
        value: windows_core::Ref<'_, ICompositionAnimationBase>,
    ) -> windows_core::Result<()>;
    fn StopAnimationGroup(
        &self,
        value: windows_core::Ref<'_, ICompositionAnimationBase>,
    ) -> windows_core::Result<()>;
}
impl ICompositionObject2_Vtbl {
    pub const fn new<Identity: ICompositionObject2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Comment<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject2_Impl::Comment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetComment<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject2_Impl::SetComment(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ImplicitAnimations<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject2_Impl::ImplicitAnimations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetImplicitAnimations<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject2_Impl::SetImplicitAnimations(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn StartAnimationGroup<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject2_Impl::StartAnimationGroup(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn StopAnimationGroup<
            Identity: ICompositionObject2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject2_Impl::StopAnimationGroup(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionObject2, OFFSET>(),
            Comment: Comment::<Identity, OFFSET>,
            SetComment: SetComment::<Identity, OFFSET>,
            ImplicitAnimations: ImplicitAnimations::<Identity, OFFSET>,
            SetImplicitAnimations: SetImplicitAnimations::<Identity, OFFSET>,
            StartAnimationGroup: StartAnimationGroup::<Identity, OFFSET>,
            StopAnimationGroup: StopAnimationGroup::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObject2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Comment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetComment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ImplicitAnimations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetImplicitAnimations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StartAnimationGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StopAnimationGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionObject3,
    ICompositionObject3_Vtbl,
    0xd43c5cf1_47df_52b8_b409_d5831503905e
);
impl windows_core::RuntimeType for ICompositionObject3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for ICompositionObject3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObject3";
}
#[cfg(feature = "UI_Dispatching")]
pub trait ICompositionObject3_Impl: windows_core::IUnknownImpl {
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
}
#[cfg(feature = "UI_Dispatching")]
impl ICompositionObject3_Vtbl {
    pub const fn new<Identity: ICompositionObject3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DispatcherQueue<
            Identity: ICompositionObject3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject3_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionObject3, OFFSET>(),
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObject3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
}
windows_core::imp::define_interface!(
    ICompositionObject4,
    ICompositionObject4_Vtbl,
    0x029ad57c_5497_51f3_8b40_e4e235992c6f
);
impl windows_core::RuntimeType for ICompositionObject4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObject4 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObject4";
}
pub trait ICompositionObject4_Impl: windows_core::IUnknownImpl {
    fn TryGetAnimationController(
        &self,
        propertyName: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController>;
}
impl ICompositionObject4_Vtbl {
    pub const fn new<Identity: ICompositionObject4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TryGetAnimationController<
            Identity: ICompositionObject4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionObject4_Impl::TryGetAnimationController(
                    this,
                    core::mem::transmute(&propertyname),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionObject4, OFFSET>(),
            TryGetAnimationController: TryGetAnimationController::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObject4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TryGetAnimationController: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionObject5,
    ICompositionObject5_Vtbl,
    0x85fd26d1_bb99_5392_9dce_a05cb81458a5
);
impl windows_core::RuntimeType for ICompositionObject5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObject5 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObject5";
}
pub trait ICompositionObject5_Impl: windows_core::IUnknownImpl {
    fn StartAnimationWithController(
        &self,
        propertyName: &windows_core::HSTRING,
        animation: windows_core::Ref<'_, CompositionAnimation>,
        animationController: windows_core::Ref<'_, AnimationController>,
    ) -> windows_core::Result<()>;
}
impl ICompositionObject5_Vtbl {
    pub const fn new<Identity: ICompositionObject5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn StartAnimationWithController<
            Identity: ICompositionObject5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
            animationcontroller: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObject5_Impl::StartAnimationWithController(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&animation),
                    core::mem::transmute_copy(&animationcontroller),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionObject5, OFFSET>(),
            StartAnimationWithController: StartAnimationWithController::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObject5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub StartAnimationWithController: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionObjectFactory,
    ICompositionObjectFactory_Vtbl,
    0x6133c5f9_cd3b_56b2_876f_eb849db14911
);
impl windows_core::RuntimeType for ICompositionObjectFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObjectFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObjectFactory";
}
pub trait ICompositionObjectFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionObjectFactory_Vtbl {
    pub const fn new<Identity: ICompositionObjectFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionObjectFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObjectFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObjectFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionObjectStatics,
    ICompositionObjectStatics_Vtbl,
    0xa091356c_38ae_514c_9b58_ad5c8c7936ad
);
impl windows_core::RuntimeType for ICompositionObjectStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionObjectStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionObjectStatics";
}
pub trait ICompositionObjectStatics_Impl: windows_core::IUnknownImpl {
    fn StartAnimationWithIAnimationObject(
        &self,
        target: windows_core::Ref<'_, IAnimationObject>,
        propertyName: &windows_core::HSTRING,
        animation: windows_core::Ref<'_, CompositionAnimation>,
    ) -> windows_core::Result<()>;
    fn StartAnimationGroupWithIAnimationObject(
        &self,
        target: windows_core::Ref<'_, IAnimationObject>,
        animation: windows_core::Ref<'_, ICompositionAnimationBase>,
    ) -> windows_core::Result<()>;
}
impl ICompositionObjectStatics_Vtbl {
    pub const fn new<Identity: ICompositionObjectStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn StartAnimationWithIAnimationObject<
            Identity: ICompositionObjectStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObjectStatics_Impl::StartAnimationWithIAnimationObject(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        unsafe extern "system" fn StartAnimationGroupWithIAnimationObject<
            Identity: ICompositionObjectStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionObjectStatics_Impl::StartAnimationGroupWithIAnimationObject(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionObjectStatics,
                OFFSET,
            >(),
            StartAnimationWithIAnimationObject: StartAnimationWithIAnimationObject::<
                Identity,
                OFFSET,
            >,
            StartAnimationGroupWithIAnimationObject: StartAnimationGroupWithIAnimationObject::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionObjectStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObjectStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub StartAnimationWithIAnimationObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StartAnimationGroupWithIAnimationObject: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionPath,
    ICompositionPath_Vtbl,
    0x17c518c0_d7a2_54be_ac7f_c408562a6a20
);
impl windows_core::RuntimeType for ICompositionPath {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionPath {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionPath";
}
pub trait ICompositionPath_Impl: windows_core::IUnknownImpl {}
impl ICompositionPath_Vtbl {
    pub const fn new<Identity: ICompositionPath_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionPath, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionPath as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPath_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionPathFactory,
    ICompositionPathFactory_Vtbl,
    0x87143312_d280_51d2_b75b_5d76ea86c285
);
impl windows_core::RuntimeType for ICompositionPathFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionPathFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionPathFactory";
}
pub trait ICompositionPathFactory_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        source: windows_core::Ref<'_, windows::Graphics::IGeometrySource2D>,
    ) -> windows_core::Result<CompositionPath>;
}
impl ICompositionPathFactory_Vtbl {
    pub const fn new<Identity: ICompositionPathFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: ICompositionPathFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPathFactory_Impl::Create(this, core::mem::transmute_copy(&source))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionPathFactory, OFFSET>(
            ),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionPathFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPathFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionPathGeometry,
    ICompositionPathGeometry_Vtbl,
    0x0f6e6b82_060b_571e_b849_ab8e0d723962
);
impl windows_core::RuntimeType for ICompositionPathGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionPathGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionPathGeometry";
}
pub trait ICompositionPathGeometry_Impl: windows_core::IUnknownImpl {
    fn Path(&self) -> windows_core::Result<CompositionPath>;
    fn SetPath(&self, value: windows_core::Ref<'_, CompositionPath>) -> windows_core::Result<()>;
}
impl ICompositionPathGeometry_Vtbl {
    pub const fn new<Identity: ICompositionPathGeometry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Path<
            Identity: ICompositionPathGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPathGeometry_Impl::Path(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPath<
            Identity: ICompositionPathGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPathGeometry_Impl::SetPath(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionPathGeometry,
                OFFSET,
            >(),
            Path: Path::<Identity, OFFSET>,
            SetPath: SetPath::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionPathGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPathGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadow,
    ICompositionProjectedShadow_Vtbl,
    0xd400ab10_8b92_5abb_9e23_807974fc6961
);
impl windows_core::RuntimeType for ICompositionProjectedShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionProjectedShadow";
}
pub trait ICompositionProjectedShadow_Impl: windows_core::IUnknownImpl {
    fn BlurRadiusMultiplier(&self) -> windows_core::Result<f32>;
    fn SetBlurRadiusMultiplier(&self, value: f32) -> windows_core::Result<()>;
    fn Casters(&self) -> windows_core::Result<CompositionProjectedShadowCasterCollection>;
    fn LightSource(&self) -> windows_core::Result<CompositionLight>;
    fn SetLightSource(
        &self,
        value: windows_core::Ref<'_, CompositionLight>,
    ) -> windows_core::Result<()>;
    fn MaxBlurRadius(&self) -> windows_core::Result<f32>;
    fn SetMaxBlurRadius(&self, value: f32) -> windows_core::Result<()>;
    fn MinBlurRadius(&self) -> windows_core::Result<f32>;
    fn SetMinBlurRadius(&self, value: f32) -> windows_core::Result<()>;
    fn Receivers(
        &self,
    ) -> windows_core::Result<CompositionProjectedShadowReceiverUnorderedCollection>;
}
impl ICompositionProjectedShadow_Vtbl {
    pub const fn new<Identity: ICompositionProjectedShadow_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BlurRadiusMultiplier<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::BlurRadiusMultiplier(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBlurRadiusMultiplier<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadow_Impl::SetBlurRadiusMultiplier(this, value).into()
            }
        }
        unsafe extern "system" fn Casters<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::Casters(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LightSource<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::LightSource(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLightSource<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadow_Impl::SetLightSource(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn MaxBlurRadius<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::MaxBlurRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxBlurRadius<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadow_Impl::SetMaxBlurRadius(this, value).into()
            }
        }
        unsafe extern "system" fn MinBlurRadius<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::MinBlurRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinBlurRadius<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadow_Impl::SetMinBlurRadius(this, value).into()
            }
        }
        unsafe extern "system" fn Receivers<
            Identity: ICompositionProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadow_Impl::Receivers(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadow,
                OFFSET,
            >(),
            BlurRadiusMultiplier: BlurRadiusMultiplier::<Identity, OFFSET>,
            SetBlurRadiusMultiplier: SetBlurRadiusMultiplier::<Identity, OFFSET>,
            Casters: Casters::<Identity, OFFSET>,
            LightSource: LightSource::<Identity, OFFSET>,
            SetLightSource: SetLightSource::<Identity, OFFSET>,
            MaxBlurRadius: MaxBlurRadius::<Identity, OFFSET>,
            SetMaxBlurRadius: SetMaxBlurRadius::<Identity, OFFSET>,
            MinBlurRadius: MinBlurRadius::<Identity, OFFSET>,
            SetMinBlurRadius: SetMinBlurRadius::<Identity, OFFSET>,
            Receivers: Receivers::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionProjectedShadow as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadow_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BlurRadiusMultiplier:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBlurRadiusMultiplier:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Casters: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LightSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLightSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MaxBlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMaxBlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MinBlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMinBlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Receivers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadowCaster,
    ICompositionProjectedShadowCaster_Vtbl,
    0x15a9f2d0_6bae_521b_90c7_c7500f2bf562
);
impl windows_core::RuntimeType for ICompositionProjectedShadowCaster {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadowCaster {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionProjectedShadowCaster";
}
pub trait ICompositionProjectedShadowCaster_Impl: windows_core::IUnknownImpl {
    fn Brush(&self) -> windows_core::Result<CompositionBrush>;
    fn SetBrush(&self, value: windows_core::Ref<'_, CompositionBrush>) -> windows_core::Result<()>;
    fn CastingVisual(&self) -> windows_core::Result<Visual>;
    fn SetCastingVisual(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
}
impl ICompositionProjectedShadowCaster_Vtbl {
    pub const fn new<Identity: ICompositionProjectedShadowCaster_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Brush<
            Identity: ICompositionProjectedShadowCaster_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowCaster_Impl::Brush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBrush<
            Identity: ICompositionProjectedShadowCaster_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCaster_Impl::SetBrush(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn CastingVisual<
            Identity: ICompositionProjectedShadowCaster_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowCaster_Impl::CastingVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCastingVisual<
            Identity: ICompositionProjectedShadowCaster_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCaster_Impl::SetCastingVisual(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadowCaster,
                OFFSET,
            >(),
            Brush: Brush::<Identity, OFFSET>,
            SetBrush: SetBrush::<Identity, OFFSET>,
            CastingVisual: CastingVisual::<Identity, OFFSET>,
            SetCastingVisual: SetCastingVisual::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionProjectedShadowCaster as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCaster_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Brush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CastingVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCastingVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadowCasterCollection,
    ICompositionProjectedShadowCasterCollection_Vtbl,
    0xb120bfdc_533c_57a9_ae16_d43ba52472c4
);
impl windows_core::RuntimeType for ICompositionProjectedShadowCasterCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadowCasterCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollection";
}
pub trait ICompositionProjectedShadowCasterCollection_Impl: windows_core::IUnknownImpl {
    fn Count(&self) -> windows_core::Result<i32>;
    fn InsertAbove(
        &self,
        newCaster: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
        reference: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
    ) -> windows_core::Result<()>;
    fn InsertAtBottom(
        &self,
        newCaster: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
    ) -> windows_core::Result<()>;
    fn InsertAtTop(
        &self,
        newCaster: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
    ) -> windows_core::Result<()>;
    fn InsertBelow(
        &self,
        newCaster: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
        reference: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
    ) -> windows_core::Result<()>;
    fn Remove(
        &self,
        caster: windows_core::Ref<'_, CompositionProjectedShadowCaster>,
    ) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl ICompositionProjectedShadowCasterCollection_Vtbl {
    pub const fn new<
        Identity: ICompositionProjectedShadowCasterCollection_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Count<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowCasterCollection_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InsertAbove<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newcaster: *mut core::ffi::c_void,
            reference: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::InsertAbove(
                    this,
                    core::mem::transmute_copy(&newcaster),
                    core::mem::transmute_copy(&reference),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertAtBottom<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newcaster: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::InsertAtBottom(
                    this,
                    core::mem::transmute_copy(&newcaster),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertAtTop<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newcaster: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::InsertAtTop(
                    this,
                    core::mem::transmute_copy(&newcaster),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertBelow<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newcaster: *mut core::ffi::c_void,
            reference: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::InsertBelow(
                    this,
                    core::mem::transmute_copy(&newcaster),
                    core::mem::transmute_copy(&reference),
                )
                .into()
            }
        }
        unsafe extern "system" fn Remove<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            caster: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::Remove(
                    this,
                    core::mem::transmute_copy(&caster),
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: ICompositionProjectedShadowCasterCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowCasterCollection_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadowCasterCollection,
                OFFSET,
            >(),
            Count: Count::<Identity, OFFSET>,
            InsertAbove: InsertAbove::<Identity, OFFSET>,
            InsertAtBottom: InsertAtBottom::<Identity, OFFSET>,
            InsertAtTop: InsertAtTop::<Identity, OFFSET>,
            InsertBelow: InsertBelow::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionProjectedShadowCasterCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCasterCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub InsertAbove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertAtBottom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertAtTop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertBelow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadowCasterCollectionStatics,
    ICompositionProjectedShadowCasterCollectionStatics_Vtbl,
    0x43a98014_b88b_5b2a_b1e2_5e776ab77538
);
impl windows_core::RuntimeType for ICompositionProjectedShadowCasterCollectionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadowCasterCollectionStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionStatics";
}
pub trait ICompositionProjectedShadowCasterCollectionStatics_Impl:
    windows_core::IUnknownImpl
{
    fn MaxRespectedCasters(&self) -> windows_core::Result<i32>;
}
impl ICompositionProjectedShadowCasterCollectionStatics_Vtbl {
    pub const fn new<
        Identity: ICompositionProjectedShadowCasterCollectionStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn MaxRespectedCasters<
            Identity: ICompositionProjectedShadowCasterCollectionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowCasterCollectionStatics_Impl::MaxRespectedCasters(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadowCasterCollectionStatics,
                OFFSET,
            >(),
            MaxRespectedCasters: MaxRespectedCasters::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionProjectedShadowCasterCollectionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCasterCollectionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MaxRespectedCasters:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadowReceiver,
    ICompositionProjectedShadowReceiver_Vtbl,
    0x29fe12b0_f1a0_50e1_af28_2e943bc819d6
);
impl windows_core::RuntimeType for ICompositionProjectedShadowReceiver {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadowReceiver {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionProjectedShadowReceiver";
}
pub trait ICompositionProjectedShadowReceiver_Impl: windows_core::IUnknownImpl {
    fn ReceivingVisual(&self) -> windows_core::Result<Visual>;
    fn SetReceivingVisual(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
}
impl ICompositionProjectedShadowReceiver_Vtbl {
    pub const fn new<Identity: ICompositionProjectedShadowReceiver_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ReceivingVisual<
            Identity: ICompositionProjectedShadowReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowReceiver_Impl::ReceivingVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetReceivingVisual<
            Identity: ICompositionProjectedShadowReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowReceiver_Impl::SetReceivingVisual(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadowReceiver,
                OFFSET,
            >(),
            ReceivingVisual: ReceivingVisual::<Identity, OFFSET>,
            SetReceivingVisual: SetReceivingVisual::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionProjectedShadowReceiver as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowReceiver_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ReceivingVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetReceivingVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionProjectedShadowReceiverUnorderedCollection,
    ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl,
    0x2d35f751_a1fa_5fff_b156_6d8fcd8362ed
);
impl windows_core::RuntimeType for ICompositionProjectedShadowReceiverUnorderedCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionProjectedShadowReceiverUnorderedCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection";
}
pub trait ICompositionProjectedShadowReceiverUnorderedCollection_Impl:
    windows_core::IUnknownImpl
{
    fn Add(
        &self,
        value: windows_core::Ref<'_, CompositionProjectedShadowReceiver>,
    ) -> windows_core::Result<()>;
    fn Count(&self) -> windows_core::Result<i32>;
    fn Remove(
        &self,
        value: windows_core::Ref<'_, CompositionProjectedShadowReceiver>,
    ) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl {
    pub const fn new<
        Identity: ICompositionProjectedShadowReceiverUnorderedCollection_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Add<
            Identity: ICompositionProjectedShadowReceiverUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowReceiverUnorderedCollection_Impl::Add(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Count<
            Identity: ICompositionProjectedShadowReceiverUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionProjectedShadowReceiverUnorderedCollection_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Remove<
            Identity: ICompositionProjectedShadowReceiverUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowReceiverUnorderedCollection_Impl::Remove(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: ICompositionProjectedShadowReceiverUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionProjectedShadowReceiverUnorderedCollection_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionProjectedShadowReceiverUnorderedCollection,
                OFFSET,
            >(),
            Add: Add::<Identity, OFFSET>,
            Count: Count::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < ICompositionProjectedShadowReceiverUnorderedCollection as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Add: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionPropertySet,
    ICompositionPropertySet_Vtbl,
    0x97f7a17b_97be_5545_9f1c_0b9d44577f57
);
impl windows_core::RuntimeType for ICompositionPropertySet {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionPropertySet {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionPropertySet";
}
pub trait ICompositionPropertySet_Impl: windows_core::IUnknownImpl {
    fn InsertColor(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows::UI::Color,
    ) -> windows_core::Result<()>;
    fn InsertMatrix3x2(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()>;
    fn InsertMatrix4x4(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()>;
    fn InsertQuaternion(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()>;
    fn InsertScalar(
        &self,
        propertyName: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()>;
    fn InsertVector2(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows_numerics::Vector2,
    ) -> windows_core::Result<()>;
    fn InsertVector3(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows_numerics::Vector3,
    ) -> windows_core::Result<()>;
    fn InsertVector4(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &windows_numerics::Vector4,
    ) -> windows_core::Result<()>;
    fn TryGetColor(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows::UI::Color,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetMatrix3x2(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows_numerics::Matrix3x2,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetMatrix4x4(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows_numerics::Matrix4x4,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetQuaternion(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetScalar(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut f32,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetVector2(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector2,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetVector3(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector3,
    ) -> windows_core::Result<CompositionGetValueStatus>;
    fn TryGetVector4(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut windows_numerics::Vector4,
    ) -> windows_core::Result<CompositionGetValueStatus>;
}
impl ICompositionPropertySet_Vtbl {
    pub const fn new<Identity: ICompositionPropertySet_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertColor<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertColor(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertMatrix3x2<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertMatrix3x2(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertMatrix4x4<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertMatrix4x4(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertQuaternion<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertQuaternion(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertScalar<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertScalar(
                    this,
                    core::mem::transmute(&propertyname),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertVector2<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertVector2(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertVector3<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertVector3(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertVector4<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: windows_numerics::Vector4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet_Impl::InsertVector4(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn TryGetColor<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows::UI::Color,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetColor(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetMatrix3x2<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows_numerics::Matrix3x2,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetMatrix3x2(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetMatrix4x4<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows_numerics::Matrix4x4,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetMatrix4x4(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetQuaternion<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows::Foundation::Numerics::Quaternion,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetQuaternion(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetScalar<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut f32,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetScalar(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetVector2<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows_numerics::Vector2,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetVector2(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetVector3<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows_numerics::Vector3,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetVector3(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetVector4<
            Identity: ICompositionPropertySet_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut windows_numerics::Vector4,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet_Impl::TryGetVector4(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionPropertySet, OFFSET>(
            ),
            InsertColor: InsertColor::<Identity, OFFSET>,
            InsertMatrix3x2: InsertMatrix3x2::<Identity, OFFSET>,
            InsertMatrix4x4: InsertMatrix4x4::<Identity, OFFSET>,
            InsertQuaternion: InsertQuaternion::<Identity, OFFSET>,
            InsertScalar: InsertScalar::<Identity, OFFSET>,
            InsertVector2: InsertVector2::<Identity, OFFSET>,
            InsertVector3: InsertVector3::<Identity, OFFSET>,
            InsertVector4: InsertVector4::<Identity, OFFSET>,
            TryGetColor: TryGetColor::<Identity, OFFSET>,
            TryGetMatrix3x2: TryGetMatrix3x2::<Identity, OFFSET>,
            TryGetMatrix4x4: TryGetMatrix4x4::<Identity, OFFSET>,
            TryGetQuaternion: TryGetQuaternion::<Identity, OFFSET>,
            TryGetScalar: TryGetScalar::<Identity, OFFSET>,
            TryGetVector2: TryGetVector2::<Identity, OFFSET>,
            TryGetVector3: TryGetVector3::<Identity, OFFSET>,
            TryGetVector4: TryGetVector4::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionPropertySet as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPropertySet_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub InsertMatrix3x2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub InsertMatrix4x4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub InsertQuaternion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub InsertScalar: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        f32,
    ) -> windows_core::HRESULT,
    pub InsertVector2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub InsertVector3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub InsertVector4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector4,
    ) -> windows_core::HRESULT,
    pub TryGetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetMatrix3x2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix3x2,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetMatrix4x4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetQuaternion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows::Foundation::Numerics::Quaternion,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetScalar: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut f32,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetVector2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetVector3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
    pub TryGetVector4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector4,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionPropertySet2,
    ICompositionPropertySet2_Vtbl,
    0x3db6d621_3497_55e4_95bf_8ae5e7c34c33
);
impl windows_core::RuntimeType for ICompositionPropertySet2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionPropertySet2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionPropertySet2";
}
pub trait ICompositionPropertySet2_Impl: windows_core::IUnknownImpl {
    fn InsertBoolean(
        &self,
        propertyName: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()>;
    fn TryGetBoolean(
        &self,
        propertyName: &windows_core::HSTRING,
        value: &mut bool,
    ) -> windows_core::Result<CompositionGetValueStatus>;
}
impl ICompositionPropertySet2_Vtbl {
    pub const fn new<Identity: ICompositionPropertySet2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertBoolean<
            Identity: ICompositionPropertySet2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionPropertySet2_Impl::InsertBoolean(
                    this,
                    core::mem::transmute(&propertyname),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn TryGetBoolean<
            Identity: ICompositionPropertySet2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            value: *mut bool,
            result__: *mut CompositionGetValueStatus,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionPropertySet2_Impl::TryGetBoolean(
                    this,
                    core::mem::transmute(&propertyname),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionPropertySet2,
                OFFSET,
            >(),
            InsertBoolean: InsertBoolean::<Identity, OFFSET>,
            TryGetBoolean: TryGetBoolean::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionPropertySet2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPropertySet2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertBoolean: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub TryGetBoolean: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
        *mut CompositionGetValueStatus,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionRadialGradientBrush,
    ICompositionRadialGradientBrush_Vtbl,
    0x17662f3f_d351_5435_b3b4_ec26cefeccc5
);
impl windows_core::RuntimeType for ICompositionRadialGradientBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionRadialGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionRadialGradientBrush";
}
pub trait ICompositionRadialGradientBrush_Impl: windows_core::IUnknownImpl {
    fn EllipseCenter(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetEllipseCenter(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn EllipseRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetEllipseRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn GradientOriginOffset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetGradientOriginOffset(
        &self,
        value: &windows_numerics::Vector2,
    ) -> windows_core::Result<()>;
}
impl ICompositionRadialGradientBrush_Vtbl {
    pub const fn new<Identity: ICompositionRadialGradientBrush_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn EllipseCenter<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRadialGradientBrush_Impl::EllipseCenter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEllipseCenter<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRadialGradientBrush_Impl::SetEllipseCenter(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn EllipseRadius<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRadialGradientBrush_Impl::EllipseRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEllipseRadius<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRadialGradientBrush_Impl::SetEllipseRadius(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn GradientOriginOffset<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRadialGradientBrush_Impl::GradientOriginOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetGradientOriginOffset<
            Identity: ICompositionRadialGradientBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRadialGradientBrush_Impl::SetGradientOriginOffset(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionRadialGradientBrush,
                OFFSET,
            >(),
            EllipseCenter: EllipseCenter::<Identity, OFFSET>,
            SetEllipseCenter: SetEllipseCenter::<Identity, OFFSET>,
            EllipseRadius: EllipseRadius::<Identity, OFFSET>,
            SetEllipseRadius: SetEllipseRadius::<Identity, OFFSET>,
            GradientOriginOffset: GradientOriginOffset::<Identity, OFFSET>,
            SetGradientOriginOffset: SetGradientOriginOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionRadialGradientBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRadialGradientBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EllipseCenter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetEllipseCenter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub EllipseRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetEllipseRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub GradientOriginOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetGradientOriginOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionRectangleGeometry,
    ICompositionRectangleGeometry_Vtbl,
    0xbd551fcf_2c7f_5125_ac44_50a4f1d8fa76
);
impl windows_core::RuntimeType for ICompositionRectangleGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionRectangleGeometry";
}
pub trait ICompositionRectangleGeometry_Impl: windows_core::IUnknownImpl {
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Size(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionRectangleGeometry_Vtbl {
    pub const fn new<Identity: ICompositionRectangleGeometry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Offset<
            Identity: ICompositionRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRectangleGeometry_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRectangleGeometry_Impl::SetOffset(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Size<
            Identity: ICompositionRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRectangleGeometry_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSize<
            Identity: ICompositionRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRectangleGeometry_Impl::SetSize(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionRectangleGeometry,
                OFFSET,
            >(),
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
            SetSize: SetSize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionRectangleGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRectangleGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionRoundedRectangleGeometry,
    ICompositionRoundedRectangleGeometry_Vtbl,
    0x02eafc87_8d1f_5445_a416_d81baee8a750
);
impl windows_core::RuntimeType for ICompositionRoundedRectangleGeometry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionRoundedRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionRoundedRectangleGeometry";
}
pub trait ICompositionRoundedRectangleGeometry_Impl: windows_core::IUnknownImpl {
    fn CornerRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCornerRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Size(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionRoundedRectangleGeometry_Vtbl {
    pub const fn new<Identity: ICompositionRoundedRectangleGeometry_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CornerRadius<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRoundedRectangleGeometry_Impl::CornerRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCornerRadius<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRoundedRectangleGeometry_Impl::SetCornerRadius(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Offset<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRoundedRectangleGeometry_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRoundedRectangleGeometry_Impl::SetOffset(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Size<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionRoundedRectangleGeometry_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSize<
            Identity: ICompositionRoundedRectangleGeometry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionRoundedRectangleGeometry_Impl::SetSize(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionRoundedRectangleGeometry,
                OFFSET,
            >(),
            CornerRadius: CornerRadius::<Identity, OFFSET>,
            SetCornerRadius: SetCornerRadius::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
            SetSize: SetSize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionRoundedRectangleGeometry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRoundedRectangleGeometry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CornerRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionScopedBatch,
    ICompositionScopedBatch_Vtbl,
    0xd31ca572_99ce_5969_b042_6c2d330a3859
);
impl windows_core::RuntimeType for ICompositionScopedBatch {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionScopedBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionScopedBatch";
}
pub trait ICompositionScopedBatch_Impl: windows_core::IUnknownImpl {
    fn IsActive(&self) -> windows_core::Result<bool>;
    fn IsEnded(&self) -> windows_core::Result<bool>;
    fn End(&self) -> windows_core::Result<()>;
    fn Resume(&self) -> windows_core::Result<()>;
    fn Suspend(&self) -> windows_core::Result<()>;
    fn Completed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                windows_core::IInspectable,
                CompositionBatchCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()>;
}
impl ICompositionScopedBatch_Vtbl {
    pub const fn new<Identity: ICompositionScopedBatch_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsActive<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionScopedBatch_Impl::IsActive(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEnded<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionScopedBatch_Impl::IsEnded(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn End<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionScopedBatch_Impl::End(this).into()
            }
        }
        unsafe extern "system" fn Resume<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionScopedBatch_Impl::Resume(this).into()
            }
        }
        unsafe extern "system" fn Suspend<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionScopedBatch_Impl::Suspend(this).into()
            }
        }
        unsafe extern "system" fn Completed<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionScopedBatch_Impl::Completed(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCompleted<
            Identity: ICompositionScopedBatch_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionScopedBatch_Impl::RemoveCompleted(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionScopedBatch, OFFSET>(
            ),
            IsActive: IsActive::<Identity, OFFSET>,
            IsEnded: IsEnded::<Identity, OFFSET>,
            End: End::<Identity, OFFSET>,
            Resume: Resume::<Identity, OFFSET>,
            Suspend: Suspend::<Identity, OFFSET>,
            Completed: Completed::<Identity, OFFSET>,
            RemoveCompleted: RemoveCompleted::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionScopedBatch as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionScopedBatch_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsActive:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsEnded:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub End: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Suspend: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionShadow,
    ICompositionShadow_Vtbl,
    0x176b8bb5_4dae_59b2_b9a0_2499b243267c
);
impl windows_core::RuntimeType for ICompositionShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionShadow";
}
pub trait ICompositionShadow_Impl: windows_core::IUnknownImpl {}
impl ICompositionShadow_Vtbl {
    pub const fn new<Identity: ICompositionShadow_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionShadow, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionShadow as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShadow_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionShadowFactory,
    ICompositionShadowFactory_Vtbl,
    0xff27546d_9750_54ae_ab8c_126cbe9158c3
);
impl windows_core::RuntimeType for ICompositionShadowFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionShadowFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionShadowFactory";
}
pub trait ICompositionShadowFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionShadowFactory_Vtbl {
    pub const fn new<Identity: ICompositionShadowFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionShadowFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionShadowFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShadowFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionShape,
    ICompositionShape_Vtbl,
    0xed75d4d8_437f_5640_9720_faae35ce5895
);
impl windows_core::RuntimeType for ICompositionShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionShape {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionShape";
}
pub trait ICompositionShape_Impl: windows_core::IUnknownImpl {
    fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCenterPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetScale(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2>;
    fn SetTransformMatrix(&self, value: &windows_numerics::Matrix3x2) -> windows_core::Result<()>;
}
impl ICompositionShape_Vtbl {
    pub const fn new<Identity: ICompositionShape_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CenterPoint<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::CenterPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterPoint<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetCenterPoint(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: ICompositionShape_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn RotationAngle<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn Scale<Identity: ICompositionShape_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TransformMatrix<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionShape_Impl::TransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransformMatrix<
            Identity: ICompositionShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionShape_Impl::SetTransformMatrix(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionShape, OFFSET>(),
            CenterPoint: CenterPoint::<Identity, OFFSET>,
            SetCenterPoint: SetCenterPoint::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            TransformMatrix: TransformMatrix::<Identity, OFFSET>,
            SetTransformMatrix: SetTransformMatrix::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionShape as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShape_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionShapeFactory,
    ICompositionShapeFactory_Vtbl,
    0x7aa2b987_9cdd_5b6e_8ac1_e989d78b4811
);
impl windows_core::RuntimeType for ICompositionShapeFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionShapeFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionShapeFactory";
}
pub trait ICompositionShapeFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionShapeFactory_Vtbl {
    pub const fn new<Identity: ICompositionShapeFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionShapeFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionShapeFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShapeFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionSpriteShape,
    ICompositionSpriteShape_Vtbl,
    0x982138f2_5781_509a_ba5d_112bcb0b98ef
);
impl windows_core::RuntimeType for ICompositionSpriteShape {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionSpriteShape {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSpriteShape";
}
pub trait ICompositionSpriteShape_Impl: windows_core::IUnknownImpl {
    fn FillBrush(&self) -> windows_core::Result<CompositionBrush>;
    fn SetFillBrush(
        &self,
        value: windows_core::Ref<'_, CompositionBrush>,
    ) -> windows_core::Result<()>;
    fn Geometry(&self) -> windows_core::Result<CompositionGeometry>;
    fn SetGeometry(
        &self,
        value: windows_core::Ref<'_, CompositionGeometry>,
    ) -> windows_core::Result<()>;
    fn IsStrokeNonScaling(&self) -> windows_core::Result<bool>;
    fn SetIsStrokeNonScaling(&self, value: bool) -> windows_core::Result<()>;
    fn StrokeBrush(&self) -> windows_core::Result<CompositionBrush>;
    fn SetStrokeBrush(
        &self,
        value: windows_core::Ref<'_, CompositionBrush>,
    ) -> windows_core::Result<()>;
    fn StrokeDashArray(&self) -> windows_core::Result<CompositionStrokeDashArray>;
    fn StrokeDashCap(&self) -> windows_core::Result<CompositionStrokeCap>;
    fn SetStrokeDashCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()>;
    fn StrokeDashOffset(&self) -> windows_core::Result<f32>;
    fn SetStrokeDashOffset(&self, value: f32) -> windows_core::Result<()>;
    fn StrokeEndCap(&self) -> windows_core::Result<CompositionStrokeCap>;
    fn SetStrokeEndCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()>;
    fn StrokeLineJoin(&self) -> windows_core::Result<CompositionStrokeLineJoin>;
    fn SetStrokeLineJoin(&self, value: CompositionStrokeLineJoin) -> windows_core::Result<()>;
    fn StrokeMiterLimit(&self) -> windows_core::Result<f32>;
    fn SetStrokeMiterLimit(&self, value: f32) -> windows_core::Result<()>;
    fn StrokeStartCap(&self) -> windows_core::Result<CompositionStrokeCap>;
    fn SetStrokeStartCap(&self, value: CompositionStrokeCap) -> windows_core::Result<()>;
    fn StrokeThickness(&self) -> windows_core::Result<f32>;
    fn SetStrokeThickness(&self, value: f32) -> windows_core::Result<()>;
}
impl ICompositionSpriteShape_Vtbl {
    pub const fn new<Identity: ICompositionSpriteShape_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FillBrush<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::FillBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFillBrush<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetFillBrush(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Geometry<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::Geometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetGeometry<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetGeometry(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn IsStrokeNonScaling<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::IsStrokeNonScaling(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStrokeNonScaling<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetIsStrokeNonScaling(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeBrush<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeBrush<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeBrush(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn StrokeDashArray<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeDashArray(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StrokeDashCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeDashCap(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeDashCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeDashCap(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeDashOffset<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeDashOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeDashOffset<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeDashOffset(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeEndCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeEndCap(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeEndCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeEndCap(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeLineJoin<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStrokeLineJoin,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeLineJoin(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeLineJoin<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStrokeLineJoin,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeLineJoin(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeMiterLimit<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeMiterLimit(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeMiterLimit<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeMiterLimit(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeStartCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeStartCap(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeStartCap<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStrokeCap,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeStartCap(this, value).into()
            }
        }
        unsafe extern "system" fn StrokeThickness<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSpriteShape_Impl::StrokeThickness(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStrokeThickness<
            Identity: ICompositionSpriteShape_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSpriteShape_Impl::SetStrokeThickness(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionSpriteShape, OFFSET>(
            ),
            FillBrush: FillBrush::<Identity, OFFSET>,
            SetFillBrush: SetFillBrush::<Identity, OFFSET>,
            Geometry: Geometry::<Identity, OFFSET>,
            SetGeometry: SetGeometry::<Identity, OFFSET>,
            IsStrokeNonScaling: IsStrokeNonScaling::<Identity, OFFSET>,
            SetIsStrokeNonScaling: SetIsStrokeNonScaling::<Identity, OFFSET>,
            StrokeBrush: StrokeBrush::<Identity, OFFSET>,
            SetStrokeBrush: SetStrokeBrush::<Identity, OFFSET>,
            StrokeDashArray: StrokeDashArray::<Identity, OFFSET>,
            StrokeDashCap: StrokeDashCap::<Identity, OFFSET>,
            SetStrokeDashCap: SetStrokeDashCap::<Identity, OFFSET>,
            StrokeDashOffset: StrokeDashOffset::<Identity, OFFSET>,
            SetStrokeDashOffset: SetStrokeDashOffset::<Identity, OFFSET>,
            StrokeEndCap: StrokeEndCap::<Identity, OFFSET>,
            SetStrokeEndCap: SetStrokeEndCap::<Identity, OFFSET>,
            StrokeLineJoin: StrokeLineJoin::<Identity, OFFSET>,
            SetStrokeLineJoin: SetStrokeLineJoin::<Identity, OFFSET>,
            StrokeMiterLimit: StrokeMiterLimit::<Identity, OFFSET>,
            SetStrokeMiterLimit: SetStrokeMiterLimit::<Identity, OFFSET>,
            StrokeStartCap: StrokeStartCap::<Identity, OFFSET>,
            SetStrokeStartCap: SetStrokeStartCap::<Identity, OFFSET>,
            StrokeThickness: StrokeThickness::<Identity, OFFSET>,
            SetStrokeThickness: SetStrokeThickness::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSpriteShape as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSpriteShape_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FillBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFillBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Geometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsStrokeNonScaling:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsStrokeNonScaling:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub StrokeBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetStrokeBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StrokeDashArray: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StrokeDashCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub SetStrokeDashCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub StrokeDashOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetStrokeDashOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub StrokeEndCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub SetStrokeEndCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub StrokeLineJoin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStrokeLineJoin,
    ) -> windows_core::HRESULT,
    pub SetStrokeLineJoin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStrokeLineJoin,
    ) -> windows_core::HRESULT,
    pub StrokeMiterLimit:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetStrokeMiterLimit:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub StrokeStartCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub SetStrokeStartCap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStrokeCap,
    ) -> windows_core::HRESULT,
    pub StrokeThickness:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetStrokeThickness:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionSupportsSystemBackdrop,
    ICompositionSupportsSystemBackdrop_Vtbl,
    0x397dafe4_b6c2_5bb9_951d_f5707de8b7bc
);
impl windows_core::RuntimeType for ICompositionSupportsSystemBackdrop {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICompositionSupportsSystemBackdrop,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICompositionSupportsSystemBackdrop {
    pub fn SystemBackdrop(
        &self,
    ) -> windows_core::Result<windows::UI::Composition::CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SystemBackdrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSystemBackdrop<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::UI::Composition::CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSystemBackdrop)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for ICompositionSupportsSystemBackdrop {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop";
}
pub trait ICompositionSupportsSystemBackdrop_Impl: windows_core::IUnknownImpl {
    fn SystemBackdrop(&self) -> windows_core::Result<windows::UI::Composition::CompositionBrush>;
    fn SetSystemBackdrop(
        &self,
        value: windows_core::Ref<'_, windows::UI::Composition::CompositionBrush>,
    ) -> windows_core::Result<()>;
}
impl ICompositionSupportsSystemBackdrop_Vtbl {
    pub const fn new<Identity: ICompositionSupportsSystemBackdrop_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn SystemBackdrop<
            Identity: ICompositionSupportsSystemBackdrop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSupportsSystemBackdrop_Impl::SystemBackdrop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSystemBackdrop<
            Identity: ICompositionSupportsSystemBackdrop_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSupportsSystemBackdrop_Impl::SetSystemBackdrop(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionSupportsSystemBackdrop,
                OFFSET,
            >(),
            SystemBackdrop: SystemBackdrop::<Identity, OFFSET>,
            SetSystemBackdrop: SetSystemBackdrop::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSupportsSystemBackdrop as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSupportsSystemBackdrop_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SystemBackdrop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSystemBackdrop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionSurface,
    ICompositionSurface_Vtbl,
    0x9ec612c3_a5d2_4f97_9df3_6b49ce736215
);
impl windows_core::RuntimeType for ICompositionSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICompositionSurface,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl windows_core::RuntimeName for ICompositionSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSurface";
}
pub trait ICompositionSurface_Impl: windows_core::IUnknownImpl {}
impl ICompositionSurface_Vtbl {
    pub const fn new<Identity: ICompositionSurface_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionSurface, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionSurfaceBrush,
    ICompositionSurfaceBrush_Vtbl,
    0x616bb5a5_0a33_512d_b4b1_3d3734f04aca
);
impl windows_core::RuntimeType for ICompositionSurfaceBrush {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionSurfaceBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSurfaceBrush";
}
pub trait ICompositionSurfaceBrush_Impl: windows_core::IUnknownImpl {
    fn BitmapInterpolationMode(&self) -> windows_core::Result<CompositionBitmapInterpolationMode>;
    fn SetBitmapInterpolationMode(
        &self,
        value: CompositionBitmapInterpolationMode,
    ) -> windows_core::Result<()>;
    fn HorizontalAlignmentRatio(&self) -> windows_core::Result<f32>;
    fn SetHorizontalAlignmentRatio(&self, value: f32) -> windows_core::Result<()>;
    fn Stretch(&self) -> windows_core::Result<CompositionStretch>;
    fn SetStretch(&self, value: CompositionStretch) -> windows_core::Result<()>;
    fn Surface(&self) -> windows_core::Result<ICompositionSurface>;
    fn SetSurface(
        &self,
        value: windows_core::Ref<'_, ICompositionSurface>,
    ) -> windows_core::Result<()>;
    fn VerticalAlignmentRatio(&self) -> windows_core::Result<f32>;
    fn SetVerticalAlignmentRatio(&self, value: f32) -> windows_core::Result<()>;
}
impl ICompositionSurfaceBrush_Vtbl {
    pub const fn new<Identity: ICompositionSurfaceBrush_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BitmapInterpolationMode<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionBitmapInterpolationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush_Impl::BitmapInterpolationMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBitmapInterpolationMode<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionBitmapInterpolationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush_Impl::SetBitmapInterpolationMode(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalAlignmentRatio<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush_Impl::HorizontalAlignmentRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalAlignmentRatio<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush_Impl::SetHorizontalAlignmentRatio(this, value).into()
            }
        }
        unsafe extern "system" fn Stretch<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush_Impl::Stretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStretch<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush_Impl::SetStretch(this, value).into()
            }
        }
        unsafe extern "system" fn Surface<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush_Impl::Surface(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSurface<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush_Impl::SetSurface(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn VerticalAlignmentRatio<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush_Impl::VerticalAlignmentRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalAlignmentRatio<
            Identity: ICompositionSurfaceBrush_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush_Impl::SetVerticalAlignmentRatio(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionSurfaceBrush,
                OFFSET,
            >(),
            BitmapInterpolationMode: BitmapInterpolationMode::<Identity, OFFSET>,
            SetBitmapInterpolationMode: SetBitmapInterpolationMode::<Identity, OFFSET>,
            HorizontalAlignmentRatio: HorizontalAlignmentRatio::<Identity, OFFSET>,
            SetHorizontalAlignmentRatio: SetHorizontalAlignmentRatio::<Identity, OFFSET>,
            Stretch: Stretch::<Identity, OFFSET>,
            SetStretch: SetStretch::<Identity, OFFSET>,
            Surface: Surface::<Identity, OFFSET>,
            SetSurface: SetSurface::<Identity, OFFSET>,
            VerticalAlignmentRatio: VerticalAlignmentRatio::<Identity, OFFSET>,
            SetVerticalAlignmentRatio: SetVerticalAlignmentRatio::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSurfaceBrush as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BitmapInterpolationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionBitmapInterpolationMode,
    ) -> windows_core::HRESULT,
    pub SetBitmapInterpolationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionBitmapInterpolationMode,
    ) -> windows_core::HRESULT,
    pub HorizontalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetHorizontalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStretch,
    ) -> windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStretch,
    ) -> windows_core::HRESULT,
    pub Surface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub VerticalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetVerticalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionSurfaceBrush2,
    ICompositionSurfaceBrush2_Vtbl,
    0x9904b7e3_084b_58b5_9ae1_3a2040dd7a22
);
impl windows_core::RuntimeType for ICompositionSurfaceBrush2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionSurfaceBrush2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSurfaceBrush2";
}
pub trait ICompositionSurfaceBrush2_Impl: windows_core::IUnknownImpl {
    fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetAnchorPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetCenterPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetScale(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2>;
    fn SetTransformMatrix(&self, value: &windows_numerics::Matrix3x2) -> windows_core::Result<()>;
}
impl ICompositionSurfaceBrush2_Vtbl {
    pub const fn new<Identity: ICompositionSurfaceBrush2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnchorPoint<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::AnchorPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAnchorPoint<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetAnchorPoint(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn CenterPoint<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::CenterPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterPoint<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetCenterPoint(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Offset<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn RotationAngle<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn Scale<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TransformMatrix<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush2_Impl::TransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransformMatrix<
            Identity: ICompositionSurfaceBrush2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix3x2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush2_Impl::SetTransformMatrix(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionSurfaceBrush2,
                OFFSET,
            >(),
            AnchorPoint: AnchorPoint::<Identity, OFFSET>,
            SetAnchorPoint: SetAnchorPoint::<Identity, OFFSET>,
            CenterPoint: CenterPoint::<Identity, OFFSET>,
            SetCenterPoint: SetCenterPoint::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            TransformMatrix: TransformMatrix::<Identity, OFFSET>,
            SetTransformMatrix: SetTransformMatrix::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSurfaceBrush2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix3x2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionSurfaceBrush3,
    ICompositionSurfaceBrush3_Vtbl,
    0x8aa74c78_680c_5791_ab07_92db0f37e352
);
impl windows_core::RuntimeType for ICompositionSurfaceBrush3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionSurfaceBrush3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSurfaceBrush3";
}
pub trait ICompositionSurfaceBrush3_Impl: windows_core::IUnknownImpl {
    fn SnapToPixels(&self) -> windows_core::Result<bool>;
    fn SetSnapToPixels(&self, value: bool) -> windows_core::Result<()>;
}
impl ICompositionSurfaceBrush3_Vtbl {
    pub const fn new<Identity: ICompositionSurfaceBrush3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SnapToPixels<
            Identity: ICompositionSurfaceBrush3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceBrush3_Impl::SnapToPixels(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSnapToPixels<
            Identity: ICompositionSurfaceBrush3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionSurfaceBrush3_Impl::SetSnapToPixels(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionSurfaceBrush3,
                OFFSET,
            >(),
            SnapToPixels: SnapToPixels::<Identity, OFFSET>,
            SetSnapToPixels: SetSnapToPixels::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSurfaceBrush3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SnapToPixels:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetSnapToPixels:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionSurfaceFacade,
    ICompositionSurfaceFacade_Vtbl,
    0x88ac5df6_377f_5cf7_a02e_ed5074d30452
);
impl windows_core::RuntimeType for ICompositionSurfaceFacade {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICompositionSurfaceFacade,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICompositionSurfaceFacade {
    pub fn GetRealSurface(&self) -> windows_core::Result<ICompositionSurface> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetRealSurface)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ICompositionSurfaceFacade {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionSurfaceFacade";
}
pub trait ICompositionSurfaceFacade_Impl: windows_core::IUnknownImpl {
    fn GetRealSurface(&self) -> windows_core::Result<ICompositionSurface>;
}
impl ICompositionSurfaceFacade_Vtbl {
    pub const fn new<Identity: ICompositionSurfaceFacade_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetRealSurface<
            Identity: ICompositionSurfaceFacade_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionSurfaceFacade_Impl::GetRealSurface(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionSurfaceFacade,
                OFFSET,
            >(),
            GetRealSurface: GetRealSurface::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionSurfaceFacade as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceFacade_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetRealSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionTransform,
    ICompositionTransform_Vtbl,
    0x670e1826_1932_51d0_bbb3_063b4ca94b56
);
impl windows_core::RuntimeType for ICompositionTransform {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionTransform {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionTransform";
}
pub trait ICompositionTransform_Impl: windows_core::IUnknownImpl {}
impl ICompositionTransform_Vtbl {
    pub const fn new<Identity: ICompositionTransform_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionTransform, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionTransform as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionTransform_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionTransformFactory,
    ICompositionTransformFactory_Vtbl,
    0x78cc7bf2_cdc0_59d2_9c04_8d208de7ef5e
);
impl windows_core::RuntimeType for ICompositionTransformFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionTransformFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionTransformFactory";
}
pub trait ICompositionTransformFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionTransformFactory_Vtbl {
    pub const fn new<Identity: ICompositionTransformFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionTransformFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionTransformFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionTransformFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionViewBox,
    ICompositionViewBox_Vtbl,
    0x667e4071_addd_5ded_b6c0_09e03a14be7e
);
impl windows_core::RuntimeType for ICompositionViewBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionViewBox {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionViewBox";
}
pub trait ICompositionViewBox_Impl: windows_core::IUnknownImpl {
    fn HorizontalAlignmentRatio(&self) -> windows_core::Result<f32>;
    fn SetHorizontalAlignmentRatio(&self, value: f32) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Size(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Stretch(&self) -> windows_core::Result<CompositionStretch>;
    fn SetStretch(&self, value: CompositionStretch) -> windows_core::Result<()>;
    fn VerticalAlignmentRatio(&self) -> windows_core::Result<f32>;
    fn SetVerticalAlignmentRatio(&self, value: f32) -> windows_core::Result<()>;
}
impl ICompositionViewBox_Vtbl {
    pub const fn new<Identity: ICompositionViewBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontalAlignmentRatio<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionViewBox_Impl::HorizontalAlignmentRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalAlignmentRatio<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionViewBox_Impl::SetHorizontalAlignmentRatio(this, value).into()
            }
        }
        unsafe extern "system" fn Offset<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionViewBox_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionViewBox_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Size<Identity: ICompositionViewBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionViewBox_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSize<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionViewBox_Impl::SetSize(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Stretch<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionViewBox_Impl::Stretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStretch<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionViewBox_Impl::SetStretch(this, value).into()
            }
        }
        unsafe extern "system" fn VerticalAlignmentRatio<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionViewBox_Impl::VerticalAlignmentRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalAlignmentRatio<
            Identity: ICompositionViewBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionViewBox_Impl::SetVerticalAlignmentRatio(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositionViewBox, OFFSET>(),
            HorizontalAlignmentRatio: HorizontalAlignmentRatio::<Identity, OFFSET>,
            SetHorizontalAlignmentRatio: SetHorizontalAlignmentRatio::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
            SetSize: SetSize::<Identity, OFFSET>,
            Stretch: Stretch::<Identity, OFFSET>,
            SetStretch: SetStretch::<Identity, OFFSET>,
            VerticalAlignmentRatio: VerticalAlignmentRatio::<Identity, OFFSET>,
            SetVerticalAlignmentRatio: SetVerticalAlignmentRatio::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionViewBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionViewBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetHorizontalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionStretch,
    ) -> windows_core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionStretch,
    ) -> windows_core::HRESULT,
    pub VerticalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetVerticalAlignmentRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionVirtualDrawingSurface,
    ICompositionVirtualDrawingSurface_Vtbl,
    0xd741b99d_e248_5ba7_b728_8beea53fe28e
);
impl windows_core::RuntimeType for ICompositionVirtualDrawingSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionVirtualDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionVirtualDrawingSurface";
}
pub trait ICompositionVirtualDrawingSurface_Impl: windows_core::IUnknownImpl {
    fn Trim(&self, rects: &[windows::Graphics::RectInt32]) -> windows_core::Result<()>;
}
impl ICompositionVirtualDrawingSurface_Vtbl {
    pub const fn new<Identity: ICompositionVirtualDrawingSurface_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Trim<
            Identity: ICompositionVirtualDrawingSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            rects_array_size: u32,
            rects: *const windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionVirtualDrawingSurface_Impl::Trim(
                    this,
                    core::slice::from_raw_parts(
                        core::mem::transmute_copy(&rects),
                        rects_array_size as usize,
                    ),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionVirtualDrawingSurface,
                OFFSET,
            >(),
            Trim: Trim::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionVirtualDrawingSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVirtualDrawingSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Trim: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionVirtualDrawingSurfaceFactory,
    ICompositionVirtualDrawingSurfaceFactory_Vtbl,
    0x85895891_3f06_52e2_b5ea_d1fb595f6574
);
impl windows_core::RuntimeType for ICompositionVirtualDrawingSurfaceFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionVirtualDrawingSurfaceFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceFactory";
}
pub trait ICompositionVirtualDrawingSurfaceFactory_Impl: windows_core::IUnknownImpl {}
impl ICompositionVirtualDrawingSurfaceFactory_Vtbl {
    pub const fn new<
        Identity: ICompositionVirtualDrawingSurfaceFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionVirtualDrawingSurfaceFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionVirtualDrawingSurfaceFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVirtualDrawingSurfaceFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionVisualSurface,
    ICompositionVisualSurface_Vtbl,
    0x49e3624b_4d2e_53e7_9e02_f64831681134
);
impl windows_core::RuntimeType for ICompositionVisualSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionVisualSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositionVisualSurface";
}
pub trait ICompositionVisualSurface_Impl: windows_core::IUnknownImpl {
    fn SourceVisual(&self) -> windows_core::Result<Visual>;
    fn SetSourceVisual(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn SourceOffset(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSourceOffset(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn SourceSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSourceSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl ICompositionVisualSurface_Vtbl {
    pub const fn new<Identity: ICompositionVisualSurface_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SourceVisual<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionVisualSurface_Impl::SourceVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSourceVisual<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionVisualSurface_Impl::SetSourceVisual(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SourceOffset<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionVisualSurface_Impl::SourceOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSourceOffset<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionVisualSurface_Impl::SetSourceOffset(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn SourceSize<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionVisualSurface_Impl::SourceSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSourceSize<
            Identity: ICompositionVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionVisualSurface_Impl::SetSourceSize(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionVisualSurface,
                OFFSET,
            >(),
            SourceVisual: SourceVisual::<Identity, OFFSET>,
            SetSourceVisual: SetSourceVisual::<Identity, OFFSET>,
            SourceOffset: SourceOffset::<Identity, OFFSET>,
            SetSourceOffset: SetSourceOffset::<Identity, OFFSET>,
            SourceSize: SourceSize::<Identity, OFFSET>,
            SetSourceSize: SetSourceSize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionVisualSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVisualSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SourceVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSourceVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SourceOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSourceOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SourceSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSourceSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor,
    ICompositor_Vtbl,
    0x95213c13_c4cb_57de_b267_d21ab901ae38
);
impl windows_core::RuntimeType for ICompositor {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor";
}
pub trait ICompositor_Impl: windows_core::IUnknownImpl {
    fn CreateColorKeyFrameAnimation(&self) -> windows_core::Result<ColorKeyFrameAnimation>;
    fn CreateColorBrush(&self) -> windows_core::Result<CompositionColorBrush>;
    fn CreateColorBrushWithColor(
        &self,
        color: &windows::UI::Color,
    ) -> windows_core::Result<CompositionColorBrush>;
    fn CreateContainerVisual(&self) -> windows_core::Result<ContainerVisual>;
    fn CreateCubicBezierEasingFunction(
        &self,
        controlPoint1: &windows_numerics::Vector2,
        controlPoint2: &windows_numerics::Vector2,
    ) -> windows_core::Result<CubicBezierEasingFunction>;
    fn CreateEffectFactory(
        &self,
        graphicsEffect: windows_core::Ref<'_, windows::Graphics::Effects::IGraphicsEffect>,
    ) -> windows_core::Result<CompositionEffectFactory>;
    fn CreateEffectFactoryWithProperties(
        &self,
        graphicsEffect: windows_core::Ref<'_, windows::Graphics::Effects::IGraphicsEffect>,
        animatableProperties: windows_core::Ref<
            '_,
            windows_collections::IIterable<windows_core::HSTRING>,
        >,
    ) -> windows_core::Result<CompositionEffectFactory>;
    fn CreateExpressionAnimation(&self) -> windows_core::Result<ExpressionAnimation>;
    fn CreateExpressionAnimationWithExpression(
        &self,
        expression: &windows_core::HSTRING,
    ) -> windows_core::Result<ExpressionAnimation>;
    fn CreateInsetClip(&self) -> windows_core::Result<InsetClip>;
    fn CreateInsetClipWithInsets(
        &self,
        leftInset: f32,
        topInset: f32,
        rightInset: f32,
        bottomInset: f32,
    ) -> windows_core::Result<InsetClip>;
    fn CreateLinearEasingFunction(&self) -> windows_core::Result<LinearEasingFunction>;
    fn CreatePropertySet(&self) -> windows_core::Result<CompositionPropertySet>;
    fn CreateQuaternionKeyFrameAnimation(
        &self,
    ) -> windows_core::Result<QuaternionKeyFrameAnimation>;
    fn CreateScalarKeyFrameAnimation(&self) -> windows_core::Result<ScalarKeyFrameAnimation>;
    fn CreateScopedBatch(
        &self,
        batchType: CompositionBatchTypes,
    ) -> windows_core::Result<CompositionScopedBatch>;
    fn CreateSpriteVisual(&self) -> windows_core::Result<SpriteVisual>;
    fn CreateSurfaceBrush(&self) -> windows_core::Result<CompositionSurfaceBrush>;
    fn CreateSurfaceBrushWithSurface(
        &self,
        surface: windows_core::Ref<'_, ICompositionSurface>,
    ) -> windows_core::Result<CompositionSurfaceBrush>;
    fn CreateVector2KeyFrameAnimation(&self) -> windows_core::Result<Vector2KeyFrameAnimation>;
    fn CreateVector3KeyFrameAnimation(&self) -> windows_core::Result<Vector3KeyFrameAnimation>;
    fn CreateVector4KeyFrameAnimation(&self) -> windows_core::Result<Vector4KeyFrameAnimation>;
    fn GetCommitBatch(
        &self,
        batchType: CompositionBatchTypes,
    ) -> windows_core::Result<CompositionCommitBatch>;
}
impl ICompositor_Vtbl {
    pub const fn new<Identity: ICompositor_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateColorKeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateColorKeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateColorBrush<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateColorBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateColorBrushWithColor<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            color: windows::UI::Color,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateColorBrushWithColor(
                    this,
                    core::mem::transmute(&color),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateContainerVisual<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateContainerVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateCubicBezierEasingFunction<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            controlpoint1: windows_numerics::Vector2,
            controlpoint2: windows_numerics::Vector2,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateCubicBezierEasingFunction(
                    this,
                    core::mem::transmute(&controlpoint1),
                    core::mem::transmute(&controlpoint2),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateEffectFactory<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            graphicseffect: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateEffectFactory(
                    this,
                    core::mem::transmute_copy(&graphicseffect),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateEffectFactoryWithProperties<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            graphicseffect: *mut core::ffi::c_void,
            animatableproperties: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateEffectFactoryWithProperties(
                    this,
                    core::mem::transmute_copy(&graphicseffect),
                    core::mem::transmute_copy(&animatableproperties),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateExpressionAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateExpressionAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateExpressionAnimationWithExpression<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            expression: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateExpressionAnimationWithExpression(
                    this,
                    core::mem::transmute(&expression),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInsetClip<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateInsetClip(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInsetClipWithInsets<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            leftinset: f32,
            topinset: f32,
            rightinset: f32,
            bottominset: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateInsetClipWithInsets(
                    this,
                    leftinset,
                    topinset,
                    rightinset,
                    bottominset,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateLinearEasingFunction<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateLinearEasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePropertySet<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreatePropertySet(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateQuaternionKeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateQuaternionKeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateScalarKeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateScalarKeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateScopedBatch<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            batchtype: CompositionBatchTypes,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateScopedBatch(this, batchtype) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpriteVisual<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateSpriteVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSurfaceBrush<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateSurfaceBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSurfaceBrushWithSurface<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            surface: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateSurfaceBrushWithSurface(
                    this,
                    core::mem::transmute_copy(&surface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateVector2KeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateVector2KeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateVector3KeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateVector3KeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateVector4KeyFrameAnimation<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::CreateVector4KeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCommitBatch<
            Identity: ICompositor_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            batchtype: CompositionBatchTypes,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor_Impl::GetCommitBatch(this, batchtype) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor, OFFSET>(),
            CreateColorKeyFrameAnimation: CreateColorKeyFrameAnimation::<Identity, OFFSET>,
            CreateColorBrush: CreateColorBrush::<Identity, OFFSET>,
            CreateColorBrushWithColor: CreateColorBrushWithColor::<Identity, OFFSET>,
            CreateContainerVisual: CreateContainerVisual::<Identity, OFFSET>,
            CreateCubicBezierEasingFunction: CreateCubicBezierEasingFunction::<Identity, OFFSET>,
            CreateEffectFactory: CreateEffectFactory::<Identity, OFFSET>,
            CreateEffectFactoryWithProperties: CreateEffectFactoryWithProperties::<Identity, OFFSET>,
            CreateExpressionAnimation: CreateExpressionAnimation::<Identity, OFFSET>,
            CreateExpressionAnimationWithExpression: CreateExpressionAnimationWithExpression::<
                Identity,
                OFFSET,
            >,
            CreateInsetClip: CreateInsetClip::<Identity, OFFSET>,
            CreateInsetClipWithInsets: CreateInsetClipWithInsets::<Identity, OFFSET>,
            CreateLinearEasingFunction: CreateLinearEasingFunction::<Identity, OFFSET>,
            CreatePropertySet: CreatePropertySet::<Identity, OFFSET>,
            CreateQuaternionKeyFrameAnimation: CreateQuaternionKeyFrameAnimation::<Identity, OFFSET>,
            CreateScalarKeyFrameAnimation: CreateScalarKeyFrameAnimation::<Identity, OFFSET>,
            CreateScopedBatch: CreateScopedBatch::<Identity, OFFSET>,
            CreateSpriteVisual: CreateSpriteVisual::<Identity, OFFSET>,
            CreateSurfaceBrush: CreateSurfaceBrush::<Identity, OFFSET>,
            CreateSurfaceBrushWithSurface: CreateSurfaceBrushWithSurface::<Identity, OFFSET>,
            CreateVector2KeyFrameAnimation: CreateVector2KeyFrameAnimation::<Identity, OFFSET>,
            CreateVector3KeyFrameAnimation: CreateVector3KeyFrameAnimation::<Identity, OFFSET>,
            CreateVector4KeyFrameAnimation: CreateVector4KeyFrameAnimation::<Identity, OFFSET>,
            GetCommitBatch: GetCommitBatch::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateColorKeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateColorBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateColorBrushWithColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateContainerVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateCubicBezierEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
        windows_numerics::Vector2,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateEffectFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateEffectFactoryWithProperties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateExpressionAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateExpressionAnimationWithExpression: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub CreateInsetClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateInsetClipWithInsets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        f32,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateLinearEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePropertySet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateQuaternionKeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateScalarKeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateScopedBatch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionBatchTypes,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpriteVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSurfaceBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSurfaceBrushWithSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateVector2KeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateVector3KeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateVector4KeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCommitBatch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionBatchTypes,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor2,
    ICompositor2_Vtbl,
    0xa9ffedad_3982_576d_a38a_c888ff605819
);
impl windows_core::RuntimeType for ICompositor2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor2";
}
pub trait ICompositor2_Impl: windows_core::IUnknownImpl {
    fn CreateAmbientLight(&self) -> windows_core::Result<AmbientLight>;
    fn CreateAnimationGroup(&self) -> windows_core::Result<CompositionAnimationGroup>;
    fn CreateBackdropBrush(&self) -> windows_core::Result<CompositionBackdropBrush>;
    fn CreateDistantLight(&self) -> windows_core::Result<DistantLight>;
    fn CreateDropShadow(&self) -> windows_core::Result<DropShadow>;
    fn CreateImplicitAnimationCollection(
        &self,
    ) -> windows_core::Result<ImplicitAnimationCollection>;
    fn CreateLayerVisual(&self) -> windows_core::Result<LayerVisual>;
    fn CreateMaskBrush(&self) -> windows_core::Result<CompositionMaskBrush>;
    fn CreateNineGridBrush(&self) -> windows_core::Result<CompositionNineGridBrush>;
    fn CreatePointLight(&self) -> windows_core::Result<PointLight>;
    fn CreateSpotLight(&self) -> windows_core::Result<SpotLight>;
    fn CreateStepEasingFunction(&self) -> windows_core::Result<StepEasingFunction>;
    fn CreateStepEasingFunctionWithStepCount(
        &self,
        stepCount: i32,
    ) -> windows_core::Result<StepEasingFunction>;
}
impl ICompositor2_Vtbl {
    pub const fn new<Identity: ICompositor2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateAmbientLight<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateAmbientLight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateAnimationGroup<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateAnimationGroup(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBackdropBrush<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateBackdropBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateDistantLight<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateDistantLight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateDropShadow<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateDropShadow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateImplicitAnimationCollection<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateImplicitAnimationCollection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateLayerVisual<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateLayerVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateMaskBrush<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateMaskBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateNineGridBrush<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateNineGridBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePointLight<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreatePointLight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpotLight<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateSpotLight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateStepEasingFunction<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateStepEasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateStepEasingFunctionWithStepCount<
            Identity: ICompositor2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stepcount: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor2_Impl::CreateStepEasingFunctionWithStepCount(this, stepcount) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor2, OFFSET>(),
            CreateAmbientLight: CreateAmbientLight::<Identity, OFFSET>,
            CreateAnimationGroup: CreateAnimationGroup::<Identity, OFFSET>,
            CreateBackdropBrush: CreateBackdropBrush::<Identity, OFFSET>,
            CreateDistantLight: CreateDistantLight::<Identity, OFFSET>,
            CreateDropShadow: CreateDropShadow::<Identity, OFFSET>,
            CreateImplicitAnimationCollection: CreateImplicitAnimationCollection::<Identity, OFFSET>,
            CreateLayerVisual: CreateLayerVisual::<Identity, OFFSET>,
            CreateMaskBrush: CreateMaskBrush::<Identity, OFFSET>,
            CreateNineGridBrush: CreateNineGridBrush::<Identity, OFFSET>,
            CreatePointLight: CreatePointLight::<Identity, OFFSET>,
            CreateSpotLight: CreateSpotLight::<Identity, OFFSET>,
            CreateStepEasingFunction: CreateStepEasingFunction::<Identity, OFFSET>,
            CreateStepEasingFunctionWithStepCount: CreateStepEasingFunctionWithStepCount::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateAmbientLight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateAnimationGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBackdropBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateDistantLight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateDropShadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateImplicitAnimationCollection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateLayerVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateMaskBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateNineGridBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePointLight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpotLight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateStepEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateStepEasingFunctionWithStepCount: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor4,
    ICompositor4_Vtbl,
    0xee444bca_735c_5cf2_b79d_a6dd46c16160
);
impl windows_core::RuntimeType for ICompositor4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor4 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor4";
}
pub trait ICompositor4_Impl: windows_core::IUnknownImpl {
    fn CreateColorGradientStop(&self) -> windows_core::Result<CompositionColorGradientStop>;
    fn CreateColorGradientStopWithOffsetAndColor(
        &self,
        offset: f32,
        color: &windows::UI::Color,
    ) -> windows_core::Result<CompositionColorGradientStop>;
    fn CreateLinearGradientBrush(&self) -> windows_core::Result<CompositionLinearGradientBrush>;
    fn CreateSpringScalarAnimation(
        &self,
    ) -> windows_core::Result<SpringScalarNaturalMotionAnimation>;
    fn CreateSpringVector2Animation(
        &self,
    ) -> windows_core::Result<SpringVector2NaturalMotionAnimation>;
    fn CreateSpringVector3Animation(
        &self,
    ) -> windows_core::Result<SpringVector3NaturalMotionAnimation>;
}
impl ICompositor4_Vtbl {
    pub const fn new<Identity: ICompositor4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateColorGradientStop<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateColorGradientStop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateColorGradientStopWithOffsetAndColor<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: f32,
            color: windows::UI::Color,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateColorGradientStopWithOffsetAndColor(
                    this,
                    offset,
                    core::mem::transmute(&color),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateLinearGradientBrush<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateLinearGradientBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpringScalarAnimation<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateSpringScalarAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpringVector2Animation<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateSpringVector2Animation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpringVector3Animation<
            Identity: ICompositor4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor4_Impl::CreateSpringVector3Animation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor4, OFFSET>(),
            CreateColorGradientStop: CreateColorGradientStop::<Identity, OFFSET>,
            CreateColorGradientStopWithOffsetAndColor: CreateColorGradientStopWithOffsetAndColor::<
                Identity,
                OFFSET,
            >,
            CreateLinearGradientBrush: CreateLinearGradientBrush::<Identity, OFFSET>,
            CreateSpringScalarAnimation: CreateSpringScalarAnimation::<Identity, OFFSET>,
            CreateSpringVector2Animation: CreateSpringVector2Animation::<Identity, OFFSET>,
            CreateSpringVector3Animation: CreateSpringVector3Animation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateColorGradientStop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateColorGradientStopWithOffsetAndColor:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            f32,
            windows::UI::Color,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub CreateLinearGradientBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpringScalarAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpringVector2Animation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpringVector3Animation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor5,
    ICompositor5_Vtbl,
    0xbb52d644_a030_5c19_b883_577ded739ae7
);
impl windows_core::RuntimeType for ICompositor5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor5 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor5";
}
pub trait ICompositor5_Impl: windows_core::IUnknownImpl {
    fn Comment(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn GlobalPlaybackRate(&self) -> windows_core::Result<f32>;
    fn SetGlobalPlaybackRate(&self, value: f32) -> windows_core::Result<()>;
    fn CreateBounceScalarAnimation(
        &self,
    ) -> windows_core::Result<BounceScalarNaturalMotionAnimation>;
    fn CreateBounceVector2Animation(
        &self,
    ) -> windows_core::Result<BounceVector2NaturalMotionAnimation>;
    fn CreateBounceVector3Animation(
        &self,
    ) -> windows_core::Result<BounceVector3NaturalMotionAnimation>;
    fn CreateContainerShape(&self) -> windows_core::Result<CompositionContainerShape>;
    fn CreateEllipseGeometry(&self) -> windows_core::Result<CompositionEllipseGeometry>;
    fn CreateLineGeometry(&self) -> windows_core::Result<CompositionLineGeometry>;
    fn CreatePathGeometry(&self) -> windows_core::Result<CompositionPathGeometry>;
    fn CreatePathGeometryWithPath(
        &self,
        path: windows_core::Ref<'_, CompositionPath>,
    ) -> windows_core::Result<CompositionPathGeometry>;
    fn CreatePathKeyFrameAnimation(&self) -> windows_core::Result<PathKeyFrameAnimation>;
    fn CreateRectangleGeometry(&self) -> windows_core::Result<CompositionRectangleGeometry>;
    fn CreateRoundedRectangleGeometry(
        &self,
    ) -> windows_core::Result<CompositionRoundedRectangleGeometry>;
    fn CreateShapeVisual(&self) -> windows_core::Result<ShapeVisual>;
    fn CreateSpriteShape(&self) -> windows_core::Result<CompositionSpriteShape>;
    fn CreateSpriteShapeWithGeometry(
        &self,
        geometry: windows_core::Ref<'_, CompositionGeometry>,
    ) -> windows_core::Result<CompositionSpriteShape>;
    fn CreateViewBox(&self) -> windows_core::Result<CompositionViewBox>;
    fn RequestCommitAsync(&self) -> windows_core::Result<windows_future::IAsyncAction>;
}
impl ICompositor5_Vtbl {
    pub const fn new<Identity: ICompositor5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Comment<Identity: ICompositor5_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::Comment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetComment<Identity: ICompositor5_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositor5_Impl::SetComment(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn GlobalPlaybackRate<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::GlobalPlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetGlobalPlaybackRate<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositor5_Impl::SetGlobalPlaybackRate(this, value).into()
            }
        }
        unsafe extern "system" fn CreateBounceScalarAnimation<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateBounceScalarAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBounceVector2Animation<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateBounceVector2Animation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBounceVector3Animation<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateBounceVector3Animation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateContainerShape<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateContainerShape(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateEllipseGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateEllipseGeometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateLineGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateLineGeometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePathGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreatePathGeometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePathGeometryWithPath<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            path: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreatePathGeometryWithPath(
                    this,
                    core::mem::transmute_copy(&path),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreatePathKeyFrameAnimation<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreatePathKeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRectangleGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateRectangleGeometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRoundedRectangleGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateRoundedRectangleGeometry(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateShapeVisual<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateShapeVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpriteShape<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateSpriteShape(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateSpriteShapeWithGeometry<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            geometry: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateSpriteShapeWithGeometry(
                    this,
                    core::mem::transmute_copy(&geometry),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateViewBox<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::CreateViewBox(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestCommitAsync<
            Identity: ICompositor5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor5_Impl::RequestCommitAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor5, OFFSET>(),
            Comment: Comment::<Identity, OFFSET>,
            SetComment: SetComment::<Identity, OFFSET>,
            GlobalPlaybackRate: GlobalPlaybackRate::<Identity, OFFSET>,
            SetGlobalPlaybackRate: SetGlobalPlaybackRate::<Identity, OFFSET>,
            CreateBounceScalarAnimation: CreateBounceScalarAnimation::<Identity, OFFSET>,
            CreateBounceVector2Animation: CreateBounceVector2Animation::<Identity, OFFSET>,
            CreateBounceVector3Animation: CreateBounceVector3Animation::<Identity, OFFSET>,
            CreateContainerShape: CreateContainerShape::<Identity, OFFSET>,
            CreateEllipseGeometry: CreateEllipseGeometry::<Identity, OFFSET>,
            CreateLineGeometry: CreateLineGeometry::<Identity, OFFSET>,
            CreatePathGeometry: CreatePathGeometry::<Identity, OFFSET>,
            CreatePathGeometryWithPath: CreatePathGeometryWithPath::<Identity, OFFSET>,
            CreatePathKeyFrameAnimation: CreatePathKeyFrameAnimation::<Identity, OFFSET>,
            CreateRectangleGeometry: CreateRectangleGeometry::<Identity, OFFSET>,
            CreateRoundedRectangleGeometry: CreateRoundedRectangleGeometry::<Identity, OFFSET>,
            CreateShapeVisual: CreateShapeVisual::<Identity, OFFSET>,
            CreateSpriteShape: CreateSpriteShape::<Identity, OFFSET>,
            CreateSpriteShapeWithGeometry: CreateSpriteShapeWithGeometry::<Identity, OFFSET>,
            CreateViewBox: CreateViewBox::<Identity, OFFSET>,
            RequestCommitAsync: RequestCommitAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Comment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetComment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GlobalPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetGlobalPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub CreateBounceScalarAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBounceVector2Animation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateBounceVector3Animation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateContainerShape: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateEllipseGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateLineGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePathGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePathGeometryWithPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreatePathKeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRectangleGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRoundedRectangleGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateShapeVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpriteShape: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateSpriteShapeWithGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateViewBox: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RequestCommitAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor6,
    ICompositor6_Vtbl,
    0x5fd20200_c188_5737_b567_5e61741af19c
);
impl windows_core::RuntimeType for ICompositor6 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor6 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor6";
}
pub trait ICompositor6_Impl: windows_core::IUnknownImpl {
    fn CreateGeometricClip(&self) -> windows_core::Result<CompositionGeometricClip>;
    fn CreateGeometricClipWithGeometry(
        &self,
        geometry: windows_core::Ref<'_, CompositionGeometry>,
    ) -> windows_core::Result<CompositionGeometricClip>;
    fn CreateRedirectVisual(&self) -> windows_core::Result<RedirectVisual>;
    fn CreateRedirectVisualWithSourceVisual(
        &self,
        source: windows_core::Ref<'_, Visual>,
    ) -> windows_core::Result<RedirectVisual>;
    fn CreateBooleanKeyFrameAnimation(&self) -> windows_core::Result<BooleanKeyFrameAnimation>;
}
impl ICompositor6_Vtbl {
    pub const fn new<Identity: ICompositor6_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateGeometricClip<
            Identity: ICompositor6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor6_Impl::CreateGeometricClip(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateGeometricClipWithGeometry<
            Identity: ICompositor6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            geometry: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor6_Impl::CreateGeometricClipWithGeometry(
                    this,
                    core::mem::transmute_copy(&geometry),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRedirectVisual<
            Identity: ICompositor6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor6_Impl::CreateRedirectVisual(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRedirectVisualWithSourceVisual<
            Identity: ICompositor6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor6_Impl::CreateRedirectVisualWithSourceVisual(
                    this,
                    core::mem::transmute_copy(&source),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateBooleanKeyFrameAnimation<
            Identity: ICompositor6_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor6_Impl::CreateBooleanKeyFrameAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor6, OFFSET>(),
            CreateGeometricClip: CreateGeometricClip::<Identity, OFFSET>,
            CreateGeometricClipWithGeometry: CreateGeometricClipWithGeometry::<Identity, OFFSET>,
            CreateRedirectVisual: CreateRedirectVisual::<Identity, OFFSET>,
            CreateRedirectVisualWithSourceVisual: CreateRedirectVisualWithSourceVisual::<
                Identity,
                OFFSET,
            >,
            CreateBooleanKeyFrameAnimation: CreateBooleanKeyFrameAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor6 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor6_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateGeometricClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateGeometricClipWithGeometry: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRedirectVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRedirectVisualWithSourceVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub CreateBooleanKeyFrameAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor7,
    ICompositor7_Vtbl,
    0x5358b81b_4799_5e7c_906c_e3df3b2e95eb
);
impl windows_core::RuntimeType for ICompositor7 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for ICompositor7 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor7";
}
#[cfg(feature = "UI_Dispatching")]
pub trait ICompositor7_Impl: windows_core::IUnknownImpl {
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn CreateAnimationPropertyInfo(&self) -> windows_core::Result<AnimationPropertyInfo>;
    fn CreateRectangleClip(&self) -> windows_core::Result<RectangleClip>;
    fn CreateRectangleClipWithSides(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> windows_core::Result<RectangleClip>;
    fn CreateRectangleClipWithSidesAndRadius(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
        topLeftRadius: &windows_numerics::Vector2,
        topRightRadius: &windows_numerics::Vector2,
        bottomRightRadius: &windows_numerics::Vector2,
        bottomLeftRadius: &windows_numerics::Vector2,
    ) -> windows_core::Result<RectangleClip>;
}
#[cfg(feature = "UI_Dispatching")]
impl ICompositor7_Vtbl {
    pub const fn new<Identity: ICompositor7_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DispatcherQueue<
            Identity: ICompositor7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor7_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateAnimationPropertyInfo<
            Identity: ICompositor7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor7_Impl::CreateAnimationPropertyInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRectangleClip<
            Identity: ICompositor7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor7_Impl::CreateRectangleClip(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRectangleClipWithSides<
            Identity: ICompositor7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor7_Impl::CreateRectangleClipWithSides(
                    this, left, top, right, bottom,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateRectangleClipWithSidesAndRadius<
            Identity: ICompositor7_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
            topleftradius: windows_numerics::Vector2,
            toprightradius: windows_numerics::Vector2,
            bottomrightradius: windows_numerics::Vector2,
            bottomleftradius: windows_numerics::Vector2,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor7_Impl::CreateRectangleClipWithSidesAndRadius(
                    this,
                    left,
                    top,
                    right,
                    bottom,
                    core::mem::transmute(&topleftradius),
                    core::mem::transmute(&toprightradius),
                    core::mem::transmute(&bottomrightradius),
                    core::mem::transmute(&bottomleftradius),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor7, OFFSET>(),
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            CreateAnimationPropertyInfo: CreateAnimationPropertyInfo::<Identity, OFFSET>,
            CreateRectangleClip: CreateRectangleClip::<Identity, OFFSET>,
            CreateRectangleClipWithSides: CreateRectangleClipWithSides::<Identity, OFFSET>,
            CreateRectangleClipWithSidesAndRadius: CreateRectangleClipWithSidesAndRadius::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor7 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor7_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub CreateAnimationPropertyInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRectangleClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRectangleClipWithSides: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        f32,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateRectangleClipWithSidesAndRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        f32,
        f32,
        windows_numerics::Vector2,
        windows_numerics::Vector2,
        windows_numerics::Vector2,
        windows_numerics::Vector2,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositor8,
    ICompositor8_Vtbl,
    0x02f5c9ee_a3c0_577a_9d23_44024c8eacda
);
impl windows_core::RuntimeType for ICompositor8 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositor8 {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositor8";
}
pub trait ICompositor8_Impl: windows_core::IUnknownImpl {
    fn CreateAnimationController(&self) -> windows_core::Result<AnimationController>;
}
impl ICompositor8_Vtbl {
    pub const fn new<Identity: ICompositor8_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateAnimationController<
            Identity: ICompositor8_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositor8_Impl::CreateAnimationController(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositor8, OFFSET>(),
            CreateAnimationController: CreateAnimationController::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositor8 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor8_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateAnimationController: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositorStatics,
    ICompositorStatics_Vtbl,
    0x6baa947a_f103_55c6_91ad_3d275bea65c4
);
impl windows_core::RuntimeType for ICompositorStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositorStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositorStatics";
}
pub trait ICompositorStatics_Impl: windows_core::IUnknownImpl {
    fn MaxGlobalPlaybackRate(&self) -> windows_core::Result<f32>;
    fn MinGlobalPlaybackRate(&self) -> windows_core::Result<f32>;
}
impl ICompositorStatics_Vtbl {
    pub const fn new<Identity: ICompositorStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MaxGlobalPlaybackRate<
            Identity: ICompositorStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorStatics_Impl::MaxGlobalPlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinGlobalPlaybackRate<
            Identity: ICompositorStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorStatics_Impl::MinGlobalPlaybackRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositorStatics, OFFSET>(),
            MaxGlobalPlaybackRate: MaxGlobalPlaybackRate::<Identity, OFFSET>,
            MinGlobalPlaybackRate: MinGlobalPlaybackRate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositorStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MaxGlobalPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub MinGlobalPlaybackRate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositorWithProjectedShadow,
    ICompositorWithProjectedShadow_Vtbl,
    0x60ab2bf2_b95c_5944_8b36_c9773b9f5256
);
impl windows_core::RuntimeType for ICompositorWithProjectedShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositorWithProjectedShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositorWithProjectedShadow";
}
pub trait ICompositorWithProjectedShadow_Impl: windows_core::IUnknownImpl {
    fn CreateProjectedShadowCaster(&self)
        -> windows_core::Result<CompositionProjectedShadowCaster>;
    fn CreateProjectedShadow(&self) -> windows_core::Result<CompositionProjectedShadow>;
    fn CreateProjectedShadowReceiver(
        &self,
    ) -> windows_core::Result<CompositionProjectedShadowReceiver>;
}
impl ICompositorWithProjectedShadow_Vtbl {
    pub const fn new<Identity: ICompositorWithProjectedShadow_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateProjectedShadowCaster<
            Identity: ICompositorWithProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorWithProjectedShadow_Impl::CreateProjectedShadowCaster(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateProjectedShadow<
            Identity: ICompositorWithProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorWithProjectedShadow_Impl::CreateProjectedShadow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateProjectedShadowReceiver<
            Identity: ICompositorWithProjectedShadow_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorWithProjectedShadow_Impl::CreateProjectedShadowReceiver(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositorWithProjectedShadow,
                OFFSET,
            >(),
            CreateProjectedShadowCaster: CreateProjectedShadowCaster::<Identity, OFFSET>,
            CreateProjectedShadow: CreateProjectedShadow::<Identity, OFFSET>,
            CreateProjectedShadowReceiver: CreateProjectedShadowReceiver::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositorWithProjectedShadow as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithProjectedShadow_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateProjectedShadowCaster: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateProjectedShadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateProjectedShadowReceiver: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositorWithRadialGradient,
    ICompositorWithRadialGradient_Vtbl,
    0xfa4f8f7d_5cc7_5c9c_883b_fe878a2f3e30
);
impl windows_core::RuntimeType for ICompositorWithRadialGradient {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositorWithRadialGradient {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositorWithRadialGradient";
}
pub trait ICompositorWithRadialGradient_Impl: windows_core::IUnknownImpl {
    fn CreateRadialGradientBrush(&self) -> windows_core::Result<CompositionRadialGradientBrush>;
}
impl ICompositorWithRadialGradient_Vtbl {
    pub const fn new<Identity: ICompositorWithRadialGradient_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateRadialGradientBrush<
            Identity: ICompositorWithRadialGradient_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorWithRadialGradient_Impl::CreateRadialGradientBrush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositorWithRadialGradient,
                OFFSET,
            >(),
            CreateRadialGradientBrush: CreateRadialGradientBrush::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositorWithRadialGradient as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithRadialGradient_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateRadialGradientBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositorWithVisualSurface,
    ICompositorWithVisualSurface_Vtbl,
    0x5fcfe24a_690a_5378_acee_561e84bfb982
);
impl windows_core::RuntimeType for ICompositorWithVisualSurface {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositorWithVisualSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.ICompositorWithVisualSurface";
}
pub trait ICompositorWithVisualSurface_Impl: windows_core::IUnknownImpl {
    fn CreateVisualSurface(&self) -> windows_core::Result<CompositionVisualSurface>;
}
impl ICompositorWithVisualSurface_Vtbl {
    pub const fn new<Identity: ICompositorWithVisualSurface_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateVisualSurface<
            Identity: ICompositorWithVisualSurface_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositorWithVisualSurface_Impl::CreateVisualSurface(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositorWithVisualSurface,
                OFFSET,
            >(),
            CreateVisualSurface: CreateVisualSurface::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositorWithVisualSurface as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithVisualSurface_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateVisualSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContainerVisual,
    IContainerVisual_Vtbl,
    0xc70dbce1_2c2f_5d8e_91a4_aae1121e6186
);
impl windows_core::RuntimeType for IContainerVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContainerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.IContainerVisual";
}
pub trait IContainerVisual_Impl: windows_core::IUnknownImpl {
    fn Children(&self) -> windows_core::Result<VisualCollection>;
}
impl IContainerVisual_Vtbl {
    pub const fn new<Identity: IContainerVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Children<Identity: IContainerVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContainerVisual_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContainerVisual, OFFSET>(),
            Children: Children::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContainerVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContainerVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContainerVisualFactory,
    IContainerVisualFactory_Vtbl,
    0x3fa45eeb_c6dd_5afd_971d_eaaf6245e716
);
impl windows_core::RuntimeType for IContainerVisualFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContainerVisualFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IContainerVisualFactory";
}
pub trait IContainerVisualFactory_Impl: windows_core::IUnknownImpl {}
impl IContainerVisualFactory_Vtbl {
    pub const fn new<Identity: IContainerVisualFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContainerVisualFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContainerVisualFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContainerVisualFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICubicBezierEasingFunction,
    ICubicBezierEasingFunction_Vtbl,
    0x35e7fcde_f9ce_590a_8b88_64a82a6b4b48
);
impl windows_core::RuntimeType for ICubicBezierEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICubicBezierEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ICubicBezierEasingFunction";
}
pub trait ICubicBezierEasingFunction_Impl: windows_core::IUnknownImpl {
    fn ControlPoint1(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn ControlPoint2(&self) -> windows_core::Result<windows_numerics::Vector2>;
}
impl ICubicBezierEasingFunction_Vtbl {
    pub const fn new<Identity: ICubicBezierEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ControlPoint1<
            Identity: ICubicBezierEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICubicBezierEasingFunction_Impl::ControlPoint1(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ControlPoint2<
            Identity: ICubicBezierEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICubicBezierEasingFunction_Impl::ControlPoint2(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICubicBezierEasingFunction,
                OFFSET,
            >(),
            ControlPoint1: ControlPoint1::<Identity, OFFSET>,
            ControlPoint2: ControlPoint2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICubicBezierEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICubicBezierEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ControlPoint1: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ControlPoint2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDistantLight,
    IDistantLight_Vtbl,
    0x125ef556_56ee_5c60_b944_571928ca03f5
);
impl windows_core::RuntimeType for IDistantLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDistantLight {
    const NAME: &'static str = "Microsoft.UI.Composition.IDistantLight";
}
pub trait IDistantLight_Impl: windows_core::IUnknownImpl {
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn CoordinateSpace(&self) -> windows_core::Result<Visual>;
    fn SetCoordinateSpace(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn Direction(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetDirection(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
}
impl IDistantLight_Vtbl {
    pub const fn new<Identity: IDistantLight_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Color<Identity: IDistantLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDistantLight_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<Identity: IDistantLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDistantLight_Impl::SetColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn CoordinateSpace<
            Identity: IDistantLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDistantLight_Impl::CoordinateSpace(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCoordinateSpace<
            Identity: IDistantLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDistantLight_Impl::SetCoordinateSpace(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Direction<Identity: IDistantLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDistantLight_Impl::Direction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDirection<
            Identity: IDistantLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDistantLight_Impl::SetDirection(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDistantLight, OFFSET>(),
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
            CoordinateSpace: CoordinateSpace::<Identity, OFFSET>,
            SetCoordinateSpace: SetCoordinateSpace::<Identity, OFFSET>,
            Direction: Direction::<Identity, OFFSET>,
            SetDirection: SetDirection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDistantLight as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantLight_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Direction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDistantLight2,
    IDistantLight2_Vtbl,
    0x9f97bfec_b6b9_51ee_8480_b546468c748f
);
impl windows_core::RuntimeType for IDistantLight2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDistantLight2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IDistantLight2";
}
pub trait IDistantLight2_Impl: windows_core::IUnknownImpl {
    fn Intensity(&self) -> windows_core::Result<f32>;
    fn SetIntensity(&self, value: f32) -> windows_core::Result<()>;
}
impl IDistantLight2_Vtbl {
    pub const fn new<Identity: IDistantLight2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Intensity<Identity: IDistantLight2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDistantLight2_Impl::Intensity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIntensity<
            Identity: IDistantLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDistantLight2_Impl::SetIntensity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDistantLight2, OFFSET>(),
            Intensity: Intensity::<Identity, OFFSET>,
            SetIntensity: SetIntensity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDistantLight2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantLight2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Intensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropShadow,
    IDropShadow_Vtbl,
    0x977095d2_265f_5f58_9789_cb7f85e98c9e
);
impl windows_core::RuntimeType for IDropShadow {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.IDropShadow";
}
pub trait IDropShadow_Impl: windows_core::IUnknownImpl {
    fn BlurRadius(&self) -> windows_core::Result<f32>;
    fn SetBlurRadius(&self, value: f32) -> windows_core::Result<()>;
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn Mask(&self) -> windows_core::Result<CompositionBrush>;
    fn SetMask(&self, value: windows_core::Ref<'_, CompositionBrush>) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetOffset(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Opacity(&self) -> windows_core::Result<f32>;
    fn SetOpacity(&self, value: f32) -> windows_core::Result<()>;
}
impl IDropShadow_Vtbl {
    pub const fn new<Identity: IDropShadow_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BlurRadius<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow_Impl::BlurRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBlurRadius<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow_Impl::SetBlurRadius(this, value).into()
            }
        }
        unsafe extern "system" fn Color<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow_Impl::SetColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Mask<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow_Impl::Mask(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMask<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow_Impl::SetMask(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Opacity<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow_Impl::Opacity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpacity<Identity: IDropShadow_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow_Impl::SetOpacity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDropShadow, OFFSET>(),
            BlurRadius: BlurRadius::<Identity, OFFSET>,
            SetBlurRadius: SetBlurRadius::<Identity, OFFSET>,
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
            Mask: Mask::<Identity, OFFSET>,
            SetMask: SetMask::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            Opacity: Opacity::<Identity, OFFSET>,
            SetOpacity: SetOpacity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropShadow as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropShadow_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBlurRadius:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub Mask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Opacity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropShadow2,
    IDropShadow2_Vtbl,
    0xcbc7c266_2d33_5711_b3b4_5699410bef56
);
impl windows_core::RuntimeType for IDropShadow2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropShadow2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IDropShadow2";
}
pub trait IDropShadow2_Impl: windows_core::IUnknownImpl {
    fn SourcePolicy(&self) -> windows_core::Result<CompositionDropShadowSourcePolicy>;
    fn SetSourcePolicy(&self, value: CompositionDropShadowSourcePolicy)
        -> windows_core::Result<()>;
}
impl IDropShadow2_Vtbl {
    pub const fn new<Identity: IDropShadow2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SourcePolicy<Identity: IDropShadow2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionDropShadowSourcePolicy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropShadow2_Impl::SourcePolicy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSourcePolicy<
            Identity: IDropShadow2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionDropShadowSourcePolicy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropShadow2_Impl::SetSourcePolicy(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDropShadow2, OFFSET>(),
            SourcePolicy: SourcePolicy::<Identity, OFFSET>,
            SetSourcePolicy: SetSourcePolicy::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropShadow2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropShadow2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SourcePolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionDropShadowSourcePolicy,
    ) -> windows_core::HRESULT,
    pub SetSourcePolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionDropShadowSourcePolicy,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IElasticEasingFunction,
    IElasticEasingFunction_Vtbl,
    0xb952e12f_4a50_51a9_a11a_23855f4aae07
);
impl windows_core::RuntimeType for IElasticEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IElasticEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IElasticEasingFunction";
}
pub trait IElasticEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
    fn Oscillations(&self) -> windows_core::Result<i32>;
    fn Springiness(&self) -> windows_core::Result<f32>;
}
impl IElasticEasingFunction_Vtbl {
    pub const fn new<Identity: IElasticEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<
            Identity: IElasticEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Oscillations<
            Identity: IElasticEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEasingFunction_Impl::Oscillations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Springiness<
            Identity: IElasticEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEasingFunction_Impl::Springiness(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IElasticEasingFunction, OFFSET>(
            ),
            Mode: Mode::<Identity, OFFSET>,
            Oscillations: Oscillations::<Identity, OFFSET>,
            Springiness: Springiness::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IElasticEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
    pub Oscillations:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Springiness:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExponentialEasingFunction,
    IExponentialEasingFunction_Vtbl,
    0xdf29ecc1_3ffc_565f_9d6c_533586908106
);
impl windows_core::RuntimeType for IExponentialEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExponentialEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IExponentialEasingFunction";
}
pub trait IExponentialEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
    fn Exponent(&self) -> windows_core::Result<f32>;
}
impl IExponentialEasingFunction_Vtbl {
    pub const fn new<Identity: IExponentialEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<
            Identity: IExponentialEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExponentialEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Exponent<
            Identity: IExponentialEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExponentialEasingFunction_Impl::Exponent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IExponentialEasingFunction,
                OFFSET,
            >(),
            Mode: Mode::<Identity, OFFSET>,
            Exponent: Exponent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExponentialEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
    pub Exponent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExpressionAnimation,
    IExpressionAnimation_Vtbl,
    0x7fff5826_1992_56c0_9060_5ade561a4f2d
);
impl windows_core::RuntimeType for IExpressionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExpressionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IExpressionAnimation";
}
pub trait IExpressionAnimation_Impl: windows_core::IUnknownImpl {
    fn Expression(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetExpression(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IExpressionAnimation_Vtbl {
    pub const fn new<Identity: IExpressionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Expression<
            Identity: IExpressionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExpressionAnimation_Impl::Expression(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExpression<
            Identity: IExpressionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IExpressionAnimation_Impl::SetExpression(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IExpressionAnimation, OFFSET>(
            ),
            Expression: Expression::<Identity, OFFSET>,
            SetExpression: SetExpression::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExpressionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpressionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Expression: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetExpression: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IImplicitAnimationCollection,
    IImplicitAnimationCollection_Vtbl,
    0xc5c0689e_f5ae_5bed_829b_c522cda39717
);
impl windows_core::RuntimeType for IImplicitAnimationCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IImplicitAnimationCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.IImplicitAnimationCollection";
}
pub trait IImplicitAnimationCollection_Impl: windows_core::IUnknownImpl {}
impl IImplicitAnimationCollection_Vtbl {
    pub const fn new<Identity: IImplicitAnimationCollection_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IImplicitAnimationCollection,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IImplicitAnimationCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IImplicitAnimationCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInsetClip,
    IInsetClip_Vtbl,
    0xf9d99475_7b59_5b28_a1d2_b832da6988c9
);
impl windows_core::RuntimeType for IInsetClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInsetClip {
    const NAME: &'static str = "Microsoft.UI.Composition.IInsetClip";
}
pub trait IInsetClip_Impl: windows_core::IUnknownImpl {
    fn BottomInset(&self) -> windows_core::Result<f32>;
    fn SetBottomInset(&self, value: f32) -> windows_core::Result<()>;
    fn LeftInset(&self) -> windows_core::Result<f32>;
    fn SetLeftInset(&self, value: f32) -> windows_core::Result<()>;
    fn RightInset(&self) -> windows_core::Result<f32>;
    fn SetRightInset(&self, value: f32) -> windows_core::Result<()>;
    fn TopInset(&self) -> windows_core::Result<f32>;
    fn SetTopInset(&self, value: f32) -> windows_core::Result<()>;
}
impl IInsetClip_Vtbl {
    pub const fn new<Identity: IInsetClip_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BottomInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInsetClip_Impl::BottomInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottomInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInsetClip_Impl::SetBottomInset(this, value).into()
            }
        }
        unsafe extern "system" fn LeftInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInsetClip_Impl::LeftInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeftInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInsetClip_Impl::SetLeftInset(this, value).into()
            }
        }
        unsafe extern "system" fn RightInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInsetClip_Impl::RightInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRightInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInsetClip_Impl::SetRightInset(this, value).into()
            }
        }
        unsafe extern "system" fn TopInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInsetClip_Impl::TopInset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopInset<Identity: IInsetClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInsetClip_Impl::SetTopInset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInsetClip, OFFSET>(),
            BottomInset: BottomInset::<Identity, OFFSET>,
            SetBottomInset: SetBottomInset::<Identity, OFFSET>,
            LeftInset: LeftInset::<Identity, OFFSET>,
            SetLeftInset: SetLeftInset::<Identity, OFFSET>,
            RightInset: RightInset::<Identity, OFFSET>,
            SetRightInset: SetRightInset::<Identity, OFFSET>,
            TopInset: TopInset::<Identity, OFFSET>,
            SetTopInset: SetTopInset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInsetClip as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInsetClip_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BottomInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBottomInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub LeftInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLeftInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RightInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRightInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub TopInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTopInset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyFrameAnimation,
    IKeyFrameAnimation_Vtbl,
    0x5a8f57f0_f059_5b47_b308_c4c80fc71248
);
impl windows_core::RuntimeType for IKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IKeyFrameAnimation";
}
pub trait IKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetDelayTime(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
    fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetDuration(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
    fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior>;
    fn SetIterationBehavior(&self, value: AnimationIterationBehavior) -> windows_core::Result<()>;
    fn IterationCount(&self) -> windows_core::Result<i32>;
    fn SetIterationCount(&self, value: i32) -> windows_core::Result<()>;
    fn KeyFrameCount(&self) -> windows_core::Result<i32>;
    fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior>;
    fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()>;
    fn InsertExpressionKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn InsertExpressionKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows_core::HSTRING,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DelayTime<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::DelayTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDelayTime<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::SetDelayTime(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Duration<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::Duration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDuration<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::SetDuration(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn IterationBehavior<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationIterationBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::IterationBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIterationBehavior<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationIterationBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::SetIterationBehavior(this, value).into()
            }
        }
        unsafe extern "system" fn IterationCount<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::IterationCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIterationCount<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::SetIterationCount(this, value).into()
            }
        }
        unsafe extern "system" fn KeyFrameCount<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::KeyFrameCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StopBehavior<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationStopBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation_Impl::StopBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStopBehavior<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationStopBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::SetStopBehavior(this, value).into()
            }
        }
        unsafe extern "system" fn InsertExpressionKeyFrame<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::InsertExpressionKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertExpressionKeyFrameWithEasingFunction<
            Identity: IKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: *mut core::ffi::c_void,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation_Impl::InsertExpressionKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyFrameAnimation, OFFSET>(),
            DelayTime: DelayTime::<Identity, OFFSET>,
            SetDelayTime: SetDelayTime::<Identity, OFFSET>,
            Duration: Duration::<Identity, OFFSET>,
            SetDuration: SetDuration::<Identity, OFFSET>,
            IterationBehavior: IterationBehavior::<Identity, OFFSET>,
            SetIterationBehavior: SetIterationBehavior::<Identity, OFFSET>,
            IterationCount: IterationCount::<Identity, OFFSET>,
            SetIterationCount: SetIterationCount::<Identity, OFFSET>,
            KeyFrameCount: KeyFrameCount::<Identity, OFFSET>,
            StopBehavior: StopBehavior::<Identity, OFFSET>,
            SetStopBehavior: SetStopBehavior::<Identity, OFFSET>,
            InsertExpressionKeyFrame: InsertExpressionKeyFrame::<Identity, OFFSET>,
            InsertExpressionKeyFrameWithEasingFunction: InsertExpressionKeyFrameWithEasingFunction::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DelayTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetDelayTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub Duration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub IterationBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationIterationBehavior,
    ) -> windows_core::HRESULT,
    pub SetIterationBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationIterationBehavior,
    ) -> windows_core::HRESULT,
    pub IterationCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetIterationCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub KeyFrameCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub StopBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationStopBehavior,
    ) -> windows_core::HRESULT,
    pub SetStopBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationStopBehavior,
    ) -> windows_core::HRESULT,
    pub InsertExpressionKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertExpressionKeyFrameWithEasingFunction:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            f32,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyFrameAnimation2,
    IKeyFrameAnimation2_Vtbl,
    0x414692e5_8a7e_58ea_83e1_25ce475d9300
);
impl windows_core::RuntimeType for IKeyFrameAnimation2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyFrameAnimation2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IKeyFrameAnimation2";
}
pub trait IKeyFrameAnimation2_Impl: windows_core::IUnknownImpl {
    fn Direction(&self) -> windows_core::Result<AnimationDirection>;
    fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()>;
}
impl IKeyFrameAnimation2_Vtbl {
    pub const fn new<Identity: IKeyFrameAnimation2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Direction<
            Identity: IKeyFrameAnimation2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation2_Impl::Direction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDirection<
            Identity: IKeyFrameAnimation2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation2_Impl::SetDirection(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyFrameAnimation2, OFFSET>(),
            Direction: Direction::<Identity, OFFSET>,
            SetDirection: SetDirection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyFrameAnimation2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Direction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationDirection,
    ) -> windows_core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationDirection,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyFrameAnimation3,
    IKeyFrameAnimation3_Vtbl,
    0x4f97e180_9bcb_5fc4_abbe_43aa3be327e7
);
impl windows_core::RuntimeType for IKeyFrameAnimation3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyFrameAnimation3 {
    const NAME: &'static str = "Microsoft.UI.Composition.IKeyFrameAnimation3";
}
pub trait IKeyFrameAnimation3_Impl: windows_core::IUnknownImpl {
    fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior>;
    fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()>;
}
impl IKeyFrameAnimation3_Vtbl {
    pub const fn new<Identity: IKeyFrameAnimation3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DelayBehavior<
            Identity: IKeyFrameAnimation3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationDelayBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyFrameAnimation3_Impl::DelayBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDelayBehavior<
            Identity: IKeyFrameAnimation3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationDelayBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeyFrameAnimation3_Impl::SetDelayBehavior(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyFrameAnimation3, OFFSET>(),
            DelayBehavior: DelayBehavior::<Identity, OFFSET>,
            SetDelayBehavior: SetDelayBehavior::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyFrameAnimation3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DelayBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationDelayBehavior,
    ) -> windows_core::HRESULT,
    pub SetDelayBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationDelayBehavior,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyFrameAnimationFactory,
    IKeyFrameAnimationFactory_Vtbl,
    0x7cccfc87_3baf_5100_b5f8_2f779f954f19
);
impl windows_core::RuntimeType for IKeyFrameAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyFrameAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IKeyFrameAnimationFactory";
}
pub trait IKeyFrameAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl IKeyFrameAnimationFactory_Vtbl {
    pub const fn new<Identity: IKeyFrameAnimationFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IKeyFrameAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyFrameAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ILayerVisual,
    ILayerVisual_Vtbl,
    0x64d05ca1_3bf6_5d4f_98a1_7500f2f23ebe
);
impl windows_core::RuntimeType for ILayerVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILayerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ILayerVisual";
}
pub trait ILayerVisual_Impl: windows_core::IUnknownImpl {
    fn Effect(&self) -> windows_core::Result<CompositionEffectBrush>;
    fn SetEffect(
        &self,
        value: windows_core::Ref<'_, CompositionEffectBrush>,
    ) -> windows_core::Result<()>;
}
impl ILayerVisual_Vtbl {
    pub const fn new<Identity: ILayerVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Effect<Identity: ILayerVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ILayerVisual_Impl::Effect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEffect<Identity: ILayerVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ILayerVisual_Impl::SetEffect(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILayerVisual, OFFSET>(),
            Effect: Effect::<Identity, OFFSET>,
            SetEffect: SetEffect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILayerVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILayerVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Effect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEffect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ILayerVisual2,
    ILayerVisual2_Vtbl,
    0x9ab2e401_af45_54da_9991_dd31273155d2
);
impl windows_core::RuntimeType for ILayerVisual2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILayerVisual2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ILayerVisual2";
}
pub trait ILayerVisual2_Impl: windows_core::IUnknownImpl {
    fn Shadow(&self) -> windows_core::Result<CompositionShadow>;
    fn SetShadow(
        &self,
        value: windows_core::Ref<'_, CompositionShadow>,
    ) -> windows_core::Result<()>;
}
impl ILayerVisual2_Vtbl {
    pub const fn new<Identity: ILayerVisual2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Shadow<Identity: ILayerVisual2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ILayerVisual2_Impl::Shadow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShadow<Identity: ILayerVisual2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ILayerVisual2_Impl::SetShadow(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILayerVisual2, OFFSET>(),
            Shadow: Shadow::<Identity, OFFSET>,
            SetShadow: SetShadow::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILayerVisual2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILayerVisual2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Shadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetShadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ILinearEasingFunction,
    ILinearEasingFunction_Vtbl,
    0x79bfeef6_70c7_50a6_bb3a_0e9636148695
);
impl windows_core::RuntimeType for ILinearEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILinearEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ILinearEasingFunction";
}
pub trait ILinearEasingFunction_Impl: windows_core::IUnknownImpl {}
impl ILinearEasingFunction_Vtbl {
    pub const fn new<Identity: ILinearEasingFunction_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILinearEasingFunction, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILinearEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    INaturalMotionAnimation,
    INaturalMotionAnimation_Vtbl,
    0x2ff54ebb_a035_50be_a73c_20014975ee31
);
impl windows_core::RuntimeType for INaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.INaturalMotionAnimation";
}
pub trait INaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior>;
    fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()>;
    fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetDelayTime(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
    fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior>;
    fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()>;
}
impl INaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: INaturalMotionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DelayBehavior<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationDelayBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INaturalMotionAnimation_Impl::DelayBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDelayBehavior<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationDelayBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INaturalMotionAnimation_Impl::SetDelayBehavior(this, value).into()
            }
        }
        unsafe extern "system" fn DelayTime<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INaturalMotionAnimation_Impl::DelayTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDelayTime<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INaturalMotionAnimation_Impl::SetDelayTime(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn StopBehavior<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnimationStopBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INaturalMotionAnimation_Impl::StopBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStopBehavior<
            Identity: INaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnimationStopBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INaturalMotionAnimation_Impl::SetStopBehavior(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INaturalMotionAnimation, OFFSET>(
            ),
            DelayBehavior: DelayBehavior::<Identity, OFFSET>,
            SetDelayBehavior: SetDelayBehavior::<Identity, OFFSET>,
            DelayTime: DelayTime::<Identity, OFFSET>,
            SetDelayTime: SetDelayTime::<Identity, OFFSET>,
            StopBehavior: StopBehavior::<Identity, OFFSET>,
            SetStopBehavior: SetStopBehavior::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DelayBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationDelayBehavior,
    ) -> windows_core::HRESULT,
    pub SetDelayBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationDelayBehavior,
    ) -> windows_core::HRESULT,
    pub DelayTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetDelayTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub StopBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnimationStopBehavior,
    ) -> windows_core::HRESULT,
    pub SetStopBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnimationStopBehavior,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INaturalMotionAnimationFactory,
    INaturalMotionAnimationFactory_Vtbl,
    0x0411a259_2622_59e2_a59e_1e23d8f83a9f
);
impl windows_core::RuntimeType for INaturalMotionAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INaturalMotionAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.INaturalMotionAnimationFactory";
}
pub trait INaturalMotionAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl INaturalMotionAnimationFactory_Vtbl {
    pub const fn new<Identity: INaturalMotionAnimationFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INaturalMotionAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INaturalMotionAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INaturalMotionAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IPathKeyFrameAnimation,
    IPathKeyFrameAnimation_Vtbl,
    0x2b692808_43da_5118_b66d_904a3ec74fd9
);
impl windows_core::RuntimeType for IPathKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPathKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IPathKeyFrameAnimation";
}
pub trait IPathKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        path: windows_core::Ref<'_, CompositionPath>,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        path: windows_core::Ref<'_, CompositionPath>,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IPathKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IPathKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IPathKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            path: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPathKeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute_copy(&path),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IPathKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            path: *mut core::ffi::c_void,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPathKeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute_copy(&path),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPathKeyFrameAnimation, OFFSET>(
            ),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPathKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointLight,
    IPointLight_Vtbl,
    0xed5cc102_f0ac_59a8_8678_ce54146e7be8
);
impl windows_core::RuntimeType for IPointLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointLight {
    const NAME: &'static str = "Microsoft.UI.Composition.IPointLight";
}
pub trait IPointLight_Impl: windows_core::IUnknownImpl {
    fn Color(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn ConstantAttenuation(&self) -> windows_core::Result<f32>;
    fn SetConstantAttenuation(&self, value: f32) -> windows_core::Result<()>;
    fn CoordinateSpace(&self) -> windows_core::Result<Visual>;
    fn SetCoordinateSpace(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn LinearAttenuation(&self) -> windows_core::Result<f32>;
    fn SetLinearAttenuation(&self, value: f32) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetOffset(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn QuadraticAttenuation(&self) -> windows_core::Result<f32>;
    fn SetQuadraticAttenuation(&self, value: f32) -> windows_core::Result<()>;
}
impl IPointLight_Vtbl {
    pub const fn new<Identity: IPointLight_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Color<Identity: IPointLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::Color(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColor<Identity: IPointLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ConstantAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::ConstantAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConstantAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetConstantAttenuation(this, value).into()
            }
        }
        unsafe extern "system" fn CoordinateSpace<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::CoordinateSpace(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCoordinateSpace<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetCoordinateSpace(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn LinearAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::LinearAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLinearAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetLinearAttenuation(this, value).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: IPointLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<Identity: IPointLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn QuadraticAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight_Impl::QuadraticAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetQuadraticAttenuation<
            Identity: IPointLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight_Impl::SetQuadraticAttenuation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointLight, OFFSET>(),
            Color: Color::<Identity, OFFSET>,
            SetColor: SetColor::<Identity, OFFSET>,
            ConstantAttenuation: ConstantAttenuation::<Identity, OFFSET>,
            SetConstantAttenuation: SetConstantAttenuation::<Identity, OFFSET>,
            CoordinateSpace: CoordinateSpace::<Identity, OFFSET>,
            SetCoordinateSpace: SetCoordinateSpace::<Identity, OFFSET>,
            LinearAttenuation: LinearAttenuation::<Identity, OFFSET>,
            SetLinearAttenuation: SetLinearAttenuation::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            QuadraticAttenuation: QuadraticAttenuation::<Identity, OFFSET>,
            SetQuadraticAttenuation: SetQuadraticAttenuation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointLight as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub ConstantAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetConstantAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LinearAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLinearAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub QuadraticAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetQuadraticAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointLight2,
    IPointLight2_Vtbl,
    0xde466104_59d9_57d2_92b5_554d6d82edf2
);
impl windows_core::RuntimeType for IPointLight2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointLight2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IPointLight2";
}
pub trait IPointLight2_Impl: windows_core::IUnknownImpl {
    fn Intensity(&self) -> windows_core::Result<f32>;
    fn SetIntensity(&self, value: f32) -> windows_core::Result<()>;
}
impl IPointLight2_Vtbl {
    pub const fn new<Identity: IPointLight2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Intensity<Identity: IPointLight2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight2_Impl::Intensity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIntensity<Identity: IPointLight2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight2_Impl::SetIntensity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointLight2, OFFSET>(),
            Intensity: Intensity::<Identity, OFFSET>,
            SetIntensity: SetIntensity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointLight2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Intensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointLight3,
    IPointLight3_Vtbl,
    0xbe30e87a_8cbb_5a56_8d24_2cd865f383b3
);
impl windows_core::RuntimeType for IPointLight3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointLight3 {
    const NAME: &'static str = "Microsoft.UI.Composition.IPointLight3";
}
pub trait IPointLight3_Impl: windows_core::IUnknownImpl {
    fn MinAttenuationCutoff(&self) -> windows_core::Result<f32>;
    fn SetMinAttenuationCutoff(&self, value: f32) -> windows_core::Result<()>;
    fn MaxAttenuationCutoff(&self) -> windows_core::Result<f32>;
    fn SetMaxAttenuationCutoff(&self, value: f32) -> windows_core::Result<()>;
}
impl IPointLight3_Vtbl {
    pub const fn new<Identity: IPointLight3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MinAttenuationCutoff<
            Identity: IPointLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight3_Impl::MinAttenuationCutoff(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinAttenuationCutoff<
            Identity: IPointLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight3_Impl::SetMinAttenuationCutoff(this, value).into()
            }
        }
        unsafe extern "system" fn MaxAttenuationCutoff<
            Identity: IPointLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointLight3_Impl::MaxAttenuationCutoff(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxAttenuationCutoff<
            Identity: IPointLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointLight3_Impl::SetMaxAttenuationCutoff(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointLight3, OFFSET>(),
            MinAttenuationCutoff: MinAttenuationCutoff::<Identity, OFFSET>,
            SetMinAttenuationCutoff: SetMinAttenuationCutoff::<Identity, OFFSET>,
            MaxAttenuationCutoff: MaxAttenuationCutoff::<Identity, OFFSET>,
            SetMaxAttenuationCutoff: SetMaxAttenuationCutoff::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointLight3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MinAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMinAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MaxAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMaxAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPowerEasingFunction,
    IPowerEasingFunction_Vtbl,
    0x0268a272_ea06_5fb0_8def_49726bcee39b
);
impl windows_core::RuntimeType for IPowerEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPowerEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IPowerEasingFunction";
}
pub trait IPowerEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
    fn Power(&self) -> windows_core::Result<f32>;
}
impl IPowerEasingFunction_Vtbl {
    pub const fn new<Identity: IPowerEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<Identity: IPowerEasingFunction_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPowerEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Power<
            Identity: IPowerEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPowerEasingFunction_Impl::Power(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPowerEasingFunction, OFFSET>(
            ),
            Mode: Mode::<Identity, OFFSET>,
            Power: Power::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPowerEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
    pub Power: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IQuaternionKeyFrameAnimation,
    IQuaternionKeyFrameAnimation_Vtbl,
    0xe72d1026_da3b_5d56_858b_3a9aa3c57d70
);
impl windows_core::RuntimeType for IQuaternionKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IQuaternionKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IQuaternionKeyFrameAnimation";
}
pub trait IQuaternionKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows::Foundation::Numerics::Quaternion,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IQuaternionKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IQuaternionKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IQuaternionKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IQuaternionKeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IQuaternionKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows::Foundation::Numerics::Quaternion,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IQuaternionKeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IQuaternionKeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IQuaternionKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuaternionKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows::Foundation::Numerics::Quaternion,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRectangleClip,
    IRectangleClip_Vtbl,
    0xbc261502_2259_5c01_8616_556110a09657
);
impl windows_core::RuntimeType for IRectangleClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRectangleClip {
    const NAME: &'static str = "Microsoft.UI.Composition.IRectangleClip";
}
pub trait IRectangleClip_Impl: windows_core::IUnknownImpl {
    fn Bottom(&self) -> windows_core::Result<f32>;
    fn SetBottom(&self, value: f32) -> windows_core::Result<()>;
    fn BottomLeftRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetBottomLeftRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn BottomRightRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetBottomRightRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn Left(&self) -> windows_core::Result<f32>;
    fn SetLeft(&self, value: f32) -> windows_core::Result<()>;
    fn Right(&self) -> windows_core::Result<f32>;
    fn SetRight(&self, value: f32) -> windows_core::Result<()>;
    fn Top(&self) -> windows_core::Result<f32>;
    fn SetTop(&self, value: f32) -> windows_core::Result<()>;
    fn TopLeftRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetTopLeftRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TopRightRadius(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetTopRightRadius(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl IRectangleClip_Vtbl {
    pub const fn new<Identity: IRectangleClip_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Bottom<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::Bottom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottom<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetBottom(this, value).into()
            }
        }
        unsafe extern "system" fn BottomLeftRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::BottomLeftRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottomLeftRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetBottomLeftRadius(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn BottomRightRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::BottomRightRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBottomRightRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetBottomRightRadius(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Left<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::Left(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeft<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetLeft(this, value).into()
            }
        }
        unsafe extern "system" fn Right<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::Right(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRight<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetRight(this, value).into()
            }
        }
        unsafe extern "system" fn Top<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::Top(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTop<Identity: IRectangleClip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetTop(this, value).into()
            }
        }
        unsafe extern "system" fn TopLeftRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::TopLeftRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopLeftRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetTopLeftRadius(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TopRightRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRectangleClip_Impl::TopRightRadius(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopRightRadius<
            Identity: IRectangleClip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRectangleClip_Impl::SetTopRightRadius(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRectangleClip, OFFSET>(),
            Bottom: Bottom::<Identity, OFFSET>,
            SetBottom: SetBottom::<Identity, OFFSET>,
            BottomLeftRadius: BottomLeftRadius::<Identity, OFFSET>,
            SetBottomLeftRadius: SetBottomLeftRadius::<Identity, OFFSET>,
            BottomRightRadius: BottomRightRadius::<Identity, OFFSET>,
            SetBottomRightRadius: SetBottomRightRadius::<Identity, OFFSET>,
            Left: Left::<Identity, OFFSET>,
            SetLeft: SetLeft::<Identity, OFFSET>,
            Right: Right::<Identity, OFFSET>,
            SetRight: SetRight::<Identity, OFFSET>,
            Top: Top::<Identity, OFFSET>,
            SetTop: SetTop::<Identity, OFFSET>,
            TopLeftRadius: TopLeftRadius::<Identity, OFFSET>,
            SetTopLeftRadius: SetTopLeftRadius::<Identity, OFFSET>,
            TopRightRadius: TopRightRadius::<Identity, OFFSET>,
            SetTopRightRadius: SetTopRightRadius::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRectangleClip as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectangleClip_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Bottom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetBottom: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub BottomLeftRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetBottomLeftRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub BottomRightRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetBottomRightRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub Left: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLeft: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Right: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRight: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Top: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetTop: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub TopLeftRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetTopLeftRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TopRightRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetTopRightRadius: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRedirectVisual,
    IRedirectVisual_Vtbl,
    0x6c10081a_cde1_50d9_ac05_78d6845b656f
);
impl windows_core::RuntimeType for IRedirectVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRedirectVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.IRedirectVisual";
}
pub trait IRedirectVisual_Impl: windows_core::IUnknownImpl {
    fn Source(&self) -> windows_core::Result<Visual>;
    fn SetSource(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
}
impl IRedirectVisual_Vtbl {
    pub const fn new<Identity: IRedirectVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Source<Identity: IRedirectVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRedirectVisual_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<Identity: IRedirectVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRedirectVisual_Impl::SetSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRedirectVisual, OFFSET>(),
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRedirectVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRedirectVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRenderingDeviceReplacedEventArgs,
    IRenderingDeviceReplacedEventArgs_Vtbl,
    0xfe5b97c7_f656_56d6_a0cd_3e1227e4dd44
);
impl windows_core::RuntimeType for IRenderingDeviceReplacedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRenderingDeviceReplacedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgs";
}
pub trait IRenderingDeviceReplacedEventArgs_Impl: windows_core::IUnknownImpl {
    fn GraphicsDevice(&self) -> windows_core::Result<CompositionGraphicsDevice>;
}
impl IRenderingDeviceReplacedEventArgs_Vtbl {
    pub const fn new<Identity: IRenderingDeviceReplacedEventArgs_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GraphicsDevice<
            Identity: IRenderingDeviceReplacedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRenderingDeviceReplacedEventArgs_Impl::GraphicsDevice(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRenderingDeviceReplacedEventArgs,
                OFFSET,
            >(),
            GraphicsDevice: GraphicsDevice::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRenderingDeviceReplacedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRenderingDeviceReplacedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GraphicsDevice: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScalarKeyFrameAnimation,
    IScalarKeyFrameAnimation_Vtbl,
    0x5a5f8abe_d129_5b25_8aff_8180fd9bfb22
);
impl windows_core::RuntimeType for IScalarKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScalarKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IScalarKeyFrameAnimation";
}
pub trait IScalarKeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(&self, normalizedProgressKey: f32, value: f32) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: f32,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IScalarKeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IScalarKeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IScalarKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScalarKeyFrameAnimation_Impl::InsertKeyFrame(this, normalizedprogresskey, value)
                    .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IScalarKeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: f32,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScalarKeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    value,
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScalarKeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScalarKeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarKeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32, f32) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScalarNaturalMotionAnimation,
    IScalarNaturalMotionAnimation_Vtbl,
    0x903224b0_2dbe_56eb_b9ea_33d2e3113181
);
impl windows_core::RuntimeType for IScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IScalarNaturalMotionAnimation";
}
pub trait IScalarNaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn FinalValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>>;
    fn SetFinalValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f32>>,
    ) -> windows_core::Result<()>;
    fn InitialValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>>;
    fn SetInitialValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f32>>,
    ) -> windows_core::Result<()>;
    fn InitialVelocity(&self) -> windows_core::Result<f32>;
    fn SetInitialVelocity(&self, value: f32) -> windows_core::Result<()>;
}
impl IScalarNaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IScalarNaturalMotionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FinalValue<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScalarNaturalMotionAnimation_Impl::FinalValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFinalValue<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScalarNaturalMotionAnimation_Impl::SetFinalValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialValue<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScalarNaturalMotionAnimation_Impl::InitialValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialValue<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScalarNaturalMotionAnimation_Impl::SetInitialValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialVelocity<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScalarNaturalMotionAnimation_Impl::InitialVelocity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialVelocity<
            Identity: IScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScalarNaturalMotionAnimation_Impl::SetInitialVelocity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScalarNaturalMotionAnimation,
                OFFSET,
            >(),
            FinalValue: FinalValue::<Identity, OFFSET>,
            SetFinalValue: SetFinalValue::<Identity, OFFSET>,
            InitialValue: InitialValue::<Identity, OFFSET>,
            SetInitialValue: SetInitialValue::<Identity, OFFSET>,
            InitialVelocity: InitialVelocity::<Identity, OFFSET>,
            SetInitialVelocity: SetInitialVelocity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScalarNaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarNaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialVelocity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetInitialVelocity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScalarNaturalMotionAnimationFactory,
    IScalarNaturalMotionAnimationFactory_Vtbl,
    0x14f8a9ab_976c_5e6f_890b_9a74d07fa39f
);
impl windows_core::RuntimeType for IScalarNaturalMotionAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScalarNaturalMotionAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IScalarNaturalMotionAnimationFactory";
}
pub trait IScalarNaturalMotionAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl IScalarNaturalMotionAnimationFactory_Vtbl {
    pub const fn new<Identity: IScalarNaturalMotionAnimationFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScalarNaturalMotionAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScalarNaturalMotionAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarNaturalMotionAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IShapeVisual,
    IShapeVisual_Vtbl,
    0xa911c80b_a5a5_5aca_b8ff_c43f08f06143
);
impl windows_core::RuntimeType for IShapeVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IShapeVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.IShapeVisual";
}
pub trait IShapeVisual_Impl: windows_core::IUnknownImpl {
    fn Shapes(&self) -> windows_core::Result<CompositionShapeCollection>;
    fn ViewBox(&self) -> windows_core::Result<CompositionViewBox>;
    fn SetViewBox(
        &self,
        value: windows_core::Ref<'_, CompositionViewBox>,
    ) -> windows_core::Result<()>;
}
impl IShapeVisual_Vtbl {
    pub const fn new<Identity: IShapeVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Shapes<Identity: IShapeVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IShapeVisual_Impl::Shapes(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ViewBox<Identity: IShapeVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IShapeVisual_Impl::ViewBox(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetViewBox<Identity: IShapeVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IShapeVisual_Impl::SetViewBox(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IShapeVisual, OFFSET>(),
            Shapes: Shapes::<Identity, OFFSET>,
            ViewBox: ViewBox::<Identity, OFFSET>,
            SetViewBox: SetViewBox::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IShapeVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IShapeVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Shapes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ViewBox: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetViewBox: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISineEasingFunction,
    ISineEasingFunction_Vtbl,
    0x7fccb5f8_cb0e_5a01_a26b_98880ff49dc6
);
impl windows_core::RuntimeType for ISineEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISineEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ISineEasingFunction";
}
pub trait ISineEasingFunction_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode>;
}
impl ISineEasingFunction_Vtbl {
    pub const fn new<Identity: ISineEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<Identity: ISineEasingFunction_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionEasingFunctionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISineEasingFunction_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISineEasingFunction, OFFSET>(),
            Mode: Mode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISineEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISineEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionEasingFunctionMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpotLight,
    ISpotLight_Vtbl,
    0x5935496a_0586_5f77_bd03_d5a6bb9e8fa0
);
impl windows_core::RuntimeType for ISpotLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpotLight {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpotLight";
}
pub trait ISpotLight_Impl: windows_core::IUnknownImpl {
    fn ConstantAttenuation(&self) -> windows_core::Result<f32>;
    fn SetConstantAttenuation(&self, value: f32) -> windows_core::Result<()>;
    fn CoordinateSpace(&self) -> windows_core::Result<Visual>;
    fn SetCoordinateSpace(&self, value: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn Direction(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetDirection(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn InnerConeAngle(&self) -> windows_core::Result<f32>;
    fn SetInnerConeAngle(&self, value: f32) -> windows_core::Result<()>;
    fn InnerConeAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetInnerConeAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn InnerConeColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetInnerConeColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn LinearAttenuation(&self) -> windows_core::Result<f32>;
    fn SetLinearAttenuation(&self, value: f32) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetOffset(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn OuterConeAngle(&self) -> windows_core::Result<f32>;
    fn SetOuterConeAngle(&self, value: f32) -> windows_core::Result<()>;
    fn OuterConeAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetOuterConeAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn OuterConeColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetOuterConeColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn QuadraticAttenuation(&self) -> windows_core::Result<f32>;
    fn SetQuadraticAttenuation(&self, value: f32) -> windows_core::Result<()>;
}
impl ISpotLight_Vtbl {
    pub const fn new<Identity: ISpotLight_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ConstantAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::ConstantAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConstantAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetConstantAttenuation(this, value).into()
            }
        }
        unsafe extern "system" fn CoordinateSpace<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::CoordinateSpace(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCoordinateSpace<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetCoordinateSpace(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Direction<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::Direction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDirection<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetDirection(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn InnerConeAngle<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::InnerConeAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInnerConeAngle<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetInnerConeAngle(this, value).into()
            }
        }
        unsafe extern "system" fn InnerConeAngleInDegrees<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::InnerConeAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInnerConeAngleInDegrees<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetInnerConeAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn InnerConeColor<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::InnerConeColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInnerConeColor<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetInnerConeColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn LinearAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::LinearAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLinearAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetLinearAttenuation(this, value).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn OuterConeAngle<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::OuterConeAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOuterConeAngle<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetOuterConeAngle(this, value).into()
            }
        }
        unsafe extern "system" fn OuterConeAngleInDegrees<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::OuterConeAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOuterConeAngleInDegrees<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetOuterConeAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn OuterConeColor<Identity: ISpotLight_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::OuterConeColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOuterConeColor<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetOuterConeColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn QuadraticAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight_Impl::QuadraticAttenuation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetQuadraticAttenuation<
            Identity: ISpotLight_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight_Impl::SetQuadraticAttenuation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpotLight, OFFSET>(),
            ConstantAttenuation: ConstantAttenuation::<Identity, OFFSET>,
            SetConstantAttenuation: SetConstantAttenuation::<Identity, OFFSET>,
            CoordinateSpace: CoordinateSpace::<Identity, OFFSET>,
            SetCoordinateSpace: SetCoordinateSpace::<Identity, OFFSET>,
            Direction: Direction::<Identity, OFFSET>,
            SetDirection: SetDirection::<Identity, OFFSET>,
            InnerConeAngle: InnerConeAngle::<Identity, OFFSET>,
            SetInnerConeAngle: SetInnerConeAngle::<Identity, OFFSET>,
            InnerConeAngleInDegrees: InnerConeAngleInDegrees::<Identity, OFFSET>,
            SetInnerConeAngleInDegrees: SetInnerConeAngleInDegrees::<Identity, OFFSET>,
            InnerConeColor: InnerConeColor::<Identity, OFFSET>,
            SetInnerConeColor: SetInnerConeColor::<Identity, OFFSET>,
            LinearAttenuation: LinearAttenuation::<Identity, OFFSET>,
            SetLinearAttenuation: SetLinearAttenuation::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            OuterConeAngle: OuterConeAngle::<Identity, OFFSET>,
            SetOuterConeAngle: SetOuterConeAngle::<Identity, OFFSET>,
            OuterConeAngleInDegrees: OuterConeAngleInDegrees::<Identity, OFFSET>,
            SetOuterConeAngleInDegrees: SetOuterConeAngleInDegrees::<Identity, OFFSET>,
            OuterConeColor: OuterConeColor::<Identity, OFFSET>,
            SetOuterConeColor: SetOuterConeColor::<Identity, OFFSET>,
            QuadraticAttenuation: QuadraticAttenuation::<Identity, OFFSET>,
            SetQuadraticAttenuation: SetQuadraticAttenuation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpotLight as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ConstantAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetConstantAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Direction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub InnerConeAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetInnerConeAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub InnerConeAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetInnerConeAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub InnerConeColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetInnerConeColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub LinearAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetLinearAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub OuterConeAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOuterConeAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub OuterConeAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOuterConeAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub OuterConeColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetOuterConeColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub QuadraticAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetQuadraticAttenuation:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpotLight2,
    ISpotLight2_Vtbl,
    0x49dd3b50_ec5c_5b6c_baa1_8504b13e3a67
);
impl windows_core::RuntimeType for ISpotLight2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpotLight2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpotLight2";
}
pub trait ISpotLight2_Impl: windows_core::IUnknownImpl {
    fn InnerConeIntensity(&self) -> windows_core::Result<f32>;
    fn SetInnerConeIntensity(&self, value: f32) -> windows_core::Result<()>;
    fn OuterConeIntensity(&self) -> windows_core::Result<f32>;
    fn SetOuterConeIntensity(&self, value: f32) -> windows_core::Result<()>;
}
impl ISpotLight2_Vtbl {
    pub const fn new<Identity: ISpotLight2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InnerConeIntensity<
            Identity: ISpotLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight2_Impl::InnerConeIntensity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInnerConeIntensity<
            Identity: ISpotLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight2_Impl::SetInnerConeIntensity(this, value).into()
            }
        }
        unsafe extern "system" fn OuterConeIntensity<
            Identity: ISpotLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight2_Impl::OuterConeIntensity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOuterConeIntensity<
            Identity: ISpotLight2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight2_Impl::SetOuterConeIntensity(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpotLight2, OFFSET>(),
            InnerConeIntensity: InnerConeIntensity::<Identity, OFFSET>,
            SetInnerConeIntensity: SetInnerConeIntensity::<Identity, OFFSET>,
            OuterConeIntensity: OuterConeIntensity::<Identity, OFFSET>,
            SetOuterConeIntensity: SetOuterConeIntensity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpotLight2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InnerConeIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetInnerConeIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub OuterConeIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOuterConeIntensity:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpotLight3,
    ISpotLight3_Vtbl,
    0xc6919941_0d9f_58c8_91e2_adef6e5e70a4
);
impl windows_core::RuntimeType for ISpotLight3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpotLight3 {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpotLight3";
}
pub trait ISpotLight3_Impl: windows_core::IUnknownImpl {
    fn MinAttenuationCutoff(&self) -> windows_core::Result<f32>;
    fn SetMinAttenuationCutoff(&self, value: f32) -> windows_core::Result<()>;
    fn MaxAttenuationCutoff(&self) -> windows_core::Result<f32>;
    fn SetMaxAttenuationCutoff(&self, value: f32) -> windows_core::Result<()>;
}
impl ISpotLight3_Vtbl {
    pub const fn new<Identity: ISpotLight3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MinAttenuationCutoff<
            Identity: ISpotLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight3_Impl::MinAttenuationCutoff(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinAttenuationCutoff<
            Identity: ISpotLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight3_Impl::SetMinAttenuationCutoff(this, value).into()
            }
        }
        unsafe extern "system" fn MaxAttenuationCutoff<
            Identity: ISpotLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpotLight3_Impl::MaxAttenuationCutoff(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxAttenuationCutoff<
            Identity: ISpotLight3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpotLight3_Impl::SetMaxAttenuationCutoff(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpotLight3, OFFSET>(),
            MinAttenuationCutoff: MinAttenuationCutoff::<Identity, OFFSET>,
            SetMinAttenuationCutoff: SetMinAttenuationCutoff::<Identity, OFFSET>,
            MaxAttenuationCutoff: MaxAttenuationCutoff::<Identity, OFFSET>,
            SetMaxAttenuationCutoff: SetMaxAttenuationCutoff::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpotLight3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MinAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMinAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MaxAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMaxAttenuationCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpringScalarNaturalMotionAnimation,
    ISpringScalarNaturalMotionAnimation_Vtbl,
    0x6f720afd_d3d0_5e78_9c2e_83092f6ea45e
);
impl windows_core::RuntimeType for ISpringScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpringScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimation";
}
pub trait ISpringScalarNaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn DampingRatio(&self) -> windows_core::Result<f32>;
    fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()>;
    fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetPeriod(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
}
impl ISpringScalarNaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: ISpringScalarNaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DampingRatio<
            Identity: ISpringScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringScalarNaturalMotionAnimation_Impl::DampingRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDampingRatio<
            Identity: ISpringScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringScalarNaturalMotionAnimation_Impl::SetDampingRatio(this, value).into()
            }
        }
        unsafe extern "system" fn Period<
            Identity: ISpringScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringScalarNaturalMotionAnimation_Impl::Period(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPeriod<
            Identity: ISpringScalarNaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringScalarNaturalMotionAnimation_Impl::SetPeriod(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpringScalarNaturalMotionAnimation,
                OFFSET,
            >(),
            DampingRatio: DampingRatio::<Identity, OFFSET>,
            SetDampingRatio: SetDampingRatio::<Identity, OFFSET>,
            Period: Period::<Identity, OFFSET>,
            SetPeriod: SetPeriod::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpringScalarNaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringScalarNaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetDampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Period: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpringVector2NaturalMotionAnimation,
    ISpringVector2NaturalMotionAnimation_Vtbl,
    0x5b4580a4_2594_521e_b288_eaf2c2a16a66
);
impl windows_core::RuntimeType for ISpringVector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpringVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimation";
}
pub trait ISpringVector2NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn DampingRatio(&self) -> windows_core::Result<f32>;
    fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()>;
    fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetPeriod(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
}
impl ISpringVector2NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: ISpringVector2NaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DampingRatio<
            Identity: ISpringVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringVector2NaturalMotionAnimation_Impl::DampingRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDampingRatio<
            Identity: ISpringVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringVector2NaturalMotionAnimation_Impl::SetDampingRatio(this, value).into()
            }
        }
        unsafe extern "system" fn Period<
            Identity: ISpringVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringVector2NaturalMotionAnimation_Impl::Period(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPeriod<
            Identity: ISpringVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringVector2NaturalMotionAnimation_Impl::SetPeriod(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpringVector2NaturalMotionAnimation,
                OFFSET,
            >(),
            DampingRatio: DampingRatio::<Identity, OFFSET>,
            SetDampingRatio: SetDampingRatio::<Identity, OFFSET>,
            Period: Period::<Identity, OFFSET>,
            SetPeriod: SetPeriod::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpringVector2NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringVector2NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetDampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Period: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpringVector3NaturalMotionAnimation,
    ISpringVector3NaturalMotionAnimation_Vtbl,
    0x02d9e1c6_7434_5464_a1f6_d644ce1fc9a6
);
impl windows_core::RuntimeType for ISpringVector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpringVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimation";
}
pub trait ISpringVector3NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn DampingRatio(&self) -> windows_core::Result<f32>;
    fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()>;
    fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetPeriod(&self, value: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
}
impl ISpringVector3NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: ISpringVector3NaturalMotionAnimation_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DampingRatio<
            Identity: ISpringVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringVector3NaturalMotionAnimation_Impl::DampingRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDampingRatio<
            Identity: ISpringVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringVector3NaturalMotionAnimation_Impl::SetDampingRatio(this, value).into()
            }
        }
        unsafe extern "system" fn Period<
            Identity: ISpringVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpringVector3NaturalMotionAnimation_Impl::Period(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPeriod<
            Identity: ISpringVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpringVector3NaturalMotionAnimation_Impl::SetPeriod(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpringVector3NaturalMotionAnimation,
                OFFSET,
            >(),
            DampingRatio: DampingRatio::<Identity, OFFSET>,
            SetDampingRatio: SetDampingRatio::<Identity, OFFSET>,
            Period: Period::<Identity, OFFSET>,
            SetPeriod: SetPeriod::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpringVector3NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringVector3NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetDampingRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Period: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpriteVisual,
    ISpriteVisual_Vtbl,
    0x7e964632_45e4_5761_806d_5b4022c14f26
);
impl windows_core::RuntimeType for ISpriteVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpriteVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpriteVisual";
}
pub trait ISpriteVisual_Impl: windows_core::IUnknownImpl {
    fn Brush(&self) -> windows_core::Result<CompositionBrush>;
    fn SetBrush(&self, value: windows_core::Ref<'_, CompositionBrush>) -> windows_core::Result<()>;
}
impl ISpriteVisual_Vtbl {
    pub const fn new<Identity: ISpriteVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Brush<Identity: ISpriteVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpriteVisual_Impl::Brush(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBrush<Identity: ISpriteVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpriteVisual_Impl::SetBrush(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpriteVisual, OFFSET>(),
            Brush: Brush::<Identity, OFFSET>,
            SetBrush: SetBrush::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpriteVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpriteVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Brush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBrush: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpriteVisual2,
    ISpriteVisual2_Vtbl,
    0x3cb43662_9ecf_5128_850d_9eb8437774f0
);
impl windows_core::RuntimeType for ISpriteVisual2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpriteVisual2 {
    const NAME: &'static str = "Microsoft.UI.Composition.ISpriteVisual2";
}
pub trait ISpriteVisual2_Impl: windows_core::IUnknownImpl {
    fn Shadow(&self) -> windows_core::Result<CompositionShadow>;
    fn SetShadow(
        &self,
        value: windows_core::Ref<'_, CompositionShadow>,
    ) -> windows_core::Result<()>;
}
impl ISpriteVisual2_Vtbl {
    pub const fn new<Identity: ISpriteVisual2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Shadow<Identity: ISpriteVisual2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpriteVisual2_Impl::Shadow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShadow<Identity: ISpriteVisual2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpriteVisual2_Impl::SetShadow(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpriteVisual2, OFFSET>(),
            Shadow: Shadow::<Identity, OFFSET>,
            SetShadow: SetShadow::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpriteVisual2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpriteVisual2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Shadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetShadow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IStepEasingFunction,
    IStepEasingFunction_Vtbl,
    0xc7b1d4cf_c562_56b3_b4e6_b21326165f71
);
impl windows_core::RuntimeType for IStepEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IStepEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.IStepEasingFunction";
}
pub trait IStepEasingFunction_Impl: windows_core::IUnknownImpl {
    fn FinalStep(&self) -> windows_core::Result<i32>;
    fn SetFinalStep(&self, value: i32) -> windows_core::Result<()>;
    fn InitialStep(&self) -> windows_core::Result<i32>;
    fn SetInitialStep(&self, value: i32) -> windows_core::Result<()>;
    fn IsFinalStepSingleFrame(&self) -> windows_core::Result<bool>;
    fn SetIsFinalStepSingleFrame(&self, value: bool) -> windows_core::Result<()>;
    fn IsInitialStepSingleFrame(&self) -> windows_core::Result<bool>;
    fn SetIsInitialStepSingleFrame(&self, value: bool) -> windows_core::Result<()>;
    fn StepCount(&self) -> windows_core::Result<i32>;
    fn SetStepCount(&self, value: i32) -> windows_core::Result<()>;
}
impl IStepEasingFunction_Vtbl {
    pub const fn new<Identity: IStepEasingFunction_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FinalStep<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStepEasingFunction_Impl::FinalStep(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFinalStep<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStepEasingFunction_Impl::SetFinalStep(this, value).into()
            }
        }
        unsafe extern "system" fn InitialStep<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStepEasingFunction_Impl::InitialStep(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialStep<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStepEasingFunction_Impl::SetInitialStep(this, value).into()
            }
        }
        unsafe extern "system" fn IsFinalStepSingleFrame<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStepEasingFunction_Impl::IsFinalStepSingleFrame(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsFinalStepSingleFrame<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStepEasingFunction_Impl::SetIsFinalStepSingleFrame(this, value).into()
            }
        }
        unsafe extern "system" fn IsInitialStepSingleFrame<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStepEasingFunction_Impl::IsInitialStepSingleFrame(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsInitialStepSingleFrame<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStepEasingFunction_Impl::SetIsInitialStepSingleFrame(this, value).into()
            }
        }
        unsafe extern "system" fn StepCount<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStepEasingFunction_Impl::StepCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStepCount<
            Identity: IStepEasingFunction_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStepEasingFunction_Impl::SetStepCount(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IStepEasingFunction, OFFSET>(),
            FinalStep: FinalStep::<Identity, OFFSET>,
            SetFinalStep: SetFinalStep::<Identity, OFFSET>,
            InitialStep: InitialStep::<Identity, OFFSET>,
            SetInitialStep: SetInitialStep::<Identity, OFFSET>,
            IsFinalStepSingleFrame: IsFinalStepSingleFrame::<Identity, OFFSET>,
            SetIsFinalStepSingleFrame: SetIsFinalStepSingleFrame::<Identity, OFFSET>,
            IsInitialStepSingleFrame: IsInitialStepSingleFrame::<Identity, OFFSET>,
            SetIsInitialStepSingleFrame: SetIsInitialStepSingleFrame::<Identity, OFFSET>,
            StepCount: StepCount::<Identity, OFFSET>,
            SetStepCount: SetStepCount::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStepEasingFunction as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStepEasingFunction_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FinalStep:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetFinalStep:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub InitialStep:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetInitialStep:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub IsFinalStepSingleFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsFinalStepSingleFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsInitialStepSingleFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsInitialStepSingleFrame:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub StepCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetStepCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVector2KeyFrameAnimation,
    IVector2KeyFrameAnimation_Vtbl,
    0xe9c5e3fd_43b7_526e_9da0_4c3ea96db27d
);
impl windows_core::RuntimeType for IVector2KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector2KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector2KeyFrameAnimation";
}
pub trait IVector2KeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector2,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector2,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IVector2KeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IVector2KeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IVector2KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector2KeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IVector2KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector2,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector2KeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector2KeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector2KeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2KeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector2,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVector2NaturalMotionAnimation,
    IVector2NaturalMotionAnimation_Vtbl,
    0xe00e60ce_d1be_5c24_885d_c1d0a749d109
);
impl windows_core::RuntimeType for IVector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector2NaturalMotionAnimation";
}
pub trait IVector2NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>>;
    fn SetFinalValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows_numerics::Vector2>>,
    ) -> windows_core::Result<()>;
    fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>>;
    fn SetInitialValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows_numerics::Vector2>>,
    ) -> windows_core::Result<()>;
    fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetInitialVelocity(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
}
impl IVector2NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IVector2NaturalMotionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FinalValue<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector2NaturalMotionAnimation_Impl::FinalValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFinalValue<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector2NaturalMotionAnimation_Impl::SetFinalValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialValue<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector2NaturalMotionAnimation_Impl::InitialValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialValue<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector2NaturalMotionAnimation_Impl::SetInitialValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialVelocity<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector2NaturalMotionAnimation_Impl::InitialVelocity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialVelocity<
            Identity: IVector2NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector2NaturalMotionAnimation_Impl::SetInitialVelocity(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector2NaturalMotionAnimation,
                OFFSET,
            >(),
            FinalValue: FinalValue::<Identity, OFFSET>,
            SetFinalValue: SetFinalValue::<Identity, OFFSET>,
            InitialValue: InitialValue::<Identity, OFFSET>,
            SetInitialValue: SetInitialValue::<Identity, OFFSET>,
            InitialVelocity: InitialVelocity::<Identity, OFFSET>,
            SetInitialVelocity: SetInitialVelocity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector2NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetInitialVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVector2NaturalMotionAnimationFactory,
    IVector2NaturalMotionAnimationFactory_Vtbl,
    0xe39aead8_80f9_5f64_8644_e9e5646b796f
);
impl windows_core::RuntimeType for IVector2NaturalMotionAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector2NaturalMotionAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector2NaturalMotionAnimationFactory";
}
pub trait IVector2NaturalMotionAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl IVector2NaturalMotionAnimationFactory_Vtbl {
    pub const fn new<Identity: IVector2NaturalMotionAnimationFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector2NaturalMotionAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector2NaturalMotionAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2NaturalMotionAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IVector3KeyFrameAnimation,
    IVector3KeyFrameAnimation_Vtbl,
    0xd7da980e_2dde_5dd1_a40c_d6868dd2449e
);
impl windows_core::RuntimeType for IVector3KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector3KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector3KeyFrameAnimation";
}
pub trait IVector3KeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector3,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector3,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IVector3KeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IVector3KeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IVector3KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector3KeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IVector3KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector3,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector3KeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector3KeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector3KeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3KeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector3,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVector3NaturalMotionAnimation,
    IVector3NaturalMotionAnimation_Vtbl,
    0x13feeef2_d2c0_5b72_ad67_983a19b9b783
);
impl windows_core::RuntimeType for IVector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector3NaturalMotionAnimation";
}
pub trait IVector3NaturalMotionAnimation_Impl: windows_core::IUnknownImpl {
    fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>>;
    fn SetFinalValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows_numerics::Vector3>>,
    ) -> windows_core::Result<()>;
    fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>>;
    fn SetInitialValue(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows_numerics::Vector3>>,
    ) -> windows_core::Result<()>;
    fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetInitialVelocity(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
}
impl IVector3NaturalMotionAnimation_Vtbl {
    pub const fn new<Identity: IVector3NaturalMotionAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FinalValue<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector3NaturalMotionAnimation_Impl::FinalValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFinalValue<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector3NaturalMotionAnimation_Impl::SetFinalValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialValue<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector3NaturalMotionAnimation_Impl::InitialValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialValue<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector3NaturalMotionAnimation_Impl::SetInitialValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InitialVelocity<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVector3NaturalMotionAnimation_Impl::InitialVelocity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInitialVelocity<
            Identity: IVector3NaturalMotionAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector3NaturalMotionAnimation_Impl::SetInitialVelocity(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector3NaturalMotionAnimation,
                OFFSET,
            >(),
            FinalValue: FinalValue::<Identity, OFFSET>,
            SetFinalValue: SetFinalValue::<Identity, OFFSET>,
            InitialValue: InitialValue::<Identity, OFFSET>,
            SetInitialValue: SetInitialValue::<Identity, OFFSET>,
            InitialVelocity: InitialVelocity::<Identity, OFFSET>,
            SetInitialVelocity: SetInitialVelocity::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector3NaturalMotionAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3NaturalMotionAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InitialVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetInitialVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVector3NaturalMotionAnimationFactory,
    IVector3NaturalMotionAnimationFactory_Vtbl,
    0x428241cb_be9c_5c2a_939c_ec78aa60bb8a
);
impl windows_core::RuntimeType for IVector3NaturalMotionAnimationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector3NaturalMotionAnimationFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector3NaturalMotionAnimationFactory";
}
pub trait IVector3NaturalMotionAnimationFactory_Impl: windows_core::IUnknownImpl {}
impl IVector3NaturalMotionAnimationFactory_Vtbl {
    pub const fn new<Identity: IVector3NaturalMotionAnimationFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector3NaturalMotionAnimationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector3NaturalMotionAnimationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3NaturalMotionAnimationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IVector4KeyFrameAnimation,
    IVector4KeyFrameAnimation_Vtbl,
    0x16cea3b9_c5e3_5f6f_b5c7_da29a31ccfc7
);
impl windows_core::RuntimeType for IVector4KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVector4KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.IVector4KeyFrameAnimation";
}
pub trait IVector4KeyFrameAnimation_Impl: windows_core::IUnknownImpl {
    fn InsertKeyFrame(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector4,
    ) -> windows_core::Result<()>;
    fn InsertKeyFrameWithEasingFunction(
        &self,
        normalizedProgressKey: f32,
        value: &windows_numerics::Vector4,
        easingFunction: windows_core::Ref<'_, CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
}
impl IVector4KeyFrameAnimation_Vtbl {
    pub const fn new<Identity: IVector4KeyFrameAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InsertKeyFrame<
            Identity: IVector4KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector4KeyFrameAnimation_Impl::InsertKeyFrame(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertKeyFrameWithEasingFunction<
            Identity: IVector4KeyFrameAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            normalizedprogresskey: f32,
            value: windows_numerics::Vector4,
            easingfunction: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVector4KeyFrameAnimation_Impl::InsertKeyFrameWithEasingFunction(
                    this,
                    normalizedprogresskey,
                    core::mem::transmute(&value),
                    core::mem::transmute_copy(&easingfunction),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVector4KeyFrameAnimation,
                OFFSET,
            >(),
            InsertKeyFrame: InsertKeyFrame::<Identity, OFFSET>,
            InsertKeyFrameWithEasingFunction: InsertKeyFrameWithEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVector4KeyFrameAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector4KeyFrameAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector4,
    ) -> windows_core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector4,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisual,
    IVisual_Vtbl,
    0xc0eeab6c_c897_5ac6_a1c9_63abd5055b9b
);
impl windows_core::RuntimeType for IVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisual";
}
pub trait IVisual_Impl: windows_core::IUnknownImpl {
    fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetAnchorPoint(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility>;
    fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()>;
    fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode>;
    fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()>;
    fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetCenterPoint(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Clip(&self) -> windows_core::Result<CompositionClip>;
    fn SetClip(&self, value: windows_core::Ref<'_, CompositionClip>) -> windows_core::Result<()>;
    fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode>;
    fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()>;
    fn IsVisible(&self) -> windows_core::Result<bool>;
    fn SetIsVisible(&self, value: bool) -> windows_core::Result<()>;
    fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetOffset(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Opacity(&self) -> windows_core::Result<f32>;
    fn SetOpacity(&self, value: f32) -> windows_core::Result<()>;
    fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion>;
    fn SetOrientation(
        &self,
        value: &windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()>;
    fn Parent(&self) -> windows_core::Result<ContainerVisual>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetRotationAxis(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetScale(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Size(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn SetTransformMatrix(&self, value: &windows_numerics::Matrix4x4) -> windows_core::Result<()>;
}
impl IVisual_Vtbl {
    pub const fn new<Identity: IVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnchorPoint<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::AnchorPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAnchorPoint<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetAnchorPoint(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn BackfaceVisibility<
            Identity: IVisual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionBackfaceVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::BackfaceVisibility(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBackfaceVisibility<
            Identity: IVisual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: CompositionBackfaceVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetBackfaceVisibility(this, value).into()
            }
        }
        unsafe extern "system" fn BorderMode<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionBorderMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::BorderMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBorderMode<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: CompositionBorderMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetBorderMode(this, value).into()
            }
        }
        unsafe extern "system" fn CenterPoint<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::CenterPoint(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterPoint<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetCenterPoint(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Clip<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Clip(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClip<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetClip(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn CompositeMode<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut CompositionCompositeMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::CompositeMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCompositeMode<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: CompositionCompositeMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetCompositeMode(this, value).into()
            }
        }
        unsafe extern "system" fn IsVisible<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::IsVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVisible<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetIsVisible(this, value).into()
            }
        }
        unsafe extern "system" fn Offset<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffset<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetOffset(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Opacity<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Opacity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpacity<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetOpacity(this, value).into()
            }
        }
        unsafe extern "system" fn Orientation<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Orientation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOrientation<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetOrientation(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Parent<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Parent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RotationAngle<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: IVisual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: IVisual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAxis<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::RotationAxis(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAxis<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetRotationAxis(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Scale<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Size<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSize<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetSize(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn TransformMatrix<Identity: IVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual_Impl::TransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransformMatrix<
            Identity: IVisual_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual_Impl::SetTransformMatrix(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisual, OFFSET>(),
            AnchorPoint: AnchorPoint::<Identity, OFFSET>,
            SetAnchorPoint: SetAnchorPoint::<Identity, OFFSET>,
            BackfaceVisibility: BackfaceVisibility::<Identity, OFFSET>,
            SetBackfaceVisibility: SetBackfaceVisibility::<Identity, OFFSET>,
            BorderMode: BorderMode::<Identity, OFFSET>,
            SetBorderMode: SetBorderMode::<Identity, OFFSET>,
            CenterPoint: CenterPoint::<Identity, OFFSET>,
            SetCenterPoint: SetCenterPoint::<Identity, OFFSET>,
            Clip: Clip::<Identity, OFFSET>,
            SetClip: SetClip::<Identity, OFFSET>,
            CompositeMode: CompositeMode::<Identity, OFFSET>,
            SetCompositeMode: SetCompositeMode::<Identity, OFFSET>,
            IsVisible: IsVisible::<Identity, OFFSET>,
            SetIsVisible: SetIsVisible::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            SetOffset: SetOffset::<Identity, OFFSET>,
            Opacity: Opacity::<Identity, OFFSET>,
            SetOpacity: SetOpacity::<Identity, OFFSET>,
            Orientation: Orientation::<Identity, OFFSET>,
            SetOrientation: SetOrientation::<Identity, OFFSET>,
            Parent: Parent::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            RotationAxis: RotationAxis::<Identity, OFFSET>,
            SetRotationAxis: SetRotationAxis::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
            SetSize: SetSize::<Identity, OFFSET>,
            TransformMatrix: TransformMatrix::<Identity, OFFSET>,
            SetTransformMatrix: SetTransformMatrix::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub BackfaceVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionBackfaceVisibility,
    ) -> windows_core::HRESULT,
    pub SetBackfaceVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionBackfaceVisibility,
    ) -> windows_core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionBorderMode,
    ) -> windows_core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionBorderMode,
    ) -> windows_core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Clip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetClip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CompositeMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut CompositionCompositeMode,
    ) -> windows_core::HRESULT,
    pub SetCompositeMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        CompositionCompositeMode,
    ) -> windows_core::HRESULT,
    pub IsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Opacity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAxis: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetRotationAxis: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisual2,
    IVisual2_Vtbl,
    0x492a7995_0c5c_5993_a283_52e4da3050ee
);
impl windows_core::RuntimeType for IVisual2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisual2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisual2";
}
pub trait IVisual2_Impl: windows_core::IUnknownImpl {
    fn ParentForTransform(&self) -> windows_core::Result<Visual>;
    fn SetParentForTransform(
        &self,
        value: windows_core::Ref<'_, Visual>,
    ) -> windows_core::Result<()>;
    fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetRelativeOffsetAdjustment(
        &self,
        value: &windows_numerics::Vector3,
    ) -> windows_core::Result<()>;
    fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetRelativeSizeAdjustment(
        &self,
        value: &windows_numerics::Vector2,
    ) -> windows_core::Result<()>;
}
impl IVisual2_Vtbl {
    pub const fn new<Identity: IVisual2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ParentForTransform<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual2_Impl::ParentForTransform(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetParentForTransform<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual2_Impl::SetParentForTransform(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn RelativeOffsetAdjustment<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual2_Impl::RelativeOffsetAdjustment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRelativeOffsetAdjustment<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual2_Impl::SetRelativeOffsetAdjustment(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn RelativeSizeAdjustment<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual2_Impl::RelativeSizeAdjustment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRelativeSizeAdjustment<
            Identity: IVisual2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual2_Impl::SetRelativeSizeAdjustment(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisual2, OFFSET>(),
            ParentForTransform: ParentForTransform::<Identity, OFFSET>,
            SetParentForTransform: SetParentForTransform::<Identity, OFFSET>,
            RelativeOffsetAdjustment: RelativeOffsetAdjustment::<Identity, OFFSET>,
            SetRelativeOffsetAdjustment: SetRelativeOffsetAdjustment::<Identity, OFFSET>,
            RelativeSizeAdjustment: RelativeSizeAdjustment::<Identity, OFFSET>,
            SetRelativeSizeAdjustment: SetRelativeSizeAdjustment::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisual2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ParentForTransform: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetParentForTransform: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RelativeOffsetAdjustment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetRelativeOffsetAdjustment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub RelativeSizeAdjustment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetRelativeSizeAdjustment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisual3,
    IVisual3_Vtbl,
    0x972b70b0_950d_5656_a380_bd4a70775868
);
impl windows_core::RuntimeType for IVisual3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisual3 {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisual3";
}
pub trait IVisual3_Impl: windows_core::IUnknownImpl {
    fn IsHitTestVisible(&self) -> windows_core::Result<bool>;
    fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()>;
}
impl IVisual3_Vtbl {
    pub const fn new<Identity: IVisual3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsHitTestVisible<Identity: IVisual3_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual3_Impl::IsHitTestVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHitTestVisible<
            Identity: IVisual3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual3_Impl::SetIsHitTestVisible(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisual3, OFFSET>(),
            IsHitTestVisible: IsHitTestVisible::<Identity, OFFSET>,
            SetIsHitTestVisible: SetIsHitTestVisible::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisual3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsHitTestVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsHitTestVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisual4,
    IVisual4_Vtbl,
    0x27cb223f_c431_57ac_b61e_d6b7515d579f
);
impl windows_core::RuntimeType for IVisual4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisual4 {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisual4";
}
pub trait IVisual4_Impl: windows_core::IUnknownImpl {
    fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl IVisual4_Vtbl {
    pub const fn new<Identity: IVisual4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsPixelSnappingEnabled<
            Identity: IVisual4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisual4_Impl::IsPixelSnappingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPixelSnappingEnabled<
            Identity: IVisual4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisual4_Impl::SetIsPixelSnappingEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisual4, OFFSET>(),
            IsPixelSnappingEnabled: IsPixelSnappingEnabled::<Identity, OFFSET>,
            SetIsPixelSnappingEnabled: SetIsPixelSnappingEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisual4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsPixelSnappingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPixelSnappingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualCollection,
    IVisualCollection_Vtbl,
    0xd002896d_67d8_5f69_ab70_581fa3bf370f
);
impl windows_core::RuntimeType for IVisualCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisualCollection";
}
pub trait IVisualCollection_Impl: windows_core::IUnknownImpl {
    fn Count(&self) -> windows_core::Result<i32>;
    fn InsertAbove(
        &self,
        newChild: windows_core::Ref<'_, Visual>,
        sibling: windows_core::Ref<'_, Visual>,
    ) -> windows_core::Result<()>;
    fn InsertAtBottom(&self, newChild: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn InsertAtTop(&self, newChild: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn InsertBelow(
        &self,
        newChild: windows_core::Ref<'_, Visual>,
        sibling: windows_core::Ref<'_, Visual>,
    ) -> windows_core::Result<()>;
    fn Remove(&self, child: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl IVisualCollection_Vtbl {
    pub const fn new<Identity: IVisualCollection_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Count<Identity: IVisualCollection_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualCollection_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InsertAbove<
            Identity: IVisualCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newchild: *mut core::ffi::c_void,
            sibling: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::InsertAbove(
                    this,
                    core::mem::transmute_copy(&newchild),
                    core::mem::transmute_copy(&sibling),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertAtBottom<
            Identity: IVisualCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newchild: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::InsertAtBottom(this, core::mem::transmute_copy(&newchild))
                    .into()
            }
        }
        unsafe extern "system" fn InsertAtTop<
            Identity: IVisualCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newchild: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::InsertAtTop(this, core::mem::transmute_copy(&newchild))
                    .into()
            }
        }
        unsafe extern "system" fn InsertBelow<
            Identity: IVisualCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newchild: *mut core::ffi::c_void,
            sibling: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::InsertBelow(
                    this,
                    core::mem::transmute_copy(&newchild),
                    core::mem::transmute_copy(&sibling),
                )
                .into()
            }
        }
        unsafe extern "system" fn Remove<Identity: IVisualCollection_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            child: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::Remove(this, core::mem::transmute_copy(&child)).into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: IVisualCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualCollection_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisualCollection, OFFSET>(),
            Count: Count::<Identity, OFFSET>,
            InsertAbove: InsertAbove::<Identity, OFFSET>,
            InsertAtBottom: InsertAtBottom::<Identity, OFFSET>,
            InsertAtTop: InsertAtTop::<Identity, OFFSET>,
            InsertBelow: InsertBelow::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub InsertAbove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertAtBottom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertAtTop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InsertBelow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualElement,
    IVisualElement_Vtbl,
    0x2180f1f5_b5d8_4bf6_920a_12006e63efef
);
impl windows_core::RuntimeType for IVisualElement {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IVisualElement,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl windows_core::RuntimeName for IVisualElement {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisualElement";
}
pub trait IVisualElement_Impl: windows_core::IUnknownImpl {}
impl IVisualElement_Vtbl {
    pub const fn new<Identity: IVisualElement_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisualElement, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualElement as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualElement_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IVisualElement2,
    IVisualElement2_Vtbl,
    0xbc950c8d_1db0_53aa_9dee_34271cd18ce6
);
impl windows_core::RuntimeType for IVisualElement2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IVisualElement2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IVisualElement2 {
    pub fn GetVisualInternal(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetVisualInternal)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IVisualElement2 {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisualElement2";
}
pub trait IVisualElement2_Impl: windows_core::IUnknownImpl {
    fn GetVisualInternal(&self) -> windows_core::Result<Visual>;
}
impl IVisualElement2_Vtbl {
    pub const fn new<Identity: IVisualElement2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetVisualInternal<
            Identity: IVisualElement2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualElement2_Impl::GetVisualInternal(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisualElement2, OFFSET>(),
            GetVisualInternal: GetVisualInternal::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualElement2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualElement2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetVisualInternal: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualFactory,
    IVisualFactory_Vtbl,
    0x77bb4668_83fa_5bb5_b78b_5e6fdc3d4038
);
impl windows_core::RuntimeType for IVisualFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisualFactory";
}
pub trait IVisualFactory_Impl: windows_core::IUnknownImpl {}
impl IVisualFactory_Vtbl {
    pub const fn new<Identity: IVisualFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IVisualFactory, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IVisualUnorderedCollection,
    IVisualUnorderedCollection_Vtbl,
    0x4a97216e_793e_54e3_96e8_f9db790119cd
);
impl windows_core::RuntimeType for IVisualUnorderedCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualUnorderedCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.IVisualUnorderedCollection";
}
pub trait IVisualUnorderedCollection_Impl: windows_core::IUnknownImpl {
    fn Count(&self) -> windows_core::Result<i32>;
    fn Add(&self, newVisual: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn Remove(&self, visual: windows_core::Ref<'_, Visual>) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl IVisualUnorderedCollection_Vtbl {
    pub const fn new<Identity: IVisualUnorderedCollection_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Count<
            Identity: IVisualUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualUnorderedCollection_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Add<
            Identity: IVisualUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newvisual: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualUnorderedCollection_Impl::Add(this, core::mem::transmute_copy(&newvisual))
                    .into()
            }
        }
        unsafe extern "system" fn Remove<
            Identity: IVisualUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            visual: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualUnorderedCollection_Impl::Remove(this, core::mem::transmute_copy(&visual))
                    .into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: IVisualUnorderedCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualUnorderedCollection_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualUnorderedCollection,
                OFFSET,
            >(),
            Count: Count::<Identity, OFFSET>,
            Add: Add::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualUnorderedCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualUnorderedCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Add: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ImplicitAnimationCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ImplicitAnimationCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy ! ( ImplicitAnimationCollection , IAnimationObject , windows::Foundation:: IClosable , windows_collections:: IIterable < windows_collections:: IKeyValuePair < windows_core::HSTRING , ICompositionAnimationBase > > , windows_collections:: IMap < windows_core::HSTRING , ICompositionAnimationBase > , CompositionObject );
impl ImplicitAnimationCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<windows_core::HSTRING, ICompositionAnimationBase>,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<
                    windows_core::HSTRING,
                    ICompositionAnimationBase,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Lookup(
        &self,
        key: &windows_core::HSTRING,
    ) -> windows_core::Result<ICompositionAnimationBase> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Lookup)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::HSTRING, ICompositionAnimationBase>,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Insert<P1>(&self, key: &windows_core::HSTRING, value: P1) -> windows_core::Result<bool>
    where
        P1: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Insert)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, ICompositionAnimationBase>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for ImplicitAnimationCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IImplicitAnimationCollection>();
}
unsafe impl windows_core::Interface for ImplicitAnimationCollection {
    type Vtable = <IImplicitAnimationCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IImplicitAnimationCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ImplicitAnimationCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.ImplicitAnimationCollection";
}
unsafe impl Send for ImplicitAnimationCollection {}
unsafe impl Sync for ImplicitAnimationCollection {}
impl IntoIterator for ImplicitAnimationCollection {
    type Item =
        windows_collections::IKeyValuePair<windows_core::HSTRING, ICompositionAnimationBase>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &ImplicitAnimationCollection {
    type Item =
        windows_collections::IKeyValuePair<windows_core::HSTRING, ICompositionAnimationBase>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InitialValueExpressionCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy ! ( InitialValueExpressionCollection , windows_core::IUnknown , windows_core::IInspectable , windows_collections:: IMap < windows_core::HSTRING , windows_core::HSTRING > );
windows_core::imp::required_hierarchy!(
    InitialValueExpressionCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<
        windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
    >,
    CompositionObject
);
impl InitialValueExpressionCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Lookup(
        &self,
        key: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Lookup)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::HSTRING, windows_core::HSTRING>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Insert(
        &self,
        key: &windows_core::HSTRING,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Insert)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                core::mem::transmute_copy(value),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for InitialValueExpressionCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IMap<windows_core::HSTRING, windows_core::HSTRING>,
    >();
}
unsafe impl windows_core::Interface for InitialValueExpressionCollection {
    type Vtable = < windows_collections:: IMap < windows_core::HSTRING , windows_core::HSTRING > as windows_core::Interface >::Vtable ;
    const IID: windows_core::GUID = <windows_collections::IMap<
        windows_core::HSTRING,
        windows_core::HSTRING,
    > as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InitialValueExpressionCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.InitialValueExpressionCollection";
}
unsafe impl Send for InitialValueExpressionCollection {}
unsafe impl Sync for InitialValueExpressionCollection {}
impl IntoIterator for InitialValueExpressionCollection {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &InitialValueExpressionCollection {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, windows_core::HSTRING>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InsetClip(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InsetClip,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InsetClip,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionClip,
    CompositionObject
);
impl InsetClip {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BottomInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BottomInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottomInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottomInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LeftInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLeftInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLeftInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RightInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRightInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRightInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopInset(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopInset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTopInset(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopInset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InsetClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInsetClip>();
}
unsafe impl windows_core::Interface for InsetClip {
    type Vtable = <IInsetClip as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IInsetClip as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InsetClip {
    const NAME: &'static str = "Microsoft.UI.Composition.InsetClip";
}
unsafe impl Send for InsetClip {}
unsafe impl Sync for InsetClip {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct KeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    KeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    CompositionAnimation,
    CompositionObject
);
impl KeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for KeyFrameAnimation {
    type Vtable = <IKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.KeyFrameAnimation";
}
unsafe impl Send for KeyFrameAnimation {}
unsafe impl Sync for KeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LayerVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LayerVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    LayerVisual,
    IAnimationObject,
    windows::Foundation::IClosable,
    ContainerVisual,
    Visual,
    CompositionObject
);
impl LayerVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<VisualCollection> {
        let this = &windows_core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Effect(&self) -> windows_core::Result<CompositionEffectBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Effect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEffect<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionEffectBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEffect)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Shadow(&self) -> windows_core::Result<CompositionShadow> {
        let this = &windows_core::Interface::cast::<ILayerVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shadow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionShadow>,
    {
        let this = &windows_core::Interface::cast::<ILayerVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShadow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for LayerVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILayerVisual>();
}
unsafe impl windows_core::Interface for LayerVisual {
    type Vtable = <ILayerVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILayerVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LayerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.LayerVisual";
}
unsafe impl Send for LayerVisual {}
unsafe impl Sync for LayerVisual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LinearEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LinearEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    LinearEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl LinearEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for LinearEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILinearEasingFunction>();
}
unsafe impl windows_core::Interface for LinearEasingFunction {
    type Vtable = <ILinearEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILinearEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LinearEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.LinearEasingFunction";
}
unsafe impl Send for LinearEasingFunction {}
unsafe impl Sync for LinearEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    CompositionAnimation,
    CompositionObject
);
impl NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for NaturalMotionAnimation {
    type Vtable = <INaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.NaturalMotionAnimation";
}
unsafe impl Send for NaturalMotionAnimation {}
unsafe impl Sync for NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PathKeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PathKeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PathKeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl PathKeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame<P1>(
        &self,
        normalizedprogresskey: f32,
        path: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionPath>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                path.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P1, P2>(
        &self,
        normalizedprogresskey: f32,
        path: P1,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionPath>,
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                path.param().abi(),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for PathKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPathKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for PathKeyFrameAnimation {
    type Vtable = <IPathKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPathKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PathKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.PathKeyFrameAnimation";
}
unsafe impl Send for PathKeyFrameAnimation {}
unsafe impl Sync for PathKeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointLight(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointLight,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PointLight,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionLight,
    CompositionObject
);
impl PointLight {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Targets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusionsFromTargets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Color(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Color)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ConstantAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConstantAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetConstantAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConstantAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCoordinateSpace<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCoordinateSpace)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn LinearAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LinearAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLinearAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLinearAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn QuadraticAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QuadraticAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetQuadraticAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuadraticAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IPointLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Intensity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointLight2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIntensity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinAttenuationCutoff(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinAttenuationCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxAttenuationCutoff(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxAttenuationCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for PointLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointLight>();
}
unsafe impl windows_core::Interface for PointLight {
    type Vtable = <IPointLight as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointLight as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointLight {
    const NAME: &'static str = "Microsoft.UI.Composition.PointLight";
}
unsafe impl Send for PointLight {}
unsafe impl Sync for PointLight {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PowerEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PowerEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PowerEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl PowerEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Power(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Power)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for PowerEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPowerEasingFunction>();
}
unsafe impl windows_core::Interface for PowerEasingFunction {
    type Vtable = <IPowerEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPowerEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PowerEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.PowerEasingFunction";
}
unsafe impl Send for PowerEasingFunction {}
unsafe impl Sync for PowerEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct QuaternionKeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    QuaternionKeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    QuaternionKeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl QuaternionKeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: windows::Foundation::Numerics::Quaternion,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for QuaternionKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IQuaternionKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for QuaternionKeyFrameAnimation {
    type Vtable = <IQuaternionKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IQuaternionKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for QuaternionKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.QuaternionKeyFrameAnimation";
}
unsafe impl Send for QuaternionKeyFrameAnimation {}
unsafe impl Sync for QuaternionKeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RectangleClip(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RectangleClip,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    RectangleClip,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionClip,
    CompositionObject
);
impl RectangleClip {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix3x2> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Bottom(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bottom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottom(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottom)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomLeftRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BottomLeftRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottomLeftRadius(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottomLeftRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomRightRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BottomRightRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBottomRightRadius(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBottomRightRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Left(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Left)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLeft(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLeft)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Right(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Right)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRight(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Top(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Top)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTop(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopLeftRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopLeftRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTopLeftRadius(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopLeftRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopRightRadius(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopRightRadius)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTopRightRadius(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopRightRadius)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for RectangleClip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRectangleClip>();
}
unsafe impl windows_core::Interface for RectangleClip {
    type Vtable = <IRectangleClip as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRectangleClip as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RectangleClip {
    const NAME: &'static str = "Microsoft.UI.Composition.RectangleClip";
}
unsafe impl Send for RectangleClip {}
unsafe impl Sync for RectangleClip {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RedirectVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RedirectVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    RedirectVisual,
    IAnimationObject,
    windows::Foundation::IClosable,
    ContainerVisual,
    Visual,
    CompositionObject
);
impl RedirectVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<VisualCollection> {
        let this = &windows_core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Source(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for RedirectVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRedirectVisual>();
}
unsafe impl windows_core::Interface for RedirectVisual {
    type Vtable = <IRedirectVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRedirectVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RedirectVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.RedirectVisual";
}
unsafe impl Send for RedirectVisual {}
unsafe impl Sync for RedirectVisual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RenderingDeviceReplacedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RenderingDeviceReplacedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    RenderingDeviceReplacedEventArgs,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl RenderingDeviceReplacedEventArgs {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn GraphicsDevice(&self) -> windows_core::Result<CompositionGraphicsDevice> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GraphicsDevice)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for RenderingDeviceReplacedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRenderingDeviceReplacedEventArgs>();
}
unsafe impl windows_core::Interface for RenderingDeviceReplacedEventArgs {
    type Vtable = <IRenderingDeviceReplacedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IRenderingDeviceReplacedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RenderingDeviceReplacedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs";
}
unsafe impl Send for RenderingDeviceReplacedEventArgs {}
unsafe impl Sync for RenderingDeviceReplacedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ScalarKeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ScalarKeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ScalarKeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl ScalarKeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: f32,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ScalarKeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IScalarKeyFrameAnimation>();
}
unsafe impl windows_core::Interface for ScalarKeyFrameAnimation {
    type Vtable = <IScalarKeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IScalarKeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ScalarKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ScalarKeyFrameAnimation";
}
unsafe impl Send for ScalarKeyFrameAnimation {}
unsafe impl Sync for ScalarKeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ScalarNaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ScalarNaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ScalarNaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl ScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IScalarNaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for ScalarNaturalMotionAnimation {
    type Vtable = <IScalarNaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IScalarNaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ScalarNaturalMotionAnimation";
}
unsafe impl Send for ScalarNaturalMotionAnimation {}
unsafe impl Sync for ScalarNaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ShapeVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ShapeVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ShapeVisual,
    IAnimationObject,
    windows::Foundation::IClosable,
    ContainerVisual,
    Visual,
    CompositionObject
);
impl ShapeVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<VisualCollection> {
        let this = &windows_core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Shapes(&self) -> windows_core::Result<CompositionShapeCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shapes)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ViewBox(&self) -> windows_core::Result<CompositionViewBox> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ViewBox)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetViewBox<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionViewBox>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetViewBox)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ShapeVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IShapeVisual>();
}
unsafe impl windows_core::Interface for ShapeVisual {
    type Vtable = <IShapeVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IShapeVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ShapeVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ShapeVisual";
}
unsafe impl Send for ShapeVisual {}
unsafe impl Sync for ShapeVisual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SineEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SineEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SineEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl SineEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for SineEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISineEasingFunction>();
}
unsafe impl windows_core::Interface for SineEasingFunction {
    type Vtable = <ISineEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISineEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SineEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.SineEasingFunction";
}
unsafe impl Send for SineEasingFunction {}
unsafe impl Sync for SineEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpotLight(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpotLight,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SpotLight,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionLight,
    CompositionObject
);
impl SpotLight {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Targets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExclusionsFromTargets(&self) -> windows_core::Result<VisualUnorderedCollection> {
        let this = &windows_core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExclusionsFromTargets)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConstantAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConstantAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetConstantAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConstantAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> windows_core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateSpace)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCoordinateSpace<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCoordinateSpace)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InnerConeAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInnerConeAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInnerConeAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InnerConeAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInnerConeAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInnerConeAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InnerConeColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInnerConeColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInnerConeColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LinearAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LinearAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLinearAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLinearAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OuterConeAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOuterConeAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOuterConeAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OuterConeAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOuterConeAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOuterConeAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OuterConeColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOuterConeColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOuterConeColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn QuadraticAttenuation(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QuadraticAttenuation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetQuadraticAttenuation(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuadraticAttenuation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeIntensity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InnerConeIntensity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInnerConeIntensity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInnerConeIntensity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeIntensity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OuterConeIntensity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOuterConeIntensity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOuterConeIntensity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinAttenuationCutoff(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinAttenuationCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxAttenuationCutoff(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxAttenuationCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxAttenuationCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SpotLight {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpotLight>();
}
unsafe impl windows_core::Interface for SpotLight {
    type Vtable = <ISpotLight as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISpotLight as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpotLight {
    const NAME: &'static str = "Microsoft.UI.Composition.SpotLight";
}
unsafe impl Send for SpotLight {}
unsafe impl Sync for SpotLight {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpringScalarNaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpringScalarNaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SpringScalarNaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    ScalarNaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl SpringScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DampingRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDampingRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Period)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPeriod(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPeriod)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SpringScalarNaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpringScalarNaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for SpringScalarNaturalMotionAnimation {
    type Vtable = <ISpringScalarNaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISpringScalarNaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpringScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation";
}
unsafe impl Send for SpringScalarNaturalMotionAnimation {}
unsafe impl Sync for SpringScalarNaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpringVector2NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpringVector2NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SpringVector2NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    Vector2NaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl SpringVector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DampingRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDampingRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Period)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPeriod(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPeriod)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SpringVector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpringVector2NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for SpringVector2NaturalMotionAnimation {
    type Vtable = <ISpringVector2NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISpringVector2NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpringVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation";
}
unsafe impl Send for SpringVector2NaturalMotionAnimation {}
unsafe impl Sync for SpringVector2NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpringVector3NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpringVector3NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SpringVector3NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    Vector3NaturalMotionAnimation,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl SpringVector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DampingRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDampingRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Period)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPeriod(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPeriod)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SpringVector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpringVector3NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for SpringVector3NaturalMotionAnimation {
    type Vtable = <ISpringVector3NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISpringVector3NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpringVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation";
}
unsafe impl Send for SpringVector3NaturalMotionAnimation {}
unsafe impl Sync for SpringVector3NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpriteVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpriteVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SpriteVisual,
    IAnimationObject,
    windows::Foundation::IClosable,
    ContainerVisual,
    Visual,
    CompositionObject
);
impl SpriteVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<VisualCollection> {
        let this = &windows_core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Brush(&self) -> windows_core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Brush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionBrush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Shadow(&self) -> windows_core::Result<CompositionShadow> {
        let this = &windows_core::Interface::cast::<ISpriteVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shadow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetShadow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionShadow>,
    {
        let this = &windows_core::Interface::cast::<ISpriteVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShadow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SpriteVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpriteVisual>();
}
unsafe impl windows_core::Interface for SpriteVisual {
    type Vtable = <ISpriteVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISpriteVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpriteVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.SpriteVisual";
}
unsafe impl Send for SpriteVisual {}
unsafe impl Sync for SpriteVisual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct StepEasingFunction(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    StepEasingFunction,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    StepEasingFunction,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionEasingFunction,
    CompositionObject
);
impl StepEasingFunction {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn FinalStep(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalStep)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFinalStep(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalStep)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InitialStep(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialStep)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialStep(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialStep)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFinalStepSingleFrame(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFinalStepSingleFrame)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFinalStepSingleFrame(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFinalStepSingleFrame)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsInitialStepSingleFrame(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsInitialStepSingleFrame)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsInitialStepSingleFrame(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsInitialStepSingleFrame)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StepCount(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StepCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStepCount(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStepCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for StepEasingFunction {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IStepEasingFunction>();
}
unsafe impl windows_core::Interface for StepEasingFunction {
    type Vtable = <IStepEasingFunction as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IStepEasingFunction as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for StepEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.StepEasingFunction";
}
unsafe impl Send for StepEasingFunction {}
unsafe impl Sync for StepEasingFunction {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Vector2KeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Vector2KeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Vector2KeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl Vector2KeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector2,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Vector2KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVector2KeyFrameAnimation>();
}
unsafe impl windows_core::Interface for Vector2KeyFrameAnimation {
    type Vtable = <IVector2KeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVector2KeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Vector2KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector2KeyFrameAnimation";
}
unsafe impl Send for Vector2KeyFrameAnimation {}
unsafe impl Sync for Vector2KeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Vector2NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Vector2NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Vector2NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl Vector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector2>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector2>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Vector2NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVector2NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for Vector2NaturalMotionAnimation {
    type Vtable = <IVector2NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IVector2NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Vector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector2NaturalMotionAnimation";
}
unsafe impl Send for Vector2NaturalMotionAnimation {}
unsafe impl Sync for Vector2NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Vector3KeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Vector3KeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Vector3KeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl Vector3KeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector3,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Vector3KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVector3KeyFrameAnimation>();
}
unsafe impl windows_core::Interface for Vector3KeyFrameAnimation {
    type Vtable = <IVector3KeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVector3KeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Vector3KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector3KeyFrameAnimation";
}
unsafe impl Send for Vector3KeyFrameAnimation {}
unsafe impl Sync for Vector3KeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Vector3NaturalMotionAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Vector3NaturalMotionAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Vector3NaturalMotionAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    NaturalMotionAnimation,
    CompositionAnimation,
    CompositionObject
);
impl Vector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FinalValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFinalValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFinalValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInitialValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInitialVelocity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Vector3NaturalMotionAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVector3NaturalMotionAnimation>();
}
unsafe impl windows_core::Interface for Vector3NaturalMotionAnimation {
    type Vtable = <IVector3NaturalMotionAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IVector3NaturalMotionAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Vector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector3NaturalMotionAnimation";
}
unsafe impl Send for Vector3NaturalMotionAnimation {}
unsafe impl Sync for Vector3NaturalMotionAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Vector4KeyFrameAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Vector4KeyFrameAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Vector4KeyFrameAnimation,
    IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionAnimationBase,
    KeyFrameAnimation,
    CompositionAnimation,
    CompositionObject
);
impl Vector4KeyFrameAnimation {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearAllParameters)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix3x2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix3x2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMatrix4x4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetQuaternionParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<P1>(
        &self,
        key: &windows_core::HSTRING,
        compositionobject: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                compositionobject.param().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &windows_core::HSTRING,
        value: f32,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScalarParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector2Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector3Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &windows_core::HSTRING,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVector4Parameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &windows_core::HSTRING,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBooleanParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTarget(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> windows_core::Result<InitialValueExpressionCollection> {
        let this = &windows_core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitialValueExpressions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExpressionReferenceParameter<P1>(
        &self,
        parametername: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<IAnimationObject>,
    {
        let this = &windows_core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExpressionReferenceParameter)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(parametername),
                source.param().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayTime(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> windows_core::Result<AnimationIterationBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IterationCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIterationCount)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrameCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StopBehavior(&self) -> windows_core::Result<AnimationStopBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StopBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStopBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: &windows_core::HSTRING,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                core::mem::transmute_copy(value),
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> windows_core::Result<AnimationDirection> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> windows_core::Result<AnimationDelayBehavior> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DelayBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDelayBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrame)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<P2>(
        &self,
        normalizedprogresskey: f32,
        value: windows_numerics::Vector4,
        easingfunction: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertKeyFrameWithEasingFunction)(
                windows_core::Interface::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Vector4KeyFrameAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVector4KeyFrameAnimation>();
}
unsafe impl windows_core::Interface for Vector4KeyFrameAnimation {
    type Vtable = <IVector4KeyFrameAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVector4KeyFrameAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Vector4KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector4KeyFrameAnimation";
}
unsafe impl Send for Vector4KeyFrameAnimation {}
unsafe impl Sync for Vector4KeyFrameAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Visual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Visual, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(
    Visual,
    IAnimationObject,
    windows::Foundation::IClosable,
    CompositionObject
);
impl Visual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<CompositionBackfaceVisibility> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<CompositionBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<CompositionClip> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<CompositionClip>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<CompositionCompositeMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<ContainerVisual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<Visual> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Visual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVisual>();
}
unsafe impl windows_core::Interface for Visual {
    type Vtable = <IVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Visual {
    const NAME: &'static str = "Microsoft.UI.Composition.Visual";
}
unsafe impl Send for Visual {}
unsafe impl Sync for Visual {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct VisualCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    VisualCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    VisualCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<Visual>,
    CompositionObject
);
impl VisualCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Visual>> {
        let this = &windows_core::Interface::cast::<windows_collections::IIterable<Visual>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InsertAbove<P0, P1>(&self, newchild: P0, sibling: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
        P1: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAbove)(
                windows_core::Interface::as_raw(this),
                newchild.param().abi(),
                sibling.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtBottom<P0>(&self, newchild: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAtBottom)(
                windows_core::Interface::as_raw(this),
                newchild.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtTop<P0>(&self, newchild: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAtTop)(
                windows_core::Interface::as_raw(this),
                newchild.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertBelow<P0, P1>(&self, newchild: P0, sibling: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
        P1: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertBelow)(
                windows_core::Interface::as_raw(this),
                newchild.param().abi(),
                sibling.param().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<P0>(&self, child: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                child.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for VisualCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVisualCollection>();
}
unsafe impl windows_core::Interface for VisualCollection {
    type Vtable = <IVisualCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVisualCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for VisualCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.VisualCollection";
}
unsafe impl Send for VisualCollection {}
unsafe impl Sync for VisualCollection {}
impl IntoIterator for VisualCollection {
    type Item = Visual;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &VisualCollection {
    type Item = Visual;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct VisualUnorderedCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    VisualUnorderedCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    VisualUnorderedCollection,
    IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<Visual>,
    CompositionObject
);
impl VisualUnorderedCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<Compositor> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<AnimationController> {
        let this = &windows_core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<CompositionAnimation>,
        P2: windows_core::Param<AnimationController>,
    {
        let this = &windows_core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Visual>> {
        let this = &windows_core::Interface::cast::<windows_collections::IIterable<Visual>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Add<P0>(&self, newvisual: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Add)(
                windows_core::Interface::as_raw(this),
                newvisual.param().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<P0>(&self, visual: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Visual>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                visual.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for VisualUnorderedCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVisualUnorderedCollection>();
}
unsafe impl windows_core::Interface for VisualUnorderedCollection {
    type Vtable = <IVisualUnorderedCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVisualUnorderedCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for VisualUnorderedCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.VisualUnorderedCollection";
}
unsafe impl Send for VisualUnorderedCollection {}
unsafe impl Sync for VisualUnorderedCollection {}
impl IntoIterator for VisualUnorderedCollection {
    type Item = Visual;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &VisualUnorderedCollection {
    type Item = Visual;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
