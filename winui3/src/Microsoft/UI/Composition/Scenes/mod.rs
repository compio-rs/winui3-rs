// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    ISceneBoundingBox,
    ISceneBoundingBox_Vtbl,
    0x39fb48e0_216a_5608_9186_6ba9f98b5c67
);
impl windows_core::RuntimeType for ISceneBoundingBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneBoundingBox {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneBoundingBox";
}
pub trait ISceneBoundingBox_Impl: windows_core::IUnknownImpl {
    fn Center(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Extents(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Max(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Min(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Size(&self) -> windows_core::Result<windows_numerics::Vector3>;
}
impl ISceneBoundingBox_Vtbl {
    pub const fn new<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Center<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneBoundingBox_Impl::Center(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Extents<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneBoundingBox_Impl::Extents(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Max<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneBoundingBox_Impl::Max(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Min<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneBoundingBox_Impl::Min(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Size<Identity: ISceneBoundingBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneBoundingBox_Impl::Size(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneBoundingBox, OFFSET>(),
            Center: Center::<Identity, OFFSET>,
            Extents: Extents::<Identity, OFFSET>,
            Max: Max::<Identity, OFFSET>,
            Min: Min::<Identity, OFFSET>,
            Size: Size::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneBoundingBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneBoundingBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Center: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Extents: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Max: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Min: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneComponent,
    ISceneComponent_Vtbl,
    0xf73361cb_8027_50e2_98ee_b2e3ea050a54
);
impl windows_core::RuntimeType for ISceneComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneComponent";
}
pub trait ISceneComponent_Impl: windows_core::IUnknownImpl {
    fn ComponentType(&self) -> windows_core::Result<SceneComponentType>;
}
impl ISceneComponent_Vtbl {
    pub const fn new<Identity: ISceneComponent_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ComponentType<
            Identity: ISceneComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SceneComponentType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneComponent_Impl::ComponentType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneComponent, OFFSET>(),
            ComponentType: ComponentType::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneComponent as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneComponent_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ComponentType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SceneComponentType,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneComponentCollection,
    ISceneComponentCollection_Vtbl,
    0xe4b21c71_87e2_5aeb_85be_884e8302273e
);
impl windows_core::RuntimeType for ISceneComponentCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneComponentCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneComponentCollection";
}
pub trait ISceneComponentCollection_Impl: windows_core::IUnknownImpl {}
impl ISceneComponentCollection_Vtbl {
    pub const fn new<Identity: ISceneComponentCollection_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneComponentCollection,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneComponentCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneComponentCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneComponentFactory,
    ISceneComponentFactory_Vtbl,
    0x254088b0_babf_503d_9a66_0d86af5f7303
);
impl windows_core::RuntimeType for ISceneComponentFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneComponentFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneComponentFactory";
}
pub trait ISceneComponentFactory_Impl: windows_core::IUnknownImpl {}
impl ISceneComponentFactory_Vtbl {
    pub const fn new<Identity: ISceneComponentFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneComponentFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneComponentFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneComponentFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMaterial,
    ISceneMaterial_Vtbl,
    0x042142a7_bf6b_57ad_badc_f581f38edb48
);
impl windows_core::RuntimeType for ISceneMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMaterial";
}
pub trait ISceneMaterial_Impl: windows_core::IUnknownImpl {}
impl ISceneMaterial_Vtbl {
    pub const fn new<Identity: ISceneMaterial_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneMaterial, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMaterial as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMaterial_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMaterialFactory,
    ISceneMaterialFactory_Vtbl,
    0x25747893_8748_5f60_969f_318fa0b735ca
);
impl windows_core::RuntimeType for ISceneMaterialFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMaterialFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMaterialFactory";
}
pub trait ISceneMaterialFactory_Impl: windows_core::IUnknownImpl {}
impl ISceneMaterialFactory_Vtbl {
    pub const fn new<Identity: ISceneMaterialFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneMaterialFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMaterialFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMaterialFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMaterialInput,
    ISceneMaterialInput_Vtbl,
    0x446bdade_719b_5db4_b699_f226d0062a2e
);
impl windows_core::RuntimeType for ISceneMaterialInput {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMaterialInput {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMaterialInput";
}
pub trait ISceneMaterialInput_Impl: windows_core::IUnknownImpl {}
impl ISceneMaterialInput_Vtbl {
    pub const fn new<Identity: ISceneMaterialInput_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneMaterialInput, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMaterialInput as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMaterialInput_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMaterialInputFactory,
    ISceneMaterialInputFactory_Vtbl,
    0xb4dabd1d_58c0_5710_928a_bc49b0735694
);
impl windows_core::RuntimeType for ISceneMaterialInputFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMaterialInputFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactory";
}
pub trait ISceneMaterialInputFactory_Impl: windows_core::IUnknownImpl {}
impl ISceneMaterialInputFactory_Vtbl {
    pub const fn new<Identity: ISceneMaterialInputFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMaterialInputFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMaterialInputFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMaterialInputFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMesh,
    ISceneMesh_Vtbl,
    0x5cf846aa_f53f_555e_a3ad_f5bc52ca32fb
);
impl windows_core::RuntimeType for ISceneMesh {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Graphics_DirectX")]
impl windows_core::RuntimeName for ISceneMesh {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMesh";
}
#[cfg(feature = "Graphics_DirectX")]
pub trait ISceneMesh_Impl: windows_core::IUnknownImpl {
    fn Bounds(&self) -> windows_core::Result<SceneBoundingBox>;
    fn PrimitiveTopology(
        &self,
    ) -> windows_core::Result<super::super::super::Graphics::DirectX::DirectXPrimitiveTopology>;
    fn SetPrimitiveTopology(
        &self,
        value: super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
    ) -> windows_core::Result<()>;
    fn FillMeshAttribute(
        &self,
        semantic: SceneAttributeSemantic,
        format: super::super::super::Graphics::DirectX::DirectXPixelFormat,
        memory: windows_core::Ref<'_, windows::Foundation::MemoryBuffer>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "Graphics_DirectX")]
impl ISceneMesh_Vtbl {
    pub const fn new<Identity: ISceneMesh_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Bounds<Identity: ISceneMesh_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMesh_Impl::Bounds(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PrimitiveTopology<
            Identity: ISceneMesh_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMesh_Impl::PrimitiveTopology(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPrimitiveTopology<
            Identity: ISceneMesh_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMesh_Impl::SetPrimitiveTopology(this, value).into()
            }
        }
        unsafe extern "system" fn FillMeshAttribute<
            Identity: ISceneMesh_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            semantic: SceneAttributeSemantic,
            format: super::super::super::Graphics::DirectX::DirectXPixelFormat,
            memory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMesh_Impl::FillMeshAttribute(
                    this,
                    semantic,
                    format,
                    core::mem::transmute_copy(&memory),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneMesh, OFFSET>(),
            Bounds: Bounds::<Identity, OFFSET>,
            PrimitiveTopology: PrimitiveTopology::<Identity, OFFSET>,
            SetPrimitiveTopology: SetPrimitiveTopology::<Identity, OFFSET>,
            FillMeshAttribute: FillMeshAttribute::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMesh as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMesh_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Bounds: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "Graphics_DirectX")]
    pub PrimitiveTopology: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    PrimitiveTopology: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub SetPrimitiveTopology: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    SetPrimitiveTopology: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub FillMeshAttribute: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SceneAttributeSemantic,
        super::super::super::Graphics::DirectX::DirectXPixelFormat,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    FillMeshAttribute: usize,
}
windows_core::imp::define_interface!(
    ISceneMeshMaterialAttributeMap,
    ISceneMeshMaterialAttributeMap_Vtbl,
    0x2360c457_edae_5660_bedc_89096582ed70
);
impl windows_core::RuntimeType for ISceneMeshMaterialAttributeMap {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMeshMaterialAttributeMap {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap";
}
pub trait ISceneMeshMaterialAttributeMap_Impl: windows_core::IUnknownImpl {}
impl ISceneMeshMaterialAttributeMap_Vtbl {
    pub const fn new<Identity: ISceneMeshMaterialAttributeMap_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMeshMaterialAttributeMap,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMeshMaterialAttributeMap as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMeshMaterialAttributeMap_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneMeshRendererComponent,
    ISceneMeshRendererComponent_Vtbl,
    0xd2be85a0_70a8_5c62_84d8_8ba55e4c64a9
);
impl windows_core::RuntimeType for ISceneMeshRendererComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMeshRendererComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent";
}
pub trait ISceneMeshRendererComponent_Impl: windows_core::IUnknownImpl {
    fn Material(&self) -> windows_core::Result<SceneMaterial>;
    fn SetMaterial(&self, value: windows_core::Ref<'_, SceneMaterial>) -> windows_core::Result<()>;
    fn Mesh(&self) -> windows_core::Result<SceneMesh>;
    fn SetMesh(&self, value: windows_core::Ref<'_, SceneMesh>) -> windows_core::Result<()>;
    fn UVMappings(&self) -> windows_core::Result<SceneMeshMaterialAttributeMap>;
}
impl ISceneMeshRendererComponent_Vtbl {
    pub const fn new<Identity: ISceneMeshRendererComponent_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Material<
            Identity: ISceneMeshRendererComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMeshRendererComponent_Impl::Material(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaterial<
            Identity: ISceneMeshRendererComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMeshRendererComponent_Impl::SetMaterial(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Mesh<
            Identity: ISceneMeshRendererComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMeshRendererComponent_Impl::Mesh(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMesh<
            Identity: ISceneMeshRendererComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMeshRendererComponent_Impl::SetMesh(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn UVMappings<
            Identity: ISceneMeshRendererComponent_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMeshRendererComponent_Impl::UVMappings(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMeshRendererComponent,
                OFFSET,
            >(),
            Material: Material::<Identity, OFFSET>,
            SetMaterial: SetMaterial::<Identity, OFFSET>,
            Mesh: Mesh::<Identity, OFFSET>,
            SetMesh: SetMesh::<Identity, OFFSET>,
            UVMappings: UVMappings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMeshRendererComponent as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMeshRendererComponent_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Material: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMaterial: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Mesh: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMesh: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UVMappings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneMeshRendererComponentStatics,
    ISceneMeshRendererComponentStatics_Vtbl,
    0xc54f8c5a_a104_5cfa_89dc_13edaa6e3d88
);
impl windows_core::RuntimeType for ISceneMeshRendererComponentStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMeshRendererComponentStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStatics";
}
pub trait ISceneMeshRendererComponentStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneMeshRendererComponent>;
}
impl ISceneMeshRendererComponentStatics_Vtbl {
    pub const fn new<Identity: ISceneMeshRendererComponentStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Create<
            Identity: ISceneMeshRendererComponentStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMeshRendererComponentStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMeshRendererComponentStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMeshRendererComponentStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMeshRendererComponentStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneMeshStatics,
    ISceneMeshStatics_Vtbl,
    0x29c52125_964b_5315_80f9_3893713290f5
);
impl windows_core::RuntimeType for ISceneMeshStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMeshStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMeshStatics";
}
pub trait ISceneMeshStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneMesh>;
}
impl ISceneMeshStatics_Vtbl {
    pub const fn new<Identity: ISceneMeshStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<Identity: ISceneMeshStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMeshStatics_Impl::Create(this, core::mem::transmute_copy(&compositor)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneMeshStatics, OFFSET>(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMeshStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMeshStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneMetallicRoughnessMaterial,
    ISceneMetallicRoughnessMaterial_Vtbl,
    0x0a4afcf4_7bae_5702_9b85_8bc849f39987
);
impl windows_core::RuntimeType for ISceneMetallicRoughnessMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMetallicRoughnessMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial";
}
pub trait ISceneMetallicRoughnessMaterial_Impl: windows_core::IUnknownImpl {
    fn BaseColorInput(&self) -> windows_core::Result<SceneMaterialInput>;
    fn SetBaseColorInput(
        &self,
        value: windows_core::Ref<'_, SceneMaterialInput>,
    ) -> windows_core::Result<()>;
    fn BaseColorFactor(&self) -> windows_core::Result<windows_numerics::Vector4>;
    fn SetBaseColorFactor(&self, value: &windows_numerics::Vector4) -> windows_core::Result<()>;
    fn MetallicFactor(&self) -> windows_core::Result<f32>;
    fn SetMetallicFactor(&self, value: f32) -> windows_core::Result<()>;
    fn MetallicRoughnessInput(&self) -> windows_core::Result<SceneMaterialInput>;
    fn SetMetallicRoughnessInput(
        &self,
        value: windows_core::Ref<'_, SceneMaterialInput>,
    ) -> windows_core::Result<()>;
    fn RoughnessFactor(&self) -> windows_core::Result<f32>;
    fn SetRoughnessFactor(&self, value: f32) -> windows_core::Result<()>;
}
impl ISceneMetallicRoughnessMaterial_Vtbl {
    pub const fn new<Identity: ISceneMetallicRoughnessMaterial_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn BaseColorInput<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterial_Impl::BaseColorInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBaseColorInput<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMetallicRoughnessMaterial_Impl::SetBaseColorInput(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn BaseColorFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterial_Impl::BaseColorFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBaseColorFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMetallicRoughnessMaterial_Impl::SetBaseColorFactor(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn MetallicFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterial_Impl::MetallicFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMetallicFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMetallicRoughnessMaterial_Impl::SetMetallicFactor(this, value).into()
            }
        }
        unsafe extern "system" fn MetallicRoughnessInput<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterial_Impl::MetallicRoughnessInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMetallicRoughnessInput<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMetallicRoughnessMaterial_Impl::SetMetallicRoughnessInput(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn RoughnessFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterial_Impl::RoughnessFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRoughnessFactor<
            Identity: ISceneMetallicRoughnessMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneMetallicRoughnessMaterial_Impl::SetRoughnessFactor(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMetallicRoughnessMaterial,
                OFFSET,
            >(),
            BaseColorInput: BaseColorInput::<Identity, OFFSET>,
            SetBaseColorInput: SetBaseColorInput::<Identity, OFFSET>,
            BaseColorFactor: BaseColorFactor::<Identity, OFFSET>,
            SetBaseColorFactor: SetBaseColorFactor::<Identity, OFFSET>,
            MetallicFactor: MetallicFactor::<Identity, OFFSET>,
            SetMetallicFactor: SetMetallicFactor::<Identity, OFFSET>,
            MetallicRoughnessInput: MetallicRoughnessInput::<Identity, OFFSET>,
            SetMetallicRoughnessInput: SetMetallicRoughnessInput::<Identity, OFFSET>,
            RoughnessFactor: RoughnessFactor::<Identity, OFFSET>,
            SetRoughnessFactor: SetRoughnessFactor::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMetallicRoughnessMaterial as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMetallicRoughnessMaterial_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BaseColorInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBaseColorInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BaseColorFactor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector4,
    ) -> windows_core::HRESULT,
    pub SetBaseColorFactor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector4,
    ) -> windows_core::HRESULT,
    pub MetallicFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMetallicFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MetallicRoughnessInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMetallicRoughnessInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RoughnessFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRoughnessFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneMetallicRoughnessMaterialStatics,
    ISceneMetallicRoughnessMaterialStatics_Vtbl,
    0xdffd2043_ab3c_57a0_8e13_6f09725e970f
);
impl windows_core::RuntimeType for ISceneMetallicRoughnessMaterialStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneMetallicRoughnessMaterialStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStatics";
}
pub trait ISceneMetallicRoughnessMaterialStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneMetallicRoughnessMaterial>;
}
impl ISceneMetallicRoughnessMaterialStatics_Vtbl {
    pub const fn new<Identity: ISceneMetallicRoughnessMaterialStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Create<
            Identity: ISceneMetallicRoughnessMaterialStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneMetallicRoughnessMaterialStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneMetallicRoughnessMaterialStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneMetallicRoughnessMaterialStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneMetallicRoughnessMaterialStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneModelTransform,
    ISceneModelTransform_Vtbl,
    0x3f05555f_0f67_576e_9d8a_93c1f250c29f
);
impl windows_core::RuntimeType for ISceneModelTransform {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneModelTransform {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneModelTransform";
}
pub trait ISceneModelTransform_Impl: windows_core::IUnknownImpl {
    fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion>;
    fn SetOrientation(
        &self,
        value: &windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()>;
    fn RotationAngle(&self) -> windows_core::Result<f32>;
    fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAngleInDegrees(&self) -> windows_core::Result<f32>;
    fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()>;
    fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetRotationAxis(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetScale(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetTranslation(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
}
impl ISceneModelTransform_Vtbl {
    pub const fn new<Identity: ISceneModelTransform_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Orientation<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::Orientation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOrientation<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Numerics::Quaternion,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetOrientation(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn RotationAngle<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::RotationAngle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngle<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetRotationAngle(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAngleInDegrees<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::RotationAngleInDegrees(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAngleInDegrees<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetRotationAngleInDegrees(this, value).into()
            }
        }
        unsafe extern "system" fn RotationAxis<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::RotationAxis(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationAxis<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetRotationAxis(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Scale<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScale<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetScale(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Translation<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneModelTransform_Impl::Translation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTranslation<
            Identity: ISceneModelTransform_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneModelTransform_Impl::SetTranslation(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneModelTransform, OFFSET>(
            ),
            Orientation: Orientation::<Identity, OFFSET>,
            SetOrientation: SetOrientation::<Identity, OFFSET>,
            RotationAngle: RotationAngle::<Identity, OFFSET>,
            SetRotationAngle: SetRotationAngle::<Identity, OFFSET>,
            RotationAngleInDegrees: RotationAngleInDegrees::<Identity, OFFSET>,
            SetRotationAngleInDegrees: SetRotationAngleInDegrees::<Identity, OFFSET>,
            RotationAxis: RotationAxis::<Identity, OFFSET>,
            SetRotationAxis: SetRotationAxis::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            SetScale: SetScale::<Identity, OFFSET>,
            Translation: Translation::<Identity, OFFSET>,
            SetTranslation: SetTranslation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneModelTransform as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneModelTransform_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Orientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::HRESULT,
    pub RotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngle:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetRotationAngleInDegrees:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RotationAxis: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetRotationAxis: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Translation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetTranslation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneNode,
    ISceneNode_Vtbl,
    0xa1bce140_79c2_59e6_9b68_63b1bab0e2a6
);
impl windows_core::RuntimeType for ISceneNode {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneNode {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneNode";
}
pub trait ISceneNode_Impl: windows_core::IUnknownImpl {
    fn Children(&self) -> windows_core::Result<SceneNodeCollection>;
    fn Components(&self) -> windows_core::Result<SceneComponentCollection>;
    fn Parent(&self) -> windows_core::Result<SceneNode>;
    fn Transform(&self) -> windows_core::Result<SceneModelTransform>;
    fn FindFirstComponentOfType(
        &self,
        value: SceneComponentType,
    ) -> windows_core::Result<SceneComponent>;
}
impl ISceneNode_Vtbl {
    pub const fn new<Identity: ISceneNode_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Children<Identity: ISceneNode_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNode_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Components<Identity: ISceneNode_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNode_Impl::Components(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Parent<Identity: ISceneNode_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNode_Impl::Parent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Transform<Identity: ISceneNode_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNode_Impl::Transform(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindFirstComponentOfType<
            Identity: ISceneNode_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SceneComponentType,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNode_Impl::FindFirstComponentOfType(this, value) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneNode, OFFSET>(),
            Children: Children::<Identity, OFFSET>,
            Components: Components::<Identity, OFFSET>,
            Parent: Parent::<Identity, OFFSET>,
            Transform: Transform::<Identity, OFFSET>,
            FindFirstComponentOfType: FindFirstComponentOfType::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneNode as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneNode_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Components: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Transform: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FindFirstComponentOfType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SceneComponentType,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneNodeCollection,
    ISceneNodeCollection_Vtbl,
    0xf219b68e_5666_5c6c_aa4e_08db07fd6bcf
);
impl windows_core::RuntimeType for ISceneNodeCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneNodeCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneNodeCollection";
}
pub trait ISceneNodeCollection_Impl: windows_core::IUnknownImpl {}
impl ISceneNodeCollection_Vtbl {
    pub const fn new<Identity: ISceneNodeCollection_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneNodeCollection, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneNodeCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneNodeCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneNodeStatics,
    ISceneNodeStatics_Vtbl,
    0x801c4394_4198_5da1_ac39_6e8a44b5ce57
);
impl windows_core::RuntimeType for ISceneNodeStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneNodeStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneNodeStatics";
}
pub trait ISceneNodeStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneNode>;
}
impl ISceneNodeStatics_Vtbl {
    pub const fn new<Identity: ISceneNodeStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<Identity: ISceneNodeStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneNodeStatics_Impl::Create(this, core::mem::transmute_copy(&compositor)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneNodeStatics, OFFSET>(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneNodeStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneNodeStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneObject,
    ISceneObject_Vtbl,
    0x4333e514_4fc7_521e_8bca_11c51fbcaf1e
);
impl windows_core::RuntimeType for ISceneObject {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneObject {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneObject";
}
pub trait ISceneObject_Impl: windows_core::IUnknownImpl {}
impl ISceneObject_Vtbl {
    pub const fn new<Identity: ISceneObject_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneObject, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneObject as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneObject_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneObjectFactory,
    ISceneObjectFactory_Vtbl,
    0xee797f7d_77db_5c4c_b6f5_c1930fad85c5
);
impl windows_core::RuntimeType for ISceneObjectFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneObjectFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneObjectFactory";
}
pub trait ISceneObjectFactory_Impl: windows_core::IUnknownImpl {}
impl ISceneObjectFactory_Vtbl {
    pub const fn new<Identity: ISceneObjectFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneObjectFactory, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneObjectFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneObjectFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IScenePbrMaterial,
    IScenePbrMaterial_Vtbl,
    0x295d0725_56fe_5954_8057_3f4ca7515b36
);
impl windows_core::RuntimeType for IScenePbrMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScenePbrMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.IScenePbrMaterial";
}
pub trait IScenePbrMaterial_Impl: windows_core::IUnknownImpl {
    fn AlphaCutoff(&self) -> windows_core::Result<f32>;
    fn SetAlphaCutoff(&self, value: f32) -> windows_core::Result<()>;
    fn AlphaMode(&self) -> windows_core::Result<SceneAlphaMode>;
    fn SetAlphaMode(&self, value: SceneAlphaMode) -> windows_core::Result<()>;
    fn EmissiveInput(&self) -> windows_core::Result<SceneMaterialInput>;
    fn SetEmissiveInput(
        &self,
        value: windows_core::Ref<'_, SceneMaterialInput>,
    ) -> windows_core::Result<()>;
    fn EmissiveFactor(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetEmissiveFactor(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn IsDoubleSided(&self) -> windows_core::Result<bool>;
    fn SetIsDoubleSided(&self, value: bool) -> windows_core::Result<()>;
    fn NormalInput(&self) -> windows_core::Result<SceneMaterialInput>;
    fn SetNormalInput(
        &self,
        value: windows_core::Ref<'_, SceneMaterialInput>,
    ) -> windows_core::Result<()>;
    fn NormalScale(&self) -> windows_core::Result<f32>;
    fn SetNormalScale(&self, value: f32) -> windows_core::Result<()>;
    fn OcclusionInput(&self) -> windows_core::Result<SceneMaterialInput>;
    fn SetOcclusionInput(
        &self,
        value: windows_core::Ref<'_, SceneMaterialInput>,
    ) -> windows_core::Result<()>;
    fn OcclusionStrength(&self) -> windows_core::Result<f32>;
    fn SetOcclusionStrength(&self, value: f32) -> windows_core::Result<()>;
}
impl IScenePbrMaterial_Vtbl {
    pub const fn new<Identity: IScenePbrMaterial_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AlphaCutoff<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::AlphaCutoff(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAlphaCutoff<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetAlphaCutoff(this, value).into()
            }
        }
        unsafe extern "system" fn AlphaMode<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SceneAlphaMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::AlphaMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAlphaMode<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SceneAlphaMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetAlphaMode(this, value).into()
            }
        }
        unsafe extern "system" fn EmissiveInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::EmissiveInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEmissiveInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetEmissiveInput(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn EmissiveFactor<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::EmissiveFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEmissiveFactor<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetEmissiveFactor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn IsDoubleSided<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::IsDoubleSided(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDoubleSided<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetIsDoubleSided(this, value).into()
            }
        }
        unsafe extern "system" fn NormalInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::NormalInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNormalInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetNormalInput(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn NormalScale<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::NormalScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNormalScale<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetNormalScale(this, value).into()
            }
        }
        unsafe extern "system" fn OcclusionInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::OcclusionInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOcclusionInput<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetOcclusionInput(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn OcclusionStrength<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScenePbrMaterial_Impl::OcclusionStrength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOcclusionStrength<
            Identity: IScenePbrMaterial_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScenePbrMaterial_Impl::SetOcclusionStrength(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScenePbrMaterial, OFFSET>(),
            AlphaCutoff: AlphaCutoff::<Identity, OFFSET>,
            SetAlphaCutoff: SetAlphaCutoff::<Identity, OFFSET>,
            AlphaMode: AlphaMode::<Identity, OFFSET>,
            SetAlphaMode: SetAlphaMode::<Identity, OFFSET>,
            EmissiveInput: EmissiveInput::<Identity, OFFSET>,
            SetEmissiveInput: SetEmissiveInput::<Identity, OFFSET>,
            EmissiveFactor: EmissiveFactor::<Identity, OFFSET>,
            SetEmissiveFactor: SetEmissiveFactor::<Identity, OFFSET>,
            IsDoubleSided: IsDoubleSided::<Identity, OFFSET>,
            SetIsDoubleSided: SetIsDoubleSided::<Identity, OFFSET>,
            NormalInput: NormalInput::<Identity, OFFSET>,
            SetNormalInput: SetNormalInput::<Identity, OFFSET>,
            NormalScale: NormalScale::<Identity, OFFSET>,
            SetNormalScale: SetNormalScale::<Identity, OFFSET>,
            OcclusionInput: OcclusionInput::<Identity, OFFSET>,
            SetOcclusionInput: SetOcclusionInput::<Identity, OFFSET>,
            OcclusionStrength: OcclusionStrength::<Identity, OFFSET>,
            SetOcclusionStrength: SetOcclusionStrength::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScenePbrMaterial as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScenePbrMaterial_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AlphaCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetAlphaCutoff:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SceneAlphaMode,
    ) -> windows_core::HRESULT,
    pub SetAlphaMode:
        unsafe extern "system" fn(*mut core::ffi::c_void, SceneAlphaMode) -> windows_core::HRESULT,
    pub EmissiveInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEmissiveInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EmissiveFactor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetEmissiveFactor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub IsDoubleSided:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsDoubleSided:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub NormalInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNormalInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NormalScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetNormalScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub OcclusionInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetOcclusionInput: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OcclusionStrength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOcclusionStrength:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScenePbrMaterialFactory,
    IScenePbrMaterialFactory_Vtbl,
    0x9e34d32a_e30c_51f5_84ac_6467950605ca
);
impl windows_core::RuntimeType for IScenePbrMaterialFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScenePbrMaterialFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactory";
}
pub trait IScenePbrMaterialFactory_Impl: windows_core::IUnknownImpl {}
impl IScenePbrMaterialFactory_Vtbl {
    pub const fn new<Identity: IScenePbrMaterialFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScenePbrMaterialFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScenePbrMaterialFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScenePbrMaterialFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneRendererComponent,
    ISceneRendererComponent_Vtbl,
    0x6bab8030_89c1_5dbc_a48e_1805ddf9cdd1
);
impl windows_core::RuntimeType for ISceneRendererComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneRendererComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneRendererComponent";
}
pub trait ISceneRendererComponent_Impl: windows_core::IUnknownImpl {}
impl ISceneRendererComponent_Vtbl {
    pub const fn new<Identity: ISceneRendererComponent_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneRendererComponent, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneRendererComponent as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneRendererComponent_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneRendererComponentFactory,
    ISceneRendererComponentFactory_Vtbl,
    0x3ccac1d6_6a0f_582e_bb1a_10ebc1e405ca
);
impl windows_core::RuntimeType for ISceneRendererComponentFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneRendererComponentFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactory";
}
pub trait ISceneRendererComponentFactory_Impl: windows_core::IUnknownImpl {}
impl ISceneRendererComponentFactory_Vtbl {
    pub const fn new<Identity: ISceneRendererComponentFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneRendererComponentFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneRendererComponentFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneRendererComponentFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISceneSurfaceMaterialInput,
    ISceneSurfaceMaterialInput_Vtbl,
    0xb9854b4f_286c_50cd_a734_491a251d5fd3
);
impl windows_core::RuntimeType for ISceneSurfaceMaterialInput {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneSurfaceMaterialInput {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput";
}
pub trait ISceneSurfaceMaterialInput_Impl: windows_core::IUnknownImpl {
    fn BitmapInterpolationMode(
        &self,
    ) -> windows_core::Result<super::CompositionBitmapInterpolationMode>;
    fn SetBitmapInterpolationMode(
        &self,
        value: super::CompositionBitmapInterpolationMode,
    ) -> windows_core::Result<()>;
    fn Surface(&self) -> windows_core::Result<super::ICompositionSurface>;
    fn SetSurface(
        &self,
        value: windows_core::Ref<'_, super::ICompositionSurface>,
    ) -> windows_core::Result<()>;
    fn WrappingUMode(&self) -> windows_core::Result<SceneWrappingMode>;
    fn SetWrappingUMode(&self, value: SceneWrappingMode) -> windows_core::Result<()>;
    fn WrappingVMode(&self) -> windows_core::Result<SceneWrappingMode>;
    fn SetWrappingVMode(&self, value: SceneWrappingMode) -> windows_core::Result<()>;
}
impl ISceneSurfaceMaterialInput_Vtbl {
    pub const fn new<Identity: ISceneSurfaceMaterialInput_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BitmapInterpolationMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::CompositionBitmapInterpolationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneSurfaceMaterialInput_Impl::BitmapInterpolationMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBitmapInterpolationMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::CompositionBitmapInterpolationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneSurfaceMaterialInput_Impl::SetBitmapInterpolationMode(this, value).into()
            }
        }
        unsafe extern "system" fn Surface<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneSurfaceMaterialInput_Impl::Surface(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSurface<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneSurfaceMaterialInput_Impl::SetSurface(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn WrappingUMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SceneWrappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneSurfaceMaterialInput_Impl::WrappingUMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetWrappingUMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SceneWrappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneSurfaceMaterialInput_Impl::SetWrappingUMode(this, value).into()
            }
        }
        unsafe extern "system" fn WrappingVMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SceneWrappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneSurfaceMaterialInput_Impl::WrappingVMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetWrappingVMode<
            Identity: ISceneSurfaceMaterialInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SceneWrappingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneSurfaceMaterialInput_Impl::SetWrappingVMode(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneSurfaceMaterialInput,
                OFFSET,
            >(),
            BitmapInterpolationMode: BitmapInterpolationMode::<Identity, OFFSET>,
            SetBitmapInterpolationMode: SetBitmapInterpolationMode::<Identity, OFFSET>,
            Surface: Surface::<Identity, OFFSET>,
            SetSurface: SetSurface::<Identity, OFFSET>,
            WrappingUMode: WrappingUMode::<Identity, OFFSET>,
            SetWrappingUMode: SetWrappingUMode::<Identity, OFFSET>,
            WrappingVMode: WrappingVMode::<Identity, OFFSET>,
            SetWrappingVMode: SetWrappingVMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneSurfaceMaterialInput as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneSurfaceMaterialInput_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BitmapInterpolationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::CompositionBitmapInterpolationMode,
    ) -> windows_core::HRESULT,
    pub SetBitmapInterpolationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::CompositionBitmapInterpolationMode,
    ) -> windows_core::HRESULT,
    pub Surface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSurface: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WrappingUMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SceneWrappingMode,
    ) -> windows_core::HRESULT,
    pub SetWrappingUMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SceneWrappingMode,
    ) -> windows_core::HRESULT,
    pub WrappingVMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SceneWrappingMode,
    ) -> windows_core::HRESULT,
    pub SetWrappingVMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SceneWrappingMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneSurfaceMaterialInputStatics,
    ISceneSurfaceMaterialInputStatics_Vtbl,
    0x8e1ba937_ad60_51bc_8256_ca62c4b2ae92
);
impl windows_core::RuntimeType for ISceneSurfaceMaterialInputStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneSurfaceMaterialInputStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStatics";
}
pub trait ISceneSurfaceMaterialInputStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneSurfaceMaterialInput>;
}
impl ISceneSurfaceMaterialInputStatics_Vtbl {
    pub const fn new<Identity: ISceneSurfaceMaterialInputStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Create<
            Identity: ISceneSurfaceMaterialInputStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneSurfaceMaterialInputStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISceneSurfaceMaterialInputStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneSurfaceMaterialInputStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneSurfaceMaterialInputStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneVisual,
    ISceneVisual_Vtbl,
    0x0144d7ad_6a7d_59cb_a0f9_74a04e85352c
);
impl windows_core::RuntimeType for ISceneVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneVisual";
}
pub trait ISceneVisual_Impl: windows_core::IUnknownImpl {
    fn Root(&self) -> windows_core::Result<SceneNode>;
    fn SetRoot(&self, value: windows_core::Ref<'_, SceneNode>) -> windows_core::Result<()>;
}
impl ISceneVisual_Vtbl {
    pub const fn new<Identity: ISceneVisual_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Root<Identity: ISceneVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneVisual_Impl::Root(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRoot<Identity: ISceneVisual_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISceneVisual_Impl::SetRoot(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneVisual, OFFSET>(),
            Root: Root::<Identity, OFFSET>,
            SetRoot: SetRoot::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneVisual as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneVisual_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Root: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetRoot: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISceneVisualStatics,
    ISceneVisualStatics_Vtbl,
    0x7b8da6d1_5bd8_5095_9264_e5572653ea07
);
impl windows_core::RuntimeType for ISceneVisualStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISceneVisualStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ISceneVisualStatics";
}
pub trait ISceneVisualStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<SceneVisual>;
}
impl ISceneVisualStatics_Vtbl {
    pub const fn new<Identity: ISceneVisualStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: ISceneVisualStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISceneVisualStatics_Impl::Create(this, core::mem::transmute_copy(&compositor))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISceneVisualStatics, OFFSET>(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISceneVisualStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISceneVisualStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SceneAlphaMode(pub i32);
impl SceneAlphaMode {
    pub const Opaque: Self = Self(0i32);
    pub const AlphaTest: Self = Self(1i32);
    pub const Blend: Self = Self(2i32);
}
impl windows_core::TypeKind for SceneAlphaMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SceneAlphaMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Scenes.SceneAlphaMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SceneAttributeSemantic(pub i32);
impl SceneAttributeSemantic {
    pub const Index: Self = Self(0i32);
    pub const Vertex: Self = Self(1i32);
    pub const Normal: Self = Self(2i32);
    pub const TexCoord0: Self = Self(3i32);
    pub const TexCoord1: Self = Self(4i32);
    pub const Color: Self = Self(5i32);
    pub const Tangent: Self = Self(6i32);
}
impl windows_core::TypeKind for SceneAttributeSemantic {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SceneAttributeSemantic {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Scenes.SceneAttributeSemantic;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneBoundingBox(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneBoundingBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneBoundingBox,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneBoundingBox {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Center(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Center)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Extents(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Extents)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Max(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Max)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Min(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Min)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for SceneBoundingBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneBoundingBox>();
}
unsafe impl windows_core::Interface for SceneBoundingBox {
    type Vtable = <ISceneBoundingBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneBoundingBox as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneBoundingBox {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneBoundingBox";
}
unsafe impl Send for SceneBoundingBox {}
unsafe impl Sync for SceneBoundingBox {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneComponent(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneComponent,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneComponent,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneComponent {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ComponentType(&self) -> windows_core::Result<SceneComponentType> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ComponentType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for SceneComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneComponent>();
}
unsafe impl windows_core::Interface for SceneComponent {
    type Vtable = <ISceneComponent as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneComponent as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneComponent";
}
unsafe impl Send for SceneComponent {}
unsafe impl Sync for SceneComponent {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneComponentCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneComponentCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<SceneComponent>
);
windows_core::imp::required_hierarchy!(
    SceneComponentCollection,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<SceneComponent>,
    SceneObject,
    super::CompositionObject
);
impl SceneComponentCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<SceneComponent>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<SceneComponent>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<SceneComponent> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<SceneComponent>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<SceneComponent>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<SceneComponent>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<SceneComponent>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneComponent>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<SceneComponent>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<SceneComponent>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneComponentCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<SceneComponent>,
    >();
}
unsafe impl windows_core::Interface for SceneComponentCollection {
    type Vtable = <windows_collections::IVector<SceneComponent> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<SceneComponent> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneComponentCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneComponentCollection";
}
unsafe impl Send for SceneComponentCollection {}
unsafe impl Sync for SceneComponentCollection {}
impl IntoIterator for SceneComponentCollection {
    type Item = SceneComponent;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &SceneComponentCollection {
    type Item = SceneComponent;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SceneComponentType(pub i32);
impl SceneComponentType {
    pub const MeshRendererComponent: Self = Self(0i32);
}
impl windows_core::TypeKind for SceneComponentType {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SceneComponentType {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Scenes.SceneComponentType;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMaterial(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMaterial,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneMaterial,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneMaterial {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMaterial>();
}
unsafe impl windows_core::Interface for SceneMaterial {
    type Vtable = <ISceneMaterial as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneMaterial as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMaterial";
}
unsafe impl Send for SceneMaterial {}
unsafe impl Sync for SceneMaterial {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMaterialInput(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMaterialInput,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneMaterialInput,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneMaterialInput {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneMaterialInput {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMaterialInput>();
}
unsafe impl windows_core::Interface for SceneMaterialInput {
    type Vtable = <ISceneMaterialInput as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneMaterialInput as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMaterialInput {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMaterialInput";
}
unsafe impl Send for SceneMaterialInput {}
unsafe impl Sync for SceneMaterialInput {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMesh(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMesh,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneMesh,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneMesh {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Bounds(&self) -> windows_core::Result<SceneBoundingBox> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounds)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PrimitiveTopology(
        &self,
    ) -> windows_core::Result<super::super::super::Graphics::DirectX::DirectXPrimitiveTopology>
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrimitiveTopology)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn SetPrimitiveTopology(
        &self,
        value: super::super::super::Graphics::DirectX::DirectXPrimitiveTopology,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPrimitiveTopology)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "Graphics_DirectX")]
    pub fn FillMeshAttribute<P2>(
        &self,
        semantic: SceneAttributeSemantic,
        format: super::super::super::Graphics::DirectX::DirectXPixelFormat,
        memory: P2,
    ) -> windows_core::Result<()>
    where
        P2: windows_core::Param<windows::Foundation::MemoryBuffer>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).FillMeshAttribute)(
                windows_core::Interface::as_raw(this),
                semantic,
                format,
                memory.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneMesh>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneMeshStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISceneMeshStatics<R, F: FnOnce(&ISceneMeshStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<SceneMesh, ISceneMeshStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneMesh {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMesh>();
}
unsafe impl windows_core::Interface for SceneMesh {
    type Vtable = <ISceneMesh as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneMesh as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMesh {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMesh";
}
unsafe impl Send for SceneMesh {}
unsafe impl Sync for SceneMesh {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMeshMaterialAttributeMap(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMeshMaterialAttributeMap,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy ! ( SceneMeshMaterialAttributeMap , super:: IAnimationObject , windows::Foundation:: IClosable , windows_collections:: IIterable < windows_collections:: IKeyValuePair < windows_core::HSTRING , SceneAttributeSemantic > > , windows_collections:: IMap < windows_core::HSTRING , SceneAttributeSemantic > , SceneObject , super:: CompositionObject );
impl SceneMeshMaterialAttributeMap {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<windows_core::HSTRING, SceneAttributeSemantic>,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<windows_core::HSTRING, SceneAttributeSemantic>,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Lookup(
        &self,
        key: &windows_core::HSTRING,
    ) -> windows_core::Result<SceneAttributeSemantic> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Lookup)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HasKey(&self, key: &windows_core::HSTRING) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::HSTRING, SceneAttributeSemantic>,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Insert(
        &self,
        key: &windows_core::HSTRING,
        value: SceneAttributeSemantic,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Insert)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Remove(&self, key: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::HSTRING, SceneAttributeSemantic>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneMeshMaterialAttributeMap {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMeshMaterialAttributeMap>();
}
unsafe impl windows_core::Interface for SceneMeshMaterialAttributeMap {
    type Vtable = <ISceneMeshMaterialAttributeMap as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISceneMeshMaterialAttributeMap as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMeshMaterialAttributeMap {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap";
}
unsafe impl Send for SceneMeshMaterialAttributeMap {}
unsafe impl Sync for SceneMeshMaterialAttributeMap {}
impl IntoIterator for SceneMeshMaterialAttributeMap {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, SceneAttributeSemantic>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &SceneMeshMaterialAttributeMap {
    type Item = windows_collections::IKeyValuePair<windows_core::HSTRING, SceneAttributeSemantic>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMeshRendererComponent(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMeshRendererComponent,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneMeshRendererComponent,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneRendererComponent,
    SceneComponent,
    SceneObject,
    super::CompositionObject
);
impl SceneMeshRendererComponent {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ComponentType(&self) -> windows_core::Result<SceneComponentType> {
        let this = &windows_core::Interface::cast::<ISceneComponent>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ComponentType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Material(&self) -> windows_core::Result<SceneMaterial> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Material)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMaterial<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterial>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaterial)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mesh(&self) -> windows_core::Result<SceneMesh> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mesh)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMesh<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMesh>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMesh)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn UVMappings(&self) -> windows_core::Result<SceneMeshMaterialAttributeMap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UVMappings)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneMeshRendererComponent>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneMeshRendererComponentStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISceneMeshRendererComponentStatics<
        R,
        F: FnOnce(&ISceneMeshRendererComponentStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SceneMeshRendererComponent,
            ISceneMeshRendererComponentStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneMeshRendererComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMeshRendererComponent>();
}
unsafe impl windows_core::Interface for SceneMeshRendererComponent {
    type Vtable = <ISceneMeshRendererComponent as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneMeshRendererComponent as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMeshRendererComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent";
}
unsafe impl Send for SceneMeshRendererComponent {}
unsafe impl Sync for SceneMeshRendererComponent {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneMetallicRoughnessMaterial(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneMetallicRoughnessMaterial,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneMetallicRoughnessMaterial,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    ScenePbrMaterial,
    SceneMaterial,
    SceneObject,
    super::CompositionObject
);
impl SceneMetallicRoughnessMaterial {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BaseColorInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseColorInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBaseColorInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBaseColorInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn BaseColorFactor(&self) -> windows_core::Result<windows_numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseColorFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBaseColorFactor(&self, value: windows_numerics::Vector4) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBaseColorFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MetallicFactor(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MetallicFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMetallicFactor(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMetallicFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MetallicRoughnessInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MetallicRoughnessInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMetallicRoughnessInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMetallicRoughnessInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RoughnessFactor(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RoughnessFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRoughnessFactor(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRoughnessFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneMetallicRoughnessMaterial>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneMetallicRoughnessMaterialStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AlphaCutoff(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAlphaCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAlphaCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AlphaMode(&self) -> windows_core::Result<SceneAlphaMode> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAlphaMode(&self, value: SceneAlphaMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAlphaMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EmissiveInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EmissiveInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEmissiveInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEmissiveInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EmissiveFactor(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EmissiveFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEmissiveFactor(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEmissiveFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleSided(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleSided)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleSided(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleSided)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NormalInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NormalInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNormalInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNormalInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn NormalScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NormalScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetNormalScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNormalScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OcclusionInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OcclusionInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetOcclusionInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOcclusionInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OcclusionStrength(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OcclusionStrength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOcclusionStrength(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IScenePbrMaterial>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOcclusionStrength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    fn ISceneMetallicRoughnessMaterialStatics<
        R,
        F: FnOnce(&ISceneMetallicRoughnessMaterialStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SceneMetallicRoughnessMaterial,
            ISceneMetallicRoughnessMaterialStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneMetallicRoughnessMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneMetallicRoughnessMaterial>();
}
unsafe impl windows_core::Interface for SceneMetallicRoughnessMaterial {
    type Vtable = <ISceneMetallicRoughnessMaterial as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISceneMetallicRoughnessMaterial as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneMetallicRoughnessMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial";
}
unsafe impl Send for SceneMetallicRoughnessMaterial {}
unsafe impl Sync for SceneMetallicRoughnessMaterial {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneModelTransform(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneModelTransform,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneModelTransform,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionTransform,
    super::CompositionObject
);
impl SceneModelTransform {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneModelTransform {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneModelTransform>();
}
unsafe impl windows_core::Interface for SceneModelTransform {
    type Vtable = <ISceneModelTransform as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneModelTransform as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneModelTransform {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneModelTransform";
}
unsafe impl Send for SceneModelTransform {}
unsafe impl Sync for SceneModelTransform {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneNode(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneNode,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneNode,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneObject,
    super::CompositionObject
);
impl SceneNode {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<SceneNodeCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Components(&self) -> windows_core::Result<SceneComponentCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Components)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Parent(&self) -> windows_core::Result<SceneNode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Transform(&self) -> windows_core::Result<SceneModelTransform> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Transform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FindFirstComponentOfType(
        &self,
        value: SceneComponentType,
    ) -> windows_core::Result<SceneComponent> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindFirstComponentOfType)(
                windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneNode>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneNodeStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISceneNodeStatics<R, F: FnOnce(&ISceneNodeStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<SceneNode, ISceneNodeStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneNode {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneNode>();
}
unsafe impl windows_core::Interface for SceneNode {
    type Vtable = <ISceneNode as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneNode as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneNode {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneNode";
}
unsafe impl Send for SceneNode {}
unsafe impl Sync for SceneNode {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneNodeCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneNodeCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<SceneNode>
);
windows_core::imp::required_hierarchy!(
    SceneNodeCollection,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<SceneNode>,
    SceneObject,
    super::CompositionObject
);
impl SceneNodeCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<SceneNode>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<SceneNode>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<SceneNode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<SceneNode>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<SceneNode>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<SceneNode>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<SceneNode>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneNode>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<SceneNode>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<SceneNode>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneNodeCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, windows_collections::IVector<SceneNode>>(
        );
}
unsafe impl windows_core::Interface for SceneNodeCollection {
    type Vtable = <windows_collections::IVector<SceneNode> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<SceneNode> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneNodeCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneNodeCollection";
}
unsafe impl Send for SceneNodeCollection {}
unsafe impl Sync for SceneNodeCollection {}
impl IntoIterator for SceneNodeCollection {
    type Item = SceneNode;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &SceneNodeCollection {
    type Item = SceneNode;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneObject(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneObject,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneObject,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl SceneObject {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SceneObject {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneObject>();
}
unsafe impl windows_core::Interface for SceneObject {
    type Vtable = <ISceneObject as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneObject as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneObject {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneObject";
}
unsafe impl Send for SceneObject {}
unsafe impl Sync for SceneObject {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ScenePbrMaterial(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ScenePbrMaterial,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ScenePbrMaterial,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneMaterial,
    SceneObject,
    super::CompositionObject
);
impl ScenePbrMaterial {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn AlphaCutoff(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaCutoff)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAlphaCutoff(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAlphaCutoff)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AlphaMode(&self) -> windows_core::Result<SceneAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AlphaMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAlphaMode(&self, value: SceneAlphaMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAlphaMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EmissiveInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EmissiveInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEmissiveInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEmissiveInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EmissiveFactor(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EmissiveFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEmissiveFactor(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEmissiveFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleSided(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleSided)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleSided(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleSided)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NormalInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NormalInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNormalInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNormalInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn NormalScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NormalScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetNormalScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNormalScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OcclusionInput(&self) -> windows_core::Result<SceneMaterialInput> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OcclusionInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetOcclusionInput<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneMaterialInput>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOcclusionInput)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OcclusionStrength(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OcclusionStrength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOcclusionStrength(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOcclusionStrength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ScenePbrMaterial {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IScenePbrMaterial>();
}
unsafe impl windows_core::Interface for ScenePbrMaterial {
    type Vtable = <IScenePbrMaterial as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IScenePbrMaterial as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ScenePbrMaterial {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.ScenePbrMaterial";
}
unsafe impl Send for ScenePbrMaterial {}
unsafe impl Sync for ScenePbrMaterial {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneRendererComponent(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneRendererComponent,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneRendererComponent,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneComponent,
    SceneObject,
    super::CompositionObject
);
impl SceneRendererComponent {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn ComponentType(&self) -> windows_core::Result<SceneComponentType> {
        let this = &windows_core::Interface::cast::<ISceneComponent>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ComponentType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for SceneRendererComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneRendererComponent>();
}
unsafe impl windows_core::Interface for SceneRendererComponent {
    type Vtable = <ISceneRendererComponent as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneRendererComponent as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneRendererComponent {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneRendererComponent";
}
unsafe impl Send for SceneRendererComponent {}
unsafe impl Sync for SceneRendererComponent {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneSurfaceMaterialInput(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneSurfaceMaterialInput,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneSurfaceMaterialInput,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    SceneMaterialInput,
    SceneObject,
    super::CompositionObject
);
impl SceneSurfaceMaterialInput {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn BitmapInterpolationMode(
        &self,
    ) -> windows_core::Result<super::CompositionBitmapInterpolationMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BitmapInterpolationMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBitmapInterpolationMode(
        &self,
        value: super::CompositionBitmapInterpolationMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBitmapInterpolationMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Surface(&self) -> windows_core::Result<super::ICompositionSurface> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Surface)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSurface<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionSurface>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSurface)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn WrappingUMode(&self) -> windows_core::Result<SceneWrappingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WrappingUMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWrappingUMode(&self, value: SceneWrappingMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetWrappingUMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn WrappingVMode(&self) -> windows_core::Result<SceneWrappingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WrappingVMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWrappingVMode(&self, value: SceneWrappingMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetWrappingVMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneSurfaceMaterialInput>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneSurfaceMaterialInputStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISceneSurfaceMaterialInputStatics<
        R,
        F: FnOnce(&ISceneSurfaceMaterialInputStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SceneSurfaceMaterialInput,
            ISceneSurfaceMaterialInputStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneSurfaceMaterialInput {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneSurfaceMaterialInput>();
}
unsafe impl windows_core::Interface for SceneSurfaceMaterialInput {
    type Vtable = <ISceneSurfaceMaterialInput as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneSurfaceMaterialInput as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneSurfaceMaterialInput {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput";
}
unsafe impl Send for SceneSurfaceMaterialInput {}
unsafe impl Sync for SceneSurfaceMaterialInput {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SceneVisual(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SceneVisual,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SceneVisual,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::ContainerVisual,
    super::Visual,
    super::CompositionObject
);
impl SceneVisual {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<super::VisualCollection> {
        let this = &windows_core::Interface::cast::<super::IContainerVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Root(&self) -> windows_core::Result<SceneNode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Root)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<SceneNode>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<SceneVisual>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ISceneVisualStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AnchorPoint(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnchorPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAnchorPoint(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnchorPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> windows_core::Result<super::CompositionBackfaceVisibility> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: super::CompositionBackfaceVisibility,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackfaceVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> windows_core::Result<super::CompositionBorderMode> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BorderMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBorderMode(&self, value: super::CompositionBorderMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBorderMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> windows_core::Result<super::CompositionClip> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::CompositionClip>,
    {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> windows_core::Result<super::CompositionCompositeMode> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCompositeMode(
        &self,
        value: super::CompositionCompositeMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffset(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<windows::Foundation::Numerics::Quaternion> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: windows::Foundation::Numerics::Quaternion,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::ContainerVisual> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RotationAngle(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAngleInDegrees)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> windows_core::Result<super::Visual> {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentForTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetParentForTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Visual>,
    {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentForTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: windows_numerics::Vector3,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeOffsetAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: windows_numerics::Vector2,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSizeAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IVisual3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IVisual4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IVisual4>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPixelSnappingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    fn ISceneVisualStatics<R, F: FnOnce(&ISceneVisualStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<SceneVisual, ISceneVisualStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SceneVisual {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISceneVisual>();
}
unsafe impl windows_core::Interface for SceneVisual {
    type Vtable = <ISceneVisual as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISceneVisual as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SceneVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.Scenes.SceneVisual";
}
unsafe impl Send for SceneVisual {}
unsafe impl Sync for SceneVisual {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SceneWrappingMode(pub i32);
impl SceneWrappingMode {
    pub const ClampToEdge: Self = Self(0i32);
    pub const MirroredRepeat: Self = Self(1i32);
    pub const Repeat: Self = Self(2i32);
}
impl windows_core::TypeKind for SceneWrappingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SceneWrappingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Scenes.SceneWrappingMode;i4)",
    );
}
