// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionConditionalValue(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionConditionalValue,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionConditionalValue,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl CompositionConditionalValue {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Condition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCondition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCondition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Value(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<CompositionConditionalValue>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::ICompositionConditionalValueStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    fn ICompositionConditionalValueStatics<
        R,
        F: FnOnce(&ICompositionConditionalValueStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositionConditionalValue,
            ICompositionConditionalValueStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositionConditionalValue {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionConditionalValue>();
}
unsafe impl windows_core::Interface for CompositionConditionalValue {
    type Vtable = <ICompositionConditionalValue as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositionConditionalValue as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionConditionalValue {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.CompositionConditionalValue";
}
unsafe impl Send for CompositionConditionalValue {}
unsafe impl Sync for CompositionConditionalValue {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositionInteractionSourceCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositionInteractionSourceCollection,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositionInteractionSourceCollection,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    windows_collections::IIterable<ICompositionInteractionSource>,
    super::CompositionObject
);
impl CompositionInteractionSourceCollection {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Count(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Count)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Add<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionInteractionSource>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Add)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ICompositionInteractionSource>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<ICompositionInteractionSource>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<ICompositionInteractionSource>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for CompositionInteractionSourceCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositionInteractionSourceCollection>(
        );
}
unsafe impl windows_core::Interface for CompositionInteractionSourceCollection {
    type Vtable = <ICompositionInteractionSourceCollection as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICompositionInteractionSourceCollection as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositionInteractionSourceCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection";
}
unsafe impl Send for CompositionInteractionSourceCollection {}
unsafe impl Sync for CompositionInteractionSourceCollection {}
impl IntoIterator for CompositionInteractionSourceCollection {
    type Item = ICompositionInteractionSource;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &CompositionInteractionSourceCollection {
    type Item = ICompositionInteractionSource;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
windows_core::imp::define_interface!(
    ICompositionConditionalValue,
    ICompositionConditionalValue_Vtbl,
    0x3743dda0_fbe2_5ecf_9e80_4638a011f707
);
impl windows_core::RuntimeType for ICompositionConditionalValue {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionConditionalValue {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.ICompositionConditionalValue";
}
pub trait ICompositionConditionalValue_Impl: windows_core::IUnknownImpl {
    fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetCondition(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
    fn Value(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetValue(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
}
impl ICompositionConditionalValue_Vtbl {
    pub const fn new<Identity: ICompositionConditionalValue_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Condition<
            Identity: ICompositionConditionalValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionConditionalValue_Impl::Condition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCondition<
            Identity: ICompositionConditionalValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionConditionalValue_Impl::SetCondition(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Value<
            Identity: ICompositionConditionalValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionConditionalValue_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<
            Identity: ICompositionConditionalValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionConditionalValue_Impl::SetValue(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionConditionalValue,
                OFFSET,
            >(),
            Condition: Condition::<Identity, OFFSET>,
            SetCondition: SetCondition::<Identity, OFFSET>,
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionConditionalValue as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionConditionalValue_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Condition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCondition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionConditionalValueStatics,
    ICompositionConditionalValueStatics_Vtbl,
    0xdf133c1f_a185_536c_b54b_8f369212a581
);
impl windows_core::RuntimeType for ICompositionConditionalValueStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionConditionalValueStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStatics";
}
pub trait ICompositionConditionalValueStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<CompositionConditionalValue>;
}
impl ICompositionConditionalValueStatics_Vtbl {
    pub const fn new<Identity: ICompositionConditionalValueStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Create<
            Identity: ICompositionConditionalValueStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionConditionalValueStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionConditionalValueStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionConditionalValueStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionConditionalValueStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositionInteractionSource,
    ICompositionInteractionSource_Vtbl,
    0x711c72c0_c406_4a12_859b_b44f651af046
);
impl windows_core::RuntimeType for ICompositionInteractionSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICompositionInteractionSource,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl windows_core::RuntimeName for ICompositionInteractionSource {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.ICompositionInteractionSource";
}
pub trait ICompositionInteractionSource_Impl: windows_core::IUnknownImpl {}
impl ICompositionInteractionSource_Vtbl {
    pub const fn new<Identity: ICompositionInteractionSource_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionInteractionSource,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionInteractionSource as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionInteractionSource_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICompositionInteractionSourceCollection,
    ICompositionInteractionSourceCollection_Vtbl,
    0x9aa1b86b_b002_5e2e_bb2b_0e2c547445e1
);
impl windows_core::RuntimeType for ICompositionInteractionSourceCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositionInteractionSourceCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection";
}
pub trait ICompositionInteractionSourceCollection_Impl: windows_core::IUnknownImpl {
    fn Count(&self) -> windows_core::Result<i32>;
    fn Add(
        &self,
        value: windows_core::Ref<'_, ICompositionInteractionSource>,
    ) -> windows_core::Result<()>;
    fn Remove(
        &self,
        value: windows_core::Ref<'_, ICompositionInteractionSource>,
    ) -> windows_core::Result<()>;
    fn RemoveAll(&self) -> windows_core::Result<()>;
}
impl ICompositionInteractionSourceCollection_Vtbl {
    pub const fn new<
        Identity: ICompositionInteractionSourceCollection_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Count<
            Identity: ICompositionInteractionSourceCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositionInteractionSourceCollection_Impl::Count(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Add<
            Identity: ICompositionInteractionSourceCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionInteractionSourceCollection_Impl::Add(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Remove<
            Identity: ICompositionInteractionSourceCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionInteractionSourceCollection_Impl::Remove(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn RemoveAll<
            Identity: ICompositionInteractionSourceCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositionInteractionSourceCollection_Impl::RemoveAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositionInteractionSourceCollection,
                OFFSET,
            >(),
            Count: Count::<Identity, OFFSET>,
            Add: Add::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            RemoveAll: RemoveAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositionInteractionSourceCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionInteractionSourceCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Add: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionSourceConfiguration,
    IInteractionSourceConfiguration_Vtbl,
    0x099e0124_dadf_5bc6_a895_90387657550f
);
impl windows_core::RuntimeType for IInteractionSourceConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionSourceConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration";
}
pub trait IInteractionSourceConfiguration_Impl: windows_core::IUnknownImpl {
    fn PositionXSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode>;
    fn SetPositionXSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()>;
    fn PositionYSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode>;
    fn SetPositionYSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()>;
    fn ScaleSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode>;
    fn SetScaleSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()>;
}
impl IInteractionSourceConfiguration_Vtbl {
    pub const fn new<Identity: IInteractionSourceConfiguration_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn PositionXSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionSourceConfiguration_Impl::PositionXSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionXSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionSourceConfiguration_Impl::SetPositionXSourceMode(this, value).into()
            }
        }
        unsafe extern "system" fn PositionYSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionSourceConfiguration_Impl::PositionYSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionYSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionSourceConfiguration_Impl::SetPositionYSourceMode(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionSourceConfiguration_Impl::ScaleSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleSourceMode<
            Identity: IInteractionSourceConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionSourceConfiguration_Impl::SetScaleSourceMode(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionSourceConfiguration,
                OFFSET,
            >(),
            PositionXSourceMode: PositionXSourceMode::<Identity, OFFSET>,
            SetPositionXSourceMode: SetPositionXSourceMode::<Identity, OFFSET>,
            PositionYSourceMode: PositionYSourceMode::<Identity, OFFSET>,
            SetPositionYSourceMode: SetPositionYSourceMode::<Identity, OFFSET>,
            ScaleSourceMode: ScaleSourceMode::<Identity, OFFSET>,
            SetScaleSourceMode: SetScaleSourceMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionSourceConfiguration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionSourceConfiguration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PositionXSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub SetPositionXSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub PositionYSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub SetPositionYSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub ScaleSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub SetScaleSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTracker,
    IInteractionTracker_Vtbl,
    0x02d8ec1f_8f04_505e_bd1e_47b2a204de51
);
impl windows_core::RuntimeType for IInteractionTracker {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTracker {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTracker";
}
pub trait IInteractionTracker_Impl: windows_core::IUnknownImpl {
    fn InteractionSources(&self) -> windows_core::Result<CompositionInteractionSourceCollection>;
    fn IsPositionRoundingSuggested(&self) -> windows_core::Result<bool>;
    fn MaxPosition(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetMaxPosition(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn MaxScale(&self) -> windows_core::Result<f32>;
    fn SetMaxScale(&self, value: f32) -> windows_core::Result<()>;
    fn MinPosition(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn SetMinPosition(&self, value: &windows_numerics::Vector3) -> windows_core::Result<()>;
    fn MinScale(&self) -> windows_core::Result<f32>;
    fn SetMinScale(&self, value: f32) -> windows_core::Result<()>;
    fn NaturalRestingPosition(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn NaturalRestingScale(&self) -> windows_core::Result<f32>;
    fn Owner(&self) -> windows_core::Result<IInteractionTrackerOwner>;
    fn Position(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn PositionInertiaDecayRate(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>>;
    fn SetPositionInertiaDecayRate(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows_numerics::Vector3>>,
    ) -> windows_core::Result<()>;
    fn PositionVelocityInPixelsPerSecond(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Scale(&self) -> windows_core::Result<f32>;
    fn ScaleInertiaDecayRate(&self) -> windows_core::Result<windows::Foundation::IReference<f32>>;
    fn SetScaleInertiaDecayRate(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f32>>,
    ) -> windows_core::Result<()>;
    fn ScaleVelocityInPercentPerSecond(&self) -> windows_core::Result<f32>;
    fn AdjustPositionXIfGreaterThanThreshold(
        &self,
        adjustment: f32,
        positionThreshold: f32,
    ) -> windows_core::Result<()>;
    fn AdjustPositionYIfGreaterThanThreshold(
        &self,
        adjustment: f32,
        positionThreshold: f32,
    ) -> windows_core::Result<()>;
    fn ConfigurePositionXInertiaModifiers(
        &self,
        modifiers: windows_core::Ref<
            '_,
            windows_collections::IIterable<InteractionTrackerInertiaModifier>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigurePositionYInertiaModifiers(
        &self,
        modifiers: windows_core::Ref<
            '_,
            windows_collections::IIterable<InteractionTrackerInertiaModifier>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureScaleInertiaModifiers(
        &self,
        modifiers: windows_core::Ref<
            '_,
            windows_collections::IIterable<InteractionTrackerInertiaModifier>,
        >,
    ) -> windows_core::Result<()>;
    fn TryUpdatePosition(&self, value: &windows_numerics::Vector3) -> windows_core::Result<i32>;
    fn TryUpdatePositionBy(&self, amount: &windows_numerics::Vector3) -> windows_core::Result<i32>;
    fn TryUpdatePositionWithAnimation(
        &self,
        animation: windows_core::Ref<'_, super::CompositionAnimation>,
    ) -> windows_core::Result<i32>;
    fn TryUpdatePositionWithAdditionalVelocity(
        &self,
        velocityInPixelsPerSecond: &windows_numerics::Vector3,
    ) -> windows_core::Result<i32>;
    fn TryUpdateScale(
        &self,
        value: f32,
        centerPoint: &windows_numerics::Vector3,
    ) -> windows_core::Result<i32>;
    fn TryUpdateScaleWithAnimation(
        &self,
        animation: windows_core::Ref<'_, super::CompositionAnimation>,
        centerPoint: &windows_numerics::Vector3,
    ) -> windows_core::Result<i32>;
    fn TryUpdateScaleWithAdditionalVelocity(
        &self,
        velocityInPercentPerSecond: f32,
        centerPoint: &windows_numerics::Vector3,
    ) -> windows_core::Result<i32>;
}
impl IInteractionTracker_Vtbl {
    pub const fn new<Identity: IInteractionTracker_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InteractionSources<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::InteractionSources(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsPositionRoundingSuggested<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::IsPositionRoundingSuggested(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxPosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::MaxPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxPosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetMaxPosition(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn MaxScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::MaxScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetMaxScale(this, value).into()
            }
        }
        unsafe extern "system" fn MinPosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::MinPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinPosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetMinPosition(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn MinScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::MinScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetMinScale(this, value).into()
            }
        }
        unsafe extern "system" fn NaturalRestingPosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::NaturalRestingPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NaturalRestingScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::NaturalRestingScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Owner<Identity: IInteractionTracker_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::Owner(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Position<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::Position(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PositionInertiaDecayRate<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::PositionInertiaDecayRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionInertiaDecayRate<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetPositionInertiaDecayRate(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn PositionVelocityInPixelsPerSecond<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::PositionVelocityInPixelsPerSecond(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Scale<Identity: IInteractionTracker_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleInertiaDecayRate<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::ScaleInertiaDecayRate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleInertiaDecayRate<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::SetScaleInertiaDecayRate(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ScaleVelocityInPercentPerSecond<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::ScaleVelocityInPercentPerSecond(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AdjustPositionXIfGreaterThanThreshold<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            adjustment: f32,
            positionthreshold: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::AdjustPositionXIfGreaterThanThreshold(
                    this,
                    adjustment,
                    positionthreshold,
                )
                .into()
            }
        }
        unsafe extern "system" fn AdjustPositionYIfGreaterThanThreshold<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            adjustment: f32,
            positionthreshold: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::AdjustPositionYIfGreaterThanThreshold(
                    this,
                    adjustment,
                    positionthreshold,
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigurePositionXInertiaModifiers<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            modifiers: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::ConfigurePositionXInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&modifiers),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigurePositionYInertiaModifiers<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            modifiers: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::ConfigurePositionYInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&modifiers),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureScaleInertiaModifiers<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            modifiers: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker_Impl::ConfigureScaleInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&modifiers),
                )
                .into()
            }
        }
        unsafe extern "system" fn TryUpdatePosition<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdatePosition(
                    this,
                    core::mem::transmute(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdatePositionBy<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            amount: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdatePositionBy(
                    this,
                    core::mem::transmute(&amount),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdatePositionWithAnimation<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdatePositionWithAnimation(
                    this,
                    core::mem::transmute_copy(&animation),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdatePositionWithAdditionalVelocity<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            velocityinpixelspersecond: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdatePositionWithAdditionalVelocity(
                    this,
                    core::mem::transmute(&velocityinpixelspersecond),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdateScale<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
            centerpoint: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdateScale(
                    this,
                    value,
                    core::mem::transmute(&centerpoint),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdateScaleWithAnimation<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
            centerpoint: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdateScaleWithAnimation(
                    this,
                    core::mem::transmute_copy(&animation),
                    core::mem::transmute(&centerpoint),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdateScaleWithAdditionalVelocity<
            Identity: IInteractionTracker_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            velocityinpercentpersecond: f32,
            centerpoint: windows_numerics::Vector3,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker_Impl::TryUpdateScaleWithAdditionalVelocity(
                    this,
                    velocityinpercentpersecond,
                    core::mem::transmute(&centerpoint),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInteractionTracker, OFFSET>(),
            InteractionSources: InteractionSources::<Identity, OFFSET>,
            IsPositionRoundingSuggested: IsPositionRoundingSuggested::<Identity, OFFSET>,
            MaxPosition: MaxPosition::<Identity, OFFSET>,
            SetMaxPosition: SetMaxPosition::<Identity, OFFSET>,
            MaxScale: MaxScale::<Identity, OFFSET>,
            SetMaxScale: SetMaxScale::<Identity, OFFSET>,
            MinPosition: MinPosition::<Identity, OFFSET>,
            SetMinPosition: SetMinPosition::<Identity, OFFSET>,
            MinScale: MinScale::<Identity, OFFSET>,
            SetMinScale: SetMinScale::<Identity, OFFSET>,
            NaturalRestingPosition: NaturalRestingPosition::<Identity, OFFSET>,
            NaturalRestingScale: NaturalRestingScale::<Identity, OFFSET>,
            Owner: Owner::<Identity, OFFSET>,
            Position: Position::<Identity, OFFSET>,
            PositionInertiaDecayRate: PositionInertiaDecayRate::<Identity, OFFSET>,
            SetPositionInertiaDecayRate: SetPositionInertiaDecayRate::<Identity, OFFSET>,
            PositionVelocityInPixelsPerSecond: PositionVelocityInPixelsPerSecond::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            ScaleInertiaDecayRate: ScaleInertiaDecayRate::<Identity, OFFSET>,
            SetScaleInertiaDecayRate: SetScaleInertiaDecayRate::<Identity, OFFSET>,
            ScaleVelocityInPercentPerSecond: ScaleVelocityInPercentPerSecond::<Identity, OFFSET>,
            AdjustPositionXIfGreaterThanThreshold: AdjustPositionXIfGreaterThanThreshold::<
                Identity,
                OFFSET,
            >,
            AdjustPositionYIfGreaterThanThreshold: AdjustPositionYIfGreaterThanThreshold::<
                Identity,
                OFFSET,
            >,
            ConfigurePositionXInertiaModifiers: ConfigurePositionXInertiaModifiers::<
                Identity,
                OFFSET,
            >,
            ConfigurePositionYInertiaModifiers: ConfigurePositionYInertiaModifiers::<
                Identity,
                OFFSET,
            >,
            ConfigureScaleInertiaModifiers: ConfigureScaleInertiaModifiers::<Identity, OFFSET>,
            TryUpdatePosition: TryUpdatePosition::<Identity, OFFSET>,
            TryUpdatePositionBy: TryUpdatePositionBy::<Identity, OFFSET>,
            TryUpdatePositionWithAnimation: TryUpdatePositionWithAnimation::<Identity, OFFSET>,
            TryUpdatePositionWithAdditionalVelocity: TryUpdatePositionWithAdditionalVelocity::<
                Identity,
                OFFSET,
            >,
            TryUpdateScale: TryUpdateScale::<Identity, OFFSET>,
            TryUpdateScaleWithAnimation: TryUpdateScaleWithAnimation::<Identity, OFFSET>,
            TryUpdateScaleWithAdditionalVelocity: TryUpdateScaleWithAdditionalVelocity::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTracker as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTracker_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InteractionSources: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsPositionRoundingSuggested:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub MaxPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetMaxPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub MaxScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMaxScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MinPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub SetMinPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub MinScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMinScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub NaturalRestingPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub NaturalRestingScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub Owner: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Position: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub PositionInertiaDecayRate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPositionInertiaDecayRate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PositionVelocityInPixelsPerSecond: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub ScaleInertiaDecayRate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetScaleInertiaDecayRate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ScaleVelocityInPercentPerSecond:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub AdjustPositionXIfGreaterThanThreshold:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32, f32) -> windows_core::HRESULT,
    pub AdjustPositionYIfGreaterThanThreshold:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32, f32) -> windows_core::HRESULT,
    pub ConfigurePositionXInertiaModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigurePositionYInertiaModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigureScaleInertiaModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryUpdatePosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdatePositionBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdatePositionWithAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdatePositionWithAdditionalVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        *mut i32,
    )
        -> windows_core::HRESULT,
    pub TryUpdateScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector3,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdateScaleWithAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdateScaleWithAdditionalVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        windows_numerics::Vector3,
        *mut i32,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTracker2,
    IInteractionTracker2_Vtbl,
    0x396d7fb1_2fad_5508_8591_4ff0dc5a7484
);
impl windows_core::RuntimeType for IInteractionTracker2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTracker2 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTracker2";
}
pub trait IInteractionTracker2_Impl: windows_core::IUnknownImpl {
    fn ConfigureCenterPointXInertiaModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureCenterPointYInertiaModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
}
impl IInteractionTracker2_Vtbl {
    pub const fn new<Identity: IInteractionTracker2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ConfigureCenterPointXInertiaModifiers<
            Identity: IInteractionTracker2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker2_Impl::ConfigureCenterPointXInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureCenterPointYInertiaModifiers<
            Identity: IInteractionTracker2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker2_Impl::ConfigureCenterPointYInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInteractionTracker2, OFFSET>(
            ),
            ConfigureCenterPointXInertiaModifiers: ConfigureCenterPointXInertiaModifiers::<
                Identity,
                OFFSET,
            >,
            ConfigureCenterPointYInertiaModifiers: ConfigureCenterPointYInertiaModifiers::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTracker2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTracker2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ConfigureCenterPointXInertiaModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub ConfigureCenterPointYInertiaModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTracker3,
    IInteractionTracker3_Vtbl,
    0x239752cf_266c_5acb_acc3_b3e3ecaf4d3f
);
impl windows_core::RuntimeType for IInteractionTracker3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTracker3 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTracker3";
}
pub trait IInteractionTracker3_Impl: windows_core::IUnknownImpl {
    fn ConfigureVector2PositionInertiaModifiers(
        &self,
        modifiers: windows_core::Ref<
            '_,
            windows_collections::IIterable<InteractionTrackerVector2InertiaModifier>,
        >,
    ) -> windows_core::Result<()>;
}
impl IInteractionTracker3_Vtbl {
    pub const fn new<Identity: IInteractionTracker3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ConfigureVector2PositionInertiaModifiers<
            Identity: IInteractionTracker3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            modifiers: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTracker3_Impl::ConfigureVector2PositionInertiaModifiers(
                    this,
                    core::mem::transmute_copy(&modifiers),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInteractionTracker3, OFFSET>(
            ),
            ConfigureVector2PositionInertiaModifiers: ConfigureVector2PositionInertiaModifiers::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTracker3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTracker3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ConfigureVector2PositionInertiaModifiers:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTracker4,
    IInteractionTracker4_Vtbl,
    0xa9a9ce02_53c9_5690_a575_f340b7c2fdf2
);
impl windows_core::RuntimeType for IInteractionTracker4 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTracker4 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTracker4";
}
pub trait IInteractionTracker4_Impl: windows_core::IUnknownImpl {
    fn TryUpdatePositionWithOption(
        &self,
        value: &windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
    ) -> windows_core::Result<i32>;
    fn TryUpdatePositionByWithOption(
        &self,
        amount: &windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
    ) -> windows_core::Result<i32>;
    fn IsInertiaFromImpulse(&self) -> windows_core::Result<bool>;
}
impl IInteractionTracker4_Vtbl {
    pub const fn new<Identity: IInteractionTracker4_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TryUpdatePositionWithOption<
            Identity: IInteractionTracker4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
            option: InteractionTrackerClampingOption,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker4_Impl::TryUpdatePositionWithOption(
                    this,
                    core::mem::transmute(&value),
                    option,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryUpdatePositionByWithOption<
            Identity: IInteractionTracker4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            amount: windows_numerics::Vector3,
            option: InteractionTrackerClampingOption,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker4_Impl::TryUpdatePositionByWithOption(
                    this,
                    core::mem::transmute(&amount),
                    option,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsInertiaFromImpulse<
            Identity: IInteractionTracker4_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker4_Impl::IsInertiaFromImpulse(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInteractionTracker4, OFFSET>(
            ),
            TryUpdatePositionWithOption: TryUpdatePositionWithOption::<Identity, OFFSET>,
            TryUpdatePositionByWithOption: TryUpdatePositionByWithOption::<Identity, OFFSET>,
            IsInertiaFromImpulse: IsInertiaFromImpulse::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTracker4 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTracker4_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TryUpdatePositionWithOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        InteractionTrackerClampingOption,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub TryUpdatePositionByWithOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        InteractionTrackerClampingOption,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub IsInertiaFromImpulse:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTracker5,
    IInteractionTracker5_Vtbl,
    0xdbfcd333_c3bf_5057_a45e_25edf06ebd8f
);
impl windows_core::RuntimeType for IInteractionTracker5 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTracker5 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTracker5";
}
pub trait IInteractionTracker5_Impl: windows_core::IUnknownImpl {
    fn TryUpdatePositionWithOption(
        &self,
        value: &windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
        posUpdateOption: InteractionTrackerPositionUpdateOption,
    ) -> windows_core::Result<i32>;
}
impl IInteractionTracker5_Vtbl {
    pub const fn new<Identity: IInteractionTracker5_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TryUpdatePositionWithOption<
            Identity: IInteractionTracker5_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector3,
            option: InteractionTrackerClampingOption,
            posupdateoption: InteractionTrackerPositionUpdateOption,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTracker5_Impl::TryUpdatePositionWithOption(
                    this,
                    core::mem::transmute(&value),
                    option,
                    posupdateoption,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInteractionTracker5, OFFSET>(
            ),
            TryUpdatePositionWithOption: TryUpdatePositionWithOption::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTracker5 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTracker5_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TryUpdatePositionWithOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector3,
        InteractionTrackerClampingOption,
        InteractionTrackerPositionUpdateOption,
        *mut i32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerCustomAnimationStateEnteredArgs,
    IInteractionTrackerCustomAnimationStateEnteredArgs_Vtbl,
    0x7464035c_cfce_56da_9472_420f276bd0a5
);
impl windows_core::RuntimeType for IInteractionTrackerCustomAnimationStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerCustomAnimationStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs";
}
pub trait IInteractionTrackerCustomAnimationStateEnteredArgs_Impl:
    windows_core::IUnknownImpl
{
    fn RequestId(&self) -> windows_core::Result<i32>;
}
impl IInteractionTrackerCustomAnimationStateEnteredArgs_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerCustomAnimationStateEnteredArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerCustomAnimationStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerCustomAnimationStateEnteredArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerCustomAnimationStateEnteredArgs,
                OFFSET,
            >(),
            RequestId: RequestId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerCustomAnimationStateEnteredArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerCustomAnimationStateEnteredArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerCustomAnimationStateEnteredArgs2,
    IInteractionTrackerCustomAnimationStateEnteredArgs2_Vtbl,
    0x06b99fbc_d6a8_5ae3_88b8_e91621becbd6
);
impl windows_core::RuntimeType for IInteractionTrackerCustomAnimationStateEnteredArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerCustomAnimationStateEnteredArgs2 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2";
}
pub trait IInteractionTrackerCustomAnimationStateEnteredArgs2_Impl:
    windows_core::IUnknownImpl
{
    fn IsFromBinding(&self) -> windows_core::Result<bool>;
}
impl IInteractionTrackerCustomAnimationStateEnteredArgs2_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerCustomAnimationStateEnteredArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsFromBinding<
            Identity: IInteractionTrackerCustomAnimationStateEnteredArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerCustomAnimationStateEnteredArgs2_Impl::IsFromBinding(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerCustomAnimationStateEnteredArgs2,
                OFFSET,
            >(),
            IsFromBinding: IsFromBinding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < IInteractionTrackerCustomAnimationStateEnteredArgs2 as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerCustomAnimationStateEnteredArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsFromBinding:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerIdleStateEnteredArgs,
    IInteractionTrackerIdleStateEnteredArgs_Vtbl,
    0x199094ab_15fd_539c_97b8_964a8196f777
);
impl windows_core::RuntimeType for IInteractionTrackerIdleStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerIdleStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs";
}
pub trait IInteractionTrackerIdleStateEnteredArgs_Impl: windows_core::IUnknownImpl {
    fn RequestId(&self) -> windows_core::Result<i32>;
}
impl IInteractionTrackerIdleStateEnteredArgs_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerIdleStateEnteredArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerIdleStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerIdleStateEnteredArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerIdleStateEnteredArgs,
                OFFSET,
            >(),
            RequestId: RequestId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerIdleStateEnteredArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerIdleStateEnteredArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerIdleStateEnteredArgs2,
    IInteractionTrackerIdleStateEnteredArgs2_Vtbl,
    0x4eb213c0_931c_5164_8965_11c0186d3390
);
impl windows_core::RuntimeType for IInteractionTrackerIdleStateEnteredArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerIdleStateEnteredArgs2 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2";
}
pub trait IInteractionTrackerIdleStateEnteredArgs2_Impl: windows_core::IUnknownImpl {
    fn IsFromBinding(&self) -> windows_core::Result<bool>;
}
impl IInteractionTrackerIdleStateEnteredArgs2_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerIdleStateEnteredArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsFromBinding<
            Identity: IInteractionTrackerIdleStateEnteredArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerIdleStateEnteredArgs2_Impl::IsFromBinding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerIdleStateEnteredArgs2,
                OFFSET,
            >(),
            IsFromBinding: IsFromBinding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerIdleStateEnteredArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerIdleStateEnteredArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsFromBinding:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaModifier,
    IInteractionTrackerInertiaModifier_Vtbl,
    0x4d3a0c6b_c508_5029_a47a_cbf64636f010
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaModifier {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaModifier {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier";
}
pub trait IInteractionTrackerInertiaModifier_Impl: windows_core::IUnknownImpl {}
impl IInteractionTrackerInertiaModifier_Vtbl {
    pub const fn new<Identity: IInteractionTrackerInertiaModifier_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaModifier,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaModifier as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaModifier_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaModifierFactory,
    IInteractionTrackerInertiaModifierFactory_Vtbl,
    0x6dee5b33_0b5a_57b1_8537_93d4fd038f9f
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaModifierFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaModifierFactory {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactory";
}
pub trait IInteractionTrackerInertiaModifierFactory_Impl: windows_core::IUnknownImpl {}
impl IInteractionTrackerInertiaModifierFactory_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaModifierFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaModifierFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaModifierFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaModifierFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaMotion,
    IInteractionTrackerInertiaMotion_Vtbl,
    0x91f662c0_3141_5b5e_862f_cfc60bee8cd6
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion";
}
pub trait IInteractionTrackerInertiaMotion_Impl: windows_core::IUnknownImpl {
    fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetCondition(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
    fn Motion(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetMotion(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
}
impl IInteractionTrackerInertiaMotion_Vtbl {
    pub const fn new<Identity: IInteractionTrackerInertiaMotion_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Condition<
            Identity: IInteractionTrackerInertiaMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaMotion_Impl::Condition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCondition<
            Identity: IInteractionTrackerInertiaMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaMotion_Impl::SetCondition(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Motion<
            Identity: IInteractionTrackerInertiaMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaMotion_Impl::Motion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMotion<
            Identity: IInteractionTrackerInertiaMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaMotion_Impl::SetMotion(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaMotion,
                OFFSET,
            >(),
            Condition: Condition::<Identity, OFFSET>,
            SetCondition: SetCondition::<Identity, OFFSET>,
            Motion: Motion::<Identity, OFFSET>,
            SetMotion: SetMotion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaMotion as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaMotion_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Condition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCondition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Motion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMotion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaMotionStatics,
    IInteractionTrackerInertiaMotionStatics_Vtbl,
    0xb0185a4f_0059_52c6_a660_9aed0c44ff7d
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaMotionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaMotionStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics";
}
pub trait IInteractionTrackerInertiaMotionStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<InteractionTrackerInertiaMotion>;
}
impl IInteractionTrackerInertiaMotionStatics_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaMotionStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Create<
            Identity: IInteractionTrackerInertiaMotionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaMotionStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaMotionStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaMotionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaMotionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaNaturalMotion,
    IInteractionTrackerInertiaNaturalMotion_Vtbl,
    0x8c7482e0_185d_56b1_b67f_fca4fcd13cd2
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaNaturalMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaNaturalMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion";
}
pub trait IInteractionTrackerInertiaNaturalMotion_Impl: windows_core::IUnknownImpl {
    fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetCondition(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
    fn NaturalMotion(&self) -> windows_core::Result<super::ScalarNaturalMotionAnimation>;
    fn SetNaturalMotion(
        &self,
        value: windows_core::Ref<'_, super::ScalarNaturalMotionAnimation>,
    ) -> windows_core::Result<()>;
}
impl IInteractionTrackerInertiaNaturalMotion_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaNaturalMotion_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Condition<
            Identity: IInteractionTrackerInertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaNaturalMotion_Impl::Condition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCondition<
            Identity: IInteractionTrackerInertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaNaturalMotion_Impl::SetCondition(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn NaturalMotion<
            Identity: IInteractionTrackerInertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaNaturalMotion_Impl::NaturalMotion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNaturalMotion<
            Identity: IInteractionTrackerInertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaNaturalMotion_Impl::SetNaturalMotion(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaNaturalMotion,
                OFFSET,
            >(),
            Condition: Condition::<Identity, OFFSET>,
            SetCondition: SetCondition::<Identity, OFFSET>,
            NaturalMotion: NaturalMotion::<Identity, OFFSET>,
            SetNaturalMotion: SetNaturalMotion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaNaturalMotion as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaNaturalMotion_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Condition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCondition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NaturalMotion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNaturalMotion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaNaturalMotionStatics,
    IInteractionTrackerInertiaNaturalMotionStatics_Vtbl,
    0x860ec143_f165_5298_abf2_47369dd07f10
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaNaturalMotionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaNaturalMotionStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics";
}
pub trait IInteractionTrackerInertiaNaturalMotionStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<InteractionTrackerInertiaNaturalMotion>;
}
impl IInteractionTrackerInertiaNaturalMotionStatics_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaNaturalMotionStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Create<
            Identity: IInteractionTrackerInertiaNaturalMotionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaNaturalMotionStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaNaturalMotionStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaNaturalMotionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaNaturalMotionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaRestingValue,
    IInteractionTrackerInertiaRestingValue_Vtbl,
    0x1a2b20cd_3371_53ff_a560_f4847b467d73
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaRestingValue {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaRestingValue {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue";
}
pub trait IInteractionTrackerInertiaRestingValue_Impl: windows_core::IUnknownImpl {
    fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetCondition(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
    fn RestingValue(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetRestingValue(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
}
impl IInteractionTrackerInertiaRestingValue_Vtbl {
    pub const fn new<Identity: IInteractionTrackerInertiaRestingValue_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Condition<
            Identity: IInteractionTrackerInertiaRestingValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaRestingValue_Impl::Condition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCondition<
            Identity: IInteractionTrackerInertiaRestingValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaRestingValue_Impl::SetCondition(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn RestingValue<
            Identity: IInteractionTrackerInertiaRestingValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaRestingValue_Impl::RestingValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRestingValue<
            Identity: IInteractionTrackerInertiaRestingValue_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerInertiaRestingValue_Impl::SetRestingValue(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaRestingValue,
                OFFSET,
            >(),
            Condition: Condition::<Identity, OFFSET>,
            SetCondition: SetCondition::<Identity, OFFSET>,
            RestingValue: RestingValue::<Identity, OFFSET>,
            SetRestingValue: SetRestingValue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaRestingValue as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaRestingValue_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Condition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCondition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RestingValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetRestingValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaRestingValueStatics,
    IInteractionTrackerInertiaRestingValueStatics_Vtbl,
    0xcf0f0414_7fdf_5284_aeef_28b71b62aa4f
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaRestingValueStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaRestingValueStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics";
}
pub trait IInteractionTrackerInertiaRestingValueStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<InteractionTrackerInertiaRestingValue>;
}
impl IInteractionTrackerInertiaRestingValueStatics_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaRestingValueStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Create<
            Identity: IInteractionTrackerInertiaRestingValueStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaRestingValueStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaRestingValueStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaRestingValueStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaRestingValueStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaStateEnteredArgs,
    IInteractionTrackerInertiaStateEnteredArgs_Vtbl,
    0x5b76c949_a4d0_5c9d_9292_7013ae9656c7
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs";
}
pub trait IInteractionTrackerInertiaStateEnteredArgs_Impl: windows_core::IUnknownImpl {
    fn ModifiedRestingPosition(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>>;
    fn ModifiedRestingScale(&self) -> windows_core::Result<windows::Foundation::IReference<f32>>;
    fn NaturalRestingPosition(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn NaturalRestingScale(&self) -> windows_core::Result<f32>;
    fn PositionVelocityInPixelsPerSecond(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn RequestId(&self) -> windows_core::Result<i32>;
    fn ScaleVelocityInPercentPerSecond(&self) -> windows_core::Result<f32>;
}
impl IInteractionTrackerInertiaStateEnteredArgs_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn ModifiedRestingPosition<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl::ModifiedRestingPosition(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ModifiedRestingScale<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl::ModifiedRestingScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NaturalRestingPosition<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl::NaturalRestingPosition(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NaturalRestingScale<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl::NaturalRestingScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PositionVelocityInPixelsPerSecond<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl:: PositionVelocityInPixelsPerSecond ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ;  windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleVelocityInPercentPerSecond<
            Identity: IInteractionTrackerInertiaStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs_Impl:: ScaleVelocityInPercentPerSecond ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ;  windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaStateEnteredArgs,
                OFFSET,
            >(),
            ModifiedRestingPosition: ModifiedRestingPosition::<Identity, OFFSET>,
            ModifiedRestingScale: ModifiedRestingScale::<Identity, OFFSET>,
            NaturalRestingPosition: NaturalRestingPosition::<Identity, OFFSET>,
            NaturalRestingScale: NaturalRestingScale::<Identity, OFFSET>,
            PositionVelocityInPixelsPerSecond: PositionVelocityInPixelsPerSecond::<Identity, OFFSET>,
            RequestId: RequestId::<Identity, OFFSET>,
            ScaleVelocityInPercentPerSecond: ScaleVelocityInPercentPerSecond::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaStateEnteredArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaStateEnteredArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ModifiedRestingPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ModifiedRestingScale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NaturalRestingPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub NaturalRestingScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub PositionVelocityInPixelsPerSecond: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ScaleVelocityInPercentPerSecond:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaStateEnteredArgs2,
    IInteractionTrackerInertiaStateEnteredArgs2_Vtbl,
    0xc42d7e8f_7199_57a9_8aec_8727552b13e6
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaStateEnteredArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaStateEnteredArgs2 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2";
}
pub trait IInteractionTrackerInertiaStateEnteredArgs2_Impl: windows_core::IUnknownImpl {
    fn IsInertiaFromImpulse(&self) -> windows_core::Result<bool>;
}
impl IInteractionTrackerInertiaStateEnteredArgs2_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaStateEnteredArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsInertiaFromImpulse<
            Identity: IInteractionTrackerInertiaStateEnteredArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs2_Impl::IsInertiaFromImpulse(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaStateEnteredArgs2,
                OFFSET,
            >(),
            IsInertiaFromImpulse: IsInertiaFromImpulse::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaStateEnteredArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaStateEnteredArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsInertiaFromImpulse:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInertiaStateEnteredArgs3,
    IInteractionTrackerInertiaStateEnteredArgs3_Vtbl,
    0xce726ca0_1c04_531b_9951_4aec996952e4
);
impl windows_core::RuntimeType for IInteractionTrackerInertiaStateEnteredArgs3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInertiaStateEnteredArgs3 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3";
}
pub trait IInteractionTrackerInertiaStateEnteredArgs3_Impl: windows_core::IUnknownImpl {
    fn IsFromBinding(&self) -> windows_core::Result<bool>;
}
impl IInteractionTrackerInertiaStateEnteredArgs3_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInertiaStateEnteredArgs3_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsFromBinding<
            Identity: IInteractionTrackerInertiaStateEnteredArgs3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInertiaStateEnteredArgs3_Impl::IsFromBinding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInertiaStateEnteredArgs3,
                OFFSET,
            >(),
            IsFromBinding: IsFromBinding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInertiaStateEnteredArgs3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInertiaStateEnteredArgs3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsFromBinding:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInteractingStateEnteredArgs,
    IInteractionTrackerInteractingStateEnteredArgs_Vtbl,
    0x70d29b84_0931_5f17_a8a1_82f8f8782532
);
impl windows_core::RuntimeType for IInteractionTrackerInteractingStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInteractingStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs";
}
pub trait IInteractionTrackerInteractingStateEnteredArgs_Impl: windows_core::IUnknownImpl {
    fn RequestId(&self) -> windows_core::Result<i32>;
}
impl IInteractionTrackerInteractingStateEnteredArgs_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInteractingStateEnteredArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerInteractingStateEnteredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInteractingStateEnteredArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInteractingStateEnteredArgs,
                OFFSET,
            >(),
            RequestId: RequestId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInteractingStateEnteredArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInteractingStateEnteredArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerInteractingStateEnteredArgs2,
    IInteractionTrackerInteractingStateEnteredArgs2_Vtbl,
    0x2f1ff38d_2f51_5ceb_8d09_bda1519f9342
);
impl windows_core::RuntimeType for IInteractionTrackerInteractingStateEnteredArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerInteractingStateEnteredArgs2 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2";
}
pub trait IInteractionTrackerInteractingStateEnteredArgs2_Impl: windows_core::IUnknownImpl {
    fn IsFromBinding(&self) -> windows_core::Result<bool>;
}
impl IInteractionTrackerInteractingStateEnteredArgs2_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerInteractingStateEnteredArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsFromBinding<
            Identity: IInteractionTrackerInteractingStateEnteredArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerInteractingStateEnteredArgs2_Impl::IsFromBinding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerInteractingStateEnteredArgs2,
                OFFSET,
            >(),
            IsFromBinding: IsFromBinding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerInteractingStateEnteredArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerInteractingStateEnteredArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsFromBinding:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerOwner,
    IInteractionTrackerOwner_Vtbl,
    0x8869779d_1d2a_5816_836a_68a910507d87
);
impl windows_core::RuntimeType for IInteractionTrackerOwner {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IInteractionTrackerOwner,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IInteractionTrackerOwner {
    pub fn CustomAnimationStateEntered<P0, P1>(
        &self,
        sender: P0,
        args: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerCustomAnimationStateEnteredArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CustomAnimationStateEntered)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn IdleStateEntered<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerIdleStateEnteredArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).IdleStateEntered)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn InertiaStateEntered<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerInertiaStateEnteredArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InertiaStateEntered)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn InteractingStateEntered<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerInteractingStateEnteredArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InteractingStateEntered)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn RequestIgnored<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerRequestIgnoredArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RequestIgnored)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn ValuesChanged<P0, P1>(&self, sender: P0, args: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTrackerValuesChangedArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ValuesChanged)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                args.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IInteractionTrackerOwner {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner";
}
pub trait IInteractionTrackerOwner_Impl: windows_core::IUnknownImpl {
    fn CustomAnimationStateEntered(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerCustomAnimationStateEnteredArgs>,
    ) -> windows_core::Result<()>;
    fn IdleStateEntered(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerIdleStateEnteredArgs>,
    ) -> windows_core::Result<()>;
    fn InertiaStateEntered(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerInertiaStateEnteredArgs>,
    ) -> windows_core::Result<()>;
    fn InteractingStateEntered(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerInteractingStateEnteredArgs>,
    ) -> windows_core::Result<()>;
    fn RequestIgnored(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerRequestIgnoredArgs>,
    ) -> windows_core::Result<()>;
    fn ValuesChanged(
        &self,
        sender: windows_core::Ref<'_, InteractionTracker>,
        args: windows_core::Ref<'_, InteractionTrackerValuesChangedArgs>,
    ) -> windows_core::Result<()>;
}
impl IInteractionTrackerOwner_Vtbl {
    pub const fn new<Identity: IInteractionTrackerOwner_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CustomAnimationStateEntered<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::CustomAnimationStateEntered(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        unsafe extern "system" fn IdleStateEntered<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::IdleStateEntered(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        unsafe extern "system" fn InertiaStateEntered<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::InertiaStateEntered(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        unsafe extern "system" fn InteractingStateEntered<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::InteractingStateEntered(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        unsafe extern "system" fn RequestIgnored<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::RequestIgnored(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        unsafe extern "system" fn ValuesChanged<
            Identity: IInteractionTrackerOwner_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sender: *mut core::ffi::c_void,
            args: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerOwner_Impl::ValuesChanged(
                    this,
                    core::mem::transmute_copy(&sender),
                    core::mem::transmute_copy(&args),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerOwner,
                OFFSET,
            >(),
            CustomAnimationStateEntered: CustomAnimationStateEntered::<Identity, OFFSET>,
            IdleStateEntered: IdleStateEntered::<Identity, OFFSET>,
            InertiaStateEntered: InertiaStateEntered::<Identity, OFFSET>,
            InteractingStateEntered: InteractingStateEntered::<Identity, OFFSET>,
            RequestIgnored: RequestIgnored::<Identity, OFFSET>,
            ValuesChanged: ValuesChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerOwner as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerOwner_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CustomAnimationStateEntered: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IdleStateEntered: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InertiaStateEntered: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub InteractingStateEntered: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RequestIgnored: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValuesChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerRequestIgnoredArgs,
    IInteractionTrackerRequestIgnoredArgs_Vtbl,
    0xc276205e_f7a5_5ba2_ad45_d12c3c339149
);
impl windows_core::RuntimeType for IInteractionTrackerRequestIgnoredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerRequestIgnoredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs";
}
pub trait IInteractionTrackerRequestIgnoredArgs_Impl: windows_core::IUnknownImpl {
    fn RequestId(&self) -> windows_core::Result<i32>;
}
impl IInteractionTrackerRequestIgnoredArgs_Vtbl {
    pub const fn new<Identity: IInteractionTrackerRequestIgnoredArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerRequestIgnoredArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerRequestIgnoredArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerRequestIgnoredArgs,
                OFFSET,
            >(),
            RequestId: RequestId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerRequestIgnoredArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerRequestIgnoredArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerStatics,
    IInteractionTrackerStatics_Vtbl,
    0x7ac9867a_e16e_56ef_9809_f6e404240f50
);
impl windows_core::RuntimeType for IInteractionTrackerStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerStatics {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics";
}
pub trait IInteractionTrackerStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<InteractionTracker>;
    fn CreateWithOwner(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
        owner: windows_core::Ref<'_, IInteractionTrackerOwner>,
    ) -> windows_core::Result<InteractionTracker>;
}
impl IInteractionTrackerStatics_Vtbl {
    pub const fn new<Identity: IInteractionTrackerStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: IInteractionTrackerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateWithOwner<
            Identity: IInteractionTrackerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            owner: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerStatics_Impl::CreateWithOwner(
                    this,
                    core::mem::transmute_copy(&compositor),
                    core::mem::transmute_copy(&owner),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
            CreateWithOwner: CreateWithOwner::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateWithOwner: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerStatics2,
    IInteractionTrackerStatics2_Vtbl,
    0x25658e4c_b99f_5108_aab7_1cc44f11508b
);
impl windows_core::RuntimeType for IInteractionTrackerStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerStatics2 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2";
}
pub trait IInteractionTrackerStatics2_Impl: windows_core::IUnknownImpl {
    fn SetBindingMode(
        &self,
        boundTracker1: windows_core::Ref<'_, InteractionTracker>,
        boundTracker2: windows_core::Ref<'_, InteractionTracker>,
        axisMode: InteractionBindingAxisModes,
    ) -> windows_core::Result<()>;
    fn GetBindingMode(
        &self,
        boundTracker1: windows_core::Ref<'_, InteractionTracker>,
        boundTracker2: windows_core::Ref<'_, InteractionTracker>,
    ) -> windows_core::Result<InteractionBindingAxisModes>;
}
impl IInteractionTrackerStatics2_Vtbl {
    pub const fn new<Identity: IInteractionTrackerStatics2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetBindingMode<
            Identity: IInteractionTrackerStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            boundtracker1: *mut core::ffi::c_void,
            boundtracker2: *mut core::ffi::c_void,
            axismode: InteractionBindingAxisModes,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerStatics2_Impl::SetBindingMode(
                    this,
                    core::mem::transmute_copy(&boundtracker1),
                    core::mem::transmute_copy(&boundtracker2),
                    axismode,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetBindingMode<
            Identity: IInteractionTrackerStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            boundtracker1: *mut core::ffi::c_void,
            boundtracker2: *mut core::ffi::c_void,
            result__: *mut InteractionBindingAxisModes,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerStatics2_Impl::GetBindingMode(
                    this,
                    core::mem::transmute_copy(&boundtracker1),
                    core::mem::transmute_copy(&boundtracker2),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerStatics2,
                OFFSET,
            >(),
            SetBindingMode: SetBindingMode::<Identity, OFFSET>,
            GetBindingMode: GetBindingMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetBindingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        InteractionBindingAxisModes,
    ) -> windows_core::HRESULT,
    pub GetBindingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut InteractionBindingAxisModes,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerValuesChangedArgs,
    IInteractionTrackerValuesChangedArgs_Vtbl,
    0x9b495bed_1cf7_55c1_82b9_8022cbf3c766
);
impl windows_core::RuntimeType for IInteractionTrackerValuesChangedArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerValuesChangedArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs";
}
pub trait IInteractionTrackerValuesChangedArgs_Impl: windows_core::IUnknownImpl {
    fn Position(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn RequestId(&self) -> windows_core::Result<i32>;
    fn Scale(&self) -> windows_core::Result<f32>;
}
impl IInteractionTrackerValuesChangedArgs_Vtbl {
    pub const fn new<Identity: IInteractionTrackerValuesChangedArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Position<
            Identity: IInteractionTrackerValuesChangedArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerValuesChangedArgs_Impl::Position(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestId<
            Identity: IInteractionTrackerValuesChangedArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerValuesChangedArgs_Impl::RequestId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Scale<
            Identity: IInteractionTrackerValuesChangedArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerValuesChangedArgs_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerValuesChangedArgs,
                OFFSET,
            >(),
            Position: Position::<Identity, OFFSET>,
            RequestId: RequestId::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerValuesChangedArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerValuesChangedArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Position: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub RequestId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerVector2InertiaModifier,
    IInteractionTrackerVector2InertiaModifier_Vtbl,
    0x4b8ed310_cb61_5f0a_b99a_940cdd2c42b1
);
impl windows_core::RuntimeType for IInteractionTrackerVector2InertiaModifier {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerVector2InertiaModifier {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier";
}
pub trait IInteractionTrackerVector2InertiaModifier_Impl: windows_core::IUnknownImpl {}
impl IInteractionTrackerVector2InertiaModifier_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerVector2InertiaModifier_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerVector2InertiaModifier,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerVector2InertiaModifier as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerVector2InertiaModifier_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInteractionTrackerVector2InertiaModifierFactory,
    IInteractionTrackerVector2InertiaModifierFactory_Vtbl,
    0x1b3fd240_ba66_5296_b801_62a2a3606613
);
impl windows_core::RuntimeType for IInteractionTrackerVector2InertiaModifierFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerVector2InertiaModifierFactory {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactory";
}
pub trait IInteractionTrackerVector2InertiaModifierFactory_Impl:
    windows_core::IUnknownImpl
{
}
impl IInteractionTrackerVector2InertiaModifierFactory_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerVector2InertiaModifierFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerVector2InertiaModifierFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerVector2InertiaModifierFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerVector2InertiaModifierFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInteractionTrackerVector2InertiaNaturalMotion,
    IInteractionTrackerVector2InertiaNaturalMotion_Vtbl,
    0x097ba1a6_e077_52d1_86d3_38e3f6619ddf
);
impl windows_core::RuntimeType for IInteractionTrackerVector2InertiaNaturalMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerVector2InertiaNaturalMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion";
}
pub trait IInteractionTrackerVector2InertiaNaturalMotion_Impl: windows_core::IUnknownImpl {
    fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation>;
    fn SetCondition(
        &self,
        value: windows_core::Ref<'_, super::ExpressionAnimation>,
    ) -> windows_core::Result<()>;
    fn NaturalMotion(&self) -> windows_core::Result<super::Vector2NaturalMotionAnimation>;
    fn SetNaturalMotion(
        &self,
        value: windows_core::Ref<'_, super::Vector2NaturalMotionAnimation>,
    ) -> windows_core::Result<()>;
}
impl IInteractionTrackerVector2InertiaNaturalMotion_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerVector2InertiaNaturalMotion_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Condition<
            Identity: IInteractionTrackerVector2InertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerVector2InertiaNaturalMotion_Impl::Condition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCondition<
            Identity: IInteractionTrackerVector2InertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerVector2InertiaNaturalMotion_Impl::SetCondition(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn NaturalMotion<
            Identity: IInteractionTrackerVector2InertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerVector2InertiaNaturalMotion_Impl::NaturalMotion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNaturalMotion<
            Identity: IInteractionTrackerVector2InertiaNaturalMotion_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInteractionTrackerVector2InertiaNaturalMotion_Impl::SetNaturalMotion(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerVector2InertiaNaturalMotion,
                OFFSET,
            >(),
            Condition: Condition::<Identity, OFFSET>,
            SetCondition: SetCondition::<Identity, OFFSET>,
            NaturalMotion: NaturalMotion::<Identity, OFFSET>,
            SetNaturalMotion: SetNaturalMotion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInteractionTrackerVector2InertiaNaturalMotion as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerVector2InertiaNaturalMotion_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Condition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCondition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NaturalMotion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNaturalMotion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInteractionTrackerVector2InertiaNaturalMotionStatics,
    IInteractionTrackerVector2InertiaNaturalMotionStatics_Vtbl,
    0xcc24ab87_9131_5286_b3ce_1ef97e0974e6
);
impl windows_core::RuntimeType for IInteractionTrackerVector2InertiaNaturalMotionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInteractionTrackerVector2InertiaNaturalMotionStatics {
    const NAME : & 'static str = "Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics" ;
}
pub trait IInteractionTrackerVector2InertiaNaturalMotionStatics_Impl:
    windows_core::IUnknownImpl
{
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Compositor>,
    ) -> windows_core::Result<InteractionTrackerVector2InertiaNaturalMotion>;
}
impl IInteractionTrackerVector2InertiaNaturalMotionStatics_Vtbl {
    pub const fn new<
        Identity: IInteractionTrackerVector2InertiaNaturalMotionStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Create<
            Identity: IInteractionTrackerVector2InertiaNaturalMotionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInteractionTrackerVector2InertiaNaturalMotionStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IInteractionTrackerVector2InertiaNaturalMotionStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < IInteractionTrackerVector2InertiaNaturalMotionStatics as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInteractionTrackerVector2InertiaNaturalMotionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualInteractionSource,
    IVisualInteractionSource_Vtbl,
    0xea595c95_b9cb_5cd4_bb9c_4934ff329063
);
impl windows_core::RuntimeType for IVisualInteractionSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Input")]
impl windows_core::RuntimeName for IVisualInteractionSource {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IVisualInteractionSource";
}
#[cfg(feature = "UI_Input")]
pub trait IVisualInteractionSource_Impl: windows_core::IUnknownImpl {
    fn IsPositionXRailsEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPositionXRailsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsPositionYRailsEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPositionYRailsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn ManipulationRedirectionMode(
        &self,
    ) -> windows_core::Result<VisualInteractionSourceRedirectionMode>;
    fn SetManipulationRedirectionMode(
        &self,
        value: VisualInteractionSourceRedirectionMode,
    ) -> windows_core::Result<()>;
    fn PositionXChainingMode(&self) -> windows_core::Result<InteractionChainingMode>;
    fn SetPositionXChainingMode(&self, value: InteractionChainingMode) -> windows_core::Result<()>;
    fn PositionXSourceMode(&self) -> windows_core::Result<InteractionSourceMode>;
    fn SetPositionXSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()>;
    fn PositionYChainingMode(&self) -> windows_core::Result<InteractionChainingMode>;
    fn SetPositionYChainingMode(&self, value: InteractionChainingMode) -> windows_core::Result<()>;
    fn PositionYSourceMode(&self) -> windows_core::Result<InteractionSourceMode>;
    fn SetPositionYSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()>;
    fn ScaleChainingMode(&self) -> windows_core::Result<InteractionChainingMode>;
    fn SetScaleChainingMode(&self, value: InteractionChainingMode) -> windows_core::Result<()>;
    fn ScaleSourceMode(&self) -> windows_core::Result<InteractionSourceMode>;
    fn SetScaleSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()>;
    fn Source(&self) -> windows_core::Result<super::Visual>;
    fn TryRedirectForManipulation(
        &self,
        pointerPoint: windows_core::Ref<'_, super::super::Input::PointerPoint>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Input")]
impl IVisualInteractionSource_Vtbl {
    pub const fn new<Identity: IVisualInteractionSource_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsPositionXRailsEnabled<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::IsPositionXRailsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPositionXRailsEnabled<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetIsPositionXRailsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsPositionYRailsEnabled<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::IsPositionYRailsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPositionYRailsEnabled<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetIsPositionYRailsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn ManipulationRedirectionMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut VisualInteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::ManipulationRedirectionMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetManipulationRedirectionMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: VisualInteractionSourceRedirectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetManipulationRedirectionMode(this, value).into()
            }
        }
        unsafe extern "system" fn PositionXChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::PositionXChainingMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionXChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetPositionXChainingMode(this, value).into()
            }
        }
        unsafe extern "system" fn PositionXSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::PositionXSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionXSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetPositionXSourceMode(this, value).into()
            }
        }
        unsafe extern "system" fn PositionYChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::PositionYChainingMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionYChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetPositionYChainingMode(this, value).into()
            }
        }
        unsafe extern "system" fn PositionYSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::PositionYSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionYSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetPositionYSourceMode(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::ScaleChainingMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleChainingMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionChainingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetScaleChainingMode(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::ScaleSourceMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleSourceMode<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: InteractionSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::SetScaleSourceMode(this, value).into()
            }
        }
        unsafe extern "system" fn Source<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryRedirectForManipulation<
            Identity: IVisualInteractionSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pointerpoint: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource_Impl::TryRedirectForManipulation(
                    this,
                    core::mem::transmute_copy(&pointerpoint),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSource,
                OFFSET,
            >(),
            IsPositionXRailsEnabled: IsPositionXRailsEnabled::<Identity, OFFSET>,
            SetIsPositionXRailsEnabled: SetIsPositionXRailsEnabled::<Identity, OFFSET>,
            IsPositionYRailsEnabled: IsPositionYRailsEnabled::<Identity, OFFSET>,
            SetIsPositionYRailsEnabled: SetIsPositionYRailsEnabled::<Identity, OFFSET>,
            ManipulationRedirectionMode: ManipulationRedirectionMode::<Identity, OFFSET>,
            SetManipulationRedirectionMode: SetManipulationRedirectionMode::<Identity, OFFSET>,
            PositionXChainingMode: PositionXChainingMode::<Identity, OFFSET>,
            SetPositionXChainingMode: SetPositionXChainingMode::<Identity, OFFSET>,
            PositionXSourceMode: PositionXSourceMode::<Identity, OFFSET>,
            SetPositionXSourceMode: SetPositionXSourceMode::<Identity, OFFSET>,
            PositionYChainingMode: PositionYChainingMode::<Identity, OFFSET>,
            SetPositionYChainingMode: SetPositionYChainingMode::<Identity, OFFSET>,
            PositionYSourceMode: PositionYSourceMode::<Identity, OFFSET>,
            SetPositionYSourceMode: SetPositionYSourceMode::<Identity, OFFSET>,
            ScaleChainingMode: ScaleChainingMode::<Identity, OFFSET>,
            SetScaleChainingMode: SetScaleChainingMode::<Identity, OFFSET>,
            ScaleSourceMode: ScaleSourceMode::<Identity, OFFSET>,
            SetScaleSourceMode: SetScaleSourceMode::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            TryRedirectForManipulation: TryRedirectForManipulation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSource as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSource_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsPositionXRailsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPositionXRailsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsPositionYRailsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPositionYRailsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ManipulationRedirectionMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut VisualInteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub SetManipulationRedirectionMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        VisualInteractionSourceRedirectionMode,
    ) -> windows_core::HRESULT,
    pub PositionXChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub SetPositionXChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub PositionXSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub SetPositionXSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub PositionYChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub SetPositionYChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub PositionYSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub SetPositionYSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub ScaleChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub SetScaleChainingMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionChainingMode,
    ) -> windows_core::HRESULT,
    pub ScaleSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub SetScaleSourceMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        InteractionSourceMode,
    ) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Input")]
    pub TryRedirectForManipulation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Input"))]
    TryRedirectForManipulation: usize,
}
windows_core::imp::define_interface!(
    IVisualInteractionSource2,
    IVisualInteractionSource2_Vtbl,
    0xff1132ba_dc0d_519e_be49_be301e52306a
);
impl windows_core::RuntimeType for IVisualInteractionSource2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualInteractionSource2 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IVisualInteractionSource2";
}
pub trait IVisualInteractionSource2_Impl: windows_core::IUnknownImpl {
    fn DeltaPosition(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn DeltaScale(&self) -> windows_core::Result<f32>;
    fn Position(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn PositionVelocity(&self) -> windows_core::Result<windows_numerics::Vector3>;
    fn Scale(&self) -> windows_core::Result<f32>;
    fn ScaleVelocity(&self) -> windows_core::Result<f32>;
    fn ConfigureCenterPointXModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureCenterPointYModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureDeltaPositionXModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureDeltaPositionYModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
    fn ConfigureDeltaScaleModifiers(
        &self,
        conditionalValues: windows_core::Ref<
            '_,
            windows_collections::IIterable<CompositionConditionalValue>,
        >,
    ) -> windows_core::Result<()>;
}
impl IVisualInteractionSource2_Vtbl {
    pub const fn new<Identity: IVisualInteractionSource2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DeltaPosition<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::DeltaPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DeltaScale<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::DeltaScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Position<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::Position(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PositionVelocity<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector3,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::PositionVelocity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Scale<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleVelocity<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource2_Impl::ScaleVelocity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConfigureCenterPointXModifiers<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource2_Impl::ConfigureCenterPointXModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureCenterPointYModifiers<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource2_Impl::ConfigureCenterPointYModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureDeltaPositionXModifiers<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource2_Impl::ConfigureDeltaPositionXModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureDeltaPositionYModifiers<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource2_Impl::ConfigureDeltaPositionYModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        unsafe extern "system" fn ConfigureDeltaScaleModifiers<
            Identity: IVisualInteractionSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            conditionalvalues: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVisualInteractionSource2_Impl::ConfigureDeltaScaleModifiers(
                    this,
                    core::mem::transmute_copy(&conditionalvalues),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSource2,
                OFFSET,
            >(),
            DeltaPosition: DeltaPosition::<Identity, OFFSET>,
            DeltaScale: DeltaScale::<Identity, OFFSET>,
            Position: Position::<Identity, OFFSET>,
            PositionVelocity: PositionVelocity::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            ScaleVelocity: ScaleVelocity::<Identity, OFFSET>,
            ConfigureCenterPointXModifiers: ConfigureCenterPointXModifiers::<Identity, OFFSET>,
            ConfigureCenterPointYModifiers: ConfigureCenterPointYModifiers::<Identity, OFFSET>,
            ConfigureDeltaPositionXModifiers: ConfigureDeltaPositionXModifiers::<Identity, OFFSET>,
            ConfigureDeltaPositionYModifiers: ConfigureDeltaPositionYModifiers::<Identity, OFFSET>,
            ConfigureDeltaScaleModifiers: ConfigureDeltaScaleModifiers::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSource2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSource2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DeltaPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub DeltaScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub Position: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub PositionVelocity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector3,
    ) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub ScaleVelocity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub ConfigureCenterPointXModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigureCenterPointYModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigureDeltaPositionXModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigureDeltaPositionYModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConfigureDeltaScaleModifiers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualInteractionSource3,
    IVisualInteractionSource3_Vtbl,
    0xd523bd66_a05d_5417_8e07_84ae3caf9752
);
impl windows_core::RuntimeType for IVisualInteractionSource3 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualInteractionSource3 {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.IVisualInteractionSource3";
}
pub trait IVisualInteractionSource3_Impl: windows_core::IUnknownImpl {
    fn PointerWheelConfig(&self) -> windows_core::Result<InteractionSourceConfiguration>;
}
impl IVisualInteractionSource3_Vtbl {
    pub const fn new<Identity: IVisualInteractionSource3_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PointerWheelConfig<
            Identity: IVisualInteractionSource3_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSource3_Impl::PointerWheelConfig(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSource3,
                OFFSET,
            >(),
            PointerWheelConfig: PointerWheelConfig::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSource3 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSource3_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PointerWheelConfig: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualInteractionSourceObjectFactory,
    IVisualInteractionSourceObjectFactory_Vtbl,
    0xfeb73102_238c_52aa_8e03_b68d5ecc44b3
);
impl windows_core::RuntimeType for IVisualInteractionSourceObjectFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualInteractionSourceObjectFactory {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactory";
}
pub trait IVisualInteractionSourceObjectFactory_Impl: windows_core::IUnknownImpl {}
impl IVisualInteractionSourceObjectFactory_Vtbl {
    pub const fn new<Identity: IVisualInteractionSourceObjectFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSourceObjectFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSourceObjectFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSourceObjectFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IVisualInteractionSourceStatics,
    IVisualInteractionSourceStatics_Vtbl,
    0x5fc9c763_e2e5_530e_87cd_b93118ade8a3
);
impl windows_core::RuntimeType for IVisualInteractionSourceStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualInteractionSourceStatics {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics";
}
pub trait IVisualInteractionSourceStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        source: windows_core::Ref<'_, super::Visual>,
    ) -> windows_core::Result<VisualInteractionSource>;
}
impl IVisualInteractionSourceStatics_Vtbl {
    pub const fn new<Identity: IVisualInteractionSourceStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Create<
            Identity: IVisualInteractionSourceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSourceStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&source),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSourceStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSourceStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSourceStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVisualInteractionSourceStatics2,
    IVisualInteractionSourceStatics2_Vtbl,
    0xa6b494fe_12a1_5a73_b87e_4c4ef58eac6c
);
impl windows_core::RuntimeType for IVisualInteractionSourceStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IVisualInteractionSourceStatics2 {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2";
}
pub trait IVisualInteractionSourceStatics2_Impl: windows_core::IUnknownImpl {
    fn CreateFromIVisualElement(
        &self,
        source: windows_core::Ref<'_, super::IVisualElement>,
    ) -> windows_core::Result<VisualInteractionSource>;
}
impl IVisualInteractionSourceStatics2_Vtbl {
    pub const fn new<Identity: IVisualInteractionSourceStatics2_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateFromIVisualElement<
            Identity: IVisualInteractionSourceStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IVisualInteractionSourceStatics2_Impl::CreateFromIVisualElement(
                    this,
                    core::mem::transmute_copy(&source),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVisualInteractionSourceStatics2,
                OFFSET,
            >(),
            CreateFromIVisualElement: CreateFromIVisualElement::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVisualInteractionSourceStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualInteractionSourceStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateFromIVisualElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionBindingAxisModes(pub u32);
impl InteractionBindingAxisModes {
    pub const None: Self = Self(0u32);
    pub const PositionX: Self = Self(1u32);
    pub const PositionY: Self = Self(2u32);
    pub const Scale: Self = Self(4u32);
}
impl windows_core::TypeKind for InteractionBindingAxisModes {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionBindingAxisModes {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionBindingAxisModes;u4)",
    );
}
impl InteractionBindingAxisModes {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl core::ops::BitOr for InteractionBindingAxisModes {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl core::ops::BitAnd for InteractionBindingAxisModes {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl core::ops::BitOrAssign for InteractionBindingAxisModes {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl core::ops::BitAndAssign for InteractionBindingAxisModes {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl core::ops::Not for InteractionBindingAxisModes {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionChainingMode(pub i32);
impl InteractionChainingMode {
    pub const Auto: Self = Self(0i32);
    pub const Always: Self = Self(1i32);
    pub const Never: Self = Self(2i32);
}
impl windows_core::TypeKind for InteractionChainingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionChainingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionChainingMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionSourceConfiguration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionSourceConfiguration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionSourceConfiguration,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl InteractionSourceConfiguration {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn PositionXSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionXSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionXSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionXSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PositionYSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionYSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionYSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionYSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleSourceMode(&self) -> windows_core::Result<InteractionSourceRedirectionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleSourceMode(
        &self,
        value: InteractionSourceRedirectionMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InteractionSourceConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionSourceConfiguration>();
}
unsafe impl windows_core::Interface for InteractionSourceConfiguration {
    type Vtable = <IInteractionSourceConfiguration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionSourceConfiguration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionSourceConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionSourceConfiguration";
}
unsafe impl Send for InteractionSourceConfiguration {}
unsafe impl Sync for InteractionSourceConfiguration {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionSourceMode(pub i32);
impl InteractionSourceMode {
    pub const Disabled: Self = Self(0i32);
    pub const EnabledWithInertia: Self = Self(1i32);
    pub const EnabledWithoutInertia: Self = Self(2i32);
}
impl windows_core::TypeKind for InteractionSourceMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionSourceMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionSourceMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionSourceRedirectionMode(pub i32);
impl InteractionSourceRedirectionMode {
    pub const Disabled: Self = Self(0i32);
    pub const Enabled: Self = Self(1i32);
}
impl windows_core::TypeKind for InteractionSourceRedirectionMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionSourceRedirectionMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionSourceRedirectionMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTracker(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTracker,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTracker,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl InteractionTracker {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn InteractionSources(
        &self,
    ) -> windows_core::Result<CompositionInteractionSourceCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InteractionSources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsPositionRoundingSuggested(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPositionRoundingSuggested)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxPosition(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxPosition(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxPosition)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinPosition(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinPosition(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinPosition)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NaturalRestingPosition(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalRestingPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NaturalRestingScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalRestingScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Owner(&self) -> windows_core::Result<IInteractionTrackerOwner> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Owner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Position(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Position)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PositionInertiaDecayRate(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionInertiaDecayRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetPositionInertiaDecayRate<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows_numerics::Vector3>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionInertiaDecayRate)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PositionVelocityInPixelsPerSecond(
        &self,
    ) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionVelocityInPixelsPerSecond)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Scale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ScaleInertiaDecayRate(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleInertiaDecayRate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetScaleInertiaDecayRate<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleInertiaDecayRate)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ScaleVelocityInPercentPerSecond(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleVelocityInPercentPerSecond)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AdjustPositionXIfGreaterThanThreshold(
        &self,
        adjustment: f32,
        positionthreshold: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AdjustPositionXIfGreaterThanThreshold)(
                windows_core::Interface::as_raw(this),
                adjustment,
                positionthreshold,
            )
            .ok()
        }
    }
    pub fn AdjustPositionYIfGreaterThanThreshold(
        &self,
        adjustment: f32,
        positionthreshold: f32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AdjustPositionYIfGreaterThanThreshold)(
                windows_core::Interface::as_raw(this),
                adjustment,
                positionthreshold,
            )
            .ok()
        }
    }
    pub fn ConfigurePositionXInertiaModifiers<P0>(&self, modifiers: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<InteractionTrackerInertiaModifier>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigurePositionXInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                modifiers.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigurePositionYInertiaModifiers<P0>(&self, modifiers: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<InteractionTrackerInertiaModifier>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigurePositionYInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                modifiers.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureScaleInertiaModifiers<P0>(&self, modifiers: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<InteractionTrackerInertiaModifier>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureScaleInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                modifiers.param().abi(),
            )
            .ok()
        }
    }
    pub fn TryUpdatePosition(&self, value: windows_numerics::Vector3) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePosition)(
                windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdatePositionBy(
        &self,
        amount: windows_numerics::Vector3,
    ) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionBy)(
                windows_core::Interface::as_raw(this),
                amount,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdatePositionWithAnimation<P0>(&self, animation: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::CompositionAnimation>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionWithAnimation)(
                windows_core::Interface::as_raw(this),
                animation.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdatePositionWithAdditionalVelocity(
        &self,
        velocityinpixelspersecond: windows_numerics::Vector3,
    ) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionWithAdditionalVelocity)(
                windows_core::Interface::as_raw(this),
                velocityinpixelspersecond,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdateScale(
        &self,
        value: f32,
        centerpoint: windows_numerics::Vector3,
    ) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdateScale)(
                windows_core::Interface::as_raw(this),
                value,
                centerpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdateScaleWithAnimation<P0>(
        &self,
        animation: P0,
        centerpoint: windows_numerics::Vector3,
    ) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::CompositionAnimation>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdateScaleWithAnimation)(
                windows_core::Interface::as_raw(this),
                animation.param().abi(),
                centerpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdateScaleWithAdditionalVelocity(
        &self,
        velocityinpercentpersecond: f32,
        centerpoint: windows_numerics::Vector3,
    ) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdateScaleWithAdditionalVelocity)(
                windows_core::Interface::as_raw(this),
                velocityinpercentpersecond,
                centerpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ConfigureCenterPointXInertiaModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IInteractionTracker2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureCenterPointXInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureCenterPointYInertiaModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IInteractionTracker2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureCenterPointYInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureVector2PositionInertiaModifiers<P0>(
        &self,
        modifiers: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<
            windows_collections::IIterable<InteractionTrackerVector2InertiaModifier>,
        >,
    {
        let this = &windows_core::Interface::cast::<IInteractionTracker3>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureVector2PositionInertiaModifiers)(
                windows_core::Interface::as_raw(this),
                modifiers.param().abi(),
            )
            .ok()
        }
    }
    pub fn TryUpdatePositionWithOption(
        &self,
        value: windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
    ) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IInteractionTracker4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionWithOption)(
                windows_core::Interface::as_raw(this),
                value,
                option,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdatePositionByWithOption(
        &self,
        amount: windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
    ) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IInteractionTracker4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionByWithOption)(
                windows_core::Interface::as_raw(this),
                amount,
                option,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsInertiaFromImpulse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IInteractionTracker4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsInertiaFromImpulse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn TryUpdatePositionWithOption2(
        &self,
        value: windows_numerics::Vector3,
        option: InteractionTrackerClampingOption,
        posupdateoption: InteractionTrackerPositionUpdateOption,
    ) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IInteractionTracker5>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryUpdatePositionWithOption)(
                windows_core::Interface::as_raw(this),
                value,
                option,
                posupdateoption,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<InteractionTracker>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::IInteractionTrackerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateWithOwner<P0, P1>(
        compositor: P0,
        owner: P1,
    ) -> windows_core::Result<InteractionTracker>
    where
        P0: windows_core::Param<super::Compositor>,
        P1: windows_core::Param<IInteractionTrackerOwner>,
    {
        Self::IInteractionTrackerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWithOwner)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                owner.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SetBindingMode<P0, P1>(
        boundtracker1: P0,
        boundtracker2: P1,
        axismode: InteractionBindingAxisModes,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTracker>,
    {
        Self::IInteractionTrackerStatics2(|this| unsafe {
            (windows_core::Interface::vtable(this).SetBindingMode)(
                windows_core::Interface::as_raw(this),
                boundtracker1.param().abi(),
                boundtracker2.param().abi(),
                axismode,
            )
            .ok()
        })
    }
    pub fn GetBindingMode<P0, P1>(
        boundtracker1: P0,
        boundtracker2: P1,
    ) -> windows_core::Result<InteractionBindingAxisModes>
    where
        P0: windows_core::Param<InteractionTracker>,
        P1: windows_core::Param<InteractionTracker>,
    {
        Self::IInteractionTrackerStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetBindingMode)(
                windows_core::Interface::as_raw(this),
                boundtracker1.param().abi(),
                boundtracker2.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn IInteractionTrackerStatics<
        R,
        F: FnOnce(&IInteractionTrackerStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTracker,
            IInteractionTrackerStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IInteractionTrackerStatics2<
        R,
        F: FnOnce(&IInteractionTrackerStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTracker,
            IInteractionTrackerStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for InteractionTracker {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTracker>();
}
unsafe impl windows_core::Interface for InteractionTracker {
    type Vtable = <IInteractionTracker as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IInteractionTracker as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTracker {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.InteractionTracker";
}
unsafe impl Send for InteractionTracker {}
unsafe impl Sync for InteractionTracker {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionTrackerClampingOption(pub i32);
impl InteractionTrackerClampingOption {
    pub const Auto: Self = Self(0i32);
    pub const Disabled: Self = Self(1i32);
}
impl windows_core::TypeKind for InteractionTrackerClampingOption {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionTrackerClampingOption {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionTrackerClampingOption;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerCustomAnimationStateEnteredArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerCustomAnimationStateEnteredArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerCustomAnimationStateEnteredArgs {
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsFromBinding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<
            IInteractionTrackerCustomAnimationStateEnteredArgs2,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFromBinding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerCustomAnimationStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IInteractionTrackerCustomAnimationStateEnteredArgs,
    >();
}
unsafe impl windows_core::Interface for InteractionTrackerCustomAnimationStateEnteredArgs {
    type Vtable =
        <IInteractionTrackerCustomAnimationStateEnteredArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerCustomAnimationStateEnteredArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerCustomAnimationStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs";
}
unsafe impl Send for InteractionTrackerCustomAnimationStateEnteredArgs {}
unsafe impl Sync for InteractionTrackerCustomAnimationStateEnteredArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerIdleStateEnteredArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerIdleStateEnteredArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerIdleStateEnteredArgs {
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsFromBinding(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<IInteractionTrackerIdleStateEnteredArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFromBinding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerIdleStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerIdleStateEnteredArgs>(
        );
}
unsafe impl windows_core::Interface for InteractionTrackerIdleStateEnteredArgs {
    type Vtable = <IInteractionTrackerIdleStateEnteredArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerIdleStateEnteredArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerIdleStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs";
}
unsafe impl Send for InteractionTrackerIdleStateEnteredArgs {}
unsafe impl Sync for InteractionTrackerIdleStateEnteredArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInertiaModifier(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInertiaModifier,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerInertiaModifier,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl InteractionTrackerInertiaModifier {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerInertiaModifier {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerInertiaModifier>();
}
unsafe impl windows_core::Interface for InteractionTrackerInertiaModifier {
    type Vtable = <IInteractionTrackerInertiaModifier as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInertiaModifier as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInertiaModifier {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifier";
}
unsafe impl Send for InteractionTrackerInertiaModifier {}
unsafe impl Sync for InteractionTrackerInertiaModifier {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInertiaMotion(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInertiaMotion,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerInertiaMotion,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    InteractionTrackerInertiaModifier,
    super::CompositionObject
);
impl InteractionTrackerInertiaMotion {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Condition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCondition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCondition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Motion(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Motion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMotion<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMotion)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<InteractionTrackerInertiaMotion>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::IInteractionTrackerInertiaMotionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IInteractionTrackerInertiaMotionStatics<
        R,
        F: FnOnce(&IInteractionTrackerInertiaMotionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTrackerInertiaMotion,
            IInteractionTrackerInertiaMotionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for InteractionTrackerInertiaMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerInertiaMotion>();
}
unsafe impl windows_core::Interface for InteractionTrackerInertiaMotion {
    type Vtable = <IInteractionTrackerInertiaMotion as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInertiaMotion as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInertiaMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotion";
}
unsafe impl Send for InteractionTrackerInertiaMotion {}
unsafe impl Sync for InteractionTrackerInertiaMotion {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInertiaNaturalMotion(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInertiaNaturalMotion,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerInertiaNaturalMotion,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    InteractionTrackerInertiaModifier,
    super::CompositionObject
);
impl InteractionTrackerInertiaNaturalMotion {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Condition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCondition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCondition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn NaturalMotion(&self) -> windows_core::Result<super::ScalarNaturalMotionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalMotion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNaturalMotion<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ScalarNaturalMotionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNaturalMotion)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(
        compositor: P0,
    ) -> windows_core::Result<InteractionTrackerInertiaNaturalMotion>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::IInteractionTrackerInertiaNaturalMotionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IInteractionTrackerInertiaNaturalMotionStatics<
        R,
        F: FnOnce(&IInteractionTrackerInertiaNaturalMotionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTrackerInertiaNaturalMotion,
            IInteractionTrackerInertiaNaturalMotionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for InteractionTrackerInertiaNaturalMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerInertiaNaturalMotion>(
        );
}
unsafe impl windows_core::Interface for InteractionTrackerInertiaNaturalMotion {
    type Vtable = <IInteractionTrackerInertiaNaturalMotion as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInertiaNaturalMotion as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInertiaNaturalMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion";
}
unsafe impl Send for InteractionTrackerInertiaNaturalMotion {}
unsafe impl Sync for InteractionTrackerInertiaNaturalMotion {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInertiaRestingValue(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInertiaRestingValue,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerInertiaRestingValue,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    InteractionTrackerInertiaModifier,
    super::CompositionObject
);
impl InteractionTrackerInertiaRestingValue {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Condition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCondition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCondition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RestingValue(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RestingValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetRestingValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRestingValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(compositor: P0) -> windows_core::Result<InteractionTrackerInertiaRestingValue>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::IInteractionTrackerInertiaRestingValueStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IInteractionTrackerInertiaRestingValueStatics<
        R,
        F: FnOnce(&IInteractionTrackerInertiaRestingValueStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTrackerInertiaRestingValue,
            IInteractionTrackerInertiaRestingValueStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for InteractionTrackerInertiaRestingValue {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerInertiaRestingValue>();
}
unsafe impl windows_core::Interface for InteractionTrackerInertiaRestingValue {
    type Vtable = <IInteractionTrackerInertiaRestingValue as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInertiaRestingValue as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInertiaRestingValue {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue";
}
unsafe impl Send for InteractionTrackerInertiaRestingValue {}
unsafe impl Sync for InteractionTrackerInertiaRestingValue {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInertiaStateEnteredArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInertiaStateEnteredArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerInertiaStateEnteredArgs {
    pub fn ModifiedRestingPosition(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows_numerics::Vector3>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ModifiedRestingPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ModifiedRestingScale(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ModifiedRestingScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn NaturalRestingPosition(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalRestingPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NaturalRestingScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalRestingScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PositionVelocityInPixelsPerSecond(
        &self,
    ) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionVelocityInPixelsPerSecond)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ScaleVelocityInPercentPerSecond(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleVelocityInPercentPerSecond)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsInertiaFromImpulse(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<IInteractionTrackerInertiaStateEnteredArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsInertiaFromImpulse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsFromBinding(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<IInteractionTrackerInertiaStateEnteredArgs3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFromBinding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerInertiaStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IInteractionTrackerInertiaStateEnteredArgs,
    >();
}
unsafe impl windows_core::Interface for InteractionTrackerInertiaStateEnteredArgs {
    type Vtable = <IInteractionTrackerInertiaStateEnteredArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInertiaStateEnteredArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInertiaStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs";
}
unsafe impl Send for InteractionTrackerInertiaStateEnteredArgs {}
unsafe impl Sync for InteractionTrackerInertiaStateEnteredArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerInteractingStateEnteredArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerInteractingStateEnteredArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerInteractingStateEnteredArgs {
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsFromBinding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IInteractionTrackerInteractingStateEnteredArgs2>(
            self,
        )?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFromBinding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerInteractingStateEnteredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IInteractionTrackerInteractingStateEnteredArgs,
    >();
}
unsafe impl windows_core::Interface for InteractionTrackerInteractingStateEnteredArgs {
    type Vtable =
        <IInteractionTrackerInteractingStateEnteredArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerInteractingStateEnteredArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerInteractingStateEnteredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs";
}
unsafe impl Send for InteractionTrackerInteractingStateEnteredArgs {}
unsafe impl Sync for InteractionTrackerInteractingStateEnteredArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct InteractionTrackerPositionUpdateOption(pub i32);
impl InteractionTrackerPositionUpdateOption {
    pub const Default: Self = Self(0i32);
    pub const AllowActiveCustomScaleAnimation: Self = Self(1i32);
}
impl windows_core::TypeKind for InteractionTrackerPositionUpdateOption {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for InteractionTrackerPositionUpdateOption {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerRequestIgnoredArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerRequestIgnoredArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerRequestIgnoredArgs {
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerRequestIgnoredArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerRequestIgnoredArgs>();
}
unsafe impl windows_core::Interface for InteractionTrackerRequestIgnoredArgs {
    type Vtable = <IInteractionTrackerRequestIgnoredArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerRequestIgnoredArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerRequestIgnoredArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs";
}
unsafe impl Send for InteractionTrackerRequestIgnoredArgs {}
unsafe impl Sync for InteractionTrackerRequestIgnoredArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerValuesChangedArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerValuesChangedArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl InteractionTrackerValuesChangedArgs {
    pub fn Position(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Position)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Scale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerValuesChangedArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInteractionTrackerValuesChangedArgs>();
}
unsafe impl windows_core::Interface for InteractionTrackerValuesChangedArgs {
    type Vtable = <IInteractionTrackerValuesChangedArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerValuesChangedArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerValuesChangedArgs {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs";
}
unsafe impl Send for InteractionTrackerValuesChangedArgs {}
unsafe impl Sync for InteractionTrackerValuesChangedArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerVector2InertiaModifier(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerVector2InertiaModifier,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerVector2InertiaModifier,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    super::CompositionObject
);
impl InteractionTrackerVector2InertiaModifier {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InteractionTrackerVector2InertiaModifier {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IInteractionTrackerVector2InertiaModifier,
    >();
}
unsafe impl windows_core::Interface for InteractionTrackerVector2InertiaModifier {
    type Vtable = <IInteractionTrackerVector2InertiaModifier as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerVector2InertiaModifier as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerVector2InertiaModifier {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier";
}
unsafe impl Send for InteractionTrackerVector2InertiaModifier {}
unsafe impl Sync for InteractionTrackerVector2InertiaModifier {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InteractionTrackerVector2InertiaNaturalMotion(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InteractionTrackerVector2InertiaNaturalMotion,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InteractionTrackerVector2InertiaNaturalMotion,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    InteractionTrackerVector2InertiaModifier,
    super::CompositionObject
);
impl InteractionTrackerVector2InertiaNaturalMotion {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn Condition(&self) -> windows_core::Result<super::ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Condition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCondition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ExpressionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCondition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn NaturalMotion(&self) -> windows_core::Result<super::Vector2NaturalMotionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NaturalMotion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNaturalMotion<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Vector2NaturalMotionAnimation>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNaturalMotion)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Create<P0>(
        compositor: P0,
    ) -> windows_core::Result<InteractionTrackerVector2InertiaNaturalMotion>
    where
        P0: windows_core::Param<super::Compositor>,
    {
        Self::IInteractionTrackerVector2InertiaNaturalMotionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IInteractionTrackerVector2InertiaNaturalMotionStatics<
        R,
        F: FnOnce(&IInteractionTrackerVector2InertiaNaturalMotionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InteractionTrackerVector2InertiaNaturalMotion,
            IInteractionTrackerVector2InertiaNaturalMotionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for InteractionTrackerVector2InertiaNaturalMotion {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IInteractionTrackerVector2InertiaNaturalMotion,
    >();
}
unsafe impl windows_core::Interface for InteractionTrackerVector2InertiaNaturalMotion {
    type Vtable =
        <IInteractionTrackerVector2InertiaNaturalMotion as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IInteractionTrackerVector2InertiaNaturalMotion as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InteractionTrackerVector2InertiaNaturalMotion {
    const NAME: &'static str =
        "Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion";
}
unsafe impl Send for InteractionTrackerVector2InertiaNaturalMotion {}
unsafe impl Sync for InteractionTrackerVector2InertiaNaturalMotion {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct VisualInteractionSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    VisualInteractionSource,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    VisualInteractionSource,
    super::IAnimationObject,
    windows::Foundation::IClosable,
    ICompositionInteractionSource,
    super::CompositionObject
);
impl VisualInteractionSource {
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> windows_core::Result<super::Compositor> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compositor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Properties(&self) -> windows_core::Result<super::CompositionPropertySet> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Properties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimation<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(&self, propertyname: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Comment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetComment(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetComment)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> windows_core::Result<super::ImplicitAnimationCollection> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetImplicitAnimations<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ImplicitAnimationCollection>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetImplicitAnimations)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimationGroup)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::AnimationController> {
        let this = &windows_core::Interface::cast::<super::ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetAnimationController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartAnimationWithController<P1, P2>(
        &self,
        propertyname: &windows_core::HSTRING,
        animation: P1,
        animationcontroller: P2,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::CompositionAnimation>,
        P2: windows_core::Param<super::AnimationController>,
    {
        let this = &windows_core::Interface::cast::<super::ICompositionObject5>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimationWithController)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animation.param().abi(),
                animationcontroller.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsPositionXRailsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPositionXRailsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPositionXRailsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPositionXRailsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPositionYRailsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPositionYRailsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPositionYRailsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPositionYRailsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ManipulationRedirectionMode(
        &self,
    ) -> windows_core::Result<VisualInteractionSourceRedirectionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationRedirectionMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetManipulationRedirectionMode(
        &self,
        value: VisualInteractionSourceRedirectionMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetManipulationRedirectionMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PositionXChainingMode(&self) -> windows_core::Result<InteractionChainingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionXChainingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionXChainingMode(
        &self,
        value: InteractionChainingMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionXChainingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PositionXSourceMode(&self) -> windows_core::Result<InteractionSourceMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionXSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionXSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionXSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PositionYChainingMode(&self) -> windows_core::Result<InteractionChainingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionYChainingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionYChainingMode(
        &self,
        value: InteractionChainingMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionYChainingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PositionYSourceMode(&self) -> windows_core::Result<InteractionSourceMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionYSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPositionYSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPositionYSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleChainingMode(&self) -> windows_core::Result<InteractionChainingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleChainingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleChainingMode(&self, value: InteractionChainingMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleChainingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleSourceMode(&self) -> windows_core::Result<InteractionSourceMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleSourceMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleSourceMode(&self, value: InteractionSourceMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleSourceMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<super::Visual> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn TryRedirectForManipulation<P0>(&self, pointerpoint: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).TryRedirectForManipulation)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
            )
            .ok()
        }
    }
    pub fn DeltaPosition(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DeltaPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DeltaScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DeltaScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Position(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Position)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn PositionVelocity(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Scale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ScaleVelocity(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleVelocity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ConfigureCenterPointXModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureCenterPointXModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureCenterPointYModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureCenterPointYModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureDeltaPositionXModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureDeltaPositionXModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureDeltaPositionYModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureDeltaPositionYModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConfigureDeltaScaleModifiers<P0>(
        &self,
        conditionalvalues: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_collections::IIterable<CompositionConditionalValue>>,
    {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ConfigureDeltaScaleModifiers)(
                windows_core::Interface::as_raw(this),
                conditionalvalues.param().abi(),
            )
            .ok()
        }
    }
    pub fn PointerWheelConfig(&self) -> windows_core::Result<InteractionSourceConfiguration> {
        let this = &windows_core::Interface::cast::<IVisualInteractionSource3>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelConfig)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Create<P0>(source: P0) -> windows_core::Result<VisualInteractionSource>
    where
        P0: windows_core::Param<super::Visual>,
    {
        Self::IVisualInteractionSourceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                source.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateFromIVisualElement<P0>(source: P0) -> windows_core::Result<VisualInteractionSource>
    where
        P0: windows_core::Param<super::IVisualElement>,
    {
        Self::IVisualInteractionSourceStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateFromIVisualElement)(
                windows_core::Interface::as_raw(this),
                source.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IVisualInteractionSourceStatics<
        R,
        F: FnOnce(&IVisualInteractionSourceStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            VisualInteractionSource,
            IVisualInteractionSourceStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IVisualInteractionSourceStatics2<
        R,
        F: FnOnce(&IVisualInteractionSourceStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            VisualInteractionSource,
            IVisualInteractionSourceStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for VisualInteractionSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IVisualInteractionSource>();
}
unsafe impl windows_core::Interface for VisualInteractionSource {
    type Vtable = <IVisualInteractionSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IVisualInteractionSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for VisualInteractionSource {
    const NAME: &'static str = "Microsoft.UI.Composition.Interactions.VisualInteractionSource";
}
unsafe impl Send for VisualInteractionSource {}
unsafe impl Sync for VisualInteractionSource {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct VisualInteractionSourceRedirectionMode(pub i32);
impl VisualInteractionSourceRedirectionMode {
    pub const Off: Self = Self(0i32);
    pub const CapableTouchpadOnly: Self = Self(1i32);
    pub const PointerWheelOnly: Self = Self(2i32);
    pub const CapableTouchpadAndPointerWheel: Self = Self(3i32);
}
impl windows_core::TypeKind for VisualInteractionSourceRedirectionMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for VisualInteractionSourceRedirectionMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode;i4)",
    );
}
