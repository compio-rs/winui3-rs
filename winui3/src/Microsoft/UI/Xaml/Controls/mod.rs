// Bindings generated by `windows-bindgen` 0.63.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub mod Primitives;
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Button(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(Button, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    Button,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::ButtonBase,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl Button {
    pub fn IsPointerOver(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPointerOver)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsPressed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPressed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CommandParameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CommandParameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCommandParameter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCommandParameter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Click<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Click)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClick(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClick)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Button> {
        Self::IButtonFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IButtonFactory<R, F: FnOnce(&IButtonFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Button, IButtonFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IButtonStatics<R, F: FnOnce(&IButtonStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Button, IButtonStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for Button {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IButton>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for Button {
    type Vtable = <IButton as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IButton as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for Button {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Button";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for Button {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for Button {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Canvas(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(Canvas, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    Canvas,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Panel,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl Canvas {
    pub fn new() -> windows_core::Result<Canvas> {
        Self::ICanvasFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetLeft<P0>(element: P0) -> windows_core::Result<f64>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLeft)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetLeft<P0>(element: P0, length: f64) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLeft)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                length,
            )
            .ok()
        })
    }
    pub fn GetTop<P0>(element: P0) -> windows_core::Result<f64>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTop)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetTop<P0>(element: P0, length: f64) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetTop)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                length,
            )
            .ok()
        })
    }
    pub fn GetZIndex<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetZIndex)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetZIndex<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::ICanvasStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetZIndex)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<UIElementCollection> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemsHost(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemsHost)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICanvasFactory<R, F: FnOnce(&ICanvasFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Canvas, ICanvasFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ICanvasStatics<R, F: FnOnce(&ICanvasStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Canvas, ICanvasStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for Canvas {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICanvas>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for Canvas {
    type Vtable = <ICanvas as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICanvas as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for Canvas {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Canvas";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for Canvas {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for Canvas {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CheckBox(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    CheckBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    CheckBox,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::ToggleButton,
    Primitives::ButtonBase,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl CheckBox {
    pub fn IsPointerOver(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPointerOver)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsPressed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPressed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CommandParameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CommandParameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCommandParameter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCommandParameter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Click<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Click)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClick(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClick)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<CheckBox> {
        Self::ICheckBoxFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn IsChecked(&self) -> windows_core::Result<windows::Foundation::IReference<bool>> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsChecked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetIsChecked<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<bool>>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsChecked)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsThreeState(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsThreeState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsThreeState(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsThreeState)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Checked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Checked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveChecked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveChecked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unchecked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unchecked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnchecked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnchecked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Indeterminate<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Indeterminate)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIndeterminate(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIndeterminate)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnToggle(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButtonOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnToggle)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICheckBoxFactory<R, F: FnOnce(&ICheckBoxFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<CheckBox, ICheckBoxFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for CheckBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICheckBox>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for CheckBox {
    type Vtable = <ICheckBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICheckBox as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for CheckBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.CheckBox";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for CheckBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for CheckBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ComboBox(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    ComboBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    ComboBox,
    super::super::Composition::IAnimationObject,
    IItemContainerMapping,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::Selector,
    ItemsControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ComboBox {
    pub fn IsDropDownOpen(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDropDownOpen)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDropDownOpen(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDropDownOpen)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEditable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEditable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEditable(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEditable)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSelectionBoxHighlighted(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelectionBoxHighlighted)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxDropDownHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxDropDownHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxDropDownHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxDropDownHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectionBoxItem(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionBoxItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Header(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Header)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlaceholderText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlaceholderText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextSearchEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextSearchEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextSearchEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextSearchEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Text(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Text)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Description(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Description)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDescription<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDescription)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn DropDownClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropDownClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDropDownClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropDownClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DropDownOpened<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropDownOpened)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDropDownOpened(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropDownOpened)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn TextSubmitted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<ComboBox, ComboBoxTextSubmittedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextSubmitted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveTextSubmitted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextSubmitted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ComboBox> {
        Self::IComboBoxFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OnDropDownClosed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IComboBoxOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDropDownClosed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnDropDownOpened<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IComboBoxOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDropDownOpened)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ItemFromContainer<P0>(
        &self,
        container: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContainerFromItem<P0>(&self, item: P0) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromItem)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexFromContainer<P0>(&self, container: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ContainerFromIndex(&self, index: i32) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromIndex)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ItemsSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetItemsSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetItemsSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Items(&self) -> windows_core::Result<ItemCollection> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Items)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DisplayMemberPath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetDisplayMemberPath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ItemsPanelRoot(&self) -> windows_core::Result<Panel> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsPanelRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsGrouping(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGrouping)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GroupHeaderContainerFromItemContainer<P0>(
        &self,
        itemcontainer: P0,
    ) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GroupHeaderContainerFromItemContainer)(
                windows_core::Interface::as_raw(this),
                itemcontainer.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemItsOwnContainerOverride<P0>(&self, item: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemItsOwnContainerOverride)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetContainerForItemOverride(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ClearContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn PrepareContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PrepareContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnItemsChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnItemsChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectedIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectedItem(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSelectedItem<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedItem)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedValue(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSelectedValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedValuePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedValuePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetSelectedValuePath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedValuePath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsSynchronizedWithCurrentItem(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<bool>> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSynchronizedWithCurrentItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetIsSynchronizedWithCurrentItem<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<bool>>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSynchronizedWithCurrentItem)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectionChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<SelectionChangedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSelectionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IComboBoxFactory<R, F: FnOnce(&IComboBoxFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ComboBox, IComboBoxFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IComboBoxStatics<R, F: FnOnce(&IComboBoxStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ComboBox, IComboBoxStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for ComboBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IComboBox>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for ComboBox {
    type Vtable = <IComboBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IComboBox as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ComboBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ComboBox";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for ComboBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for ComboBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ComboBoxItem(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    ComboBoxItem,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    ComboBoxItem,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::SelectorItem,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ComboBoxItem {
    pub fn new() -> windows_core::Result<ComboBoxItem> {
        Self::IComboBoxItemFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn IsSelected(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::ISelectorItem>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSelected(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelectorItem>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSelected)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IComboBoxItemFactory<R, F: FnOnce(&IComboBoxItemFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ComboBoxItem, IComboBoxItemFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for ComboBoxItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IComboBoxItem>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for ComboBoxItem {
    type Vtable = <IComboBoxItem as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IComboBoxItem as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ComboBoxItem {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ComboBoxItem";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for ComboBoxItem {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for ComboBoxItem {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ComboBoxTextSubmittedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ComboBoxTextSubmittedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ComboBoxTextSubmittedEventArgs {
    pub fn Text(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Text)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ComboBoxTextSubmittedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IComboBoxTextSubmittedEventArgs>();
}
unsafe impl windows_core::Interface for ComboBoxTextSubmittedEventArgs {
    type Vtable = <IComboBoxTextSubmittedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IComboBoxTextSubmittedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ComboBoxTextSubmittedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs";
}
unsafe impl Send for ComboBoxTextSubmittedEventArgs {}
unsafe impl Sync for ComboBoxTextSubmittedEventArgs {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentControl(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    ContentControl,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    ContentControl,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl ContentControl {
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn new() -> windows_core::Result<ContentControl> {
        Self::IContentControlFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IContentControlFactory<R, F: FnOnce(&IContentControlFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ContentControl, IContentControlFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IContentControlStatics<R, F: FnOnce(&IContentControlStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ContentControl, IContentControlStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for ContentControl {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentControl>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for ContentControl {
    type Vtable = <IContentControl as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentControl as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ContentControl {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ContentControl";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for ContentControl {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for ContentControl {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Control(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    Control,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    Control,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl Control {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn new() -> windows_core::Result<Control> {
        Self::IControlFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetIsTemplateFocusTarget<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IControlStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsTemplateFocusTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsTemplateFocusTarget<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IControlStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsTemplateFocusTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetIsTemplateKeyTipTarget<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IControlStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsTemplateKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsTemplateKeyTipTarget<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IControlStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsTemplateKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IControlFactory<R, F: FnOnce(&IControlFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Control, IControlFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IControlStatics<R, F: FnOnce(&IControlStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Control, IControlStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for Control {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IControl>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for Control {
    type Vtable = <IControl as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IControl as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for Control {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Control";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for Control {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for Control {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Grid(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(Grid, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    Grid,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Panel,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl Grid {
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn RowSpacing(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRowSpacing(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRowSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColumnSpacing(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColumnSpacing(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColumnSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Grid> {
        Self::IGridFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetRow<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetRow)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetRow<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetRow)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetColumn<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetColumn)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetColumn<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetColumn)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetRowSpan<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetRowSpan)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetRowSpan<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetRowSpan)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetColumnSpan<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetColumnSpan)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetColumnSpan<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FrameworkElement>,
    {
        Self::IGridStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetColumnSpan)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn Children(&self) -> windows_core::Result<UIElementCollection> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemsHost(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemsHost)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IGridFactory<R, F: FnOnce(&IGridFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Grid, IGridFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IGridStatics<R, F: FnOnce(&IGridStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Grid, IGridStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for Grid {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IGrid>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for Grid {
    type Vtable = <IGrid as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IGrid as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for Grid {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Grid";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for Grid {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for Grid {}
windows_core::imp::define_interface!(
    IButton,
    IButton_Vtbl,
    0x216c183d_d07a_5aa5_b8a4_0300a2683e87
);
impl windows_core::RuntimeType for IButton {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IButton {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IButton";
}
pub trait IButton_Impl: windows_core::IUnknownImpl {}
impl IButton_Vtbl {
    pub const fn new<Identity: IButton_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IButton, OFFSET>(),
            Flyout: 0,
            SetFlyout: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IButton as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IButton_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    Flyout: usize,
    SetFlyout: usize,
}
windows_core::imp::define_interface!(
    IButtonFactory,
    IButtonFactory_Vtbl,
    0xfe393422_d91c_57b1_9a9c_2c7e3f41f77c
);
impl windows_core::RuntimeType for IButtonFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IButtonFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IButtonFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IButtonFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Button>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IButtonFactory_Vtbl {
    pub const fn new<Identity: IButtonFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IButtonFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IButtonFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IButtonFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IButtonFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IButtonFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IButtonStatics,
    IButtonStatics_Vtbl,
    0x57823d25_b26a_5e0f_94f6_bbae70683dc5
);
impl windows_core::RuntimeType for IButtonStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IButtonStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IButtonStatics";
}
pub trait IButtonStatics_Impl: windows_core::IUnknownImpl {}
impl IButtonStatics_Vtbl {
    pub const fn new<Identity: IButtonStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IButtonStatics, OFFSET>(),
            FlyoutProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IButtonStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IButtonStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    FlyoutProperty: usize,
}
windows_core::imp::define_interface!(
    ICanvas,
    ICanvas_Vtbl,
    0x457ba139_1146_51d2_807e_d9d65c927060
);
impl windows_core::RuntimeType for ICanvas {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICanvas {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ICanvas";
}
pub trait ICanvas_Impl: windows_core::IUnknownImpl {}
impl ICanvas_Vtbl {
    pub const fn new<Identity: ICanvas_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICanvas, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICanvas as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvas_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICanvasFactory,
    ICanvasFactory_Vtbl,
    0x374c5050_3481_5557_9948_804c0b8eea89
);
impl windows_core::RuntimeType for ICanvasFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ICanvasFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ICanvasFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait ICanvasFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Canvas>;
}
#[cfg(feature = "UI_Composition")]
impl ICanvasFactory_Vtbl {
    pub const fn new<Identity: ICanvasFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ICanvasFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICanvasFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICanvasFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICanvasFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvasFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    ICanvasStatics,
    ICanvasStatics_Vtbl,
    0xc00d5e0f_77e3_5c59_8fcd_86761f0c6607
);
impl windows_core::RuntimeType for ICanvasStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ICanvasStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ICanvasStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait ICanvasStatics_Impl: windows_core::IUnknownImpl {
    fn GetLeft(&self, element: windows_core::Ref<super::UIElement>) -> windows_core::Result<f64>;
    fn SetLeft(
        &self,
        element: windows_core::Ref<super::UIElement>,
        length: f64,
    ) -> windows_core::Result<()>;
    fn GetTop(&self, element: windows_core::Ref<super::UIElement>) -> windows_core::Result<f64>;
    fn SetTop(
        &self,
        element: windows_core::Ref<super::UIElement>,
        length: f64,
    ) -> windows_core::Result<()>;
    fn GetZIndex(&self, element: windows_core::Ref<super::UIElement>) -> windows_core::Result<i32>;
    fn SetZIndex(
        &self,
        element: windows_core::Ref<super::UIElement>,
        value: i32,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl ICanvasStatics_Vtbl {
    pub const fn new<Identity: ICanvasStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetLeft<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICanvasStatics_Impl::GetLeft(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeft<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            length: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICanvasStatics_Impl::SetLeft(this, core::mem::transmute_copy(&element), length)
                    .into()
            }
        }
        unsafe extern "system" fn GetTop<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICanvasStatics_Impl::GetTop(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTop<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            length: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICanvasStatics_Impl::SetTop(this, core::mem::transmute_copy(&element), length)
                    .into()
            }
        }
        unsafe extern "system" fn GetZIndex<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICanvasStatics_Impl::GetZIndex(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetZIndex<Identity: ICanvasStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICanvasStatics_Impl::SetZIndex(this, core::mem::transmute_copy(&element), value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICanvasStatics, OFFSET>(),
            LeftProperty: 0,
            GetLeft: GetLeft::<Identity, OFFSET>,
            SetLeft: SetLeft::<Identity, OFFSET>,
            TopProperty: 0,
            GetTop: GetTop::<Identity, OFFSET>,
            SetTop: SetTop::<Identity, OFFSET>,
            ZIndexProperty: 0,
            GetZIndex: GetZIndex::<Identity, OFFSET>,
            SetZIndex: SetZIndex::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICanvasStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvasStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    LeftProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetLeft: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut f64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetLeft: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetLeft: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        f64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetLeft: usize,
    TopProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetTop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut f64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetTop: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetTop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        f64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetTop: usize,
    ZIndexProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetZIndex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetZIndex: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetZIndex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetZIndex: usize,
}
windows_core::imp::define_interface!(
    ICheckBox,
    ICheckBox_Vtbl,
    0xc5830000_4c9d_5fdd_9346_674c71cd80c5
);
impl windows_core::RuntimeType for ICheckBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICheckBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ICheckBox";
}
pub trait ICheckBox_Impl: windows_core::IUnknownImpl {}
impl ICheckBox_Vtbl {
    pub const fn new<Identity: ICheckBox_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICheckBox, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICheckBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICheckBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ICheckBoxFactory,
    ICheckBoxFactory_Vtbl,
    0xf43ff58d_31d5_5835_af7b_375bc6a9bcf3
);
impl windows_core::RuntimeType for ICheckBoxFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ICheckBoxFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ICheckBoxFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait ICheckBoxFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<CheckBox>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ICheckBoxFactory_Vtbl {
    pub const fn new<Identity: ICheckBoxFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ICheckBoxFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICheckBoxFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICheckBoxFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICheckBoxFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICheckBoxFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IComboBox,
    IComboBox_Vtbl,
    0xc77da58b_4fd7_51e0_a431_f84658a83e9e
);
impl windows_core::RuntimeType for IComboBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IComboBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBox";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IComboBox_Impl: windows_core::IUnknownImpl {
    fn IsDropDownOpen(&self) -> windows_core::Result<bool>;
    fn SetIsDropDownOpen(&self, value: bool) -> windows_core::Result<()>;
    fn IsEditable(&self) -> windows_core::Result<bool>;
    fn SetIsEditable(&self, value: bool) -> windows_core::Result<()>;
    fn IsSelectionBoxHighlighted(&self) -> windows_core::Result<bool>;
    fn MaxDropDownHeight(&self) -> windows_core::Result<f64>;
    fn SetMaxDropDownHeight(&self, value: f64) -> windows_core::Result<()>;
    fn SelectionBoxItem(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn Header(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetHeader(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn IsTextSearchEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextSearchEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn Text(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Description(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetDescription(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn DropDownClosed(
        &self,
        handler: windows_core::Ref<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    ) -> windows_core::Result<i64>;
    fn RemoveDropDownClosed(&self, token: i64) -> windows_core::Result<()>;
    fn DropDownOpened(
        &self,
        handler: windows_core::Ref<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    ) -> windows_core::Result<i64>;
    fn RemoveDropDownOpened(&self, token: i64) -> windows_core::Result<()>;
    fn TextSubmitted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<ComboBox, ComboBoxTextSubmittedEventArgs>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveTextSubmitted(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IComboBox_Vtbl {
    pub const fn new<Identity: IComboBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsDropDownOpen<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::IsDropDownOpen(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDropDownOpen<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetIsDropDownOpen(this, value).into()
            }
        }
        unsafe extern "system" fn IsEditable<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::IsEditable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsEditable<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetIsEditable(this, value).into()
            }
        }
        unsafe extern "system" fn IsSelectionBoxHighlighted<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::IsSelectionBoxHighlighted(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxDropDownHeight<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::MaxDropDownHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxDropDownHeight<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetMaxDropDownHeight(this, value).into()
            }
        }
        unsafe extern "system" fn SelectionBoxItem<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::SelectionBoxItem(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Header<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::Header(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeader<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn PlaceholderText<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::PlaceholderText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlaceholderText<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetPlaceholderText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn IsTextSearchEnabled<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::IsTextSearchEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextSearchEnabled<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetIsTextSearchEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn Text<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::Text(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetText<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Description<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::Description(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDescription<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::SetDescription(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn DropDownClosed<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::DropDownClosed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDropDownClosed<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::RemoveDropDownClosed(this, token).into()
            }
        }
        unsafe extern "system" fn DropDownOpened<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::DropDownOpened(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDropDownOpened<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::RemoveDropDownOpened(this, token).into()
            }
        }
        unsafe extern "system" fn TextSubmitted<Identity: IComboBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBox_Impl::TextSubmitted(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveTextSubmitted<
            Identity: IComboBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBox_Impl::RemoveTextSubmitted(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBox, OFFSET>(),
            IsDropDownOpen: IsDropDownOpen::<Identity, OFFSET>,
            SetIsDropDownOpen: SetIsDropDownOpen::<Identity, OFFSET>,
            IsEditable: IsEditable::<Identity, OFFSET>,
            SetIsEditable: SetIsEditable::<Identity, OFFSET>,
            IsSelectionBoxHighlighted: IsSelectionBoxHighlighted::<Identity, OFFSET>,
            MaxDropDownHeight: MaxDropDownHeight::<Identity, OFFSET>,
            SetMaxDropDownHeight: SetMaxDropDownHeight::<Identity, OFFSET>,
            SelectionBoxItem: SelectionBoxItem::<Identity, OFFSET>,
            SelectionBoxItemTemplate: 0,
            TemplateSettings: 0,
            Header: Header::<Identity, OFFSET>,
            SetHeader: SetHeader::<Identity, OFFSET>,
            HeaderTemplate: 0,
            SetHeaderTemplate: 0,
            PlaceholderText: PlaceholderText::<Identity, OFFSET>,
            SetPlaceholderText: SetPlaceholderText::<Identity, OFFSET>,
            LightDismissOverlayMode: 0,
            SetLightDismissOverlayMode: 0,
            IsTextSearchEnabled: IsTextSearchEnabled::<Identity, OFFSET>,
            SetIsTextSearchEnabled: SetIsTextSearchEnabled::<Identity, OFFSET>,
            SelectionChangedTrigger: 0,
            SetSelectionChangedTrigger: 0,
            PlaceholderForeground: 0,
            SetPlaceholderForeground: 0,
            Text: Text::<Identity, OFFSET>,
            SetText: SetText::<Identity, OFFSET>,
            TextBoxStyle: 0,
            SetTextBoxStyle: 0,
            Description: Description::<Identity, OFFSET>,
            SetDescription: SetDescription::<Identity, OFFSET>,
            DropDownClosed: DropDownClosed::<Identity, OFFSET>,
            RemoveDropDownClosed: RemoveDropDownClosed::<Identity, OFFSET>,
            DropDownOpened: DropDownOpened::<Identity, OFFSET>,
            RemoveDropDownOpened: RemoveDropDownOpened::<Identity, OFFSET>,
            TextSubmitted: TextSubmitted::<Identity, OFFSET>,
            RemoveTextSubmitted: RemoveTextSubmitted::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsDropDownOpen:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsDropDownOpen:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsEditable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsEditable:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsSelectionBoxHighlighted:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub MaxDropDownHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetMaxDropDownHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub SelectionBoxItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    SelectionBoxItemTemplate: usize,
    TemplateSettings: usize,
    pub Header: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    HeaderTemplate: usize,
    SetHeaderTemplate: usize,
    pub PlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    LightDismissOverlayMode: usize,
    SetLightDismissOverlayMode: usize,
    pub IsTextSearchEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextSearchEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    SelectionChangedTrigger: usize,
    SetSelectionChangedTrigger: usize,
    PlaceholderForeground: usize,
    SetPlaceholderForeground: usize,
    pub Text: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    TextBoxStyle: usize,
    SetTextBoxStyle: usize,
    pub Description: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DropDownClosed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDropDownClosed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DropDownOpened: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDropDownOpened:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub TextSubmitted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    TextSubmitted: usize,
    pub RemoveTextSubmitted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IComboBoxFactory,
    IComboBoxFactory_Vtbl,
    0x71c1014b_acdf_5c03_b5ed_02871caaeb6b
);
impl windows_core::RuntimeType for IComboBoxFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IComboBoxFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IComboBoxFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ComboBox>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IComboBoxFactory_Vtbl {
    pub const fn new<Identity: IComboBoxFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IComboBoxFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBoxFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBoxFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IComboBoxItem,
    IComboBoxItem_Vtbl,
    0xdf65f6f4_863f_558d_bc4e_82c12f28062f
);
impl windows_core::RuntimeType for IComboBoxItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IComboBoxItem {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxItem";
}
pub trait IComboBoxItem_Impl: windows_core::IUnknownImpl {}
impl IComboBoxItem_Vtbl {
    pub const fn new<Identity: IComboBoxItem_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBoxItem, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxItem as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxItem_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IComboBoxItemFactory,
    IComboBoxItemFactory_Vtbl,
    0x8540b906_c96b_592d_88d7_0c23a3386d93
);
impl windows_core::RuntimeType for IComboBoxItemFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IComboBoxItemFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxItemFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IComboBoxItemFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ComboBoxItem>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IComboBoxItemFactory_Vtbl {
    pub const fn new<Identity: IComboBoxItemFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IComboBoxItemFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBoxItemFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBoxItemFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxItemFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxItemFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IComboBoxOverrides,
    IComboBoxOverrides_Vtbl,
    0xa6afbc7a_284f_5b9a_89fe_a334b613f895
);
impl windows_core::RuntimeType for IComboBoxOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IComboBoxOverrides {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxOverrides";
}
pub trait IComboBoxOverrides_Impl: windows_core::IUnknownImpl {
    fn OnDropDownClosed(
        &self,
        e: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn OnDropDownOpened(
        &self,
        e: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
}
impl IComboBoxOverrides_Vtbl {
    pub const fn new<Identity: IComboBoxOverrides_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OnDropDownClosed<
            Identity: IComboBoxOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBoxOverrides_Impl::OnDropDownClosed(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        unsafe extern "system" fn OnDropDownOpened<
            Identity: IComboBoxOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBoxOverrides_Impl::OnDropDownOpened(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBoxOverrides, OFFSET>(),
            OnDropDownClosed: OnDropDownClosed::<Identity, OFFSET>,
            OnDropDownOpened: OnDropDownOpened::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OnDropDownClosed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnDropDownOpened: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IComboBoxStatics,
    IComboBoxStatics_Vtbl,
    0x7da7cd09_e256_5238_9fed_02b2f3afba25
);
impl windows_core::RuntimeType for IComboBoxStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IComboBoxStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxStatics";
}
pub trait IComboBoxStatics_Impl: windows_core::IUnknownImpl {}
impl IComboBoxStatics_Vtbl {
    pub const fn new<Identity: IComboBoxStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComboBoxStatics, OFFSET>(),
            IsEditableProperty: 0,
            IsDropDownOpenProperty: 0,
            MaxDropDownHeightProperty: 0,
            HeaderProperty: 0,
            HeaderTemplateProperty: 0,
            PlaceholderTextProperty: 0,
            LightDismissOverlayModeProperty: 0,
            IsTextSearchEnabledProperty: 0,
            SelectionChangedTriggerProperty: 0,
            PlaceholderForegroundProperty: 0,
            TextProperty: 0,
            TextBoxStyleProperty: 0,
            DescriptionProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    IsEditableProperty: usize,
    IsDropDownOpenProperty: usize,
    MaxDropDownHeightProperty: usize,
    HeaderProperty: usize,
    HeaderTemplateProperty: usize,
    PlaceholderTextProperty: usize,
    LightDismissOverlayModeProperty: usize,
    IsTextSearchEnabledProperty: usize,
    SelectionChangedTriggerProperty: usize,
    PlaceholderForegroundProperty: usize,
    TextProperty: usize,
    TextBoxStyleProperty: usize,
    DescriptionProperty: usize,
}
windows_core::imp::define_interface!(
    IComboBoxTextSubmittedEventArgs,
    IComboBoxTextSubmittedEventArgs_Vtbl,
    0x0d7a9794_73b5_585e_bfbb_de6df7eb9fcf
);
impl windows_core::RuntimeType for IComboBoxTextSubmittedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IComboBoxTextSubmittedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IComboBoxTextSubmittedEventArgs";
}
pub trait IComboBoxTextSubmittedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Text(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl IComboBoxTextSubmittedEventArgs_Vtbl {
    pub const fn new<Identity: IComboBoxTextSubmittedEventArgs_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Text<
            Identity: IComboBoxTextSubmittedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBoxTextSubmittedEventArgs_Impl::Text(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Handled<
            Identity: IComboBoxTextSubmittedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IComboBoxTextSubmittedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: IComboBoxTextSubmittedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IComboBoxTextSubmittedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IComboBoxTextSubmittedEventArgs,
                OFFSET,
            >(),
            Text: Text::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComboBoxTextSubmittedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IComboBoxTextSubmittedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentControl,
    IContentControl_Vtbl,
    0x07e81761_11b2_52ae_8f8b_4d53d2b5900a
);
impl windows_core::RuntimeType for IContentControl {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IContentControl {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IContentControl";
}
#[cfg(feature = "UI_Composition")]
pub trait IContentControl_Impl: windows_core::IUnknownImpl {
    fn Content(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetContent(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement>;
}
#[cfg(feature = "UI_Composition")]
impl IContentControl_Vtbl {
    pub const fn new<Identity: IContentControl_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Content<Identity: IContentControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentControl_Impl::Content(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: IContentControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentControl_Impl::SetContent(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ContentTemplateRoot<
            Identity: IContentControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentControl_Impl::ContentTemplateRoot(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentControl, OFFSET>(),
            Content: Content::<Identity, OFFSET>,
            SetContent: SetContent::<Identity, OFFSET>,
            ContentTemplate: 0,
            SetContentTemplate: 0,
            ContentTemplateSelector: 0,
            SetContentTemplateSelector: 0,
            ContentTransitions: 0,
            SetContentTransitions: 0,
            ContentTemplateRoot: ContentTemplateRoot::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentControl as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControl_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    ContentTemplate: usize,
    SetContentTemplate: usize,
    ContentTemplateSelector: usize,
    SetContentTemplateSelector: usize,
    ContentTransitions: usize,
    SetContentTransitions: usize,
    #[cfg(feature = "UI_Composition")]
    pub ContentTemplateRoot: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    ContentTemplateRoot: usize,
}
windows_core::imp::define_interface!(
    IContentControlFactory,
    IContentControlFactory_Vtbl,
    0x3dea958e_5acd_5f80_8938_38634f51493a
);
impl windows_core::RuntimeType for IContentControlFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IContentControlFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IContentControlFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IContentControlFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ContentControl>;
}
#[cfg(feature = "UI_Composition")]
impl IContentControlFactory_Vtbl {
    pub const fn new<Identity: IContentControlFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IContentControlFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentControlFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentControlFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentControlFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IContentControlOverrides,
    IContentControlOverrides_Vtbl,
    0x2504174a_017e_5a2d_9c28_d97c66ae9937
);
impl windows_core::RuntimeType for IContentControlOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentControlOverrides {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IContentControlOverrides";
}
pub trait IContentControlOverrides_Impl: windows_core::IUnknownImpl {
    fn OnContentChanged(
        &self,
        oldContent: windows_core::Ref<windows_core::IInspectable>,
        newContent: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
}
impl IContentControlOverrides_Vtbl {
    pub const fn new<Identity: IContentControlOverrides_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OnContentChanged<
            Identity: IContentControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            oldcontent: *mut core::ffi::c_void,
            newcontent: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentControlOverrides_Impl::OnContentChanged(
                    this,
                    core::mem::transmute_copy(&oldcontent),
                    core::mem::transmute_copy(&newcontent),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentControlOverrides,
                OFFSET,
            >(),
            OnContentChanged: OnContentChanged::<Identity, OFFSET>,
            OnContentTemplateChanged: 0,
            OnContentTemplateSelectorChanged: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentControlOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OnContentChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    OnContentTemplateChanged: usize,
    OnContentTemplateSelectorChanged: usize,
}
windows_core::imp::define_interface!(
    IContentControlStatics,
    IContentControlStatics_Vtbl,
    0xf25484f4_2fed_5a0a_8864_7d6d4ac43ef8
);
impl windows_core::RuntimeType for IContentControlStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentControlStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IContentControlStatics";
}
pub trait IContentControlStatics_Impl: windows_core::IUnknownImpl {}
impl IContentControlStatics_Vtbl {
    pub const fn new<Identity: IContentControlStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentControlStatics, OFFSET>(
            ),
            ContentProperty: 0,
            ContentTemplateProperty: 0,
            ContentTemplateSelectorProperty: 0,
            ContentTransitionsProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentControlStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentControlStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    ContentProperty: usize,
    ContentTemplateProperty: usize,
    ContentTemplateSelectorProperty: usize,
    ContentTransitionsProperty: usize,
}
windows_core::imp::define_interface!(
    IControl,
    IControl_Vtbl,
    0x857d6e8a_d45a_5c69_a99c_bf6a5c54fb38
);
impl windows_core::RuntimeType for IControl {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IControl {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IControl";
}
pub trait IControl_Impl: windows_core::IUnknownImpl {
    fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsFocusEngaged(&self) -> windows_core::Result<bool>;
    fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()>;
    fn FontSize(&self) -> windows_core::Result<f64>;
    fn SetFontSize(&self, value: f64) -> windows_core::Result<()>;
    fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight>;
    fn SetFontWeight(&self, value: &windows::UI::Text::FontWeight) -> windows_core::Result<()>;
    fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle>;
    fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()>;
    fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch>;
    fn SetFontStretch(&self, value: windows::UI::Text::FontStretch) -> windows_core::Result<()>;
    fn CharacterSpacing(&self) -> windows_core::Result<i32>;
    fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()>;
    fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment>;
    fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()>;
    fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment>;
    fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()>;
    fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri>;
    fn SetDefaultStyleResourceUri(
        &self,
        value: windows_core::Ref<windows::Foundation::Uri>,
    ) -> windows_core::Result<()>;
    fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveFocusEngagement(&self) -> windows_core::Result<()>;
    fn ApplyTemplate(&self) -> windows_core::Result<bool>;
}
impl IControl_Vtbl {
    pub const fn new<Identity: IControl_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsFocusEngagementEnabled<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::IsFocusEngagementEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsFocusEngagementEnabled<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetIsFocusEngagementEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsFocusEngaged<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::IsFocusEngaged(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsFocusEngaged<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetIsFocusEngaged(this, value).into()
            }
        }
        unsafe extern "system" fn FontSize<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::FontSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontSize<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetFontSize(this, value).into()
            }
        }
        unsafe extern "system" fn FontWeight<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::FontWeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontWeight<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetFontWeight(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FontStyle<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::FontStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStyle<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetFontStyle(this, value).into()
            }
        }
        unsafe extern "system" fn FontStretch<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::FontStretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStretch<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetFontStretch(this, value).into()
            }
        }
        unsafe extern "system" fn CharacterSpacing<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::CharacterSpacing(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCharacterSpacing<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetCharacterSpacing(this, value).into()
            }
        }
        unsafe extern "system" fn IsTextScaleFactorEnabled<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::IsTextScaleFactorEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextScaleFactorEnabled<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetIsTextScaleFactorEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsEnabled<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsEnabled<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetIsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalContentAlignment<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::HorizontalAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::HorizontalContentAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalContentAlignment<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::HorizontalAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetHorizontalContentAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn VerticalContentAlignment<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::VerticalAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::VerticalContentAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalContentAlignment<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::VerticalAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetVerticalContentAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn DefaultStyleResourceUri<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::DefaultStyleResourceUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultStyleResourceUri<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::SetDefaultStyleResourceUri(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn RemoveFocusEngaged<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::RemoveFocusEngaged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveFocusDisengaged<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::RemoveFocusDisengaged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveIsEnabledChanged<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::RemoveIsEnabledChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveFocusEngagement<
            Identity: IControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControl_Impl::RemoveFocusEngagement(this).into()
            }
        }
        unsafe extern "system" fn ApplyTemplate<Identity: IControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControl_Impl::ApplyTemplate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IControl, OFFSET>(),
            IsFocusEngagementEnabled: IsFocusEngagementEnabled::<Identity, OFFSET>,
            SetIsFocusEngagementEnabled: SetIsFocusEngagementEnabled::<Identity, OFFSET>,
            IsFocusEngaged: IsFocusEngaged::<Identity, OFFSET>,
            SetIsFocusEngaged: SetIsFocusEngaged::<Identity, OFFSET>,
            RequiresPointer: 0,
            SetRequiresPointer: 0,
            FontSize: FontSize::<Identity, OFFSET>,
            SetFontSize: SetFontSize::<Identity, OFFSET>,
            FontFamily: 0,
            SetFontFamily: 0,
            FontWeight: FontWeight::<Identity, OFFSET>,
            SetFontWeight: SetFontWeight::<Identity, OFFSET>,
            FontStyle: FontStyle::<Identity, OFFSET>,
            SetFontStyle: SetFontStyle::<Identity, OFFSET>,
            FontStretch: FontStretch::<Identity, OFFSET>,
            SetFontStretch: SetFontStretch::<Identity, OFFSET>,
            CharacterSpacing: CharacterSpacing::<Identity, OFFSET>,
            SetCharacterSpacing: SetCharacterSpacing::<Identity, OFFSET>,
            Foreground: 0,
            SetForeground: 0,
            IsTextScaleFactorEnabled: IsTextScaleFactorEnabled::<Identity, OFFSET>,
            SetIsTextScaleFactorEnabled: SetIsTextScaleFactorEnabled::<Identity, OFFSET>,
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            SetIsEnabled: SetIsEnabled::<Identity, OFFSET>,
            TabNavigation: 0,
            SetTabNavigation: 0,
            Template: 0,
            SetTemplate: 0,
            Padding: 0,
            SetPadding: 0,
            HorizontalContentAlignment: HorizontalContentAlignment::<Identity, OFFSET>,
            SetHorizontalContentAlignment: SetHorizontalContentAlignment::<Identity, OFFSET>,
            VerticalContentAlignment: VerticalContentAlignment::<Identity, OFFSET>,
            SetVerticalContentAlignment: SetVerticalContentAlignment::<Identity, OFFSET>,
            Background: 0,
            SetBackground: 0,
            BackgroundSizing: 0,
            SetBackgroundSizing: 0,
            BorderThickness: 0,
            SetBorderThickness: 0,
            BorderBrush: 0,
            SetBorderBrush: 0,
            DefaultStyleResourceUri: DefaultStyleResourceUri::<Identity, OFFSET>,
            SetDefaultStyleResourceUri: SetDefaultStyleResourceUri::<Identity, OFFSET>,
            ElementSoundMode: 0,
            SetElementSoundMode: 0,
            CornerRadius: 0,
            SetCornerRadius: 0,
            FocusEngaged: 0,
            RemoveFocusEngaged: RemoveFocusEngaged::<Identity, OFFSET>,
            FocusDisengaged: 0,
            RemoveFocusDisengaged: RemoveFocusDisengaged::<Identity, OFFSET>,
            IsEnabledChanged: 0,
            RemoveIsEnabledChanged: RemoveIsEnabledChanged::<Identity, OFFSET>,
            RemoveFocusEngagement: RemoveFocusEngagement::<Identity, OFFSET>,
            ApplyTemplate: ApplyTemplate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IControl as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IControl_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsFocusEngagementEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsFocusEngagementEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsFocusEngaged:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsFocusEngaged:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    RequiresPointer: usize,
    SetRequiresPointer: usize,
    pub FontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    FontFamily: usize,
    SetFontFamily: usize,
    pub FontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub CharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetCharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    Foreground: usize,
    SetForeground: usize,
    pub IsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    TabNavigation: usize,
    SetTabNavigation: usize,
    Template: usize,
    SetTemplate: usize,
    Padding: usize,
    SetPadding: usize,
    pub HorizontalContentAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::HorizontalAlignment,
    ) -> windows_core::HRESULT,
    pub SetHorizontalContentAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::HorizontalAlignment,
    ) -> windows_core::HRESULT,
    pub VerticalContentAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::VerticalAlignment,
    ) -> windows_core::HRESULT,
    pub SetVerticalContentAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::VerticalAlignment,
    ) -> windows_core::HRESULT,
    Background: usize,
    SetBackground: usize,
    BackgroundSizing: usize,
    SetBackgroundSizing: usize,
    BorderThickness: usize,
    SetBorderThickness: usize,
    BorderBrush: usize,
    SetBorderBrush: usize,
    pub DefaultStyleResourceUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDefaultStyleResourceUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    ElementSoundMode: usize,
    SetElementSoundMode: usize,
    CornerRadius: usize,
    SetCornerRadius: usize,
    FocusEngaged: usize,
    pub RemoveFocusEngaged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    FocusDisengaged: usize,
    pub RemoveFocusDisengaged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    IsEnabledChanged: usize,
    pub RemoveIsEnabledChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub RemoveFocusEngagement:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub ApplyTemplate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IControlFactory,
    IControlFactory_Vtbl,
    0x25159233_9438_5534_aeb9_00eb059cf73f
);
impl windows_core::RuntimeType for IControlFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IControlFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IControlFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IControlFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Control>;
}
#[cfg(feature = "UI_Composition")]
impl IControlFactory_Vtbl {
    pub const fn new<Identity: IControlFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IControlFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControlFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IControlFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IControlFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IControlOverrides,
    IControlOverrides_Vtbl,
    0x5f644395_2177_5161_9f87_c6c749c73a03
);
impl windows_core::RuntimeType for IControlOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Input")]
impl windows_core::RuntimeName for IControlOverrides {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IControlOverrides";
}
#[cfg(feature = "UI_Xaml_Input")]
pub trait IControlOverrides_Impl: windows_core::IUnknownImpl {
    fn OnPointerEntered(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerPressed(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerMoved(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerReleased(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerExited(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerCaptureLost(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerCanceled(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnPointerWheelChanged(
        &self,
        e: windows_core::Ref<super::Input::PointerRoutedEventArgs>,
    ) -> windows_core::Result<()>;
    fn OnGotFocus(&self, e: windows_core::Ref<super::RoutedEventArgs>) -> windows_core::Result<()>;
    fn OnLostFocus(&self, e: windows_core::Ref<super::RoutedEventArgs>)
        -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Input")]
impl IControlOverrides_Vtbl {
    pub const fn new<Identity: IControlOverrides_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OnPointerEntered<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerEntered(this, core::mem::transmute_copy(&e)).into()
            }
        }
        unsafe extern "system" fn OnPointerPressed<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerPressed(this, core::mem::transmute_copy(&e)).into()
            }
        }
        unsafe extern "system" fn OnPointerMoved<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerMoved(this, core::mem::transmute_copy(&e)).into()
            }
        }
        unsafe extern "system" fn OnPointerReleased<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerReleased(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        unsafe extern "system" fn OnPointerExited<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerExited(this, core::mem::transmute_copy(&e)).into()
            }
        }
        unsafe extern "system" fn OnPointerCaptureLost<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerCaptureLost(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        unsafe extern "system" fn OnPointerCanceled<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerCanceled(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        unsafe extern "system" fn OnPointerWheelChanged<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnPointerWheelChanged(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        unsafe extern "system" fn OnGotFocus<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnGotFocus(this, core::mem::transmute_copy(&e)).into()
            }
        }
        unsafe extern "system" fn OnLostFocus<
            Identity: IControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlOverrides_Impl::OnLostFocus(this, core::mem::transmute_copy(&e)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IControlOverrides, OFFSET>(),
            OnPointerEntered: OnPointerEntered::<Identity, OFFSET>,
            OnPointerPressed: OnPointerPressed::<Identity, OFFSET>,
            OnPointerMoved: OnPointerMoved::<Identity, OFFSET>,
            OnPointerReleased: OnPointerReleased::<Identity, OFFSET>,
            OnPointerExited: OnPointerExited::<Identity, OFFSET>,
            OnPointerCaptureLost: OnPointerCaptureLost::<Identity, OFFSET>,
            OnPointerCanceled: OnPointerCanceled::<Identity, OFFSET>,
            OnPointerWheelChanged: OnPointerWheelChanged::<Identity, OFFSET>,
            OnTapped: 0,
            OnDoubleTapped: 0,
            OnHolding: 0,
            OnRightTapped: 0,
            OnManipulationStarting: 0,
            OnManipulationInertiaStarting: 0,
            OnManipulationStarted: 0,
            OnManipulationDelta: 0,
            OnManipulationCompleted: 0,
            OnKeyUp: 0,
            OnKeyDown: 0,
            OnPreviewKeyDown: 0,
            OnPreviewKeyUp: 0,
            OnGotFocus: OnGotFocus::<Identity, OFFSET>,
            OnLostFocus: OnLostFocus::<Identity, OFFSET>,
            OnCharacterReceived: 0,
            OnDragEnter: 0,
            OnDragLeave: 0,
            OnDragOver: 0,
            OnDrop: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IControlOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerEntered: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerEntered: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerPressed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerPressed: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerMoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerMoved: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerReleased: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerReleased: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerExited: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerExited: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerCaptureLost: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerCaptureLost: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerCanceled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerCanceled: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub OnPointerWheelChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    OnPointerWheelChanged: usize,
    OnTapped: usize,
    OnDoubleTapped: usize,
    OnHolding: usize,
    OnRightTapped: usize,
    OnManipulationStarting: usize,
    OnManipulationInertiaStarting: usize,
    OnManipulationStarted: usize,
    OnManipulationDelta: usize,
    OnManipulationCompleted: usize,
    OnKeyUp: usize,
    OnKeyDown: usize,
    OnPreviewKeyDown: usize,
    OnPreviewKeyUp: usize,
    pub OnGotFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnLostFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    OnCharacterReceived: usize,
    OnDragEnter: usize,
    OnDragLeave: usize,
    OnDragOver: usize,
    OnDrop: usize,
}
windows_core::imp::define_interface!(
    IControlProtected,
    IControlProtected_Vtbl,
    0x5c750339_1789_5095_a214_dd9d0564e579
);
impl windows_core::RuntimeType for IControlProtected {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IControlProtected {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IControlProtected";
}
pub trait IControlProtected_Impl: windows_core::IUnknownImpl {
    fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetDefaultStyleKey(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn GetTemplateChild(
        &self,
        childName: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject>;
}
impl IControlProtected_Vtbl {
    pub const fn new<Identity: IControlProtected_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DefaultStyleKey<
            Identity: IControlProtected_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControlProtected_Impl::DefaultStyleKey(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultStyleKey<
            Identity: IControlProtected_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlProtected_Impl::SetDefaultStyleKey(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn GetTemplateChild<
            Identity: IControlProtected_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            childname: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControlProtected_Impl::GetTemplateChild(
                    this,
                    core::mem::transmute(&childname),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IControlProtected, OFFSET>(),
            DefaultStyleKey: DefaultStyleKey::<Identity, OFFSET>,
            SetDefaultStyleKey: SetDefaultStyleKey::<Identity, OFFSET>,
            GetTemplateChild: GetTemplateChild::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IControlProtected as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlProtected_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DefaultStyleKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDefaultStyleKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetTemplateChild: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IControlStatics,
    IControlStatics_Vtbl,
    0xc3ae388d_aa36_5e10_acac_98415f47bcc7
);
impl windows_core::RuntimeType for IControlStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IControlStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IControlStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IControlStatics_Impl: windows_core::IUnknownImpl {
    fn GetIsTemplateFocusTarget(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
    ) -> windows_core::Result<bool>;
    fn SetIsTemplateFocusTarget(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn GetIsTemplateKeyTipTarget(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsTemplateKeyTipTarget(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IControlStatics_Vtbl {
    pub const fn new<Identity: IControlStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetIsTemplateFocusTarget<
            Identity: IControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControlStatics_Impl::GetIsTemplateFocusTarget(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTemplateFocusTarget<
            Identity: IControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlStatics_Impl::SetIsTemplateFocusTarget(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsTemplateKeyTipTarget<
            Identity: IControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IControlStatics_Impl::GetIsTemplateKeyTipTarget(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTemplateKeyTipTarget<
            Identity: IControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IControlStatics_Impl::SetIsTemplateKeyTipTarget(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IControlStatics, OFFSET>(),
            IsFocusEngagementEnabledProperty: 0,
            IsFocusEngagedProperty: 0,
            RequiresPointerProperty: 0,
            FontSizeProperty: 0,
            FontFamilyProperty: 0,
            FontWeightProperty: 0,
            FontStyleProperty: 0,
            FontStretchProperty: 0,
            CharacterSpacingProperty: 0,
            ForegroundProperty: 0,
            IsTextScaleFactorEnabledProperty: 0,
            IsEnabledProperty: 0,
            TabNavigationProperty: 0,
            TemplateProperty: 0,
            PaddingProperty: 0,
            HorizontalContentAlignmentProperty: 0,
            VerticalContentAlignmentProperty: 0,
            BackgroundProperty: 0,
            BackgroundSizingProperty: 0,
            BorderThicknessProperty: 0,
            BorderBrushProperty: 0,
            DefaultStyleKeyProperty: 0,
            DefaultStyleResourceUriProperty: 0,
            ElementSoundModeProperty: 0,
            CornerRadiusProperty: 0,
            IsTemplateFocusTargetProperty: 0,
            GetIsTemplateFocusTarget: GetIsTemplateFocusTarget::<Identity, OFFSET>,
            SetIsTemplateFocusTarget: SetIsTemplateFocusTarget::<Identity, OFFSET>,
            IsTemplateKeyTipTargetProperty: 0,
            GetIsTemplateKeyTipTarget: GetIsTemplateKeyTipTarget::<Identity, OFFSET>,
            SetIsTemplateKeyTipTarget: SetIsTemplateKeyTipTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IControlStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IControlStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    IsFocusEngagementEnabledProperty: usize,
    IsFocusEngagedProperty: usize,
    RequiresPointerProperty: usize,
    FontSizeProperty: usize,
    FontFamilyProperty: usize,
    FontWeightProperty: usize,
    FontStyleProperty: usize,
    FontStretchProperty: usize,
    CharacterSpacingProperty: usize,
    ForegroundProperty: usize,
    IsTextScaleFactorEnabledProperty: usize,
    IsEnabledProperty: usize,
    TabNavigationProperty: usize,
    TemplateProperty: usize,
    PaddingProperty: usize,
    HorizontalContentAlignmentProperty: usize,
    VerticalContentAlignmentProperty: usize,
    BackgroundProperty: usize,
    BackgroundSizingProperty: usize,
    BorderThicknessProperty: usize,
    BorderBrushProperty: usize,
    DefaultStyleKeyProperty: usize,
    DefaultStyleResourceUriProperty: usize,
    ElementSoundModeProperty: usize,
    CornerRadiusProperty: usize,
    IsTemplateFocusTargetProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetIsTemplateFocusTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetIsTemplateFocusTarget: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsTemplateFocusTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsTemplateFocusTarget: usize,
    IsTemplateKeyTipTargetProperty: usize,
    pub GetIsTemplateKeyTipTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsTemplateKeyTipTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(IGrid, IGrid_Vtbl, 0xc4496219_9014_58a1_b4ad_c5044913a5bb);
impl windows_core::RuntimeType for IGrid {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGrid {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IGrid";
}
pub trait IGrid_Impl: windows_core::IUnknownImpl {
    fn RowSpacing(&self) -> windows_core::Result<f64>;
    fn SetRowSpacing(&self, value: f64) -> windows_core::Result<()>;
    fn ColumnSpacing(&self) -> windows_core::Result<f64>;
    fn SetColumnSpacing(&self, value: f64) -> windows_core::Result<()>;
}
impl IGrid_Vtbl {
    pub const fn new<Identity: IGrid_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn RowSpacing<Identity: IGrid_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGrid_Impl::RowSpacing(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRowSpacing<Identity: IGrid_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGrid_Impl::SetRowSpacing(this, value).into()
            }
        }
        unsafe extern "system" fn ColumnSpacing<Identity: IGrid_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGrid_Impl::ColumnSpacing(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColumnSpacing<Identity: IGrid_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGrid_Impl::SetColumnSpacing(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGrid, OFFSET>(),
            RowDefinitions: 0,
            ColumnDefinitions: 0,
            BackgroundSizing: 0,
            SetBackgroundSizing: 0,
            BorderBrush: 0,
            SetBorderBrush: 0,
            BorderThickness: 0,
            SetBorderThickness: 0,
            CornerRadius: 0,
            SetCornerRadius: 0,
            Padding: 0,
            SetPadding: 0,
            RowSpacing: RowSpacing::<Identity, OFFSET>,
            SetRowSpacing: SetRowSpacing::<Identity, OFFSET>,
            ColumnSpacing: ColumnSpacing::<Identity, OFFSET>,
            SetColumnSpacing: SetColumnSpacing::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGrid as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrid_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    RowDefinitions: usize,
    ColumnDefinitions: usize,
    BackgroundSizing: usize,
    SetBackgroundSizing: usize,
    BorderBrush: usize,
    SetBorderBrush: usize,
    BorderThickness: usize,
    SetBorderThickness: usize,
    CornerRadius: usize,
    SetCornerRadius: usize,
    Padding: usize,
    SetPadding: usize,
    pub RowSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetRowSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ColumnSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetColumnSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGridFactory,
    IGridFactory_Vtbl,
    0xb16bf561_fc6c_57c6_8ebc_0b06ce4513aa
);
impl windows_core::RuntimeType for IGridFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IGridFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IGridFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IGridFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Grid>;
}
#[cfg(feature = "UI_Composition")]
impl IGridFactory_Vtbl {
    pub const fn new<Identity: IGridFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IGridFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGridFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IGridStatics,
    IGridStatics_Vtbl,
    0xef9cf81d_a431_50f4_abf5_3023fe447704
);
impl windows_core::RuntimeType for IGridStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IGridStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IGridStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IGridStatics_Impl: windows_core::IUnknownImpl {
    fn GetRow(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
    ) -> windows_core::Result<i32>;
    fn SetRow(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn GetColumn(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
    ) -> windows_core::Result<i32>;
    fn SetColumn(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn GetRowSpan(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
    ) -> windows_core::Result<i32>;
    fn SetRowSpan(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn GetColumnSpan(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
    ) -> windows_core::Result<i32>;
    fn SetColumnSpan(
        &self,
        element: windows_core::Ref<super::FrameworkElement>,
        value: i32,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IGridStatics_Vtbl {
    pub const fn new<Identity: IGridStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetRow<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridStatics_Impl::GetRow(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRow<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGridStatics_Impl::SetRow(this, core::mem::transmute_copy(&element), value).into()
            }
        }
        unsafe extern "system" fn GetColumn<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridStatics_Impl::GetColumn(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColumn<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGridStatics_Impl::SetColumn(this, core::mem::transmute_copy(&element), value)
                    .into()
            }
        }
        unsafe extern "system" fn GetRowSpan<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridStatics_Impl::GetRowSpan(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRowSpan<Identity: IGridStatics_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGridStatics_Impl::SetRowSpan(this, core::mem::transmute_copy(&element), value)
                    .into()
            }
        }
        unsafe extern "system" fn GetColumnSpan<
            Identity: IGridStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridStatics_Impl::GetColumnSpan(this, core::mem::transmute_copy(&element)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColumnSpan<
            Identity: IGridStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGridStatics_Impl::SetColumnSpan(this, core::mem::transmute_copy(&element), value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGridStatics, OFFSET>(),
            BackgroundSizingProperty: 0,
            BorderBrushProperty: 0,
            BorderThicknessProperty: 0,
            CornerRadiusProperty: 0,
            PaddingProperty: 0,
            RowSpacingProperty: 0,
            ColumnSpacingProperty: 0,
            RowProperty: 0,
            GetRow: GetRow::<Identity, OFFSET>,
            SetRow: SetRow::<Identity, OFFSET>,
            ColumnProperty: 0,
            GetColumn: GetColumn::<Identity, OFFSET>,
            SetColumn: SetColumn::<Identity, OFFSET>,
            RowSpanProperty: 0,
            GetRowSpan: GetRowSpan::<Identity, OFFSET>,
            SetRowSpan: SetRowSpan::<Identity, OFFSET>,
            ColumnSpanProperty: 0,
            GetColumnSpan: GetColumnSpan::<Identity, OFFSET>,
            SetColumnSpan: SetColumnSpan::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    BackgroundSizingProperty: usize,
    BorderBrushProperty: usize,
    BorderThicknessProperty: usize,
    CornerRadiusProperty: usize,
    PaddingProperty: usize,
    RowSpacingProperty: usize,
    ColumnSpacingProperty: usize,
    RowProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetRow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetRow: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetRow: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetRow: usize,
    ColumnProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetColumn: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetColumn: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetColumn: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetColumn: usize,
    RowSpanProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetRowSpan: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetRowSpan: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetRowSpan: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetRowSpan: usize,
    ColumnSpanProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetColumnSpan: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetColumnSpan: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetColumnSpan: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetColumnSpan: usize,
}
windows_core::imp::define_interface!(
    IItemContainerMapping,
    IItemContainerMapping_Vtbl,
    0xb3e03a32_ea83_5626_bfda_d327a1c7550c
);
impl windows_core::RuntimeType for IItemContainerMapping {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IItemContainerMapping,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IItemContainerMapping {
    pub fn ItemFromContainer<P0>(
        &self,
        container: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContainerFromItem<P0>(&self, item: P0) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromItem)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexFromContainer<P0>(&self, container: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ContainerFromIndex(&self, index: i32) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromIndex)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IItemContainerMapping {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IItemContainerMapping";
}
pub trait IItemContainerMapping_Impl: windows_core::IUnknownImpl {
    fn ItemFromContainer(
        &self,
        container: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn ContainerFromItem(
        &self,
        item: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<super::DependencyObject>;
    fn IndexFromContainer(
        &self,
        container: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn ContainerFromIndex(&self, index: i32) -> windows_core::Result<super::DependencyObject>;
}
impl IItemContainerMapping_Vtbl {
    pub const fn new<Identity: IItemContainerMapping_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ItemFromContainer<
            Identity: IItemContainerMapping_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            container: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemContainerMapping_Impl::ItemFromContainer(
                    this,
                    core::mem::transmute_copy(&container),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContainerFromItem<
            Identity: IItemContainerMapping_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemContainerMapping_Impl::ContainerFromItem(
                    this,
                    core::mem::transmute_copy(&item),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IndexFromContainer<
            Identity: IItemContainerMapping_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            container: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemContainerMapping_Impl::IndexFromContainer(
                    this,
                    core::mem::transmute_copy(&container),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContainerFromIndex<
            Identity: IItemContainerMapping_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemContainerMapping_Impl::ContainerFromIndex(this, index) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemContainerMapping, OFFSET>(
            ),
            ItemFromContainer: ItemFromContainer::<Identity, OFFSET>,
            ContainerFromItem: ContainerFromItem::<Identity, OFFSET>,
            IndexFromContainer: IndexFromContainer::<Identity, OFFSET>,
            ContainerFromIndex: ContainerFromIndex::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemContainerMapping as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemContainerMapping_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ItemFromContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContainerFromItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IndexFromContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub ContainerFromIndex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemsControl,
    IItemsControl_Vtbl,
    0xbf1ccb54_83e2_5b98_acbc_736f876c3d35
);
impl windows_core::RuntimeType for IItemsControl {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IItemsControl {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IItemsControl";
}
#[cfg(feature = "UI_Composition")]
pub trait IItemsControl_Impl: windows_core::IUnknownImpl {
    fn ItemsSource(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetItemsSource(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn Items(&self) -> windows_core::Result<ItemCollection>;
    fn DisplayMemberPath(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetDisplayMemberPath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ItemsPanelRoot(&self) -> windows_core::Result<Panel>;
    fn IsGrouping(&self) -> windows_core::Result<bool>;
    fn GroupHeaderContainerFromItemContainer(
        &self,
        itemContainer: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<super::DependencyObject>;
}
#[cfg(feature = "UI_Composition")]
impl IItemsControl_Vtbl {
    pub const fn new<Identity: IItemsControl_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ItemsSource<Identity: IItemsControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::ItemsSource(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetItemsSource<
            Identity: IItemsControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsControl_Impl::SetItemsSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Items<Identity: IItemsControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::Items(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DisplayMemberPath<
            Identity: IItemsControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::DisplayMemberPath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDisplayMemberPath<
            Identity: IItemsControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsControl_Impl::SetDisplayMemberPath(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ItemsPanelRoot<
            Identity: IItemsControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::ItemsPanelRoot(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsGrouping<Identity: IItemsControl_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::IsGrouping(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GroupHeaderContainerFromItemContainer<
            Identity: IItemsControl_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemcontainer: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControl_Impl::GroupHeaderContainerFromItemContainer(
                    this,
                    core::mem::transmute_copy(&itemcontainer),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemsControl, OFFSET>(),
            ItemsSource: ItemsSource::<Identity, OFFSET>,
            SetItemsSource: SetItemsSource::<Identity, OFFSET>,
            Items: Items::<Identity, OFFSET>,
            ItemTemplate: 0,
            SetItemTemplate: 0,
            ItemTemplateSelector: 0,
            SetItemTemplateSelector: 0,
            ItemsPanel: 0,
            SetItemsPanel: 0,
            DisplayMemberPath: DisplayMemberPath::<Identity, OFFSET>,
            SetDisplayMemberPath: SetDisplayMemberPath::<Identity, OFFSET>,
            ItemsPanelRoot: ItemsPanelRoot::<Identity, OFFSET>,
            ItemContainerStyle: 0,
            SetItemContainerStyle: 0,
            ItemContainerStyleSelector: 0,
            SetItemContainerStyleSelector: 0,
            ItemContainerGenerator: 0,
            ItemContainerTransitions: 0,
            SetItemContainerTransitions: 0,
            GroupStyle: 0,
            GroupStyleSelector: 0,
            SetGroupStyleSelector: 0,
            IsGrouping: IsGrouping::<Identity, OFFSET>,
            GroupHeaderContainerFromItemContainer: GroupHeaderContainerFromItemContainer::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemsControl as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControl_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ItemsSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetItemsSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Items: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    ItemTemplate: usize,
    SetItemTemplate: usize,
    ItemTemplateSelector: usize,
    SetItemTemplateSelector: usize,
    ItemsPanel: usize,
    SetItemsPanel: usize,
    pub DisplayMemberPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDisplayMemberPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub ItemsPanelRoot: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    ItemsPanelRoot: usize,
    ItemContainerStyle: usize,
    SetItemContainerStyle: usize,
    ItemContainerStyleSelector: usize,
    SetItemContainerStyleSelector: usize,
    ItemContainerGenerator: usize,
    ItemContainerTransitions: usize,
    SetItemContainerTransitions: usize,
    GroupStyle: usize,
    GroupStyleSelector: usize,
    SetGroupStyleSelector: usize,
    pub IsGrouping:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub GroupHeaderContainerFromItemContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemsControlFactory,
    IItemsControlFactory_Vtbl,
    0xb2686273_2dd3_5454_9f25_247e66270336
);
impl windows_core::RuntimeType for IItemsControlFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IItemsControlFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IItemsControlFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IItemsControlFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ItemsControl>;
}
#[cfg(feature = "UI_Composition")]
impl IItemsControlFactory_Vtbl {
    pub const fn new<Identity: IItemsControlFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IItemsControlFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControlFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemsControlFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemsControlFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IItemsControlOverrides,
    IItemsControlOverrides_Vtbl,
    0x285c215f_64b2_5f7d_88d2_56c6658f73ee
);
impl windows_core::RuntimeType for IItemsControlOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IItemsControlOverrides {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IItemsControlOverrides";
}
pub trait IItemsControlOverrides_Impl: windows_core::IUnknownImpl {
    fn IsItemItsOwnContainerOverride(
        &self,
        item: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<bool>;
    fn GetContainerForItemOverride(&self) -> windows_core::Result<super::DependencyObject>;
    fn ClearContainerForItemOverride(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        item: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn PrepareContainerForItemOverride(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        item: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn OnItemsChanged(
        &self,
        e: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
}
impl IItemsControlOverrides_Vtbl {
    pub const fn new<Identity: IItemsControlOverrides_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsItemItsOwnContainerOverride<
            Identity: IItemsControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControlOverrides_Impl::IsItemItsOwnContainerOverride(
                    this,
                    core::mem::transmute_copy(&item),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetContainerForItemOverride<
            Identity: IItemsControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControlOverrides_Impl::GetContainerForItemOverride(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClearContainerForItemOverride<
            Identity: IItemsControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsControlOverrides_Impl::ClearContainerForItemOverride(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&item),
                )
                .into()
            }
        }
        unsafe extern "system" fn PrepareContainerForItemOverride<
            Identity: IItemsControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsControlOverrides_Impl::PrepareContainerForItemOverride(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&item),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnItemsChanged<
            Identity: IItemsControlOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            e: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsControlOverrides_Impl::OnItemsChanged(this, core::mem::transmute_copy(&e))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemsControlOverrides, OFFSET>(
            ),
            IsItemItsOwnContainerOverride: IsItemItsOwnContainerOverride::<Identity, OFFSET>,
            GetContainerForItemOverride: GetContainerForItemOverride::<Identity, OFFSET>,
            ClearContainerForItemOverride: ClearContainerForItemOverride::<Identity, OFFSET>,
            PrepareContainerForItemOverride: PrepareContainerForItemOverride::<Identity, OFFSET>,
            OnItemsChanged: OnItemsChanged::<Identity, OFFSET>,
            OnItemContainerStyleChanged: 0,
            OnItemContainerStyleSelectorChanged: 0,
            OnItemTemplateChanged: 0,
            OnItemTemplateSelectorChanged: 0,
            OnGroupStyleSelectorChanged: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemsControlOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsItemItsOwnContainerOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub GetContainerForItemOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClearContainerForItemOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PrepareContainerForItemOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnItemsChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    OnItemContainerStyleChanged: usize,
    OnItemContainerStyleSelectorChanged: usize,
    OnItemTemplateChanged: usize,
    OnItemTemplateSelectorChanged: usize,
    OnGroupStyleSelectorChanged: usize,
}
windows_core::imp::define_interface!(
    IItemsControlStatics,
    IItemsControlStatics_Vtbl,
    0x4fb961e1_5f91_5585_a692_6825cde3ed1e
);
impl windows_core::RuntimeType for IItemsControlStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IItemsControlStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IItemsControlStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IItemsControlStatics_Impl: windows_core::IUnknownImpl {
    fn GetItemsOwner(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<ItemsControl>;
    fn ItemsControlFromItemContainer(
        &self,
        container: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<ItemsControl>;
}
#[cfg(feature = "UI_Composition")]
impl IItemsControlStatics_Vtbl {
    pub const fn new<Identity: IItemsControlStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetItemsOwner<
            Identity: IItemsControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControlStatics_Impl::GetItemsOwner(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ItemsControlFromItemContainer<
            Identity: IItemsControlStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            container: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemsControlStatics_Impl::ItemsControlFromItemContainer(
                    this,
                    core::mem::transmute_copy(&container),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemsControlStatics, OFFSET>(
            ),
            ItemsSourceProperty: 0,
            ItemTemplateProperty: 0,
            ItemTemplateSelectorProperty: 0,
            ItemsPanelProperty: 0,
            DisplayMemberPathProperty: 0,
            ItemContainerStyleProperty: 0,
            ItemContainerStyleSelectorProperty: 0,
            ItemContainerTransitionsProperty: 0,
            GroupStyleSelectorProperty: 0,
            IsGroupingProperty: 0,
            GetItemsOwner: GetItemsOwner::<Identity, OFFSET>,
            ItemsControlFromItemContainer: ItemsControlFromItemContainer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemsControlStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsControlStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    ItemsSourceProperty: usize,
    ItemTemplateProperty: usize,
    ItemTemplateSelectorProperty: usize,
    ItemsPanelProperty: usize,
    DisplayMemberPathProperty: usize,
    ItemContainerStyleProperty: usize,
    ItemContainerStyleSelectorProperty: usize,
    ItemContainerTransitionsProperty: usize,
    GroupStyleSelectorProperty: usize,
    IsGroupingProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetItemsOwner: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetItemsOwner: usize,
    #[cfg(feature = "UI_Composition")]
    pub ItemsControlFromItemContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    ItemsControlFromItemContainer: usize,
}
windows_core::imp::define_interface!(
    IListBox,
    IListBox_Vtbl,
    0xf3e7dedf_7a3c_59f1_9e05_ae5026b54293
);
impl windows_core::RuntimeType for IListBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IListBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IListBox";
}
pub trait IListBox_Impl: windows_core::IUnknownImpl {
    fn SelectedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>>;
    fn SelectionMode(&self) -> windows_core::Result<SelectionMode>;
    fn SetSelectionMode(&self, value: SelectionMode) -> windows_core::Result<()>;
    fn SingleSelectionFollowsFocus(&self) -> windows_core::Result<bool>;
    fn SetSingleSelectionFollowsFocus(&self, value: bool) -> windows_core::Result<()>;
    fn ScrollIntoView(
        &self,
        item: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn SelectAll(&self) -> windows_core::Result<()>;
}
impl IListBox_Vtbl {
    pub const fn new<Identity: IListBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SelectedItems<Identity: IListBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IListBox_Impl::SelectedItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectionMode<Identity: IListBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut SelectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IListBox_Impl::SelectionMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectionMode<Identity: IListBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: SelectionMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IListBox_Impl::SetSelectionMode(this, value).into()
            }
        }
        unsafe extern "system" fn SingleSelectionFollowsFocus<
            Identity: IListBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IListBox_Impl::SingleSelectionFollowsFocus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSingleSelectionFollowsFocus<
            Identity: IListBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IListBox_Impl::SetSingleSelectionFollowsFocus(this, value).into()
            }
        }
        unsafe extern "system" fn ScrollIntoView<Identity: IListBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IListBox_Impl::ScrollIntoView(this, core::mem::transmute_copy(&item)).into()
            }
        }
        unsafe extern "system" fn SelectAll<Identity: IListBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IListBox_Impl::SelectAll(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IListBox, OFFSET>(),
            SelectedItems: SelectedItems::<Identity, OFFSET>,
            SelectionMode: SelectionMode::<Identity, OFFSET>,
            SetSelectionMode: SetSelectionMode::<Identity, OFFSET>,
            SingleSelectionFollowsFocus: SingleSelectionFollowsFocus::<Identity, OFFSET>,
            SetSingleSelectionFollowsFocus: SetSingleSelectionFollowsFocus::<Identity, OFFSET>,
            ScrollIntoView: ScrollIntoView::<Identity, OFFSET>,
            SelectAll: SelectAll::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IListBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SelectedItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectionMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SelectionMode,
    ) -> windows_core::HRESULT,
    pub SetSelectionMode:
        unsafe extern "system" fn(*mut core::ffi::c_void, SelectionMode) -> windows_core::HRESULT,
    pub SingleSelectionFollowsFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetSingleSelectionFollowsFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ScrollIntoView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IListBoxFactory,
    IListBoxFactory_Vtbl,
    0xd048e0bc_4692_5c60_b2e9_07c4433ce050
);
impl windows_core::RuntimeType for IListBoxFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IListBoxFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IListBoxFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IListBoxFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ListBox>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IListBoxFactory_Vtbl {
    pub const fn new<Identity: IListBoxFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IListBoxFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IListBoxFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IListBoxFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IListBoxFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IListBoxItem,
    IListBoxItem_Vtbl,
    0xcc67fb35_04f1_5ead_96c5_b2ea67b225c6
);
impl windows_core::RuntimeType for IListBoxItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IListBoxItem {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IListBoxItem";
}
pub trait IListBoxItem_Impl: windows_core::IUnknownImpl {}
impl IListBoxItem_Vtbl {
    pub const fn new<Identity: IListBoxItem_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IListBoxItem, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IListBoxItem as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxItem_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IListBoxItemFactory,
    IListBoxItemFactory_Vtbl,
    0x8e9e0e6d_4597_5efa_94bc_7ffadc264c28
);
impl windows_core::RuntimeType for IListBoxItemFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IListBoxItemFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IListBoxItemFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IListBoxItemFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ListBoxItem>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IListBoxItemFactory_Vtbl {
    pub const fn new<Identity: IListBoxItemFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IListBoxItemFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IListBoxItemFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IListBoxItemFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IListBoxItemFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxItemFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IListBoxStatics,
    IListBoxStatics_Vtbl,
    0x763a4986_db3a_5a94_8505_aee2f229af85
);
impl windows_core::RuntimeType for IListBoxStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IListBoxStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IListBoxStatics";
}
pub trait IListBoxStatics_Impl: windows_core::IUnknownImpl {}
impl IListBoxStatics_Vtbl {
    pub const fn new<Identity: IListBoxStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IListBoxStatics, OFFSET>(),
            SelectionModeProperty: 0,
            SingleSelectionFollowsFocusProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IListBoxStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IListBoxStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    SelectionModeProperty: usize,
    SingleSelectionFollowsFocusProperty: usize,
}
windows_core::imp::define_interface!(
    IMediaPlayerElement,
    IMediaPlayerElement_Vtbl,
    0xc314a38c_780c_558a_98cd_0a8deb467fcf
);
impl windows_core::RuntimeType for IMediaPlayerElement {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media")]
impl windows_core::RuntimeName for IMediaPlayerElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IMediaPlayerElement";
}
#[cfg(feature = "UI_Xaml_Media")]
pub trait IMediaPlayerElement_Impl: windows_core::IUnknownImpl {
    fn Source(&self) -> windows_core::Result<windows::Media::Playback::IMediaPlaybackSource>;
    fn SetSource(
        &self,
        value: windows_core::Ref<windows::Media::Playback::IMediaPlaybackSource>,
    ) -> windows_core::Result<()>;
    fn AreTransportControlsEnabled(&self) -> windows_core::Result<bool>;
    fn SetAreTransportControlsEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn Stretch(&self) -> windows_core::Result<super::Media::Stretch>;
    fn SetStretch(&self, value: super::Media::Stretch) -> windows_core::Result<()>;
    fn AutoPlay(&self) -> windows_core::Result<bool>;
    fn SetAutoPlay(&self, value: bool) -> windows_core::Result<()>;
    fn IsFullWindow(&self) -> windows_core::Result<bool>;
    fn SetIsFullWindow(&self, value: bool) -> windows_core::Result<()>;
    fn MediaPlayer(&self) -> windows_core::Result<windows::Media::Playback::MediaPlayer>;
    fn SetMediaPlayer(
        &self,
        mediaPlayer: windows_core::Ref<windows::Media::Playback::MediaPlayer>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Media")]
impl IMediaPlayerElement_Vtbl {
    pub const fn new<Identity: IMediaPlayerElement_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Source<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn AreTransportControlsEnabled<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::AreTransportControlsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAreTransportControlsEnabled<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetAreTransportControlsEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn Stretch<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Media::Stretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::Stretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStretch<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Media::Stretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetStretch(this, value).into()
            }
        }
        unsafe extern "system" fn AutoPlay<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::AutoPlay(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutoPlay<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetAutoPlay(this, value).into()
            }
        }
        unsafe extern "system" fn IsFullWindow<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::IsFullWindow(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsFullWindow<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetIsFullWindow(this, value).into()
            }
        }
        unsafe extern "system" fn MediaPlayer<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElement_Impl::MediaPlayer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMediaPlayer<
            Identity: IMediaPlayerElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            mediaplayer: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMediaPlayerElement_Impl::SetMediaPlayer(
                    this,
                    core::mem::transmute_copy(&mediaplayer),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IMediaPlayerElement, OFFSET>(),
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
            TransportControls: 0,
            SetTransportControls: 0,
            AreTransportControlsEnabled: AreTransportControlsEnabled::<Identity, OFFSET>,
            SetAreTransportControlsEnabled: SetAreTransportControlsEnabled::<Identity, OFFSET>,
            PosterSource: 0,
            SetPosterSource: 0,
            Stretch: Stretch::<Identity, OFFSET>,
            SetStretch: SetStretch::<Identity, OFFSET>,
            AutoPlay: AutoPlay::<Identity, OFFSET>,
            SetAutoPlay: SetAutoPlay::<Identity, OFFSET>,
            IsFullWindow: IsFullWindow::<Identity, OFFSET>,
            SetIsFullWindow: SetIsFullWindow::<Identity, OFFSET>,
            MediaPlayer: MediaPlayer::<Identity, OFFSET>,
            SetMediaPlayer: SetMediaPlayer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMediaPlayerElement as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElement_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    TransportControls: usize,
    SetTransportControls: usize,
    pub AreTransportControlsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAreTransportControlsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    PosterSource: usize,
    SetPosterSource: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Stretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Media::Stretch,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Stretch: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Media::Stretch,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStretch: usize,
    pub AutoPlay:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAutoPlay:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsFullWindow:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsFullWindow:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub MediaPlayer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetMediaPlayer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IMediaPlayerElementFactory,
    IMediaPlayerElementFactory_Vtbl,
    0x51aca342_65a0_5db6_8082_bd54a8d14999
);
impl windows_core::RuntimeType for IMediaPlayerElementFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IMediaPlayerElementFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IMediaPlayerElementFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IMediaPlayerElementFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<MediaPlayerElement>;
}
#[cfg(feature = "UI_Composition")]
impl IMediaPlayerElementFactory_Vtbl {
    pub const fn new<Identity: IMediaPlayerElementFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IMediaPlayerElementFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMediaPlayerElementFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IMediaPlayerElementFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMediaPlayerElementFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElementFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IMediaPlayerElementStatics,
    IMediaPlayerElementStatics_Vtbl,
    0x6f77bba8_fb23_5e27_97c1_16d437d0702f
);
impl windows_core::RuntimeType for IMediaPlayerElementStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IMediaPlayerElementStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IMediaPlayerElementStatics";
}
pub trait IMediaPlayerElementStatics_Impl: windows_core::IUnknownImpl {}
impl IMediaPlayerElementStatics_Vtbl {
    pub const fn new<Identity: IMediaPlayerElementStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IMediaPlayerElementStatics,
                OFFSET,
            >(),
            SourceProperty: 0,
            AreTransportControlsEnabledProperty: 0,
            PosterSourceProperty: 0,
            StretchProperty: 0,
            AutoPlayProperty: 0,
            IsFullWindowProperty: 0,
            MediaPlayerProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMediaPlayerElementStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaPlayerElementStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    SourceProperty: usize,
    AreTransportControlsEnabledProperty: usize,
    PosterSourceProperty: usize,
    StretchProperty: usize,
    AutoPlayProperty: usize,
    IsFullWindowProperty: usize,
    MediaPlayerProperty: usize,
}
windows_core::imp::define_interface!(IPanel, IPanel_Vtbl, 0x27a1b418_56f3_525e_b883_cefed905eed3);
impl windows_core::RuntimeType for IPanel {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IPanel {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IPanel";
}
#[cfg(feature = "UI_Composition")]
pub trait IPanel_Impl: windows_core::IUnknownImpl {
    fn Children(&self) -> windows_core::Result<UIElementCollection>;
    fn IsItemsHost(&self) -> windows_core::Result<bool>;
}
#[cfg(feature = "UI_Composition")]
impl IPanel_Vtbl {
    pub const fn new<Identity: IPanel_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Children<Identity: IPanel_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPanel_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsItemsHost<Identity: IPanel_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPanel_Impl::IsItemsHost(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPanel, OFFSET>(),
            Children: Children::<Identity, OFFSET>,
            Background: 0,
            SetBackground: 0,
            IsItemsHost: IsItemsHost::<Identity, OFFSET>,
            ChildrenTransitions: 0,
            SetChildrenTransitions: 0,
            BackgroundTransition: 0,
            SetBackgroundTransition: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPanel as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanel_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Children: usize,
    Background: usize,
    SetBackground: usize,
    pub IsItemsHost:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    ChildrenTransitions: usize,
    SetChildrenTransitions: usize,
    BackgroundTransition: usize,
    SetBackgroundTransition: usize,
}
windows_core::imp::define_interface!(
    IPanelFactory,
    IPanelFactory_Vtbl,
    0xf5e7e21c_4c97_5d20_bee6_3e4fc6ab14e9
);
impl windows_core::RuntimeType for IPanelFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IPanelFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IPanelFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IPanelFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Panel>;
}
#[cfg(feature = "UI_Composition")]
impl IPanelFactory_Vtbl {
    pub const fn new<Identity: IPanelFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IPanelFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPanelFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPanelFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPanelFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanelFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IPanelStatics,
    IPanelStatics_Vtbl,
    0x76a9caa7_a5d4_5061_a325_17c76f66de51
);
impl windows_core::RuntimeType for IPanelStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPanelStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IPanelStatics";
}
pub trait IPanelStatics_Impl: windows_core::IUnknownImpl {}
impl IPanelStatics_Vtbl {
    pub const fn new<Identity: IPanelStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPanelStatics, OFFSET>(),
            BackgroundProperty: 0,
            IsItemsHostProperty: 0,
            ChildrenTransitionsProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPanelStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPanelStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    BackgroundProperty: usize,
    IsItemsHostProperty: usize,
    ChildrenTransitionsProperty: usize,
}
windows_core::imp::define_interface!(
    IPasswordBox,
    IPasswordBox_Vtbl,
    0x6d3ccff7_aaee_5adc_8298_33300fa119da
);
impl windows_core::RuntimeType for IPasswordBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPasswordBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IPasswordBox";
}
pub trait IPasswordBox_Impl: windows_core::IUnknownImpl {
    fn Password(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPassword(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn PasswordChar(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPasswordChar(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn IsPasswordRevealButtonEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsPasswordRevealButtonEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn MaxLength(&self) -> windows_core::Result<i32>;
    fn SetMaxLength(&self, value: i32) -> windows_core::Result<()>;
    fn Header(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetHeader(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn PreventKeyboardDisplayOnProgrammaticFocus(&self) -> windows_core::Result<bool>;
    fn SetPreventKeyboardDisplayOnProgrammaticFocus(&self, value: bool)
        -> windows_core::Result<()>;
    fn CanPasteClipboardContent(&self) -> windows_core::Result<bool>;
    fn Description(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetDescription(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn PasswordChanged(
        &self,
        handler: windows_core::Ref<super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemovePasswordChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()>;
    fn RemovePaste(&self, token: i64) -> windows_core::Result<()>;
    fn RemovePasswordChanging(&self, token: i64) -> windows_core::Result<()>;
    fn SelectAll(&self) -> windows_core::Result<()>;
    fn PasteFromClipboard(&self) -> windows_core::Result<()>;
}
impl IPasswordBox_Vtbl {
    pub const fn new<Identity: IPasswordBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Password<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::Password(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPassword<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetPassword(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn PasswordChar<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::PasswordChar(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPasswordChar<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetPasswordChar(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn IsPasswordRevealButtonEnabled<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::IsPasswordRevealButtonEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPasswordRevealButtonEnabled<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetIsPasswordRevealButtonEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn MaxLength<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::MaxLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxLength<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetMaxLength(this, value).into()
            }
        }
        unsafe extern "system" fn Header<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::Header(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeader<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn PlaceholderText<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::PlaceholderText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlaceholderText<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetPlaceholderText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn PreventKeyboardDisplayOnProgrammaticFocus<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::PreventKeyboardDisplayOnProgrammaticFocus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPreventKeyboardDisplayOnProgrammaticFocus<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetPreventKeyboardDisplayOnProgrammaticFocus(this, value).into()
            }
        }
        unsafe extern "system" fn CanPasteClipboardContent<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::CanPasteClipboardContent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Description<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::Description(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDescription<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SetDescription(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn PasswordChanged<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPasswordBox_Impl::PasswordChanged(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovePasswordChanged<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::RemovePasswordChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveContextMenuOpening<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::RemoveContextMenuOpening(this, token).into()
            }
        }
        unsafe extern "system" fn RemovePaste<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::RemovePaste(this, token).into()
            }
        }
        unsafe extern "system" fn RemovePasswordChanging<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::RemovePasswordChanging(this, token).into()
            }
        }
        unsafe extern "system" fn SelectAll<Identity: IPasswordBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::SelectAll(this).into()
            }
        }
        unsafe extern "system" fn PasteFromClipboard<
            Identity: IPasswordBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPasswordBox_Impl::PasteFromClipboard(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPasswordBox, OFFSET>(),
            Password: Password::<Identity, OFFSET>,
            SetPassword: SetPassword::<Identity, OFFSET>,
            PasswordChar: PasswordChar::<Identity, OFFSET>,
            SetPasswordChar: SetPasswordChar::<Identity, OFFSET>,
            IsPasswordRevealButtonEnabled: IsPasswordRevealButtonEnabled::<Identity, OFFSET>,
            SetIsPasswordRevealButtonEnabled: SetIsPasswordRevealButtonEnabled::<Identity, OFFSET>,
            MaxLength: MaxLength::<Identity, OFFSET>,
            SetMaxLength: SetMaxLength::<Identity, OFFSET>,
            Header: Header::<Identity, OFFSET>,
            SetHeader: SetHeader::<Identity, OFFSET>,
            HeaderTemplate: 0,
            SetHeaderTemplate: 0,
            PlaceholderText: PlaceholderText::<Identity, OFFSET>,
            SetPlaceholderText: SetPlaceholderText::<Identity, OFFSET>,
            SelectionHighlightColor: 0,
            SetSelectionHighlightColor: 0,
            PreventKeyboardDisplayOnProgrammaticFocus: PreventKeyboardDisplayOnProgrammaticFocus::<
                Identity,
                OFFSET,
            >,
            SetPreventKeyboardDisplayOnProgrammaticFocus:
                SetPreventKeyboardDisplayOnProgrammaticFocus::<Identity, OFFSET>,
            PasswordRevealMode: 0,
            SetPasswordRevealMode: 0,
            TextReadingOrder: 0,
            SetTextReadingOrder: 0,
            InputScope: 0,
            SetInputScope: 0,
            CanPasteClipboardContent: CanPasteClipboardContent::<Identity, OFFSET>,
            SelectionFlyout: 0,
            SetSelectionFlyout: 0,
            Description: Description::<Identity, OFFSET>,
            SetDescription: SetDescription::<Identity, OFFSET>,
            PasswordChanged: PasswordChanged::<Identity, OFFSET>,
            RemovePasswordChanged: RemovePasswordChanged::<Identity, OFFSET>,
            ContextMenuOpening: 0,
            RemoveContextMenuOpening: RemoveContextMenuOpening::<Identity, OFFSET>,
            Paste: 0,
            RemovePaste: RemovePaste::<Identity, OFFSET>,
            PasswordChanging: 0,
            RemovePasswordChanging: RemovePasswordChanging::<Identity, OFFSET>,
            SelectAll: SelectAll::<Identity, OFFSET>,
            PasteFromClipboard: PasteFromClipboard::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPasswordBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Password: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPassword: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PasswordChar: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPasswordChar: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsPasswordRevealButtonEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsPasswordRevealButtonEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub MaxLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetMaxLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Header: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    HeaderTemplate: usize,
    SetHeaderTemplate: usize,
    pub PlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    SelectionHighlightColor: usize,
    SetSelectionHighlightColor: usize,
    pub PreventKeyboardDisplayOnProgrammaticFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetPreventKeyboardDisplayOnProgrammaticFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    PasswordRevealMode: usize,
    SetPasswordRevealMode: usize,
    TextReadingOrder: usize,
    SetTextReadingOrder: usize,
    InputScope: usize,
    SetInputScope: usize,
    pub CanPasteClipboardContent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    SelectionFlyout: usize,
    SetSelectionFlyout: usize,
    pub Description: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PasswordChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemovePasswordChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    ContextMenuOpening: usize,
    pub RemoveContextMenuOpening:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    Paste: usize,
    pub RemovePaste:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    PasswordChanging: usize,
    pub RemovePasswordChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub PasteFromClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPasswordBoxStatics,
    IPasswordBoxStatics_Vtbl,
    0x90e6559c_5f74_5cd1_87b6_c0514085ab42
);
impl windows_core::RuntimeType for IPasswordBoxStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPasswordBoxStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IPasswordBoxStatics";
}
pub trait IPasswordBoxStatics_Impl: windows_core::IUnknownImpl {}
impl IPasswordBoxStatics_Vtbl {
    pub const fn new<Identity: IPasswordBoxStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPasswordBoxStatics, OFFSET>(),
            PasswordProperty: 0,
            PasswordCharProperty: 0,
            IsPasswordRevealButtonEnabledProperty: 0,
            MaxLengthProperty: 0,
            HeaderProperty: 0,
            HeaderTemplateProperty: 0,
            PlaceholderTextProperty: 0,
            SelectionHighlightColorProperty: 0,
            PreventKeyboardDisplayOnProgrammaticFocusProperty: 0,
            PasswordRevealModeProperty: 0,
            TextReadingOrderProperty: 0,
            InputScopeProperty: 0,
            CanPasteClipboardContentProperty: 0,
            SelectionFlyoutProperty: 0,
            DescriptionProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPasswordBoxStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPasswordBoxStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    PasswordProperty: usize,
    PasswordCharProperty: usize,
    IsPasswordRevealButtonEnabledProperty: usize,
    MaxLengthProperty: usize,
    HeaderProperty: usize,
    HeaderTemplateProperty: usize,
    PlaceholderTextProperty: usize,
    SelectionHighlightColorProperty: usize,
    PreventKeyboardDisplayOnProgrammaticFocusProperty: usize,
    PasswordRevealModeProperty: usize,
    TextReadingOrderProperty: usize,
    InputScopeProperty: usize,
    CanPasteClipboardContentProperty: usize,
    SelectionFlyoutProperty: usize,
    DescriptionProperty: usize,
}
windows_core::imp::define_interface!(
    IProgressBar,
    IProgressBar_Vtbl,
    0x87555c8c_0aaf_52c1_8390_0db17f40438e
);
impl windows_core::RuntimeType for IProgressBar {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IProgressBar {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IProgressBar";
}
pub trait IProgressBar_Impl: windows_core::IUnknownImpl {
    fn IsIndeterminate(&self) -> windows_core::Result<bool>;
    fn SetIsIndeterminate(&self, value: bool) -> windows_core::Result<()>;
    fn ShowError(&self) -> windows_core::Result<bool>;
    fn SetShowError(&self, value: bool) -> windows_core::Result<()>;
    fn ShowPaused(&self) -> windows_core::Result<bool>;
    fn SetShowPaused(&self, value: bool) -> windows_core::Result<()>;
}
impl IProgressBar_Vtbl {
    pub const fn new<Identity: IProgressBar_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsIndeterminate<
            Identity: IProgressBar_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IProgressBar_Impl::IsIndeterminate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsIndeterminate<
            Identity: IProgressBar_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IProgressBar_Impl::SetIsIndeterminate(this, value).into()
            }
        }
        unsafe extern "system" fn ShowError<Identity: IProgressBar_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IProgressBar_Impl::ShowError(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShowError<Identity: IProgressBar_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IProgressBar_Impl::SetShowError(this, value).into()
            }
        }
        unsafe extern "system" fn ShowPaused<Identity: IProgressBar_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IProgressBar_Impl::ShowPaused(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShowPaused<
            Identity: IProgressBar_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IProgressBar_Impl::SetShowPaused(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IProgressBar, OFFSET>(),
            IsIndeterminate: IsIndeterminate::<Identity, OFFSET>,
            SetIsIndeterminate: SetIsIndeterminate::<Identity, OFFSET>,
            ShowError: ShowError::<Identity, OFFSET>,
            SetShowError: SetShowError::<Identity, OFFSET>,
            ShowPaused: ShowPaused::<Identity, OFFSET>,
            SetShowPaused: SetShowPaused::<Identity, OFFSET>,
            TemplateSettings: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IProgressBar as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBar_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsIndeterminate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsIndeterminate:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ShowError:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShowError:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ShowPaused:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShowPaused:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    TemplateSettings: usize,
}
windows_core::imp::define_interface!(
    IProgressBarFactory,
    IProgressBarFactory_Vtbl,
    0x189826ad_f6f2_533e_9ddb_b6600e88675b
);
impl windows_core::RuntimeType for IProgressBarFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IProgressBarFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IProgressBarFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IProgressBarFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ProgressBar>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IProgressBarFactory_Vtbl {
    pub const fn new<Identity: IProgressBarFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IProgressBarFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IProgressBarFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IProgressBarFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IProgressBarFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBarFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IProgressBarStatics,
    IProgressBarStatics_Vtbl,
    0x61bbb127_e4c4_5e22_a8dc_cfcf957236d0
);
impl windows_core::RuntimeType for IProgressBarStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IProgressBarStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IProgressBarStatics";
}
pub trait IProgressBarStatics_Impl: windows_core::IUnknownImpl {}
impl IProgressBarStatics_Vtbl {
    pub const fn new<Identity: IProgressBarStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IProgressBarStatics, OFFSET>(),
            IsIndeterminateProperty: 0,
            ShowErrorProperty: 0,
            ShowPausedProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IProgressBarStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressBarStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    IsIndeterminateProperty: usize,
    ShowErrorProperty: usize,
    ShowPausedProperty: usize,
}
windows_core::imp::define_interface!(
    IRadioButton,
    IRadioButton_Vtbl,
    0x38f30cee_e75a_5ba1_ae64_4474a3abeac7
);
impl windows_core::RuntimeType for IRadioButton {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRadioButton {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IRadioButton";
}
pub trait IRadioButton_Impl: windows_core::IUnknownImpl {
    fn GroupName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetGroupName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IRadioButton_Vtbl {
    pub const fn new<Identity: IRadioButton_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GroupName<Identity: IRadioButton_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRadioButton_Impl::GroupName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetGroupName<Identity: IRadioButton_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRadioButton_Impl::SetGroupName(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRadioButton, OFFSET>(),
            GroupName: GroupName::<Identity, OFFSET>,
            SetGroupName: SetGroupName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRadioButton as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButton_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GroupName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetGroupName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRadioButtonFactory,
    IRadioButtonFactory_Vtbl,
    0x5772c79a_b3eb_5719_8005_2a513429495a
);
impl windows_core::RuntimeType for IRadioButtonFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IRadioButtonFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IRadioButtonFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IRadioButtonFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<RadioButton>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IRadioButtonFactory_Vtbl {
    pub const fn new<Identity: IRadioButtonFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IRadioButtonFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRadioButtonFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRadioButtonFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRadioButtonFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButtonFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IRadioButtonStatics,
    IRadioButtonStatics_Vtbl,
    0xa8bce4d4_68fe_53d9_a317_74ab409cd4ee
);
impl windows_core::RuntimeType for IRadioButtonStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRadioButtonStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IRadioButtonStatics";
}
pub trait IRadioButtonStatics_Impl: windows_core::IUnknownImpl {}
impl IRadioButtonStatics_Vtbl {
    pub const fn new<Identity: IRadioButtonStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRadioButtonStatics, OFFSET>(),
            GroupNameProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRadioButtonStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRadioButtonStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    GroupNameProperty: usize,
}
windows_core::imp::define_interface!(
    IScrollAnchorProvider,
    IScrollAnchorProvider_Vtbl,
    0x885df41f_f240_5b7b_a703_bfaf39c6a2cd
);
impl windows_core::RuntimeType for IScrollAnchorProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IScrollAnchorProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IScrollAnchorProvider {
    #[cfg(feature = "UI_Composition")]
    pub fn CurrentAnchor(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn RegisterAnchorCandidate<P0>(&self, element: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RegisterAnchorCandidate)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn UnregisterAnchorCandidate<P0>(&self, element: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterAnchorCandidate)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
            )
            .ok()
        }
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IScrollAnchorProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IScrollAnchorProvider";
}
#[cfg(feature = "UI_Composition")]
pub trait IScrollAnchorProvider_Impl: windows_core::IUnknownImpl {
    fn CurrentAnchor(&self) -> windows_core::Result<super::UIElement>;
    fn RegisterAnchorCandidate(
        &self,
        element: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
    fn UnregisterAnchorCandidate(
        &self,
        element: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IScrollAnchorProvider_Vtbl {
    pub const fn new<Identity: IScrollAnchorProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CurrentAnchor<
            Identity: IScrollAnchorProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollAnchorProvider_Impl::CurrentAnchor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RegisterAnchorCandidate<
            Identity: IScrollAnchorProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollAnchorProvider_Impl::RegisterAnchorCandidate(
                    this,
                    core::mem::transmute_copy(&element),
                )
                .into()
            }
        }
        unsafe extern "system" fn UnregisterAnchorCandidate<
            Identity: IScrollAnchorProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollAnchorProvider_Impl::UnregisterAnchorCandidate(
                    this,
                    core::mem::transmute_copy(&element),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScrollAnchorProvider, OFFSET>(
            ),
            CurrentAnchor: CurrentAnchor::<Identity, OFFSET>,
            RegisterAnchorCandidate: RegisterAnchorCandidate::<Identity, OFFSET>,
            UnregisterAnchorCandidate: UnregisterAnchorCandidate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollAnchorProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollAnchorProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CurrentAnchor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CurrentAnchor: usize,
    #[cfg(feature = "UI_Composition")]
    pub RegisterAnchorCandidate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    RegisterAnchorCandidate: usize,
    #[cfg(feature = "UI_Composition")]
    pub UnregisterAnchorCandidate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    UnregisterAnchorCandidate: usize,
}
windows_core::imp::define_interface!(
    IScrollViewer,
    IScrollViewer_Vtbl,
    0x1dc28c2e_996c_5394_89c3_4dc656b4ad46
);
impl windows_core::RuntimeType for IScrollViewer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IScrollViewer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IScrollViewer";
}
#[cfg(feature = "UI_Composition")]
pub trait IScrollViewer_Impl: windows_core::IUnknownImpl {
    fn HorizontalScrollBarVisibility(&self) -> windows_core::Result<ScrollBarVisibility>;
    fn SetHorizontalScrollBarVisibility(
        &self,
        value: ScrollBarVisibility,
    ) -> windows_core::Result<()>;
    fn VerticalScrollBarVisibility(&self) -> windows_core::Result<ScrollBarVisibility>;
    fn SetVerticalScrollBarVisibility(
        &self,
        value: ScrollBarVisibility,
    ) -> windows_core::Result<()>;
    fn IsHorizontalRailEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsHorizontalRailEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsVerticalRailEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsVerticalRailEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsHorizontalScrollChainingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsHorizontalScrollChainingEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsVerticalScrollChainingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsVerticalScrollChainingEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsZoomChainingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsZoomChainingEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsScrollInertiaEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsScrollInertiaEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsZoomInertiaEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsZoomInertiaEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn HorizontalOffset(&self) -> windows_core::Result<f64>;
    fn ViewportWidth(&self) -> windows_core::Result<f64>;
    fn ScrollableWidth(&self) -> windows_core::Result<f64>;
    fn ComputedHorizontalScrollBarVisibility(&self) -> windows_core::Result<super::Visibility>;
    fn ExtentWidth(&self) -> windows_core::Result<f64>;
    fn VerticalOffset(&self) -> windows_core::Result<f64>;
    fn ViewportHeight(&self) -> windows_core::Result<f64>;
    fn ScrollableHeight(&self) -> windows_core::Result<f64>;
    fn ComputedVerticalScrollBarVisibility(&self) -> windows_core::Result<super::Visibility>;
    fn ExtentHeight(&self) -> windows_core::Result<f64>;
    fn MinZoomFactor(&self) -> windows_core::Result<f32>;
    fn SetMinZoomFactor(&self, value: f32) -> windows_core::Result<()>;
    fn MaxZoomFactor(&self) -> windows_core::Result<f32>;
    fn SetMaxZoomFactor(&self, value: f32) -> windows_core::Result<()>;
    fn ZoomFactor(&self) -> windows_core::Result<f32>;
    fn ZoomSnapPoints(&self) -> windows_core::Result<windows_collections::IVector<f32>>;
    fn TopLeftHeader(&self) -> windows_core::Result<super::UIElement>;
    fn SetTopLeftHeader(
        &self,
        value: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
    fn LeftHeader(&self) -> windows_core::Result<super::UIElement>;
    fn SetLeftHeader(&self, value: windows_core::Ref<super::UIElement>)
        -> windows_core::Result<()>;
    fn TopHeader(&self) -> windows_core::Result<super::UIElement>;
    fn SetTopHeader(&self, value: windows_core::Ref<super::UIElement>) -> windows_core::Result<()>;
    fn ReduceViewportForCoreInputViewOcclusions(&self) -> windows_core::Result<bool>;
    fn SetReduceViewportForCoreInputViewOcclusions(&self, value: bool) -> windows_core::Result<()>;
    fn HorizontalAnchorRatio(&self) -> windows_core::Result<f64>;
    fn SetHorizontalAnchorRatio(&self, value: f64) -> windows_core::Result<()>;
    fn VerticalAnchorRatio(&self) -> windows_core::Result<f64>;
    fn SetVerticalAnchorRatio(&self, value: f64) -> windows_core::Result<()>;
    fn CanContentRenderOutsideBounds(&self) -> windows_core::Result<bool>;
    fn SetCanContentRenderOutsideBounds(&self, value: bool) -> windows_core::Result<()>;
    fn RemoveAnchorRequested(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveViewChanging(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveViewChanged(&self, token: i64) -> windows_core::Result<()>;
    fn DirectManipulationStarted(
        &self,
        handler: windows_core::Ref<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    ) -> windows_core::Result<i64>;
    fn RemoveDirectManipulationStarted(&self, token: i64) -> windows_core::Result<()>;
    fn DirectManipulationCompleted(
        &self,
        handler: windows_core::Ref<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    ) -> windows_core::Result<i64>;
    fn RemoveDirectManipulationCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn ScrollToHorizontalOffset(&self, offset: f64) -> windows_core::Result<()>;
    fn ScrollToVerticalOffset(&self, offset: f64) -> windows_core::Result<()>;
    fn ZoomToFactor(&self, factor: f32) -> windows_core::Result<()>;
    fn ChangeView(
        &self,
        horizontalOffset: windows_core::Ref<windows::Foundation::IReference<f64>>,
        verticalOffset: windows_core::Ref<windows::Foundation::IReference<f64>>,
        zoomFactor: windows_core::Ref<windows::Foundation::IReference<f32>>,
    ) -> windows_core::Result<bool>;
    fn ChangeViewWithOptionalAnimation(
        &self,
        horizontalOffset: windows_core::Ref<windows::Foundation::IReference<f64>>,
        verticalOffset: windows_core::Ref<windows::Foundation::IReference<f64>>,
        zoomFactor: windows_core::Ref<windows::Foundation::IReference<f32>>,
        disableAnimation: bool,
    ) -> windows_core::Result<bool>;
    fn InvalidateScrollInfo(&self) -> windows_core::Result<()>;
    fn IsDeferredScrollingEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsDeferredScrollingEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn BringIntoViewOnFocusChange(&self) -> windows_core::Result<bool>;
    fn SetBringIntoViewOnFocusChange(&self, value: bool) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IScrollViewer_Vtbl {
    pub const fn new<Identity: IScrollViewer_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::HorizontalScrollBarVisibility(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetHorizontalScrollBarVisibility(this, value).into()
            }
        }
        unsafe extern "system" fn VerticalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::VerticalScrollBarVisibility(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetVerticalScrollBarVisibility(this, value).into()
            }
        }
        unsafe extern "system" fn IsHorizontalRailEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsHorizontalRailEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHorizontalRailEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsHorizontalRailEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsVerticalRailEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsVerticalRailEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVerticalRailEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsVerticalRailEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsHorizontalScrollChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsHorizontalScrollChainingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHorizontalScrollChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsHorizontalScrollChainingEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsVerticalScrollChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsVerticalScrollChainingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVerticalScrollChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsVerticalScrollChainingEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsZoomChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsZoomChainingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsZoomChainingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsZoomChainingEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsScrollInertiaEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsScrollInertiaEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsScrollInertiaEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsScrollInertiaEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsZoomInertiaEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsZoomInertiaEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsZoomInertiaEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsZoomInertiaEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalOffset<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::HorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ViewportWidth<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ViewportWidth(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScrollableWidth<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ScrollableWidth(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ComputedHorizontalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Visibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ComputedHorizontalScrollBarVisibility(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExtentWidth<Identity: IScrollViewer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ExtentWidth(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalOffset<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::VerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ViewportHeight<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ViewportHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScrollableHeight<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ScrollableHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ComputedVerticalScrollBarVisibility<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Visibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ComputedVerticalScrollBarVisibility(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExtentHeight<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ExtentHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinZoomFactor<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::MinZoomFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMinZoomFactor<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetMinZoomFactor(this, value).into()
            }
        }
        unsafe extern "system" fn MaxZoomFactor<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::MaxZoomFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxZoomFactor<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetMaxZoomFactor(this, value).into()
            }
        }
        unsafe extern "system" fn ZoomFactor<Identity: IScrollViewer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ZoomFactor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ZoomSnapPoints<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ZoomSnapPoints(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TopLeftHeader<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::TopLeftHeader(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopLeftHeader<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetTopLeftHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn LeftHeader<Identity: IScrollViewer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::LeftHeader(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLeftHeader<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetLeftHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn TopHeader<Identity: IScrollViewer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::TopHeader(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTopHeader<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetTopHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ReduceViewportForCoreInputViewOcclusions<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ReduceViewportForCoreInputViewOcclusions(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetReduceViewportForCoreInputViewOcclusions<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetReduceViewportForCoreInputViewOcclusions(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalAnchorRatio<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::HorizontalAnchorRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalAnchorRatio<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetHorizontalAnchorRatio(this, value).into()
            }
        }
        unsafe extern "system" fn VerticalAnchorRatio<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::VerticalAnchorRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalAnchorRatio<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetVerticalAnchorRatio(this, value).into()
            }
        }
        unsafe extern "system" fn CanContentRenderOutsideBounds<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::CanContentRenderOutsideBounds(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCanContentRenderOutsideBounds<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetCanContentRenderOutsideBounds(this, value).into()
            }
        }
        unsafe extern "system" fn RemoveAnchorRequested<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::RemoveAnchorRequested(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveViewChanging<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::RemoveViewChanging(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveViewChanged<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::RemoveViewChanged(this, token).into()
            }
        }
        unsafe extern "system" fn DirectManipulationStarted<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::DirectManipulationStarted(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDirectManipulationStarted<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::RemoveDirectManipulationStarted(this, token).into()
            }
        }
        unsafe extern "system" fn DirectManipulationCompleted<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::DirectManipulationCompleted(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveDirectManipulationCompleted<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::RemoveDirectManipulationCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn ScrollToHorizontalOffset<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::ScrollToHorizontalOffset(this, offset).into()
            }
        }
        unsafe extern "system" fn ScrollToVerticalOffset<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::ScrollToVerticalOffset(this, offset).into()
            }
        }
        unsafe extern "system" fn ZoomToFactor<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            factor: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::ZoomToFactor(this, factor).into()
            }
        }
        unsafe extern "system" fn ChangeView<Identity: IScrollViewer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            horizontaloffset: *mut core::ffi::c_void,
            verticaloffset: *mut core::ffi::c_void,
            zoomfactor: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ChangeView(
                    this,
                    core::mem::transmute_copy(&horizontaloffset),
                    core::mem::transmute_copy(&verticaloffset),
                    core::mem::transmute_copy(&zoomfactor),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ChangeViewWithOptionalAnimation<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            horizontaloffset: *mut core::ffi::c_void,
            verticaloffset: *mut core::ffi::c_void,
            zoomfactor: *mut core::ffi::c_void,
            disableanimation: bool,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::ChangeViewWithOptionalAnimation(
                    this,
                    core::mem::transmute_copy(&horizontaloffset),
                    core::mem::transmute_copy(&verticaloffset),
                    core::mem::transmute_copy(&zoomfactor),
                    disableanimation,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InvalidateScrollInfo<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::InvalidateScrollInfo(this).into()
            }
        }
        unsafe extern "system" fn IsDeferredScrollingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::IsDeferredScrollingEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDeferredScrollingEnabled<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetIsDeferredScrollingEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn BringIntoViewOnFocusChange<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewer_Impl::BringIntoViewOnFocusChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBringIntoViewOnFocusChange<
            Identity: IScrollViewer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewer_Impl::SetBringIntoViewOnFocusChange(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScrollViewer, OFFSET>(),
            HorizontalScrollBarVisibility: HorizontalScrollBarVisibility::<Identity, OFFSET>,
            SetHorizontalScrollBarVisibility: SetHorizontalScrollBarVisibility::<Identity, OFFSET>,
            VerticalScrollBarVisibility: VerticalScrollBarVisibility::<Identity, OFFSET>,
            SetVerticalScrollBarVisibility: SetVerticalScrollBarVisibility::<Identity, OFFSET>,
            IsHorizontalRailEnabled: IsHorizontalRailEnabled::<Identity, OFFSET>,
            SetIsHorizontalRailEnabled: SetIsHorizontalRailEnabled::<Identity, OFFSET>,
            IsVerticalRailEnabled: IsVerticalRailEnabled::<Identity, OFFSET>,
            SetIsVerticalRailEnabled: SetIsVerticalRailEnabled::<Identity, OFFSET>,
            IsHorizontalScrollChainingEnabled: IsHorizontalScrollChainingEnabled::<Identity, OFFSET>,
            SetIsHorizontalScrollChainingEnabled: SetIsHorizontalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            IsVerticalScrollChainingEnabled: IsVerticalScrollChainingEnabled::<Identity, OFFSET>,
            SetIsVerticalScrollChainingEnabled: SetIsVerticalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            IsZoomChainingEnabled: IsZoomChainingEnabled::<Identity, OFFSET>,
            SetIsZoomChainingEnabled: SetIsZoomChainingEnabled::<Identity, OFFSET>,
            IsScrollInertiaEnabled: IsScrollInertiaEnabled::<Identity, OFFSET>,
            SetIsScrollInertiaEnabled: SetIsScrollInertiaEnabled::<Identity, OFFSET>,
            IsZoomInertiaEnabled: IsZoomInertiaEnabled::<Identity, OFFSET>,
            SetIsZoomInertiaEnabled: SetIsZoomInertiaEnabled::<Identity, OFFSET>,
            HorizontalScrollMode: 0,
            SetHorizontalScrollMode: 0,
            VerticalScrollMode: 0,
            SetVerticalScrollMode: 0,
            ZoomMode: 0,
            SetZoomMode: 0,
            HorizontalSnapPointsAlignment: 0,
            SetHorizontalSnapPointsAlignment: 0,
            VerticalSnapPointsAlignment: 0,
            SetVerticalSnapPointsAlignment: 0,
            HorizontalSnapPointsType: 0,
            SetHorizontalSnapPointsType: 0,
            VerticalSnapPointsType: 0,
            SetVerticalSnapPointsType: 0,
            ZoomSnapPointsType: 0,
            SetZoomSnapPointsType: 0,
            HorizontalOffset: HorizontalOffset::<Identity, OFFSET>,
            ViewportWidth: ViewportWidth::<Identity, OFFSET>,
            ScrollableWidth: ScrollableWidth::<Identity, OFFSET>,
            ComputedHorizontalScrollBarVisibility: ComputedHorizontalScrollBarVisibility::<
                Identity,
                OFFSET,
            >,
            ExtentWidth: ExtentWidth::<Identity, OFFSET>,
            VerticalOffset: VerticalOffset::<Identity, OFFSET>,
            ViewportHeight: ViewportHeight::<Identity, OFFSET>,
            ScrollableHeight: ScrollableHeight::<Identity, OFFSET>,
            ComputedVerticalScrollBarVisibility: ComputedVerticalScrollBarVisibility::<
                Identity,
                OFFSET,
            >,
            ExtentHeight: ExtentHeight::<Identity, OFFSET>,
            MinZoomFactor: MinZoomFactor::<Identity, OFFSET>,
            SetMinZoomFactor: SetMinZoomFactor::<Identity, OFFSET>,
            MaxZoomFactor: MaxZoomFactor::<Identity, OFFSET>,
            SetMaxZoomFactor: SetMaxZoomFactor::<Identity, OFFSET>,
            ZoomFactor: ZoomFactor::<Identity, OFFSET>,
            ZoomSnapPoints: ZoomSnapPoints::<Identity, OFFSET>,
            TopLeftHeader: TopLeftHeader::<Identity, OFFSET>,
            SetTopLeftHeader: SetTopLeftHeader::<Identity, OFFSET>,
            LeftHeader: LeftHeader::<Identity, OFFSET>,
            SetLeftHeader: SetLeftHeader::<Identity, OFFSET>,
            TopHeader: TopHeader::<Identity, OFFSET>,
            SetTopHeader: SetTopHeader::<Identity, OFFSET>,
            ReduceViewportForCoreInputViewOcclusions: ReduceViewportForCoreInputViewOcclusions::<
                Identity,
                OFFSET,
            >,
            SetReduceViewportForCoreInputViewOcclusions:
                SetReduceViewportForCoreInputViewOcclusions::<Identity, OFFSET>,
            HorizontalAnchorRatio: HorizontalAnchorRatio::<Identity, OFFSET>,
            SetHorizontalAnchorRatio: SetHorizontalAnchorRatio::<Identity, OFFSET>,
            VerticalAnchorRatio: VerticalAnchorRatio::<Identity, OFFSET>,
            SetVerticalAnchorRatio: SetVerticalAnchorRatio::<Identity, OFFSET>,
            CanContentRenderOutsideBounds: CanContentRenderOutsideBounds::<Identity, OFFSET>,
            SetCanContentRenderOutsideBounds: SetCanContentRenderOutsideBounds::<Identity, OFFSET>,
            AnchorRequested: 0,
            RemoveAnchorRequested: RemoveAnchorRequested::<Identity, OFFSET>,
            ViewChanging: 0,
            RemoveViewChanging: RemoveViewChanging::<Identity, OFFSET>,
            ViewChanged: 0,
            RemoveViewChanged: RemoveViewChanged::<Identity, OFFSET>,
            DirectManipulationStarted: DirectManipulationStarted::<Identity, OFFSET>,
            RemoveDirectManipulationStarted: RemoveDirectManipulationStarted::<Identity, OFFSET>,
            DirectManipulationCompleted: DirectManipulationCompleted::<Identity, OFFSET>,
            RemoveDirectManipulationCompleted: RemoveDirectManipulationCompleted::<Identity, OFFSET>,
            ScrollToHorizontalOffset: ScrollToHorizontalOffset::<Identity, OFFSET>,
            ScrollToVerticalOffset: ScrollToVerticalOffset::<Identity, OFFSET>,
            ZoomToFactor: ZoomToFactor::<Identity, OFFSET>,
            ChangeView: ChangeView::<Identity, OFFSET>,
            ChangeViewWithOptionalAnimation: ChangeViewWithOptionalAnimation::<Identity, OFFSET>,
            InvalidateScrollInfo: InvalidateScrollInfo::<Identity, OFFSET>,
            IsDeferredScrollingEnabled: IsDeferredScrollingEnabled::<Identity, OFFSET>,
            SetIsDeferredScrollingEnabled: SetIsDeferredScrollingEnabled::<Identity, OFFSET>,
            BringIntoViewOnFocusChange: BringIntoViewOnFocusChange::<Identity, OFFSET>,
            SetBringIntoViewOnFocusChange: SetBringIntoViewOnFocusChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollViewer as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewer_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub SetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub VerticalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub SetVerticalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub IsHorizontalRailEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsHorizontalRailEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsVerticalRailEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsVerticalRailEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsHorizontalScrollChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsHorizontalScrollChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsVerticalScrollChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsVerticalScrollChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsZoomChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsZoomChainingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsScrollInertiaEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsScrollInertiaEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsZoomInertiaEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsZoomInertiaEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    HorizontalScrollMode: usize,
    SetHorizontalScrollMode: usize,
    VerticalScrollMode: usize,
    SetVerticalScrollMode: usize,
    ZoomMode: usize,
    SetZoomMode: usize,
    HorizontalSnapPointsAlignment: usize,
    SetHorizontalSnapPointsAlignment: usize,
    VerticalSnapPointsAlignment: usize,
    SetVerticalSnapPointsAlignment: usize,
    HorizontalSnapPointsType: usize,
    SetHorizontalSnapPointsType: usize,
    VerticalSnapPointsType: usize,
    SetVerticalSnapPointsType: usize,
    ZoomSnapPointsType: usize,
    SetZoomSnapPointsType: usize,
    pub HorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ViewportWidth:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ScrollableWidth:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ComputedHorizontalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Visibility,
    )
        -> windows_core::HRESULT,
    pub ExtentWidth:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub VerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ViewportHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ScrollableHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub ComputedVerticalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Visibility,
    )
        -> windows_core::HRESULT,
    pub ExtentHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub MinZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMinZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub MaxZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetMaxZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub ZoomFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub ZoomSnapPoints: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub TopLeftHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    TopLeftHeader: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetTopLeftHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetTopLeftHeader: usize,
    #[cfg(feature = "UI_Composition")]
    pub LeftHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    LeftHeader: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetLeftHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetLeftHeader: usize,
    #[cfg(feature = "UI_Composition")]
    pub TopHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    TopHeader: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetTopHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetTopHeader: usize,
    pub ReduceViewportForCoreInputViewOcclusions:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetReduceViewportForCoreInputViewOcclusions:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub HorizontalAnchorRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetHorizontalAnchorRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub VerticalAnchorRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetVerticalAnchorRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub CanContentRenderOutsideBounds:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCanContentRenderOutsideBounds:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    AnchorRequested: usize,
    pub RemoveAnchorRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    ViewChanging: usize,
    pub RemoveViewChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    ViewChanged: usize,
    pub RemoveViewChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DirectManipulationStarted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDirectManipulationStarted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub DirectManipulationCompleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveDirectManipulationCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ScrollToHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ScrollToVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ZoomToFactor:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub ChangeView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub ChangeViewWithOptionalAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub InvalidateScrollInfo:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub IsDeferredScrollingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsDeferredScrollingEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub BringIntoViewOnFocusChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetBringIntoViewOnFocusChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScrollViewerStatics,
    IScrollViewerStatics_Vtbl,
    0xd971fd86_0a96_50c4_a6e1_9975faa2a142
);
impl windows_core::RuntimeType for IScrollViewerStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScrollViewerStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IScrollViewerStatics";
}
pub trait IScrollViewerStatics_Impl: windows_core::IUnknownImpl {
    fn GetHorizontalScrollBarVisibility(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<ScrollBarVisibility>;
    fn SetHorizontalScrollBarVisibility(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        horizontalScrollBarVisibility: ScrollBarVisibility,
    ) -> windows_core::Result<()>;
    fn GetVerticalScrollBarVisibility(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<ScrollBarVisibility>;
    fn SetVerticalScrollBarVisibility(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        verticalScrollBarVisibility: ScrollBarVisibility,
    ) -> windows_core::Result<()>;
    fn GetIsHorizontalRailEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsHorizontalRailEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isHorizontalRailEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsVerticalRailEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsVerticalRailEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isVerticalRailEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsHorizontalScrollChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsHorizontalScrollChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isHorizontalScrollChainingEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsVerticalScrollChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsVerticalScrollChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isVerticalScrollChainingEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsZoomChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsZoomChainingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isZoomChainingEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsScrollInertiaEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsScrollInertiaEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isScrollInertiaEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetIsZoomInertiaEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsZoomInertiaEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isZoomInertiaEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetCanContentRenderOutsideBounds(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetCanContentRenderOutsideBounds(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        canContentRenderOutsideBounds: bool,
    ) -> windows_core::Result<()>;
    fn GetIsDeferredScrollingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsDeferredScrollingEnabled(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        isDeferredScrollingEnabled: bool,
    ) -> windows_core::Result<()>;
    fn GetBringIntoViewOnFocusChange(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetBringIntoViewOnFocusChange(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        bringIntoViewOnFocusChange: bool,
    ) -> windows_core::Result<()>;
}
impl IScrollViewerStatics_Vtbl {
    pub const fn new<Identity: IScrollViewerStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetHorizontalScrollBarVisibility<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetHorizontalScrollBarVisibility(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalScrollBarVisibility<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            horizontalscrollbarvisibility: ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetHorizontalScrollBarVisibility(
                    this,
                    core::mem::transmute_copy(&element),
                    horizontalscrollbarvisibility,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetVerticalScrollBarVisibility<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetVerticalScrollBarVisibility(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalScrollBarVisibility<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            verticalscrollbarvisibility: ScrollBarVisibility,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetVerticalScrollBarVisibility(
                    this,
                    core::mem::transmute_copy(&element),
                    verticalscrollbarvisibility,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsHorizontalRailEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsHorizontalRailEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHorizontalRailEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            ishorizontalrailenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsHorizontalRailEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    ishorizontalrailenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsVerticalRailEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsVerticalRailEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVerticalRailEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            isverticalrailenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsVerticalRailEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    isverticalrailenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsHorizontalScrollChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsHorizontalScrollChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHorizontalScrollChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            ishorizontalscrollchainingenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsHorizontalScrollChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    ishorizontalscrollchainingenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsVerticalScrollChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsVerticalScrollChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsVerticalScrollChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            isverticalscrollchainingenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsVerticalScrollChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    isverticalscrollchainingenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsZoomChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsZoomChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsZoomChainingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            iszoomchainingenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsZoomChainingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    iszoomchainingenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsScrollInertiaEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsScrollInertiaEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsScrollInertiaEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            isscrollinertiaenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsScrollInertiaEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    isscrollinertiaenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsZoomInertiaEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsZoomInertiaEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsZoomInertiaEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            iszoominertiaenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsZoomInertiaEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    iszoominertiaenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetCanContentRenderOutsideBounds<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetCanContentRenderOutsideBounds(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCanContentRenderOutsideBounds<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            cancontentrenderoutsidebounds: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetCanContentRenderOutsideBounds(
                    this,
                    core::mem::transmute_copy(&element),
                    cancontentrenderoutsidebounds,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIsDeferredScrollingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetIsDeferredScrollingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDeferredScrollingEnabled<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            isdeferredscrollingenabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetIsDeferredScrollingEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    isdeferredscrollingenabled,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetBringIntoViewOnFocusChange<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollViewerStatics_Impl::GetBringIntoViewOnFocusChange(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBringIntoViewOnFocusChange<
            Identity: IScrollViewerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            bringintoviewonfocuschange: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollViewerStatics_Impl::SetBringIntoViewOnFocusChange(
                    this,
                    core::mem::transmute_copy(&element),
                    bringintoviewonfocuschange,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScrollViewerStatics, OFFSET>(
            ),
            HorizontalSnapPointsAlignmentProperty: 0,
            VerticalSnapPointsAlignmentProperty: 0,
            HorizontalSnapPointsTypeProperty: 0,
            VerticalSnapPointsTypeProperty: 0,
            ZoomSnapPointsTypeProperty: 0,
            HorizontalOffsetProperty: 0,
            ViewportWidthProperty: 0,
            ScrollableWidthProperty: 0,
            ComputedHorizontalScrollBarVisibilityProperty: 0,
            ExtentWidthProperty: 0,
            VerticalOffsetProperty: 0,
            ViewportHeightProperty: 0,
            ScrollableHeightProperty: 0,
            ComputedVerticalScrollBarVisibilityProperty: 0,
            ExtentHeightProperty: 0,
            MinZoomFactorProperty: 0,
            MaxZoomFactorProperty: 0,
            ZoomFactorProperty: 0,
            ZoomSnapPointsProperty: 0,
            TopLeftHeaderProperty: 0,
            LeftHeaderProperty: 0,
            TopHeaderProperty: 0,
            ReduceViewportForCoreInputViewOcclusionsProperty: 0,
            HorizontalAnchorRatioProperty: 0,
            VerticalAnchorRatioProperty: 0,
            HorizontalScrollBarVisibilityProperty: 0,
            GetHorizontalScrollBarVisibility: GetHorizontalScrollBarVisibility::<Identity, OFFSET>,
            SetHorizontalScrollBarVisibility: SetHorizontalScrollBarVisibility::<Identity, OFFSET>,
            VerticalScrollBarVisibilityProperty: 0,
            GetVerticalScrollBarVisibility: GetVerticalScrollBarVisibility::<Identity, OFFSET>,
            SetVerticalScrollBarVisibility: SetVerticalScrollBarVisibility::<Identity, OFFSET>,
            IsHorizontalRailEnabledProperty: 0,
            GetIsHorizontalRailEnabled: GetIsHorizontalRailEnabled::<Identity, OFFSET>,
            SetIsHorizontalRailEnabled: SetIsHorizontalRailEnabled::<Identity, OFFSET>,
            IsVerticalRailEnabledProperty: 0,
            GetIsVerticalRailEnabled: GetIsVerticalRailEnabled::<Identity, OFFSET>,
            SetIsVerticalRailEnabled: SetIsVerticalRailEnabled::<Identity, OFFSET>,
            IsHorizontalScrollChainingEnabledProperty: 0,
            GetIsHorizontalScrollChainingEnabled: GetIsHorizontalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            SetIsHorizontalScrollChainingEnabled: SetIsHorizontalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            IsVerticalScrollChainingEnabledProperty: 0,
            GetIsVerticalScrollChainingEnabled: GetIsVerticalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            SetIsVerticalScrollChainingEnabled: SetIsVerticalScrollChainingEnabled::<
                Identity,
                OFFSET,
            >,
            IsZoomChainingEnabledProperty: 0,
            GetIsZoomChainingEnabled: GetIsZoomChainingEnabled::<Identity, OFFSET>,
            SetIsZoomChainingEnabled: SetIsZoomChainingEnabled::<Identity, OFFSET>,
            IsScrollInertiaEnabledProperty: 0,
            GetIsScrollInertiaEnabled: GetIsScrollInertiaEnabled::<Identity, OFFSET>,
            SetIsScrollInertiaEnabled: SetIsScrollInertiaEnabled::<Identity, OFFSET>,
            IsZoomInertiaEnabledProperty: 0,
            GetIsZoomInertiaEnabled: GetIsZoomInertiaEnabled::<Identity, OFFSET>,
            SetIsZoomInertiaEnabled: SetIsZoomInertiaEnabled::<Identity, OFFSET>,
            HorizontalScrollModeProperty: 0,
            GetHorizontalScrollMode: 0,
            SetHorizontalScrollMode: 0,
            VerticalScrollModeProperty: 0,
            GetVerticalScrollMode: 0,
            SetVerticalScrollMode: 0,
            ZoomModeProperty: 0,
            GetZoomMode: 0,
            SetZoomMode: 0,
            CanContentRenderOutsideBoundsProperty: 0,
            GetCanContentRenderOutsideBounds: GetCanContentRenderOutsideBounds::<Identity, OFFSET>,
            SetCanContentRenderOutsideBounds: SetCanContentRenderOutsideBounds::<Identity, OFFSET>,
            IsDeferredScrollingEnabledProperty: 0,
            GetIsDeferredScrollingEnabled: GetIsDeferredScrollingEnabled::<Identity, OFFSET>,
            SetIsDeferredScrollingEnabled: SetIsDeferredScrollingEnabled::<Identity, OFFSET>,
            BringIntoViewOnFocusChangeProperty: 0,
            GetBringIntoViewOnFocusChange: GetBringIntoViewOnFocusChange::<Identity, OFFSET>,
            SetBringIntoViewOnFocusChange: SetBringIntoViewOnFocusChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollViewerStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollViewerStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    HorizontalSnapPointsAlignmentProperty: usize,
    VerticalSnapPointsAlignmentProperty: usize,
    HorizontalSnapPointsTypeProperty: usize,
    VerticalSnapPointsTypeProperty: usize,
    ZoomSnapPointsTypeProperty: usize,
    HorizontalOffsetProperty: usize,
    ViewportWidthProperty: usize,
    ScrollableWidthProperty: usize,
    ComputedHorizontalScrollBarVisibilityProperty: usize,
    ExtentWidthProperty: usize,
    VerticalOffsetProperty: usize,
    ViewportHeightProperty: usize,
    ScrollableHeightProperty: usize,
    ComputedVerticalScrollBarVisibilityProperty: usize,
    ExtentHeightProperty: usize,
    MinZoomFactorProperty: usize,
    MaxZoomFactorProperty: usize,
    ZoomFactorProperty: usize,
    ZoomSnapPointsProperty: usize,
    TopLeftHeaderProperty: usize,
    LeftHeaderProperty: usize,
    TopHeaderProperty: usize,
    ReduceViewportForCoreInputViewOcclusionsProperty: usize,
    HorizontalAnchorRatioProperty: usize,
    VerticalAnchorRatioProperty: usize,
    HorizontalScrollBarVisibilityProperty: usize,
    pub GetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub SetHorizontalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    VerticalScrollBarVisibilityProperty: usize,
    pub GetVerticalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    pub SetVerticalScrollBarVisibility: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        ScrollBarVisibility,
    ) -> windows_core::HRESULT,
    IsHorizontalRailEnabledProperty: usize,
    pub GetIsHorizontalRailEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsHorizontalRailEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsVerticalRailEnabledProperty: usize,
    pub GetIsVerticalRailEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsVerticalRailEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsHorizontalScrollChainingEnabledProperty: usize,
    pub GetIsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    )
        -> windows_core::HRESULT,
    pub SetIsHorizontalScrollChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    )
        -> windows_core::HRESULT,
    IsVerticalScrollChainingEnabledProperty: usize,
    pub GetIsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsVerticalScrollChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsZoomChainingEnabledProperty: usize,
    pub GetIsZoomChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsZoomChainingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsScrollInertiaEnabledProperty: usize,
    pub GetIsScrollInertiaEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsScrollInertiaEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsZoomInertiaEnabledProperty: usize,
    pub GetIsZoomInertiaEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsZoomInertiaEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    HorizontalScrollModeProperty: usize,
    GetHorizontalScrollMode: usize,
    SetHorizontalScrollMode: usize,
    VerticalScrollModeProperty: usize,
    GetVerticalScrollMode: usize,
    SetVerticalScrollMode: usize,
    ZoomModeProperty: usize,
    GetZoomMode: usize,
    SetZoomMode: usize,
    CanContentRenderOutsideBoundsProperty: usize,
    pub GetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetCanContentRenderOutsideBounds: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    IsDeferredScrollingEnabledProperty: usize,
    pub GetIsDeferredScrollingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsDeferredScrollingEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    BringIntoViewOnFocusChangeProperty: usize,
    pub GetBringIntoViewOnFocusChange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetBringIntoViewOnFocusChange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionChangedEventArgs,
    ISelectionChangedEventArgs_Vtbl,
    0xb6c18076_4b76_5416_ad29_e2dc20c46246
);
impl windows_core::RuntimeType for ISelectionChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgs";
}
pub trait ISelectionChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn AddedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>>;
    fn RemovedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>>;
}
impl ISelectionChangedEventArgs_Vtbl {
    pub const fn new<Identity: ISelectionChangedEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AddedItems<
            Identity: ISelectionChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionChangedEventArgs_Impl::AddedItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovedItems<
            Identity: ISelectionChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionChangedEventArgs_Impl::RemovedItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionChangedEventArgs,
                OFFSET,
            >(),
            AddedItems: AddedItems::<Identity, OFFSET>,
            RemovedItems: RemovedItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AddedItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemovedItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionChangedEventArgsFactory,
    ISelectionChangedEventArgsFactory_Vtbl,
    0x0fcd041d_465f_5745_9882_0c8348e4135d
);
impl windows_core::RuntimeType for ISelectionChangedEventArgsFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionChangedEventArgsFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgsFactory";
}
pub trait ISelectionChangedEventArgsFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstanceWithRemovedItemsAndAddedItems(
        &self,
        removedItems: windows_core::Ref<windows_collections::IVector<windows_core::IInspectable>>,
        addedItems: windows_core::Ref<windows_collections::IVector<windows_core::IInspectable>>,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<SelectionChangedEventArgs>;
}
impl ISelectionChangedEventArgsFactory_Vtbl {
    pub const fn new<Identity: ISelectionChangedEventArgsFactory_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateInstanceWithRemovedItemsAndAddedItems<
            Identity: ISelectionChangedEventArgsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            removeditems: *mut core::ffi::c_void,
            addeditems: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionChangedEventArgsFactory_Impl:: CreateInstanceWithRemovedItemsAndAddedItems ( this , core::mem::transmute_copy ( & removeditems ) , core::mem::transmute_copy ( & addeditems ) , core::mem::transmute_copy ( & baseinterface ) , core::mem::transmute_copy ( & innerinterface ) , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionChangedEventArgsFactory,
                OFFSET,
            >(),
            CreateInstanceWithRemovedItemsAndAddedItems:
                CreateInstanceWithRemovedItemsAndAddedItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionChangedEventArgsFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionChangedEventArgsFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstanceWithRemovedItemsAndAddedItems:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISlider,
    ISlider_Vtbl,
    0xf7418ecf_7c35_5216_8bf1_d82d47cce5df
);
impl windows_core::RuntimeType for ISlider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for ISlider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISlider";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait ISlider_Impl: windows_core::IUnknownImpl {
    fn IntermediateValue(&self) -> windows_core::Result<f64>;
    fn SetIntermediateValue(&self, value: f64) -> windows_core::Result<()>;
    fn StepFrequency(&self) -> windows_core::Result<f64>;
    fn SetStepFrequency(&self, value: f64) -> windows_core::Result<()>;
    fn TickFrequency(&self) -> windows_core::Result<f64>;
    fn SetTickFrequency(&self, value: f64) -> windows_core::Result<()>;
    fn TickPlacement(&self) -> windows_core::Result<Primitives::TickPlacement>;
    fn SetTickPlacement(&self, value: Primitives::TickPlacement) -> windows_core::Result<()>;
    fn Orientation(&self) -> windows_core::Result<Orientation>;
    fn SetOrientation(&self, value: Orientation) -> windows_core::Result<()>;
    fn IsDirectionReversed(&self) -> windows_core::Result<bool>;
    fn SetIsDirectionReversed(&self, value: bool) -> windows_core::Result<()>;
    fn IsThumbToolTipEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsThumbToolTipEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn Header(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetHeader(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl ISlider_Vtbl {
    pub const fn new<Identity: ISlider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IntermediateValue<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::IntermediateValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIntermediateValue<
            Identity: ISlider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetIntermediateValue(this, value).into()
            }
        }
        unsafe extern "system" fn StepFrequency<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::StepFrequency(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStepFrequency<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetStepFrequency(this, value).into()
            }
        }
        unsafe extern "system" fn TickFrequency<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::TickFrequency(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTickFrequency<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetTickFrequency(this, value).into()
            }
        }
        unsafe extern "system" fn TickPlacement<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut Primitives::TickPlacement,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::TickPlacement(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTickPlacement<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: Primitives::TickPlacement,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetTickPlacement(this, value).into()
            }
        }
        unsafe extern "system" fn Orientation<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut Orientation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::Orientation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOrientation<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: Orientation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetOrientation(this, value).into()
            }
        }
        unsafe extern "system" fn IsDirectionReversed<
            Identity: ISlider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::IsDirectionReversed(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDirectionReversed<
            Identity: ISlider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetIsDirectionReversed(this, value).into()
            }
        }
        unsafe extern "system" fn IsThumbToolTipEnabled<
            Identity: ISlider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::IsThumbToolTipEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsThumbToolTipEnabled<
            Identity: ISlider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetIsThumbToolTipEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn Header<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlider_Impl::Header(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeader<Identity: ISlider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlider_Impl::SetHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISlider, OFFSET>(),
            IntermediateValue: IntermediateValue::<Identity, OFFSET>,
            SetIntermediateValue: SetIntermediateValue::<Identity, OFFSET>,
            StepFrequency: StepFrequency::<Identity, OFFSET>,
            SetStepFrequency: SetStepFrequency::<Identity, OFFSET>,
            SnapsTo: 0,
            SetSnapsTo: 0,
            TickFrequency: TickFrequency::<Identity, OFFSET>,
            SetTickFrequency: SetTickFrequency::<Identity, OFFSET>,
            TickPlacement: TickPlacement::<Identity, OFFSET>,
            SetTickPlacement: SetTickPlacement::<Identity, OFFSET>,
            Orientation: Orientation::<Identity, OFFSET>,
            SetOrientation: SetOrientation::<Identity, OFFSET>,
            IsDirectionReversed: IsDirectionReversed::<Identity, OFFSET>,
            SetIsDirectionReversed: SetIsDirectionReversed::<Identity, OFFSET>,
            IsThumbToolTipEnabled: IsThumbToolTipEnabled::<Identity, OFFSET>,
            SetIsThumbToolTipEnabled: SetIsThumbToolTipEnabled::<Identity, OFFSET>,
            ThumbToolTipValueConverter: 0,
            SetThumbToolTipValueConverter: 0,
            Header: Header::<Identity, OFFSET>,
            SetHeader: SetHeader::<Identity, OFFSET>,
            HeaderTemplate: 0,
            SetHeaderTemplate: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISlider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IntermediateValue:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetIntermediateValue:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub StepFrequency:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetStepFrequency:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    SnapsTo: usize,
    SetSnapsTo: usize,
    pub TickFrequency:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetTickFrequency:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub TickPlacement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut Primitives::TickPlacement,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    TickPlacement: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetTickPlacement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        Primitives::TickPlacement,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetTickPlacement: usize,
    pub Orientation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut Orientation,
    ) -> windows_core::HRESULT,
    pub SetOrientation:
        unsafe extern "system" fn(*mut core::ffi::c_void, Orientation) -> windows_core::HRESULT,
    pub IsDirectionReversed:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsDirectionReversed:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsThumbToolTipEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsThumbToolTipEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    ThumbToolTipValueConverter: usize,
    SetThumbToolTipValueConverter: usize,
    pub Header: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    HeaderTemplate: usize,
    SetHeaderTemplate: usize,
}
windows_core::imp::define_interface!(
    ISliderFactory,
    ISliderFactory_Vtbl,
    0x06604d71_34ca_5f39_9656_29d81d3c110c
);
impl windows_core::RuntimeType for ISliderFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ISliderFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISliderFactory";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait ISliderFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<Slider>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ISliderFactory_Vtbl {
    pub const fn new<Identity: ISliderFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ISliderFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISliderFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISliderFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISliderFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISliderFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    ISliderStatics,
    ISliderStatics_Vtbl,
    0xf0541f7b_6d81_59e2_997a_2e65fbcccd21
);
impl windows_core::RuntimeType for ISliderStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISliderStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISliderStatics";
}
pub trait ISliderStatics_Impl: windows_core::IUnknownImpl {}
impl ISliderStatics_Vtbl {
    pub const fn new<Identity: ISliderStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISliderStatics, OFFSET>(),
            IntermediateValueProperty: 0,
            StepFrequencyProperty: 0,
            SnapsToProperty: 0,
            TickFrequencyProperty: 0,
            TickPlacementProperty: 0,
            OrientationProperty: 0,
            IsDirectionReversedProperty: 0,
            IsThumbToolTipEnabledProperty: 0,
            ThumbToolTipValueConverterProperty: 0,
            HeaderProperty: 0,
            HeaderTemplateProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISliderStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISliderStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    IntermediateValueProperty: usize,
    StepFrequencyProperty: usize,
    SnapsToProperty: usize,
    TickFrequencyProperty: usize,
    TickPlacementProperty: usize,
    OrientationProperty: usize,
    IsDirectionReversedProperty: usize,
    IsThumbToolTipEnabledProperty: usize,
    ThumbToolTipValueConverterProperty: usize,
    HeaderProperty: usize,
    HeaderTemplateProperty: usize,
}
windows_core::imp::define_interface!(
    ISwapChainPanel,
    ISwapChainPanel_Vtbl,
    0x08844f85_aa1b_540d_bef2_b2bb7b257f8c
);
impl windows_core::RuntimeType for ISwapChainPanel {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ISwapChainPanel {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISwapChainPanel";
}
#[cfg(feature = "UI_Composition")]
pub trait ISwapChainPanel_Impl: windows_core::IUnknownImpl {
    fn CompositionScaleX(&self) -> windows_core::Result<f32>;
    fn CompositionScaleY(&self) -> windows_core::Result<f32>;
    fn CompositionScaleChanged(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<SwapChainPanel, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCompositionScaleChanged(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl ISwapChainPanel_Vtbl {
    pub const fn new<Identity: ISwapChainPanel_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CompositionScaleX<
            Identity: ISwapChainPanel_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwapChainPanel_Impl::CompositionScaleX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CompositionScaleY<
            Identity: ISwapChainPanel_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwapChainPanel_Impl::CompositionScaleY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CompositionScaleChanged<
            Identity: ISwapChainPanel_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwapChainPanel_Impl::CompositionScaleChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCompositionScaleChanged<
            Identity: ISwapChainPanel_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwapChainPanel_Impl::RemoveCompositionScaleChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISwapChainPanel, OFFSET>(),
            CompositionScaleX: CompositionScaleX::<Identity, OFFSET>,
            CompositionScaleY: CompositionScaleY::<Identity, OFFSET>,
            CompositionScaleChanged: CompositionScaleChanged::<Identity, OFFSET>,
            RemoveCompositionScaleChanged: RemoveCompositionScaleChanged::<Identity, OFFSET>,
            CreateCoreIndependentInputSource: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwapChainPanel as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanel_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CompositionScaleX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub CompositionScaleY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub CompositionScaleChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CompositionScaleChanged: usize,
    pub RemoveCompositionScaleChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    CreateCoreIndependentInputSource: usize,
}
windows_core::imp::define_interface!(
    ISwapChainPanelFactory,
    ISwapChainPanelFactory_Vtbl,
    0x38d00b69_5759_5f37_9e1c_3ae0d4288b26
);
impl windows_core::RuntimeType for ISwapChainPanelFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ISwapChainPanelFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISwapChainPanelFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait ISwapChainPanelFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<SwapChainPanel>;
}
#[cfg(feature = "UI_Composition")]
impl ISwapChainPanelFactory_Vtbl {
    pub const fn new<Identity: ISwapChainPanelFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ISwapChainPanelFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwapChainPanelFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISwapChainPanelFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwapChainPanelFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanelFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    ISwapChainPanelStatics,
    ISwapChainPanelStatics_Vtbl,
    0xd83b0621_aaca_534b_afde_5370167176b5
);
impl windows_core::RuntimeType for ISwapChainPanelStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISwapChainPanelStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ISwapChainPanelStatics";
}
pub trait ISwapChainPanelStatics_Impl: windows_core::IUnknownImpl {}
impl ISwapChainPanelStatics_Vtbl {
    pub const fn new<Identity: ISwapChainPanelStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISwapChainPanelStatics, OFFSET>(
            ),
            CompositionScaleXProperty: 0,
            CompositionScaleYProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwapChainPanelStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainPanelStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    CompositionScaleXProperty: usize,
    CompositionScaleYProperty: usize,
}
windows_core::imp::define_interface!(
    ITextBlock,
    ITextBlock_Vtbl,
    0x1ac8d84f_392c_5c7e_83f5_a53e3bf0abb0
);
impl windows_core::RuntimeType for ITextBlock {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextBlock {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextBlock";
}
pub trait ITextBlock_Impl: windows_core::IUnknownImpl {
    fn FontSize(&self) -> windows_core::Result<f64>;
    fn SetFontSize(&self, value: f64) -> windows_core::Result<()>;
    fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight>;
    fn SetFontWeight(&self, value: &windows::UI::Text::FontWeight) -> windows_core::Result<()>;
    fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle>;
    fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()>;
    fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch>;
    fn SetFontStretch(&self, value: windows::UI::Text::FontStretch) -> windows_core::Result<()>;
    fn CharacterSpacing(&self) -> windows_core::Result<i32>;
    fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()>;
    fn TextWrapping(&self) -> windows_core::Result<super::TextWrapping>;
    fn SetTextWrapping(&self, value: super::TextWrapping) -> windows_core::Result<()>;
    fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn Text(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn LineHeight(&self) -> windows_core::Result<f64>;
    fn SetLineHeight(&self, value: f64) -> windows_core::Result<()>;
    fn IsTextSelectionEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextSelectionEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn SelectedText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn BaselineOffset(&self) -> windows_core::Result<f64>;
    fn MaxLines(&self) -> windows_core::Result<i32>;
    fn SetMaxLines(&self, value: i32) -> windows_core::Result<()>;
    fn IsColorFontEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations>;
    fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()>;
    fn IsTextTrimmed(&self) -> windows_core::Result<bool>;
    fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetHorizontalTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn SelectionChanged(
        &self,
        handler: windows_core::Ref<super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveIsTextTrimmedChanged(&self, token: i64) -> windows_core::Result<()>;
    fn SelectAll(&self) -> windows_core::Result<()>;
    fn CopySelectionToClipboard(&self) -> windows_core::Result<()>;
}
impl ITextBlock_Vtbl {
    pub const fn new<Identity: ITextBlock_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FontSize<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::FontSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontSize<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetFontSize(this, value).into()
            }
        }
        unsafe extern "system" fn FontWeight<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::FontWeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontWeight<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetFontWeight(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FontStyle<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::FontStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStyle<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetFontStyle(this, value).into()
            }
        }
        unsafe extern "system" fn FontStretch<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::FontStretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStretch<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetFontStretch(this, value).into()
            }
        }
        unsafe extern "system" fn CharacterSpacing<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::CharacterSpacing(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCharacterSpacing<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetCharacterSpacing(this, value).into()
            }
        }
        unsafe extern "system" fn TextWrapping<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextWrapping,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::TextWrapping(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextWrapping<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::TextWrapping,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetTextWrapping(this, value).into()
            }
        }
        unsafe extern "system" fn TextAlignment<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::TextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextAlignment<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn Text<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::Text(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetText<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn LineHeight<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::LineHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLineHeight<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetLineHeight(this, value).into()
            }
        }
        unsafe extern "system" fn IsTextSelectionEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::IsTextSelectionEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextSelectionEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetIsTextSelectionEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn SelectedText<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::SelectedText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BaselineOffset<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::BaselineOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxLines<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::MaxLines(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxLines<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetMaxLines(this, value).into()
            }
        }
        unsafe extern "system" fn IsColorFontEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::IsColorFontEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsColorFontEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetIsColorFontEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsTextScaleFactorEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::IsTextScaleFactorEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextScaleFactorEnabled<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetIsTextScaleFactorEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn TextDecorations<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::TextDecorations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::TextDecorations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextDecorations<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::TextDecorations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetTextDecorations(this, value).into()
            }
        }
        unsafe extern "system" fn IsTextTrimmed<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::IsTextTrimmed(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalTextAlignment<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::HorizontalTextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalTextAlignment<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SetHorizontalTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn SelectionChanged<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBlock_Impl::SelectionChanged(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveSelectionChanged<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::RemoveSelectionChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveContextMenuOpening<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::RemoveContextMenuOpening(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveIsTextTrimmedChanged<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::RemoveIsTextTrimmedChanged(this, token).into()
            }
        }
        unsafe extern "system" fn SelectAll<Identity: ITextBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::SelectAll(this).into()
            }
        }
        unsafe extern "system" fn CopySelectionToClipboard<
            Identity: ITextBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBlock_Impl::CopySelectionToClipboard(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextBlock, OFFSET>(),
            FontSize: FontSize::<Identity, OFFSET>,
            SetFontSize: SetFontSize::<Identity, OFFSET>,
            FontFamily: 0,
            SetFontFamily: 0,
            FontWeight: FontWeight::<Identity, OFFSET>,
            SetFontWeight: SetFontWeight::<Identity, OFFSET>,
            FontStyle: FontStyle::<Identity, OFFSET>,
            SetFontStyle: SetFontStyle::<Identity, OFFSET>,
            FontStretch: FontStretch::<Identity, OFFSET>,
            SetFontStretch: SetFontStretch::<Identity, OFFSET>,
            CharacterSpacing: CharacterSpacing::<Identity, OFFSET>,
            SetCharacterSpacing: SetCharacterSpacing::<Identity, OFFSET>,
            Foreground: 0,
            SetForeground: 0,
            TextWrapping: TextWrapping::<Identity, OFFSET>,
            SetTextWrapping: SetTextWrapping::<Identity, OFFSET>,
            TextTrimming: 0,
            SetTextTrimming: 0,
            TextAlignment: TextAlignment::<Identity, OFFSET>,
            SetTextAlignment: SetTextAlignment::<Identity, OFFSET>,
            Text: Text::<Identity, OFFSET>,
            SetText: SetText::<Identity, OFFSET>,
            Inlines: 0,
            Padding: 0,
            SetPadding: 0,
            LineHeight: LineHeight::<Identity, OFFSET>,
            SetLineHeight: SetLineHeight::<Identity, OFFSET>,
            LineStackingStrategy: 0,
            SetLineStackingStrategy: 0,
            IsTextSelectionEnabled: IsTextSelectionEnabled::<Identity, OFFSET>,
            SetIsTextSelectionEnabled: SetIsTextSelectionEnabled::<Identity, OFFSET>,
            SelectedText: SelectedText::<Identity, OFFSET>,
            ContentStart: 0,
            ContentEnd: 0,
            SelectionStart: 0,
            SelectionEnd: 0,
            BaselineOffset: BaselineOffset::<Identity, OFFSET>,
            SelectionHighlightColor: 0,
            SetSelectionHighlightColor: 0,
            MaxLines: MaxLines::<Identity, OFFSET>,
            SetMaxLines: SetMaxLines::<Identity, OFFSET>,
            TextLineBounds: 0,
            SetTextLineBounds: 0,
            OpticalMarginAlignment: 0,
            SetOpticalMarginAlignment: 0,
            IsColorFontEnabled: IsColorFontEnabled::<Identity, OFFSET>,
            SetIsColorFontEnabled: SetIsColorFontEnabled::<Identity, OFFSET>,
            TextReadingOrder: 0,
            SetTextReadingOrder: 0,
            IsTextScaleFactorEnabled: IsTextScaleFactorEnabled::<Identity, OFFSET>,
            SetIsTextScaleFactorEnabled: SetIsTextScaleFactorEnabled::<Identity, OFFSET>,
            TextDecorations: TextDecorations::<Identity, OFFSET>,
            SetTextDecorations: SetTextDecorations::<Identity, OFFSET>,
            IsTextTrimmed: IsTextTrimmed::<Identity, OFFSET>,
            HorizontalTextAlignment: HorizontalTextAlignment::<Identity, OFFSET>,
            SetHorizontalTextAlignment: SetHorizontalTextAlignment::<Identity, OFFSET>,
            TextHighlighters: 0,
            SelectionFlyout: 0,
            SetSelectionFlyout: 0,
            SelectionChanged: SelectionChanged::<Identity, OFFSET>,
            RemoveSelectionChanged: RemoveSelectionChanged::<Identity, OFFSET>,
            ContextMenuOpening: 0,
            RemoveContextMenuOpening: RemoveContextMenuOpening::<Identity, OFFSET>,
            IsTextTrimmedChanged: 0,
            RemoveIsTextTrimmedChanged: RemoveIsTextTrimmedChanged::<Identity, OFFSET>,
            SelectAll: SelectAll::<Identity, OFFSET>,
            Select: 0,
            GetAlphaMask: 0,
            CopySelectionToClipboard: CopySelectionToClipboard::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextBlock as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlock_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    FontFamily: usize,
    SetFontFamily: usize,
    pub FontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub CharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetCharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    Foreground: usize,
    SetForeground: usize,
    pub TextWrapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextWrapping,
    ) -> windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextWrapping,
    ) -> windows_core::HRESULT,
    TextTrimming: usize,
    SetTextTrimming: usize,
    pub TextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub Text: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    Inlines: usize,
    Padding: usize,
    SetPadding: usize,
    pub LineHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetLineHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    LineStackingStrategy: usize,
    SetLineStackingStrategy: usize,
    pub IsTextSelectionEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextSelectionEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub SelectedText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    ContentStart: usize,
    ContentEnd: usize,
    SelectionStart: usize,
    SelectionEnd: usize,
    pub BaselineOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    SelectionHighlightColor: usize,
    SetSelectionHighlightColor: usize,
    pub MaxLines:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetMaxLines:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    TextLineBounds: usize,
    SetTextLineBounds: usize,
    OpticalMarginAlignment: usize,
    SetOpticalMarginAlignment: usize,
    pub IsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    TextReadingOrder: usize,
    SetTextReadingOrder: usize,
    pub IsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub TextDecorations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::TextDecorations,
    ) -> windows_core::HRESULT,
    pub SetTextDecorations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::TextDecorations,
    ) -> windows_core::HRESULT,
    pub IsTextTrimmed:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    TextHighlighters: usize,
    SelectionFlyout: usize,
    SetSelectionFlyout: usize,
    pub SelectionChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveSelectionChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    ContextMenuOpening: usize,
    pub RemoveContextMenuOpening:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    IsTextTrimmedChanged: usize,
    pub RemoveIsTextTrimmedChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    Select: usize,
    GetAlphaMask: usize,
    pub CopySelectionToClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextBlockStatics,
    ITextBlockStatics_Vtbl,
    0x3187104b_65c2_5e53_b889_c8272b1314cd
);
impl windows_core::RuntimeType for ITextBlockStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextBlockStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextBlockStatics";
}
pub trait ITextBlockStatics_Impl: windows_core::IUnknownImpl {}
impl ITextBlockStatics_Vtbl {
    pub const fn new<Identity: ITextBlockStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextBlockStatics, OFFSET>(),
            FontSizeProperty: 0,
            FontFamilyProperty: 0,
            FontWeightProperty: 0,
            FontStyleProperty: 0,
            FontStretchProperty: 0,
            CharacterSpacingProperty: 0,
            ForegroundProperty: 0,
            TextWrappingProperty: 0,
            TextTrimmingProperty: 0,
            TextAlignmentProperty: 0,
            TextProperty: 0,
            PaddingProperty: 0,
            LineHeightProperty: 0,
            LineStackingStrategyProperty: 0,
            IsTextSelectionEnabledProperty: 0,
            SelectedTextProperty: 0,
            SelectionHighlightColorProperty: 0,
            MaxLinesProperty: 0,
            TextLineBoundsProperty: 0,
            OpticalMarginAlignmentProperty: 0,
            IsColorFontEnabledProperty: 0,
            TextReadingOrderProperty: 0,
            IsTextScaleFactorEnabledProperty: 0,
            TextDecorationsProperty: 0,
            IsTextTrimmedProperty: 0,
            HorizontalTextAlignmentProperty: 0,
            SelectionFlyoutProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextBlockStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBlockStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    FontSizeProperty: usize,
    FontFamilyProperty: usize,
    FontWeightProperty: usize,
    FontStyleProperty: usize,
    FontStretchProperty: usize,
    CharacterSpacingProperty: usize,
    ForegroundProperty: usize,
    TextWrappingProperty: usize,
    TextTrimmingProperty: usize,
    TextAlignmentProperty: usize,
    TextProperty: usize,
    PaddingProperty: usize,
    LineHeightProperty: usize,
    LineStackingStrategyProperty: usize,
    IsTextSelectionEnabledProperty: usize,
    SelectedTextProperty: usize,
    SelectionHighlightColorProperty: usize,
    MaxLinesProperty: usize,
    TextLineBoundsProperty: usize,
    OpticalMarginAlignmentProperty: usize,
    IsColorFontEnabledProperty: usize,
    TextReadingOrderProperty: usize,
    IsTextScaleFactorEnabledProperty: usize,
    TextDecorationsProperty: usize,
    IsTextTrimmedProperty: usize,
    HorizontalTextAlignmentProperty: usize,
    SelectionFlyoutProperty: usize,
}
windows_core::imp::define_interface!(
    ITextBox,
    ITextBox_Vtbl,
    0x873af7c2_ab89_5d76_8dbe_3d6325669df5
);
impl windows_core::RuntimeType for ITextBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextBox";
}
pub trait ITextBox_Impl: windows_core::IUnknownImpl {
    fn Text(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn SelectedText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetSelectedText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn SelectionLength(&self) -> windows_core::Result<i32>;
    fn SetSelectionLength(&self, value: i32) -> windows_core::Result<()>;
    fn SelectionStart(&self) -> windows_core::Result<i32>;
    fn SetSelectionStart(&self, value: i32) -> windows_core::Result<()>;
    fn MaxLength(&self) -> windows_core::Result<i32>;
    fn SetMaxLength(&self, value: i32) -> windows_core::Result<()>;
    fn IsReadOnly(&self) -> windows_core::Result<bool>;
    fn SetIsReadOnly(&self, value: bool) -> windows_core::Result<()>;
    fn AcceptsReturn(&self) -> windows_core::Result<bool>;
    fn SetAcceptsReturn(&self, value: bool) -> windows_core::Result<()>;
    fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn TextWrapping(&self) -> windows_core::Result<super::TextWrapping>;
    fn SetTextWrapping(&self, value: super::TextWrapping) -> windows_core::Result<()>;
    fn IsSpellCheckEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsSpellCheckEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsTextPredictionEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextPredictionEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn Header(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetHeader(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn PreventKeyboardDisplayOnProgrammaticFocus(&self) -> windows_core::Result<bool>;
    fn SetPreventKeyboardDisplayOnProgrammaticFocus(&self, value: bool)
        -> windows_core::Result<()>;
    fn IsColorFontEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetHorizontalTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn CanPasteClipboardContent(&self) -> windows_core::Result<bool>;
    fn CanUndo(&self) -> windows_core::Result<bool>;
    fn CanRedo(&self) -> windows_core::Result<bool>;
    fn Description(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetDescription(
        &self,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn TextChanged(
        &self,
        handler: windows_core::Ref<TextChangedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveTextChanged(&self, token: i64) -> windows_core::Result<()>;
    fn SelectionChanged(
        &self,
        handler: windows_core::Ref<super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()>;
    fn RemovePaste(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveTextCompositionStarted(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveTextCompositionChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveTextCompositionEnded(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveCopyingToClipboard(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveCuttingToClipboard(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveBeforeTextChanging(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveSelectionChanging(&self, token: i64) -> windows_core::Result<()>;
    fn Select(&self, start: i32, length: i32) -> windows_core::Result<()>;
    fn SelectAll(&self) -> windows_core::Result<()>;
    fn GetRectFromCharacterIndex(
        &self,
        charIndex: i32,
        trailingEdge: bool,
    ) -> windows_core::Result<windows::Foundation::Rect>;
    fn GetLinguisticAlternativesAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows_collections::IVectorView<windows_core::HSTRING>>,
    >;
    fn Undo(&self) -> windows_core::Result<()>;
    fn Redo(&self) -> windows_core::Result<()>;
    fn PasteFromClipboard(&self) -> windows_core::Result<()>;
    fn CopySelectionToClipboard(&self) -> windows_core::Result<()>;
    fn CutSelectionToClipboard(&self) -> windows_core::Result<()>;
    fn ClearUndoRedoHistory(&self) -> windows_core::Result<()>;
    fn RemoveCandidateWindowBoundsChanged(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveTextChanging(&self, token: i64) -> windows_core::Result<()>;
}
impl ITextBox_Vtbl {
    pub const fn new<Identity: ITextBox_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Text<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::Text(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetText<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn SelectedText<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::SelectedText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectedText<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetSelectedText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn SelectionLength<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::SelectionLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectionLength<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetSelectionLength(this, value).into()
            }
        }
        unsafe extern "system" fn SelectionStart<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::SelectionStart(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSelectionStart<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetSelectionStart(this, value).into()
            }
        }
        unsafe extern "system" fn MaxLength<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::MaxLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMaxLength<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetMaxLength(this, value).into()
            }
        }
        unsafe extern "system" fn IsReadOnly<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::IsReadOnly(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsReadOnly<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetIsReadOnly(this, value).into()
            }
        }
        unsafe extern "system" fn AcceptsReturn<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::AcceptsReturn(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAcceptsReturn<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetAcceptsReturn(this, value).into()
            }
        }
        unsafe extern "system" fn TextAlignment<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::TextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextAlignment<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn TextWrapping<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextWrapping,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::TextWrapping(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextWrapping<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::TextWrapping,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetTextWrapping(this, value).into()
            }
        }
        unsafe extern "system" fn IsSpellCheckEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::IsSpellCheckEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSpellCheckEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetIsSpellCheckEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsTextPredictionEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::IsTextPredictionEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextPredictionEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetIsTextPredictionEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn Header<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::Header(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeader<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetHeader(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn PlaceholderText<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::PlaceholderText(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlaceholderText<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetPlaceholderText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn PreventKeyboardDisplayOnProgrammaticFocus<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::PreventKeyboardDisplayOnProgrammaticFocus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPreventKeyboardDisplayOnProgrammaticFocus<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetPreventKeyboardDisplayOnProgrammaticFocus(this, value).into()
            }
        }
        unsafe extern "system" fn IsColorFontEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::IsColorFontEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsColorFontEnabled<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetIsColorFontEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalTextAlignment<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::HorizontalTextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalTextAlignment<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetHorizontalTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn CanPasteClipboardContent<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::CanPasteClipboardContent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanUndo<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::CanUndo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanRedo<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::CanRedo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Description<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::Description(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDescription<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SetDescription(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn TextChanged<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::TextChanged(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveTextChanged<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveTextChanged(this, token).into()
            }
        }
        unsafe extern "system" fn SelectionChanged<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::SelectionChanged(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveSelectionChanged<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveSelectionChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveContextMenuOpening<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveContextMenuOpening(this, token).into()
            }
        }
        unsafe extern "system" fn RemovePaste<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemovePaste(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveTextCompositionStarted<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveTextCompositionStarted(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveTextCompositionChanged<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveTextCompositionChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveTextCompositionEnded<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveTextCompositionEnded(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveCopyingToClipboard<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveCopyingToClipboard(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveCuttingToClipboard<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveCuttingToClipboard(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveBeforeTextChanging<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveBeforeTextChanging(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveSelectionChanging<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveSelectionChanging(this, token).into()
            }
        }
        unsafe extern "system" fn Select<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            start: i32,
            length: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::Select(this, start, length).into()
            }
        }
        unsafe extern "system" fn SelectAll<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::SelectAll(this).into()
            }
        }
        unsafe extern "system" fn GetRectFromCharacterIndex<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            charindex: i32,
            trailingedge: bool,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::GetRectFromCharacterIndex(this, charindex, trailingedge) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLinguisticAlternativesAsync<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBox_Impl::GetLinguisticAlternativesAsync(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Undo<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::Undo(this).into()
            }
        }
        unsafe extern "system" fn Redo<Identity: ITextBox_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::Redo(this).into()
            }
        }
        unsafe extern "system" fn PasteFromClipboard<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::PasteFromClipboard(this).into()
            }
        }
        unsafe extern "system" fn CopySelectionToClipboard<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::CopySelectionToClipboard(this).into()
            }
        }
        unsafe extern "system" fn CutSelectionToClipboard<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::CutSelectionToClipboard(this).into()
            }
        }
        unsafe extern "system" fn ClearUndoRedoHistory<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::ClearUndoRedoHistory(this).into()
            }
        }
        unsafe extern "system" fn RemoveCandidateWindowBoundsChanged<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveCandidateWindowBoundsChanged(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveTextChanging<
            Identity: ITextBox_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextBox_Impl::RemoveTextChanging(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextBox, OFFSET>(),
            Text: Text::<Identity, OFFSET>,
            SetText: SetText::<Identity, OFFSET>,
            SelectedText: SelectedText::<Identity, OFFSET>,
            SetSelectedText: SetSelectedText::<Identity, OFFSET>,
            SelectionLength: SelectionLength::<Identity, OFFSET>,
            SetSelectionLength: SetSelectionLength::<Identity, OFFSET>,
            SelectionStart: SelectionStart::<Identity, OFFSET>,
            SetSelectionStart: SetSelectionStart::<Identity, OFFSET>,
            MaxLength: MaxLength::<Identity, OFFSET>,
            SetMaxLength: SetMaxLength::<Identity, OFFSET>,
            IsReadOnly: IsReadOnly::<Identity, OFFSET>,
            SetIsReadOnly: SetIsReadOnly::<Identity, OFFSET>,
            AcceptsReturn: AcceptsReturn::<Identity, OFFSET>,
            SetAcceptsReturn: SetAcceptsReturn::<Identity, OFFSET>,
            TextAlignment: TextAlignment::<Identity, OFFSET>,
            SetTextAlignment: SetTextAlignment::<Identity, OFFSET>,
            TextWrapping: TextWrapping::<Identity, OFFSET>,
            SetTextWrapping: SetTextWrapping::<Identity, OFFSET>,
            IsSpellCheckEnabled: IsSpellCheckEnabled::<Identity, OFFSET>,
            SetIsSpellCheckEnabled: SetIsSpellCheckEnabled::<Identity, OFFSET>,
            IsTextPredictionEnabled: IsTextPredictionEnabled::<Identity, OFFSET>,
            SetIsTextPredictionEnabled: SetIsTextPredictionEnabled::<Identity, OFFSET>,
            InputScope: 0,
            SetInputScope: 0,
            Header: Header::<Identity, OFFSET>,
            SetHeader: SetHeader::<Identity, OFFSET>,
            HeaderTemplate: 0,
            SetHeaderTemplate: 0,
            PlaceholderText: PlaceholderText::<Identity, OFFSET>,
            SetPlaceholderText: SetPlaceholderText::<Identity, OFFSET>,
            SelectionHighlightColor: 0,
            SetSelectionHighlightColor: 0,
            PreventKeyboardDisplayOnProgrammaticFocus: PreventKeyboardDisplayOnProgrammaticFocus::<
                Identity,
                OFFSET,
            >,
            SetPreventKeyboardDisplayOnProgrammaticFocus:
                SetPreventKeyboardDisplayOnProgrammaticFocus::<Identity, OFFSET>,
            IsColorFontEnabled: IsColorFontEnabled::<Identity, OFFSET>,
            SetIsColorFontEnabled: SetIsColorFontEnabled::<Identity, OFFSET>,
            SelectionHighlightColorWhenNotFocused: 0,
            SetSelectionHighlightColorWhenNotFocused: 0,
            HorizontalTextAlignment: HorizontalTextAlignment::<Identity, OFFSET>,
            SetHorizontalTextAlignment: SetHorizontalTextAlignment::<Identity, OFFSET>,
            CharacterCasing: 0,
            SetCharacterCasing: 0,
            PlaceholderForeground: 0,
            SetPlaceholderForeground: 0,
            CanPasteClipboardContent: CanPasteClipboardContent::<Identity, OFFSET>,
            CanUndo: CanUndo::<Identity, OFFSET>,
            CanRedo: CanRedo::<Identity, OFFSET>,
            SelectionFlyout: 0,
            SetSelectionFlyout: 0,
            ProofingMenuFlyout: 0,
            Description: Description::<Identity, OFFSET>,
            SetDescription: SetDescription::<Identity, OFFSET>,
            TextChanged: TextChanged::<Identity, OFFSET>,
            RemoveTextChanged: RemoveTextChanged::<Identity, OFFSET>,
            SelectionChanged: SelectionChanged::<Identity, OFFSET>,
            RemoveSelectionChanged: RemoveSelectionChanged::<Identity, OFFSET>,
            ContextMenuOpening: 0,
            RemoveContextMenuOpening: RemoveContextMenuOpening::<Identity, OFFSET>,
            Paste: 0,
            RemovePaste: RemovePaste::<Identity, OFFSET>,
            TextCompositionStarted: 0,
            RemoveTextCompositionStarted: RemoveTextCompositionStarted::<Identity, OFFSET>,
            TextCompositionChanged: 0,
            RemoveTextCompositionChanged: RemoveTextCompositionChanged::<Identity, OFFSET>,
            TextCompositionEnded: 0,
            RemoveTextCompositionEnded: RemoveTextCompositionEnded::<Identity, OFFSET>,
            CopyingToClipboard: 0,
            RemoveCopyingToClipboard: RemoveCopyingToClipboard::<Identity, OFFSET>,
            CuttingToClipboard: 0,
            RemoveCuttingToClipboard: RemoveCuttingToClipboard::<Identity, OFFSET>,
            BeforeTextChanging: 0,
            RemoveBeforeTextChanging: RemoveBeforeTextChanging::<Identity, OFFSET>,
            SelectionChanging: 0,
            RemoveSelectionChanging: RemoveSelectionChanging::<Identity, OFFSET>,
            Select: Select::<Identity, OFFSET>,
            SelectAll: SelectAll::<Identity, OFFSET>,
            GetRectFromCharacterIndex: GetRectFromCharacterIndex::<Identity, OFFSET>,
            GetLinguisticAlternativesAsync: GetLinguisticAlternativesAsync::<Identity, OFFSET>,
            Undo: Undo::<Identity, OFFSET>,
            Redo: Redo::<Identity, OFFSET>,
            PasteFromClipboard: PasteFromClipboard::<Identity, OFFSET>,
            CopySelectionToClipboard: CopySelectionToClipboard::<Identity, OFFSET>,
            CutSelectionToClipboard: CutSelectionToClipboard::<Identity, OFFSET>,
            ClearUndoRedoHistory: ClearUndoRedoHistory::<Identity, OFFSET>,
            TextReadingOrder: 0,
            SetTextReadingOrder: 0,
            DesiredCandidateWindowAlignment: 0,
            SetDesiredCandidateWindowAlignment: 0,
            CandidateWindowBoundsChanged: 0,
            RemoveCandidateWindowBoundsChanged: RemoveCandidateWindowBoundsChanged::<
                Identity,
                OFFSET,
            >,
            TextChanging: 0,
            RemoveTextChanging: RemoveTextChanging::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextBox as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBox_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectedText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSelectedText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectionLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetSelectionLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub SelectionStart:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetSelectionStart:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub MaxLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetMaxLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub IsReadOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsReadOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AcceptsReturn:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAcceptsReturn:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub TextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub TextWrapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextWrapping,
    ) -> windows_core::HRESULT,
    pub SetTextWrapping: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextWrapping,
    ) -> windows_core::HRESULT,
    pub IsSpellCheckEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSpellCheckEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsTextPredictionEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextPredictionEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    InputScope: usize,
    SetInputScope: usize,
    pub Header: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    HeaderTemplate: usize,
    SetHeaderTemplate: usize,
    pub PlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPlaceholderText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    SelectionHighlightColor: usize,
    SetSelectionHighlightColor: usize,
    pub PreventKeyboardDisplayOnProgrammaticFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetPreventKeyboardDisplayOnProgrammaticFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    SelectionHighlightColorWhenNotFocused: usize,
    SetSelectionHighlightColorWhenNotFocused: usize,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    CharacterCasing: usize,
    SetCharacterCasing: usize,
    PlaceholderForeground: usize,
    SetPlaceholderForeground: usize,
    pub CanPasteClipboardContent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanUndo:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanRedo:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    SelectionFlyout: usize,
    SetSelectionFlyout: usize,
    ProofingMenuFlyout: usize,
    pub Description: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TextChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveTextChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub SelectionChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveSelectionChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    ContextMenuOpening: usize,
    pub RemoveContextMenuOpening:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    Paste: usize,
    pub RemovePaste:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    TextCompositionStarted: usize,
    pub RemoveTextCompositionStarted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    TextCompositionChanged: usize,
    pub RemoveTextCompositionChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    TextCompositionEnded: usize,
    pub RemoveTextCompositionEnded:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    CopyingToClipboard: usize,
    pub RemoveCopyingToClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    CuttingToClipboard: usize,
    pub RemoveCuttingToClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    BeforeTextChanging: usize,
    pub RemoveBeforeTextChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    SelectionChanging: usize,
    pub RemoveSelectionChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Select:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32, i32) -> windows_core::HRESULT,
    pub SelectAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GetRectFromCharacterIndex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        bool,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub GetLinguisticAlternativesAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Undo: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Redo: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub PasteFromClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub CopySelectionToClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub CutSelectionToClipboard:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub ClearUndoRedoHistory:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    TextReadingOrder: usize,
    SetTextReadingOrder: usize,
    DesiredCandidateWindowAlignment: usize,
    SetDesiredCandidateWindowAlignment: usize,
    CandidateWindowBoundsChanged: usize,
    pub RemoveCandidateWindowBoundsChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    TextChanging: usize,
    pub RemoveTextChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextBoxFactory,
    ITextBoxFactory_Vtbl,
    0xe1d8b82e_bc60_5d27_b646_5ca4c4a69432
);
impl windows_core::RuntimeType for ITextBoxFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ITextBoxFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextBoxFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait ITextBoxFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<TextBox>;
}
#[cfg(feature = "UI_Composition")]
impl ITextBoxFactory_Vtbl {
    pub const fn new<Identity: ITextBoxFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ITextBoxFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextBoxFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextBoxFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextBoxFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    ITextBoxStatics,
    ITextBoxStatics_Vtbl,
    0xa41cf38f_712a_5599_bbed_5a3d9b6bd46e
);
impl windows_core::RuntimeType for ITextBoxStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextBoxStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextBoxStatics";
}
pub trait ITextBoxStatics_Impl: windows_core::IUnknownImpl {}
impl ITextBoxStatics_Vtbl {
    pub const fn new<Identity: ITextBoxStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextBoxStatics, OFFSET>(),
            TextProperty: 0,
            MaxLengthProperty: 0,
            IsReadOnlyProperty: 0,
            AcceptsReturnProperty: 0,
            TextAlignmentProperty: 0,
            TextWrappingProperty: 0,
            IsSpellCheckEnabledProperty: 0,
            IsTextPredictionEnabledProperty: 0,
            InputScopeProperty: 0,
            HeaderProperty: 0,
            HeaderTemplateProperty: 0,
            PlaceholderTextProperty: 0,
            SelectionHighlightColorProperty: 0,
            PreventKeyboardDisplayOnProgrammaticFocusProperty: 0,
            IsColorFontEnabledProperty: 0,
            SelectionHighlightColorWhenNotFocusedProperty: 0,
            HorizontalTextAlignmentProperty: 0,
            CharacterCasingProperty: 0,
            PlaceholderForegroundProperty: 0,
            CanPasteClipboardContentProperty: 0,
            CanUndoProperty: 0,
            CanRedoProperty: 0,
            SelectionFlyoutProperty: 0,
            ProofingMenuFlyoutProperty: 0,
            DescriptionProperty: 0,
            DesiredCandidateWindowAlignmentProperty: 0,
            TextReadingOrderProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextBoxStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextBoxStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    TextProperty: usize,
    MaxLengthProperty: usize,
    IsReadOnlyProperty: usize,
    AcceptsReturnProperty: usize,
    TextAlignmentProperty: usize,
    TextWrappingProperty: usize,
    IsSpellCheckEnabledProperty: usize,
    IsTextPredictionEnabledProperty: usize,
    InputScopeProperty: usize,
    HeaderProperty: usize,
    HeaderTemplateProperty: usize,
    PlaceholderTextProperty: usize,
    SelectionHighlightColorProperty: usize,
    PreventKeyboardDisplayOnProgrammaticFocusProperty: usize,
    IsColorFontEnabledProperty: usize,
    SelectionHighlightColorWhenNotFocusedProperty: usize,
    HorizontalTextAlignmentProperty: usize,
    CharacterCasingProperty: usize,
    PlaceholderForegroundProperty: usize,
    CanPasteClipboardContentProperty: usize,
    CanUndoProperty: usize,
    CanRedoProperty: usize,
    SelectionFlyoutProperty: usize,
    ProofingMenuFlyoutProperty: usize,
    DescriptionProperty: usize,
    DesiredCandidateWindowAlignmentProperty: usize,
    TextReadingOrderProperty: usize,
}
windows_core::imp::define_interface!(
    ITextChangedEventArgs,
    ITextChangedEventArgs_Vtbl,
    0x71c37e43_7be7_52fc_bf8c_9867f44be5f4
);
impl windows_core::RuntimeType for ITextChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ITextChangedEventArgs";
}
pub trait ITextChangedEventArgs_Impl: windows_core::IUnknownImpl {}
impl ITextChangedEventArgs_Vtbl {
    pub const fn new<Identity: ITextChangedEventArgs_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextChangedEventArgs, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IToolTip,
    IToolTip_Vtbl,
    0x67e93d74_5e93_59a1_91bf_413efbeb904c
);
impl windows_core::RuntimeType for IToolTip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IToolTip {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IToolTip";
}
#[cfg(feature = "UI_Composition")]
pub trait IToolTip_Impl: windows_core::IUnknownImpl {
    fn HorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn IsOpen(&self) -> windows_core::Result<bool>;
    fn SetIsOpen(&self, value: bool) -> windows_core::Result<()>;
    fn PlacementTarget(&self) -> windows_core::Result<super::UIElement>;
    fn SetPlacementTarget(
        &self,
        value: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
    fn PlacementRect(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Rect>>;
    fn SetPlacementRect(
        &self,
        value: windows_core::Ref<windows::Foundation::IReference<windows::Foundation::Rect>>,
    ) -> windows_core::Result<()>;
    fn VerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn Closed(
        &self,
        handler: windows_core::Ref<super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveClosed(&self, token: i64) -> windows_core::Result<()>;
    fn Opened(
        &self,
        handler: windows_core::Ref<super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveOpened(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IToolTip_Vtbl {
    pub const fn new<Identity: IToolTip_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontalOffset<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::HorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalOffset<
            Identity: IToolTip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::SetHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn IsOpen<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::IsOpen(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsOpen<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::SetIsOpen(this, value).into()
            }
        }
        unsafe extern "system" fn PlacementTarget<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::PlacementTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlacementTarget<
            Identity: IToolTip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::SetPlacementTarget(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn PlacementRect<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::PlacementRect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlacementRect<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::SetPlacementRect(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn VerticalOffset<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::VerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalOffset<
            Identity: IToolTip_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::SetVerticalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn Closed<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::Closed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveClosed<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::RemoveClosed(this, token).into()
            }
        }
        unsafe extern "system" fn Opened<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTip_Impl::Opened(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveOpened<Identity: IToolTip_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTip_Impl::RemoveOpened(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToolTip, OFFSET>(),
            HorizontalOffset: HorizontalOffset::<Identity, OFFSET>,
            SetHorizontalOffset: SetHorizontalOffset::<Identity, OFFSET>,
            IsOpen: IsOpen::<Identity, OFFSET>,
            SetIsOpen: SetIsOpen::<Identity, OFFSET>,
            Placement: 0,
            SetPlacement: 0,
            PlacementTarget: PlacementTarget::<Identity, OFFSET>,
            SetPlacementTarget: SetPlacementTarget::<Identity, OFFSET>,
            PlacementRect: PlacementRect::<Identity, OFFSET>,
            SetPlacementRect: SetPlacementRect::<Identity, OFFSET>,
            VerticalOffset: VerticalOffset::<Identity, OFFSET>,
            SetVerticalOffset: SetVerticalOffset::<Identity, OFFSET>,
            TemplateSettings: 0,
            Closed: Closed::<Identity, OFFSET>,
            RemoveClosed: RemoveClosed::<Identity, OFFSET>,
            Opened: Opened::<Identity, OFFSET>,
            RemoveOpened: RemoveOpened::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToolTip as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTip_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub IsOpen:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsOpen: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    Placement: usize,
    SetPlacement: usize,
    #[cfg(feature = "UI_Composition")]
    pub PlacementTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    PlacementTarget: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetPlacementTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetPlacementTarget: usize,
    pub PlacementRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPlacementRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub VerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    TemplateSettings: usize,
    pub Closed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveClosed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Opened: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveOpened:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IToolTipFactory,
    IToolTipFactory_Vtbl,
    0xbcbb3720_2db8_54e1_8806_fcbed38949a9
);
impl windows_core::RuntimeType for IToolTipFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IToolTipFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IToolTipFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IToolTipFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<ToolTip>;
}
#[cfg(feature = "UI_Composition")]
impl IToolTipFactory_Vtbl {
    pub const fn new<Identity: IToolTipFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IToolTipFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTipFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToolTipFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToolTipFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IToolTipService,
    IToolTipService_Vtbl,
    0x01140768_2727_5f89_80e0_5210326a3431
);
impl windows_core::RuntimeType for IToolTipService {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IToolTipService {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IToolTipService";
}
pub trait IToolTipService_Impl: windows_core::IUnknownImpl {}
impl IToolTipService_Vtbl {
    pub const fn new<Identity: IToolTipService_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToolTipService, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToolTipService as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipService_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IToolTipServiceStatics,
    IToolTipServiceStatics_Vtbl,
    0x5aa38adc_9874_5e0a_8d8e_1574efc0b88f
);
impl windows_core::RuntimeType for IToolTipServiceStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IToolTipServiceStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IToolTipServiceStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IToolTipServiceStatics_Impl: windows_core::IUnknownImpl {
    fn GetPlacementTarget(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<super::UIElement>;
    fn SetPlacementTarget(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        value: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
    fn GetToolTip(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn SetToolTip(
        &self,
        element: windows_core::Ref<super::DependencyObject>,
        value: windows_core::Ref<windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IToolTipServiceStatics_Vtbl {
    pub const fn new<Identity: IToolTipServiceStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetPlacementTarget<
            Identity: IToolTipServiceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTipServiceStatics_Impl::GetPlacementTarget(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPlacementTarget<
            Identity: IToolTipServiceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTipServiceStatics_Impl::SetPlacementTarget(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetToolTip<
            Identity: IToolTipServiceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToolTipServiceStatics_Impl::GetToolTip(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetToolTip<
            Identity: IToolTipServiceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToolTipServiceStatics_Impl::SetToolTip(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToolTipServiceStatics, OFFSET>(
            ),
            PlacementProperty: 0,
            GetPlacement: 0,
            SetPlacement: 0,
            PlacementTargetProperty: 0,
            GetPlacementTarget: GetPlacementTarget::<Identity, OFFSET>,
            SetPlacementTarget: SetPlacementTarget::<Identity, OFFSET>,
            ToolTipProperty: 0,
            GetToolTip: GetToolTip::<Identity, OFFSET>,
            SetToolTip: SetToolTip::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToolTipServiceStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipServiceStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    PlacementProperty: usize,
    GetPlacement: usize,
    SetPlacement: usize,
    PlacementTargetProperty: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetPlacementTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetPlacementTarget: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetPlacementTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetPlacementTarget: usize,
    ToolTipProperty: usize,
    pub GetToolTip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetToolTip: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IToolTipStatics,
    IToolTipStatics_Vtbl,
    0x88eb60d4_cd54_5e23_bd1a_223702442ba4
);
impl windows_core::RuntimeType for IToolTipStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IToolTipStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IToolTipStatics";
}
pub trait IToolTipStatics_Impl: windows_core::IUnknownImpl {}
impl IToolTipStatics_Vtbl {
    pub const fn new<Identity: IToolTipStatics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToolTipStatics, OFFSET>(),
            HorizontalOffsetProperty: 0,
            IsOpenProperty: 0,
            PlacementProperty: 0,
            PlacementTargetProperty: 0,
            PlacementRectProperty: 0,
            VerticalOffsetProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToolTipStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToolTipStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    HorizontalOffsetProperty: usize,
    IsOpenProperty: usize,
    PlacementProperty: usize,
    PlacementTargetProperty: usize,
    PlacementRectProperty: usize,
    VerticalOffsetProperty: usize,
}
windows_core::imp::define_interface!(
    IUIElementCollection,
    IUIElementCollection_Vtbl,
    0x23050cb1_db88_54ed_9083_5ecfb12512fd
);
impl windows_core::RuntimeType for IUIElementCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IUIElementCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IUIElementCollection";
}
pub trait IUIElementCollection_Impl: windows_core::IUnknownImpl {
    fn Move(&self, oldIndex: u32, newIndex: u32) -> windows_core::Result<()>;
}
impl IUIElementCollection_Vtbl {
    pub const fn new<Identity: IUIElementCollection_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Move<Identity: IUIElementCollection_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            oldindex: u32,
            newindex: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IUIElementCollection_Impl::Move(this, oldindex, newindex).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IUIElementCollection, OFFSET>(
            ),
            Move: Move::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IUIElementCollection as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementCollection_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Move: unsafe extern "system" fn(*mut core::ffi::c_void, u32, u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWebView2,
    IWebView2_Vtbl,
    0x2b2c76c2_997c_5069_a8f0_9b84cd7e624b
);
impl windows_core::RuntimeType for IWebView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
impl windows_core::RuntimeName for IWebView2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IWebView2";
}
#[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
pub trait IWebView2_Impl: windows_core::IUnknownImpl {
    fn CoreWebView2(
        &self,
    ) -> windows_core::Result<super::super::super::Web::WebView2::Core::CoreWebView2>;
    fn EnsureCoreWebView2Async(&self) -> windows_core::Result<windows_future::IAsyncAction>;
    fn ExecuteScriptAsync(
        &self,
        javascriptCode: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>>;
    fn Source(&self) -> windows_core::Result<windows::Foundation::Uri>;
    fn SetSource(
        &self,
        value: windows_core::Ref<windows::Foundation::Uri>,
    ) -> windows_core::Result<()>;
    fn CanGoForward(&self) -> windows_core::Result<bool>;
    fn SetCanGoForward(&self, value: bool) -> windows_core::Result<()>;
    fn CanGoBack(&self) -> windows_core::Result<bool>;
    fn SetCanGoBack(&self, value: bool) -> windows_core::Result<()>;
    fn DefaultBackgroundColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetDefaultBackgroundColor(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn Reload(&self) -> windows_core::Result<()>;
    fn GoForward(&self) -> windows_core::Result<()>;
    fn GoBack(&self) -> windows_core::Result<()>;
    fn NavigateToString(&self, htmlContent: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Close(&self) -> windows_core::Result<()>;
    fn NavigationCompleted(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn WebMessageReceived(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()>;
    fn NavigationStarting(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()>;
    fn CoreProcessFailed(
        &self,
        handler: windows_core::Ref<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCoreProcessFailed(&self, token: i64) -> windows_core::Result<()>;
    fn RemoveCoreWebView2Initialized(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
impl IWebView2_Vtbl {
    pub const fn new<Identity: IWebView2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CoreWebView2<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::CoreWebView2(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnsureCoreWebView2Async<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::EnsureCoreWebView2Async(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExecuteScriptAsync<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            javascriptcode: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::ExecuteScriptAsync(
                    this,
                    core::mem::transmute(&javascriptcode),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Source<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::SetSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn CanGoForward<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::CanGoForward(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCanGoForward<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::SetCanGoForward(this, value).into()
            }
        }
        unsafe extern "system" fn CanGoBack<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::CanGoBack(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCanGoBack<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::SetCanGoBack(this, value).into()
            }
        }
        unsafe extern "system" fn DefaultBackgroundColor<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::DefaultBackgroundColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultBackgroundColor<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::SetDefaultBackgroundColor(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Reload<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::Reload(this).into()
            }
        }
        unsafe extern "system" fn GoForward<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::GoForward(this).into()
            }
        }
        unsafe extern "system" fn GoBack<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::GoBack(this).into()
            }
        }
        unsafe extern "system" fn NavigateToString<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htmlcontent: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::NavigateToString(this, core::mem::transmute(&htmlcontent)).into()
            }
        }
        unsafe extern "system" fn Close<Identity: IWebView2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::Close(this).into()
            }
        }
        unsafe extern "system" fn NavigationCompleted<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::NavigationCompleted(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationCompleted<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::RemoveNavigationCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn WebMessageReceived<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::WebMessageReceived(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveWebMessageReceived<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::RemoveWebMessageReceived(this, token).into()
            }
        }
        unsafe extern "system" fn NavigationStarting<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::NavigationStarting(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNavigationStarting<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::RemoveNavigationStarting(this, token).into()
            }
        }
        unsafe extern "system" fn CoreProcessFailed<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2_Impl::CoreProcessFailed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCoreProcessFailed<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::RemoveCoreProcessFailed(this, token).into()
            }
        }
        unsafe extern "system" fn RemoveCoreWebView2Initialized<
            Identity: IWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWebView2_Impl::RemoveCoreWebView2Initialized(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWebView2, OFFSET>(),
            CoreWebView2: CoreWebView2::<Identity, OFFSET>,
            EnsureCoreWebView2Async: EnsureCoreWebView2Async::<Identity, OFFSET>,
            ExecuteScriptAsync: ExecuteScriptAsync::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
            CanGoForward: CanGoForward::<Identity, OFFSET>,
            SetCanGoForward: SetCanGoForward::<Identity, OFFSET>,
            CanGoBack: CanGoBack::<Identity, OFFSET>,
            SetCanGoBack: SetCanGoBack::<Identity, OFFSET>,
            DefaultBackgroundColor: DefaultBackgroundColor::<Identity, OFFSET>,
            SetDefaultBackgroundColor: SetDefaultBackgroundColor::<Identity, OFFSET>,
            Reload: Reload::<Identity, OFFSET>,
            GoForward: GoForward::<Identity, OFFSET>,
            GoBack: GoBack::<Identity, OFFSET>,
            NavigateToString: NavigateToString::<Identity, OFFSET>,
            Close: Close::<Identity, OFFSET>,
            NavigationCompleted: NavigationCompleted::<Identity, OFFSET>,
            RemoveNavigationCompleted: RemoveNavigationCompleted::<Identity, OFFSET>,
            WebMessageReceived: WebMessageReceived::<Identity, OFFSET>,
            RemoveWebMessageReceived: RemoveWebMessageReceived::<Identity, OFFSET>,
            NavigationStarting: NavigationStarting::<Identity, OFFSET>,
            RemoveNavigationStarting: RemoveNavigationStarting::<Identity, OFFSET>,
            CoreProcessFailed: CoreProcessFailed::<Identity, OFFSET>,
            RemoveCoreProcessFailed: RemoveCoreProcessFailed::<Identity, OFFSET>,
            CoreWebView2Initialized: 0,
            RemoveCoreWebView2Initialized: RemoveCoreWebView2Initialized::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWebView2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Web_WebView2_Core")]
    pub CoreWebView2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Web_WebView2_Core"))]
    CoreWebView2: usize,
    pub EnsureCoreWebView2Async: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExecuteScriptAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CanGoForward:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCanGoForward:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub CanGoBack:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCanGoBack:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub DefaultBackgroundColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetDefaultBackgroundColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub Reload: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GoForward: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GoBack: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub NavigateToString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
    pub NavigationCompleted: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "Web_WebView2_Core")))]
    NavigationCompleted: usize,
    pub RemoveNavigationCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
    pub WebMessageReceived: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "Web_WebView2_Core")))]
    WebMessageReceived: usize,
    pub RemoveWebMessageReceived:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
    pub NavigationStarting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "Web_WebView2_Core")))]
    NavigationStarting: usize,
    pub RemoveNavigationStarting:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "Web_WebView2_Core"))]
    pub CoreProcessFailed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "Web_WebView2_Core")))]
    CoreProcessFailed: usize,
    pub RemoveCoreProcessFailed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    CoreWebView2Initialized: usize,
    pub RemoveCoreWebView2Initialized:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWebView22,
    IWebView22_Vtbl,
    0x560c5eed_3e7a_51e4_b14f_107ba02b89be
);
impl windows_core::RuntimeType for IWebView22 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Web_WebView2_Core")]
impl windows_core::RuntimeName for IWebView22 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IWebView22";
}
#[cfg(feature = "Web_WebView2_Core")]
pub trait IWebView22_Impl: windows_core::IUnknownImpl {
    fn EnsureCoreWebView2WithEnvironmentAsync(
        &self,
        environment: windows_core::Ref<
            super::super::super::Web::WebView2::Core::CoreWebView2Environment,
        >,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
    fn EnsureCoreWebView2WithEnvironmentAndOptionsAsync(
        &self,
        environment: windows_core::Ref<
            super::super::super::Web::WebView2::Core::CoreWebView2Environment,
        >,
        controllerOptions: windows_core::Ref<
            super::super::super::Web::WebView2::Core::CoreWebView2ControllerOptions,
        >,
    ) -> windows_core::Result<windows_future::IAsyncAction>;
}
#[cfg(feature = "Web_WebView2_Core")]
impl IWebView22_Vtbl {
    pub const fn new<Identity: IWebView22_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EnsureCoreWebView2WithEnvironmentAsync<
            Identity: IWebView22_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            environment: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView22_Impl::EnsureCoreWebView2WithEnvironmentAsync(
                    this,
                    core::mem::transmute_copy(&environment),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnsureCoreWebView2WithEnvironmentAndOptionsAsync<
            Identity: IWebView22_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            environment: *mut core::ffi::c_void,
            controlleroptions: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView22_Impl::EnsureCoreWebView2WithEnvironmentAndOptionsAsync(
                    this,
                    core::mem::transmute_copy(&environment),
                    core::mem::transmute_copy(&controlleroptions),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWebView22, OFFSET>(),
            EnsureCoreWebView2WithEnvironmentAsync: EnsureCoreWebView2WithEnvironmentAsync::<
                Identity,
                OFFSET,
            >,
            EnsureCoreWebView2WithEnvironmentAndOptionsAsync:
                EnsureCoreWebView2WithEnvironmentAndOptionsAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWebView22 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView22_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Web_WebView2_Core")]
    pub EnsureCoreWebView2WithEnvironmentAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    #[cfg(not(feature = "Web_WebView2_Core"))]
    EnsureCoreWebView2WithEnvironmentAsync: usize,
    #[cfg(feature = "Web_WebView2_Core")]
    pub EnsureCoreWebView2WithEnvironmentAndOptionsAsync:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    #[cfg(not(feature = "Web_WebView2_Core"))]
    EnsureCoreWebView2WithEnvironmentAndOptionsAsync: usize,
}
windows_core::imp::define_interface!(
    IWebView2Factory,
    IWebView2Factory_Vtbl,
    0xfb4ec2ce_3074_5c42_b655_64fb81fbd040
);
impl windows_core::RuntimeType for IWebView2Factory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IWebView2Factory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IWebView2Factory";
}
#[cfg(feature = "UI_Composition")]
pub trait IWebView2Factory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<windows_core::IInspectable>,
    ) -> windows_core::Result<WebView2>;
}
#[cfg(feature = "UI_Composition")]
impl IWebView2Factory_Vtbl {
    pub const fn new<Identity: IWebView2Factory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IWebView2Factory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWebView2Factory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWebView2Factory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWebView2Factory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView2Factory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IWebView2Statics,
    IWebView2Statics_Vtbl,
    0x7f3226d0_f6d5_5aa7_b175_645451ca3c85
);
impl windows_core::RuntimeType for IWebView2Statics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWebView2Statics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IWebView2Statics";
}
pub trait IWebView2Statics_Impl: windows_core::IUnknownImpl {}
impl IWebView2Statics_Vtbl {
    pub const fn new<Identity: IWebView2Statics_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWebView2Statics, OFFSET>(),
            SourceProperty: 0,
            CanGoForwardProperty: 0,
            CanGoBackProperty: 0,
            DefaultBackgroundColorProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWebView2Statics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWebView2Statics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    SourceProperty: usize,
    CanGoForwardProperty: usize,
    CanGoBackProperty: usize,
    DefaultBackgroundColorProperty: usize,
}
windows_core::imp::define_interface!(
    IXamlControlsResources,
    IXamlControlsResources_Vtbl,
    0x918ca043_f42c_5805_861b_62d6d1d0c162
);
impl windows_core::RuntimeType for IXamlControlsResources {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlControlsResources {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IXamlControlsResources";
}
pub trait IXamlControlsResources_Impl: windows_core::IUnknownImpl {
    fn UseCompactResources(&self) -> windows_core::Result<bool>;
    fn SetUseCompactResources(&self, value: bool) -> windows_core::Result<()>;
}
impl IXamlControlsResources_Vtbl {
    pub const fn new<Identity: IXamlControlsResources_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn UseCompactResources<
            Identity: IXamlControlsResources_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlControlsResources_Impl::UseCompactResources(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUseCompactResources<
            Identity: IXamlControlsResources_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IXamlControlsResources_Impl::SetUseCompactResources(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IXamlControlsResources, OFFSET>(
            ),
            UseCompactResources: UseCompactResources::<Identity, OFFSET>,
            SetUseCompactResources: SetUseCompactResources::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlControlsResources as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlControlsResources_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UseCompactResources:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetUseCompactResources:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlControlsResourcesStatics,
    IXamlControlsResourcesStatics_Vtbl,
    0xcb49196c_1458_5e92_b701_d08d3e816bc5
);
impl windows_core::RuntimeType for IXamlControlsResourcesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IXamlControlsResourcesStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IXamlControlsResourcesStatics_Impl: windows_core::IUnknownImpl {
    fn EnsureRevealLights(
        &self,
        element: windows_core::Ref<super::UIElement>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IXamlControlsResourcesStatics_Vtbl {
    pub const fn new<Identity: IXamlControlsResourcesStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EnsureRevealLights<
            Identity: IXamlControlsResourcesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IXamlControlsResourcesStatics_Impl::EnsureRevealLights(
                    this,
                    core::mem::transmute_copy(&element),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlControlsResourcesStatics,
                OFFSET,
            >(),
            EnsureRevealLights: EnsureRevealLights::<Identity, OFFSET>,
            UseCompactResourcesProperty: 0,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlControlsResourcesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlControlsResourcesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub EnsureRevealLights: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    EnsureRevealLights: usize,
    UseCompactResourcesProperty: usize,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ItemCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ItemCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>
);
windows_core::imp::required_hierarchy!(
    ItemCollection,
    windows_collections::IIterable<windows_core::IInspectable>,
    windows_collections::IVector<windows_core::IInspectable>
);
impl ItemCollection {
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<windows_core::IInspectable>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn VectorChanged<P0>(&self, vhnd: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::Collections::VectorChangedEventHandler<windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VectorChanged)(
                windows_core::Interface::as_raw(this),
                vhnd.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveVectorChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveVectorChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::IInspectable>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<windows_core::IInspectable>],
    ) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[Option<windows_core::IInspectable>],
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ItemCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    >();
}
unsafe impl windows_core::Interface for ItemCollection {
    type Vtable = < windows::Foundation::Collections:: IObservableVector < windows_core::IInspectable > as windows_core::Interface >::Vtable ;
    const IID: windows_core::GUID = <windows::Foundation::Collections::IObservableVector<
        windows_core::IInspectable,
    > as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ItemCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ItemCollection";
}
unsafe impl Send for ItemCollection {}
unsafe impl Sync for ItemCollection {}
impl IntoIterator for ItemCollection {
    type Item = windows_core::IInspectable;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &ItemCollection {
    type Item = windows_core::IInspectable;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ItemsControl(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    ItemsControl,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    ItemsControl,
    super::super::Composition::IAnimationObject,
    IItemContainerMapping,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl ItemsControl {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ItemFromContainer<P0>(
        &self,
        container: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContainerFromItem<P0>(&self, item: P0) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromItem)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexFromContainer<P0>(&self, container: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ContainerFromIndex(&self, index: i32) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromIndex)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ItemsSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetItemsSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetItemsSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Items(&self) -> windows_core::Result<ItemCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Items)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DisplayMemberPath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetDisplayMemberPath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ItemsPanelRoot(&self) -> windows_core::Result<Panel> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsPanelRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsGrouping(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGrouping)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GroupHeaderContainerFromItemContainer<P0>(
        &self,
        itemcontainer: P0,
    ) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GroupHeaderContainerFromItemContainer)(
                windows_core::Interface::as_raw(this),
                itemcontainer.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn new() -> windows_core::Result<ItemsControl> {
        Self::IItemsControlFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsItemItsOwnContainerOverride<P0>(&self, item: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemItsOwnContainerOverride)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetContainerForItemOverride(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ClearContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn PrepareContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PrepareContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnItemsChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnItemsChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetItemsOwner<P0>(element: P0) -> windows_core::Result<ItemsControl>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IItemsControlStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetItemsOwner)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ItemsControlFromItemContainer<P0>(container: P0) -> windows_core::Result<ItemsControl>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IItemsControlStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsControlFromItemContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IItemsControlFactory<R, F: FnOnce(&IItemsControlFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ItemsControl, IItemsControlFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IItemsControlStatics<R, F: FnOnce(&IItemsControlStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ItemsControl, IItemsControlStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for ItemsControl {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IItemsControl>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for ItemsControl {
    type Vtable = <IItemsControl as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IItemsControl as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ItemsControl {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ItemsControl";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for ItemsControl {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for ItemsControl {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ListBox(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    ListBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    ListBox,
    super::super::Composition::IAnimationObject,
    IItemContainerMapping,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::Selector,
    ItemsControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ListBox {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ItemFromContainer<P0>(
        &self,
        container: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContainerFromItem<P0>(&self, item: P0) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromItem)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexFromContainer<P0>(&self, container: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexFromContainer)(
                windows_core::Interface::as_raw(this),
                container.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ContainerFromIndex(&self, index: i32) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemContainerMapping>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainerFromIndex)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ItemsSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetItemsSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetItemsSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Items(&self) -> windows_core::Result<ItemCollection> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Items)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DisplayMemberPath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetDisplayMemberPath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayMemberPath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ItemsPanelRoot(&self) -> windows_core::Result<Panel> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsPanelRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsGrouping(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGrouping)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GroupHeaderContainerFromItemContainer<P0>(
        &self,
        itemcontainer: P0,
    ) -> windows_core::Result<super::DependencyObject>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<IItemsControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GroupHeaderContainerFromItemContainer)(
                windows_core::Interface::as_raw(this),
                itemcontainer.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemItsOwnContainerOverride<P0>(&self, item: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemItsOwnContainerOverride)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetContainerForItemOverride(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ClearContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn PrepareContainerForItemOverride<P0, P1>(
        &self,
        element: P0,
        item: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PrepareContainerForItemOverride)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnItemsChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IItemsControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnItemsChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SelectionMode(&self) -> windows_core::Result<SelectionMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectionMode(&self, value: SelectionMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectionMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SingleSelectionFollowsFocus(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SingleSelectionFollowsFocus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSingleSelectionFollowsFocus(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSingleSelectionFollowsFocus)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScrollIntoView<P0>(&self, item: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollIntoView)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SelectAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn new() -> windows_core::Result<ListBox> {
        Self::IListBoxFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SelectedIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectedIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectedItem(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSelectedItem<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedItem)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedValue(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSelectedValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectedValuePath(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedValuePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetSelectedValuePath(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedValuePath)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsSynchronizedWithCurrentItem(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<bool>> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSynchronizedWithCurrentItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetIsSynchronizedWithCurrentItem<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<bool>>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSynchronizedWithCurrentItem)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SelectionChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<SelectionChangedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelector>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSelectionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IListBoxFactory<R, F: FnOnce(&IListBoxFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ListBox, IListBoxFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IListBoxStatics<R, F: FnOnce(&IListBoxStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ListBox, IListBoxStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for ListBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IListBox>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for ListBox {
    type Vtable = <IListBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IListBox as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ListBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ListBox";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for ListBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for ListBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ListBoxItem(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    ListBoxItem,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    ListBoxItem,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::SelectorItem,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ListBoxItem {
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ListBoxItem> {
        Self::IListBoxItemFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsSelected(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::ISelectorItem>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSelected(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::ISelectorItem>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSelected)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IListBoxItemFactory<R, F: FnOnce(&IListBoxItemFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ListBoxItem, IListBoxItemFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for ListBoxItem {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IListBoxItem>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for ListBoxItem {
    type Vtable = <IListBoxItem as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IListBoxItem as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ListBoxItem {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ListBoxItem";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for ListBoxItem {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for ListBoxItem {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct MediaPlayerElement(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    MediaPlayerElement,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    MediaPlayerElement,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl MediaPlayerElement {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows::Media::Playback::IMediaPlaybackSource> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Media::Playback::IMediaPlaybackSource>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AreTransportControlsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AreTransportControlsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAreTransportControlsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAreTransportControlsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> windows_core::Result<super::Media::Stretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Stretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AutoPlay(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoPlay)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoPlay(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoPlay)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFullWindow(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFullWindow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFullWindow(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFullWindow)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MediaPlayer(&self) -> windows_core::Result<windows::Media::Playback::MediaPlayer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MediaPlayer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetMediaPlayer<P0>(&self, mediaplayer: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Media::Playback::MediaPlayer>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMediaPlayer)(
                windows_core::Interface::as_raw(this),
                mediaplayer.param().abi(),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<MediaPlayerElement> {
        Self::IMediaPlayerElementFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IMediaPlayerElementFactory<
        R,
        F: FnOnce(&IMediaPlayerElementFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            MediaPlayerElement,
            IMediaPlayerElementFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IMediaPlayerElementStatics<
        R,
        F: FnOnce(&IMediaPlayerElementStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            MediaPlayerElement,
            IMediaPlayerElementStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for MediaPlayerElement {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IMediaPlayerElement>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for MediaPlayerElement {
    type Vtable = <IMediaPlayerElement as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IMediaPlayerElement as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for MediaPlayerElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.MediaPlayerElement";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for MediaPlayerElement {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for MediaPlayerElement {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct Orientation(pub i32);
impl Orientation {
    pub const Vertical: Self = Self(0i32);
    pub const Horizontal: Self = Self(1i32);
}
impl windows_core::TypeKind for Orientation {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for Orientation {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Controls.Orientation;i4)",
    );
}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Panel(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(Panel, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    Panel,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl Panel {
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<UIElementCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemsHost(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemsHost)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn new() -> windows_core::Result<Panel> {
        Self::IPanelFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IPanelFactory<R, F: FnOnce(&IPanelFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Panel, IPanelFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IPanelStatics<R, F: FnOnce(&IPanelStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Panel, IPanelStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for Panel {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPanel>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for Panel {
    type Vtable = <IPanel as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPanel as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for Panel {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Panel";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for Panel {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for Panel {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PasswordBox(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    PasswordBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    PasswordBox,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl PasswordBox {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PasswordBox,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Password(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Password)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPassword(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPassword)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PasswordChar(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PasswordChar)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPasswordChar(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPasswordChar)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsPasswordRevealButtonEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPasswordRevealButtonEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsPasswordRevealButtonEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsPasswordRevealButtonEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxLength(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxLength(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Header(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Header)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlaceholderText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlaceholderText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PreventKeyboardDisplayOnProgrammaticFocus(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreventKeyboardDisplayOnProgrammaticFocus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPreventKeyboardDisplayOnProgrammaticFocus(
        &self,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPreventKeyboardDisplayOnProgrammaticFocus)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanPasteClipboardContent(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanPasteClipboardContent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Description(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Description)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDescription<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDescription)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PasswordChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PasswordChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePasswordChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePasswordChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextMenuOpening)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePaste(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePaste)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePasswordChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePasswordChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SelectAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SelectAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn PasteFromClipboard(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PasteFromClipboard)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IPasswordBoxStatics<R, F: FnOnce(&IPasswordBoxStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PasswordBox, IPasswordBoxStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for PasswordBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPasswordBox>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for PasswordBox {
    type Vtable = <IPasswordBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPasswordBox as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for PasswordBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.PasswordBox";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for PasswordBox {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for PasswordBox {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ProgressBar(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    ProgressBar,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    ProgressBar,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::RangeBase,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl ProgressBar {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn IsIndeterminate(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsIndeterminate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsIndeterminate(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsIndeterminate)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShowError(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShowError)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShowError(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShowError)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ShowPaused(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShowPaused)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShowPaused(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShowPaused)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ProgressBar> {
        Self::IProgressBarFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Minimum(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Minimum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinimum(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinimum)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Maximum(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Maximum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaximum(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaximum)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SmallChange(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SmallChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSmallChange(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSmallChange)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LargeChange(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LargeChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLargeChange(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLargeChange)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<Primitives::RangeBaseValueChangedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveValueChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveValueChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnMinimumChanged(&self, oldminimum: f64, newminimum: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnMinimumChanged)(
                windows_core::Interface::as_raw(this),
                oldminimum,
                newminimum,
            )
            .ok()
        }
    }
    pub fn OnMaximumChanged(&self, oldmaximum: f64, newmaximum: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnMaximumChanged)(
                windows_core::Interface::as_raw(this),
                oldmaximum,
                newmaximum,
            )
            .ok()
        }
    }
    pub fn OnValueChanged(&self, oldvalue: f64, newvalue: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnValueChanged)(
                windows_core::Interface::as_raw(this),
                oldvalue,
                newvalue,
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IProgressBarFactory<R, F: FnOnce(&IProgressBarFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ProgressBar, IProgressBarFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IProgressBarStatics<R, F: FnOnce(&IProgressBarStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ProgressBar, IProgressBarStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for ProgressBar {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IProgressBar>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for ProgressBar {
    type Vtable = <IProgressBar as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IProgressBar as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for ProgressBar {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ProgressBar";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for ProgressBar {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for ProgressBar {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RadioButton(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(
    RadioButton,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    RadioButton,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::ToggleButton,
    Primitives::ButtonBase,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl RadioButton {
    pub fn IsPointerOver(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPointerOver)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsPressed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPressed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CommandParameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CommandParameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetCommandParameter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCommandParameter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Click<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Click)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClick(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IButtonBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClick)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GroupName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GroupName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetGroupName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetGroupName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<RadioButton> {
        Self::IRadioButtonFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsChecked(&self) -> windows_core::Result<windows::Foundation::IReference<bool>> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsChecked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetIsChecked<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<bool>>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsChecked)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsThreeState(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsThreeState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsThreeState(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsThreeState)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Checked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Checked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveChecked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveChecked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unchecked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unchecked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnchecked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnchecked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Indeterminate<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Indeterminate)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveIndeterminate(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButton>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIndeterminate)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnToggle(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IToggleButtonOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnToggle)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IRadioButtonFactory<R, F: FnOnce(&IRadioButtonFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<RadioButton, IRadioButtonFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IRadioButtonStatics<R, F: FnOnce(&IRadioButtonStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<RadioButton, IRadioButtonStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for RadioButton {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRadioButton>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for RadioButton {
    type Vtable = <IRadioButton as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRadioButton as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for RadioButton {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.RadioButton";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for RadioButton {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for RadioButton {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ScrollBarVisibility(pub i32);
impl ScrollBarVisibility {
    pub const Disabled: Self = Self(0i32);
    pub const Auto: Self = Self(1i32);
    pub const Hidden: Self = Self(2i32);
    pub const Visible: Self = Self(3i32);
}
impl windows_core::TypeKind for ScrollBarVisibility {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ScrollBarVisibility {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Controls.ScrollBarVisibility;i4)",
    );
}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ScrollViewer(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    ScrollViewer,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    ScrollViewer,
    super::super::Composition::IAnimationObject,
    IScrollAnchorProvider,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl ScrollViewer {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ScrollViewer,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CurrentAnchor(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IScrollAnchorProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterAnchorCandidate<P0>(&self, element: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = &windows_core::Interface::cast::<IScrollAnchorProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RegisterAnchorCandidate)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
            )
            .ok()
        }
    }
    pub fn UnregisterAnchorCandidate<P0>(&self, element: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = &windows_core::Interface::cast::<IScrollAnchorProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterAnchorCandidate)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
            )
            .ok()
        }
    }
    pub fn HorizontalScrollBarVisibility(&self) -> windows_core::Result<ScrollBarVisibility> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalScrollBarVisibility(
        &self,
        value: ScrollBarVisibility,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalScrollBarVisibility(&self) -> windows_core::Result<ScrollBarVisibility> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalScrollBarVisibility(
        &self,
        value: ScrollBarVisibility,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHorizontalRailEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHorizontalRailEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHorizontalRailEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHorizontalRailEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVerticalRailEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVerticalRailEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVerticalRailEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVerticalRailEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHorizontalScrollChainingEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHorizontalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHorizontalScrollChainingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHorizontalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVerticalScrollChainingEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVerticalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsVerticalScrollChainingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsVerticalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsZoomChainingEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsZoomChainingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsZoomChainingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsZoomChainingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsScrollInertiaEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsScrollInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsScrollInertiaEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsScrollInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsZoomInertiaEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsZoomInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsZoomInertiaEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsZoomInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ViewportWidth(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ViewportWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ScrollableWidth(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScrollableWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ComputedHorizontalScrollBarVisibility(&self) -> windows_core::Result<super::Visibility> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ComputedHorizontalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ExtentWidth(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtentWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ViewportHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ViewportHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ScrollableHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScrollableHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ComputedVerticalScrollBarVisibility(&self) -> windows_core::Result<super::Visibility> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ComputedVerticalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ExtentHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtentHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MinZoomFactor(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinZoomFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinZoomFactor(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinZoomFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxZoomFactor(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxZoomFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxZoomFactor(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxZoomFactor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ZoomFactor(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomFactor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ZoomSnapPoints(&self) -> windows_core::Result<windows_collections::IVector<f32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomSnapPoints)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TopLeftHeader(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopLeftHeader)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTopLeftHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopLeftHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn LeftHeader(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LeftHeader)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLeftHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLeftHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn TopHeader(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TopHeader)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTopHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTopHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReduceViewportForCoreInputViewOcclusions(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReduceViewportForCoreInputViewOcclusions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetReduceViewportForCoreInputViewOcclusions(
        &self,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetReduceViewportForCoreInputViewOcclusions)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAnchorRatio(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAnchorRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAnchorRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAnchorRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAnchorRatio(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAnchorRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAnchorRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAnchorRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanContentRenderOutsideBounds(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanContentRenderOutsideBounds)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanContentRenderOutsideBounds(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanContentRenderOutsideBounds)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveAnchorRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAnchorRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveViewChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveViewChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveViewChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveViewChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DirectManipulationStarted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DirectManipulationStarted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDirectManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDirectManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DirectManipulationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DirectManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDirectManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDirectManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ScrollToHorizontalOffset(&self, offset: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollToHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ScrollToVerticalOffset(&self, offset: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollToVerticalOffset)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ZoomToFactor(&self, factor: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ZoomToFactor)(
                windows_core::Interface::as_raw(this),
                factor,
            )
            .ok()
        }
    }
    pub fn ChangeView<P0, P1, P2>(
        &self,
        horizontaloffset: P0,
        verticaloffset: P1,
        zoomfactor: P2,
    ) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f64>>,
        P1: windows_core::Param<windows::Foundation::IReference<f64>>,
        P2: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ChangeView)(
                windows_core::Interface::as_raw(this),
                horizontaloffset.param().abi(),
                verticaloffset.param().abi(),
                zoomfactor.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ChangeViewWithOptionalAnimation<P0, P1, P2>(
        &self,
        horizontaloffset: P0,
        verticaloffset: P1,
        zoomfactor: P2,
        disableanimation: bool,
    ) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f64>>,
        P1: windows_core::Param<windows::Foundation::IReference<f64>>,
        P2: windows_core::Param<windows::Foundation::IReference<f32>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ChangeViewWithOptionalAnimation)(
                windows_core::Interface::as_raw(this),
                horizontaloffset.param().abi(),
                verticaloffset.param().abi(),
                zoomfactor.param().abi(),
                disableanimation,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateScrollInfo(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateScrollInfo)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn IsDeferredScrollingEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDeferredScrollingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDeferredScrollingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDeferredScrollingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BringIntoViewOnFocusChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BringIntoViewOnFocusChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBringIntoViewOnFocusChange(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBringIntoViewOnFocusChange)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetHorizontalScrollBarVisibility<P0>(
        element: P0,
    ) -> windows_core::Result<ScrollBarVisibility>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHorizontalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetHorizontalScrollBarVisibility2<P0>(
        element: P0,
        horizontalscrollbarvisibility: ScrollBarVisibility,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                horizontalscrollbarvisibility,
            )
            .ok()
        })
    }
    pub fn GetVerticalScrollBarVisibility<P0>(
        element: P0,
    ) -> windows_core::Result<ScrollBarVisibility>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetVerticalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetVerticalScrollBarVisibility2<P0>(
        element: P0,
        verticalscrollbarvisibility: ScrollBarVisibility,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetVerticalScrollBarVisibility)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                verticalscrollbarvisibility,
            )
            .ok()
        })
    }
    pub fn GetIsHorizontalRailEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsHorizontalRailEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsHorizontalRailEnabled2<P0>(
        element: P0,
        ishorizontalrailenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsHorizontalRailEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                ishorizontalrailenabled,
            )
            .ok()
        })
    }
    pub fn GetIsVerticalRailEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsVerticalRailEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsVerticalRailEnabled2<P0>(
        element: P0,
        isverticalrailenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsVerticalRailEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                isverticalrailenabled,
            )
            .ok()
        })
    }
    pub fn GetIsHorizontalScrollChainingEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsHorizontalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsHorizontalScrollChainingEnabled2<P0>(
        element: P0,
        ishorizontalscrollchainingenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsHorizontalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                ishorizontalscrollchainingenabled,
            )
            .ok()
        })
    }
    pub fn GetIsVerticalScrollChainingEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsVerticalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsVerticalScrollChainingEnabled2<P0>(
        element: P0,
        isverticalscrollchainingenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsVerticalScrollChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                isverticalscrollchainingenabled,
            )
            .ok()
        })
    }
    pub fn GetIsZoomChainingEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsZoomChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsZoomChainingEnabled2<P0>(
        element: P0,
        iszoomchainingenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsZoomChainingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                iszoomchainingenabled,
            )
            .ok()
        })
    }
    pub fn GetIsScrollInertiaEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsScrollInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsScrollInertiaEnabled2<P0>(
        element: P0,
        isscrollinertiaenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsScrollInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                isscrollinertiaenabled,
            )
            .ok()
        })
    }
    pub fn GetIsZoomInertiaEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsZoomInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsZoomInertiaEnabled2<P0>(
        element: P0,
        iszoominertiaenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsZoomInertiaEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                iszoominertiaenabled,
            )
            .ok()
        })
    }
    pub fn GetCanContentRenderOutsideBounds<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCanContentRenderOutsideBounds)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetCanContentRenderOutsideBounds2<P0>(
        element: P0,
        cancontentrenderoutsidebounds: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetCanContentRenderOutsideBounds)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                cancontentrenderoutsidebounds,
            )
            .ok()
        })
    }
    pub fn GetIsDeferredScrollingEnabled<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsDeferredScrollingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsDeferredScrollingEnabled2<P0>(
        element: P0,
        isdeferredscrollingenabled: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsDeferredScrollingEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                isdeferredscrollingenabled,
            )
            .ok()
        })
    }
    pub fn GetBringIntoViewOnFocusChange<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetBringIntoViewOnFocusChange)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetBringIntoViewOnFocusChange2<P0>(
        element: P0,
        bringintoviewonfocuschange: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IScrollViewerStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetBringIntoViewOnFocusChange)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                bringintoviewonfocuschange,
            )
            .ok()
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IScrollViewerStatics<R, F: FnOnce(&IScrollViewerStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ScrollViewer, IScrollViewerStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for ScrollViewer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IScrollViewer>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for ScrollViewer {
    type Vtable = <IScrollViewer as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IScrollViewer as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ScrollViewer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ScrollViewer";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for ScrollViewer {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for ScrollViewer {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SelectionChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SelectionChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(SelectionChangedEventArgs, super::RoutedEventArgs);
impl SelectionChangedEventArgs {
    pub fn OriginalSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginalSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AddedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AddedItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RemovedItems(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<windows_core::IInspectable>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RemovedItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateInstanceWithRemovedItemsAndAddedItems<P0, P1>(
        removeditems: P0,
        addeditems: P1,
    ) -> windows_core::Result<SelectionChangedEventArgs>
    where
        P0: windows_core::Param<windows_collections::IVector<windows_core::IInspectable>>,
        P1: windows_core::Param<windows_collections::IVector<windows_core::IInspectable>>,
    {
        Self::ISelectionChangedEventArgsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstanceWithRemovedItemsAndAddedItems)(
                windows_core::Interface::as_raw(this),
                removeditems.param().abi(),
                addeditems.param().abi(),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISelectionChangedEventArgsFactory<
        R,
        F: FnOnce(&ISelectionChangedEventArgsFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SelectionChangedEventArgs,
            ISelectionChangedEventArgsFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SelectionChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISelectionChangedEventArgs>();
}
unsafe impl windows_core::Interface for SelectionChangedEventArgs {
    type Vtable = <ISelectionChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISelectionChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SelectionChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs";
}
unsafe impl Send for SelectionChangedEventArgs {}
unsafe impl Sync for SelectionChangedEventArgs {}
windows_core::imp::define_interface!(
    SelectionChangedEventHandler,
    SelectionChangedEventHandler_Vtbl,
    0xa232390d_0e34_595e_8931_fa928a9909f4
);
impl windows_core::RuntimeType for SelectionChangedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl SelectionChangedEventHandler {
    pub fn new<
        F: Fn(
                windows_core::Ref<windows_core::IInspectable>,
                windows_core::Ref<SelectionChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = SelectionChangedEventHandlerBox {
            vtable: &SelectionChangedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<SelectionChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct SelectionChangedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct SelectionChangedEventHandlerBox<
    F: Fn(
            windows_core::Ref<windows_core::IInspectable>,
            windows_core::Ref<SelectionChangedEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const SelectionChangedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: Fn(
                windows_core::Ref<windows_core::IInspectable>,
                windows_core::Ref<SelectionChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > SelectionChangedEventHandlerBox<F>
{
    const VTABLE: SelectionChangedEventHandler_Vtbl = SelectionChangedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <SelectionChangedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SelectionMode(pub i32);
impl SelectionMode {
    pub const Single: Self = Self(0i32);
    pub const Multiple: Self = Self(1i32);
    pub const Extended: Self = Self(2i32);
}
impl windows_core::TypeKind for SelectionMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SelectionMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Controls.SelectionMode;i4)",
    );
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Slider(windows_core::IUnknown);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::interface_hierarchy!(Slider, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
windows_core::imp::required_hierarchy!(
    Slider,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Primitives::RangeBase,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl Slider {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Minimum(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Minimum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinimum(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinimum)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Maximum(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Maximum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaximum(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaximum)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SmallChange(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SmallChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSmallChange(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSmallChange)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LargeChange(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LargeChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLargeChange(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLargeChange)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<Primitives::RangeBaseValueChangedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveValueChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveValueChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn OnMinimumChanged(&self, oldminimum: f64, newminimum: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnMinimumChanged)(
                windows_core::Interface::as_raw(this),
                oldminimum,
                newminimum,
            )
            .ok()
        }
    }
    pub fn OnMaximumChanged(&self, oldmaximum: f64, newmaximum: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnMaximumChanged)(
                windows_core::Interface::as_raw(this),
                oldmaximum,
                newmaximum,
            )
            .ok()
        }
    }
    pub fn OnValueChanged(&self, oldvalue: f64, newvalue: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<Primitives::IRangeBaseOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnValueChanged)(
                windows_core::Interface::as_raw(this),
                oldvalue,
                newvalue,
            )
            .ok()
        }
    }
    pub fn IntermediateValue(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IntermediateValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIntermediateValue(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIntermediateValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StepFrequency(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StepFrequency)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetStepFrequency(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStepFrequency)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TickFrequency(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TickFrequency)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTickFrequency(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTickFrequency)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TickPlacement(&self) -> windows_core::Result<Primitives::TickPlacement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TickPlacement)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTickPlacement(&self, value: Primitives::TickPlacement) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTickPlacement)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(&self) -> windows_core::Result<Orientation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Orientation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOrientation(&self, value: Orientation) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOrientation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDirectionReversed(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDirectionReversed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDirectionReversed(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDirectionReversed)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsThumbToolTipEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsThumbToolTipEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsThumbToolTipEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsThumbToolTipEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Header(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Header)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Slider> {
        Self::ISliderFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ISliderFactory<R, F: FnOnce(&ISliderFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Slider, ISliderFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ISliderStatics<R, F: FnOnce(&ISliderStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Slider, ISliderStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeType for Slider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISlider>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl windows_core::Interface for Slider {
    type Vtable = <ISlider as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISlider as windows_core::Interface>::IID;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for Slider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.Slider";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Send for Slider {}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
unsafe impl Sync for Slider {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SwapChainPanel(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    SwapChainPanel,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    SwapChainPanel,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Grid,
    Panel,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl SwapChainPanel {
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn RowSpacing(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IGrid>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRowSpacing(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IGrid>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRowSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColumnSpacing(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IGrid>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColumnSpacing(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IGrid>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColumnSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<UIElementCollection> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsItemsHost(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IPanel>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsItemsHost)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CompositionScaleX(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositionScaleX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CompositionScaleY(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositionScaleY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CompositionScaleChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<SwapChainPanel, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositionScaleChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompositionScaleChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompositionScaleChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<SwapChainPanel> {
        Self::ISwapChainPanelFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ISwapChainPanelFactory<R, F: FnOnce(&ISwapChainPanelFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<SwapChainPanel, ISwapChainPanelFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ISwapChainPanelStatics<R, F: FnOnce(&ISwapChainPanelStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<SwapChainPanel, ISwapChainPanelStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for SwapChainPanel {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISwapChainPanel>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for SwapChainPanel {
    type Vtable = <ISwapChainPanel as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISwapChainPanel as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for SwapChainPanel {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.SwapChainPanel";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for SwapChainPanel {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for SwapChainPanel {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextBlock(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    TextBlock,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    TextBlock,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl TextBlock {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TextBlock,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextWrapping(&self) -> windows_core::Result<super::TextWrapping> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextWrapping)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextWrapping(&self, value: super::TextWrapping) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextWrapping)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Text(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Text)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn LineHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLineHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLineHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextSelectionEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextSelectionEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextSelectionEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextSelectionEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectedText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn BaselineOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaselineOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxLines(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxLines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxLines(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxLines)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsColorFontEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextTrimmed(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextTrimmed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectionChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSelectionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextMenuOpening)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsTextTrimmedChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsTextTrimmedChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SelectAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SelectAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn CopySelectionToClipboard(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CopySelectionToClipboard)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ITextBlockStatics<R, F: FnOnce(&ITextBlockStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextBlock, ITextBlockStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for TextBlock {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextBlock>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for TextBlock {
    type Vtable = <ITextBlock as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextBlock as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for TextBlock {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.TextBlock";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for TextBlock {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for TextBlock {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextBox(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    TextBox,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    TextBox,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl TextBox {
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Text(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Text)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn SelectedText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectedText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetSelectedText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectedText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn SelectionLength(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectionLength(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectionLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SelectionStart(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSelectionStart(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSelectionStart)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxLength(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxLength(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsReadOnly(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReadOnly)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsReadOnly(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsReadOnly)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AcceptsReturn(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AcceptsReturn)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAcceptsReturn(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAcceptsReturn)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextWrapping(&self) -> windows_core::Result<super::TextWrapping> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextWrapping)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextWrapping(&self, value: super::TextWrapping) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextWrapping)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSpellCheckEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSpellCheckEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSpellCheckEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSpellCheckEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextPredictionEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextPredictionEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextPredictionEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextPredictionEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Header(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Header)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetHeader<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeader)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PlaceholderText(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlaceholderText)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPlaceholderText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlaceholderText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn PreventKeyboardDisplayOnProgrammaticFocus(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreventKeyboardDisplayOnProgrammaticFocus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPreventKeyboardDisplayOnProgrammaticFocus(
        &self,
        value: bool,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPreventKeyboardDisplayOnProgrammaticFocus)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsColorFontEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanPasteClipboardContent(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanPasteClipboardContent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanUndo(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanUndo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanRedo(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanRedo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Description(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Description)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDescription<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDescription)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn TextChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<TextChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveTextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SelectionChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSelectionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSelectionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextMenuOpening(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextMenuOpening)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePaste(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePaste)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTextCompositionStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextCompositionStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTextCompositionChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextCompositionChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTextCompositionEnded(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextCompositionEnded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCopyingToClipboard(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCopyingToClipboard)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCuttingToClipboard(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCuttingToClipboard)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBeforeTextChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBeforeTextChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSelectionChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSelectionChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Select(&self, start: i32, length: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Select)(
                windows_core::Interface::as_raw(this),
                start,
                length,
            )
            .ok()
        }
    }
    pub fn SelectAll(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SelectAll)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetRectFromCharacterIndex(
        &self,
        charindex: i32,
        trailingedge: bool,
    ) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetRectFromCharacterIndex)(
                windows_core::Interface::as_raw(this),
                charindex,
                trailingedge,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetLinguisticAlternativesAsync(
        &self,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<windows_collections::IVectorView<windows_core::HSTRING>>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLinguisticAlternativesAsync)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Undo(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Undo)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn Redo(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Redo)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn PasteFromClipboard(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PasteFromClipboard)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CopySelectionToClipboard(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CopySelectionToClipboard)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CutSelectionToClipboard(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CutSelectionToClipboard)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearUndoRedoHistory(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ClearUndoRedoHistory)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn RemoveCandidateWindowBoundsChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCandidateWindowBoundsChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTextChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTextChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<TextBox> {
        Self::ITextBoxFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ITextBoxFactory<R, F: FnOnce(&ITextBoxFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextBox, ITextBoxFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ITextBoxStatics<R, F: FnOnce(&ITextBoxStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextBox, ITextBoxStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for TextBox {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextBox>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for TextBox {
    type Vtable = <ITextBox as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextBox as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for TextBox {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.TextBox";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for TextBox {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for TextBox {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TextChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(TextChangedEventArgs, super::RoutedEventArgs);
impl TextChangedEventArgs {
    pub fn OriginalSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginalSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for TextChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextChangedEventArgs>();
}
unsafe impl windows_core::Interface for TextChangedEventArgs {
    type Vtable = <ITextChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TextChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.TextChangedEventArgs";
}
unsafe impl Send for TextChangedEventArgs {}
unsafe impl Sync for TextChangedEventArgs {}
windows_core::imp::define_interface!(
    TextChangedEventHandler,
    TextChangedEventHandler_Vtbl,
    0x5d8ddcff_45d8_5e7c_9b8b_c41d2893c6a1
);
impl windows_core::RuntimeType for TextChangedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl TextChangedEventHandler {
    pub fn new<
        F: Fn(
                windows_core::Ref<windows_core::IInspectable>,
                windows_core::Ref<TextChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = TextChangedEventHandlerBox {
            vtable: &TextChangedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<TextChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct TextChangedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct TextChangedEventHandlerBox<
    F: Fn(
            windows_core::Ref<windows_core::IInspectable>,
            windows_core::Ref<TextChangedEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const TextChangedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: Fn(
                windows_core::Ref<windows_core::IInspectable>,
                windows_core::Ref<TextChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > TextChangedEventHandlerBox<F>
{
    const VTABLE: TextChangedEventHandler_Vtbl = TextChangedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <TextChangedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ToolTip(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    ToolTip,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    ToolTip,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    ContentControl,
    Control,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl ToolTip {
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTemplateRoot(&self) -> windows_core::Result<super::UIElement> {
        let this = &windows_core::Interface::cast::<IContentControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTemplateRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnContentChanged<P0, P1>(
        &self,
        oldcontent: P0,
        newcontent: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IContentControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnContentChanged)(
                windows_core::Interface::as_raw(this),
                oldcontent.param().abi(),
                newcontent.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsFocusEngagementEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngagementEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngagementEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFocusEngaged(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsFocusEngaged(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsFocusEngaged)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalContentAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalContentAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalContentAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalContentAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalContentAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultStyleResourceUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleResourceUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleResourceUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusDisengaged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusDisengaged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveIsEnabledChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveIsEnabledChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveFocusEngagement(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFocusEngagement)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ApplyTemplate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IControl>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ApplyTemplate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerEntered<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerEntered)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerPressed<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerPressed)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerMoved<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerMoved)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerReleased<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerReleased)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerExited<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerExited)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCaptureLost<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerCanceled<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerCanceled)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnPointerWheelChanged<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::PointerRoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnPointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnGotFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnGotFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnLostFocus<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<IControlOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnLostFocus)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultStyleKey(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultStyleKey<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultStyleKey)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetTemplateChild(
        &self,
        childname: &windows_core::HSTRING,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<IControlProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTemplateChild)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(childname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn HorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsOpen(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsOpen)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsOpen(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsOpen)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PlacementTarget(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn PlacementRect(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Rect>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PlacementRect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetPlacementRect<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::Rect>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPlacementRect)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn VerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Opened<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opened)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveOpened(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveOpened)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ToolTip> {
        Self::IToolTipFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IToolTipFactory<R, F: FnOnce(&IToolTipFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ToolTip, IToolTipFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IToolTipStatics<R, F: FnOnce(&IToolTipStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ToolTip, IToolTipStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for ToolTip {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IToolTip>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for ToolTip {
    type Vtable = <IToolTip as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IToolTip as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ToolTip {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ToolTip";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for ToolTip {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for ToolTip {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ToolTipService(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ToolTipService,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ToolTipService {
    #[cfg(feature = "UI_Composition")]
    pub fn GetPlacementTarget<P0>(element: P0) -> windows_core::Result<super::UIElement>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IToolTipServiceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetPlacementTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetPlacementTarget<P0, P1>(element: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<super::UIElement>,
    {
        Self::IToolTipServiceStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetPlacementTarget)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value.param().abi(),
            )
            .ok()
        })
    }
    pub fn GetToolTip<P0>(element: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IToolTipServiceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetToolTip)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SetToolTip<P0, P1>(element: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        Self::IToolTipServiceStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetToolTip)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value.param().abi(),
            )
            .ok()
        })
    }
    fn IToolTipServiceStatics<R, F: FnOnce(&IToolTipServiceStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ToolTipService, IToolTipServiceStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ToolTipService {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IToolTipService>();
}
unsafe impl windows_core::Interface for ToolTipService {
    type Vtable = <IToolTipService as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IToolTipService as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ToolTipService {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.ToolTipService";
}
unsafe impl Send for ToolTipService {}
unsafe impl Sync for ToolTipService {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct UIElementCollection(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    UIElementCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<super::UIElement>
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    UIElementCollection,
    windows_collections::IIterable<super::UIElement>
);
#[cfg(feature = "UI_Composition")]
impl UIElementCollection {
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<super::UIElement>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<super::UIElement>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Move(&self, oldindex: u32, newindex: u32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IUIElementCollection>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Move)(
                windows_core::Interface::as_raw(this),
                oldindex,
                newindex,
            )
            .ok()
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::UIElement>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<super::UIElement>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<super::UIElement>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for UIElementCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<super::UIElement>,
    >();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for UIElementCollection {
    type Vtable =
        <windows_collections::IVector<super::UIElement> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<super::UIElement> as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for UIElementCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.UIElementCollection";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for UIElementCollection {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for UIElementCollection {}
#[cfg(feature = "UI_Composition")]
impl IntoIterator for UIElementCollection {
    type Item = super::UIElement;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl IntoIterator for &UIElementCollection {
    type Item = super::UIElement;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct WebView2(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    WebView2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    WebView2,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl WebView2 {
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn CoreWebView2(
        &self,
    ) -> windows_core::Result<super::super::super::Web::WebView2::Core::CoreWebView2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoreWebView2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnsureCoreWebView2Async(&self) -> windows_core::Result<windows_future::IAsyncAction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnsureCoreWebView2Async)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ExecuteScriptAsync(
        &self,
        javascriptcode: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_future::IAsyncOperation<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExecuteScriptAsync)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(javascriptcode),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CanGoForward(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanGoForward)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanGoForward(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanGoForward)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanGoBack(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanGoBack)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanGoBack(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanGoBack)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DefaultBackgroundColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultBackgroundColor(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultBackgroundColor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Reload(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Reload)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoForward(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).GoForward)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GoBack(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).GoBack)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn NavigateToString(
        &self,
        htmlcontent: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).NavigateToString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(htmlcontent),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn NavigationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn WebMessageReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WebMessageReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveWebMessageReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveWebMessageReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn NavigationStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNavigationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNavigationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn CoreProcessFailed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                WebView2,
                super::super::super::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoreProcessFailed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCoreProcessFailed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCoreProcessFailed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn RemoveCoreWebView2Initialized(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCoreWebView2Initialized)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn EnsureCoreWebView2WithEnvironmentAsync<P0>(
        &self,
        environment: P0,
    ) -> windows_core::Result<windows_future::IAsyncAction>
    where
        P0: windows_core::Param<super::super::super::Web::WebView2::Core::CoreWebView2Environment>,
    {
        let this = &windows_core::Interface::cast::<IWebView22>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnsureCoreWebView2WithEnvironmentAsync)(
                windows_core::Interface::as_raw(this),
                environment.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "Web_WebView2_Core")]
    pub fn EnsureCoreWebView2WithEnvironmentAndOptionsAsync<P0, P1>(
        &self,
        environment: P0,
        controlleroptions: P1,
    ) -> windows_core::Result<windows_future::IAsyncAction>
    where
        P0: windows_core::Param<super::super::super::Web::WebView2::Core::CoreWebView2Environment>,
        P1: windows_core::Param<
            super::super::super::Web::WebView2::Core::CoreWebView2ControllerOptions,
        >,
    {
        let this = &windows_core::Interface::cast::<IWebView22>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            ( windows_core::Interface::vtable ( this ) . EnsureCoreWebView2WithEnvironmentAndOptionsAsync ) ( windows_core::Interface::as_raw ( this ) , environment . param ( ) . abi ( ) , controlleroptions . param ( ) . abi ( ) , & mut result__ ) . and_then ( || windows_core::Type::from_abi ( result__ ) )
        }
    }
    pub fn new() -> windows_core::Result<WebView2> {
        Self::IWebView2Factory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IWebView2Factory<R, F: FnOnce(&IWebView2Factory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<WebView2, IWebView2Factory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IWebView2Statics<R, F: FnOnce(&IWebView2Statics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<WebView2, IWebView2Statics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for WebView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IWebView2>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for WebView2 {
    type Vtable = <IWebView2 as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IWebView2 as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for WebView2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.WebView2";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for WebView2 {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for WebView2 {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct XamlControlsResources(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    XamlControlsResources,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy ! ( XamlControlsResources , windows_collections:: IIterable < windows_collections:: IKeyValuePair < windows_core::IInspectable , windows_core::IInspectable > > , windows_collections:: IMap < windows_core::IInspectable , windows_core::IInspectable > , super:: ResourceDictionary , super:: DependencyObject );
impl XamlControlsResources {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            XamlControlsResources,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<
        windows_collections::IIterator<
            windows_collections::IKeyValuePair<
                windows_core::IInspectable,
                windows_core::IInspectable,
            >,
        >,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<
                windows_collections::IKeyValuePair<
                    windows_core::IInspectable,
                    windows_core::IInspectable,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Lookup<P0>(&self, key: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Lookup)(
                windows_core::Interface::as_raw(this),
                key.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HasKey<P0>(&self, key: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasKey)(
                windows_core::Interface::as_raw(this),
                key.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::IInspectable, windows_core::IInspectable>,
    > {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Insert<P0, P1>(&self, key: P0, value: P1) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Insert)(
                windows_core::Interface::as_raw(this),
                key.param().abi(),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Remove<P0>(&self, key: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Remove)(
                windows_core::Interface::as_raw(this),
                key.param().abi(),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = &windows_core::Interface::cast::<super::IResourceDictionary>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn MergedDictionaries(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<super::ResourceDictionary>> {
        let this = &windows_core::Interface::cast::<super::IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MergedDictionaries)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ThemeDictionaries(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMap<windows_core::IInspectable, windows_core::IInspectable>,
    > {
        let this = &windows_core::Interface::cast::<super::IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ThemeDictionaries)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn UseCompactResources(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseCompactResources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseCompactResources(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseCompactResources)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn EnsureRevealLights<P0>(element: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IXamlControlsResourcesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).EnsureRevealLights)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
            )
            .ok()
        })
    }
    fn IXamlControlsResourcesStatics<
        R,
        F: FnOnce(&IXamlControlsResourcesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            XamlControlsResources,
            IXamlControlsResourcesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for XamlControlsResources {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IXamlControlsResources>();
}
unsafe impl windows_core::Interface for XamlControlsResources {
    type Vtable = <IXamlControlsResources as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IXamlControlsResources as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for XamlControlsResources {
    const NAME: &'static str = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
}
unsafe impl Send for XamlControlsResources {}
unsafe impl Sync for XamlControlsResources {}
impl IntoIterator for XamlControlsResources {
    type Item =
        windows_collections::IKeyValuePair<windows_core::IInspectable, windows_core::IInspectable>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &XamlControlsResources {
    type Item =
        windows_collections::IKeyValuePair<windows_core::IInspectable, windows_core::IInspectable>;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
