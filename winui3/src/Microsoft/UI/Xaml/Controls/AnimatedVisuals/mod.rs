// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedAcceptVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedAcceptVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(AnimatedAcceptVisualSource, super::IAnimatedVisualSource2);
impl AnimatedAcceptVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedAcceptVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedAcceptVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedAcceptVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedAcceptVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedAcceptVisualSource";
}
unsafe impl Send for AnimatedAcceptVisualSource {}
unsafe impl Sync for AnimatedAcceptVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedBackVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedBackVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(AnimatedBackVisualSource, super::IAnimatedVisualSource2);
impl AnimatedBackVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedBackVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedBackVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedBackVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedBackVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedBackVisualSource";
}
unsafe impl Send for AnimatedBackVisualSource {}
unsafe impl Sync for AnimatedBackVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedChevronDownSmallVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedChevronDownSmallVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(
    AnimatedChevronDownSmallVisualSource,
    super::IAnimatedVisualSource2
);
impl AnimatedChevronDownSmallVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedChevronDownSmallVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedChevronDownSmallVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedChevronDownSmallVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedChevronDownSmallVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronDownSmallVisualSource";
}
unsafe impl Send for AnimatedChevronDownSmallVisualSource {}
unsafe impl Sync for AnimatedChevronDownSmallVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedChevronRightDownSmallVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedChevronRightDownSmallVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(
    AnimatedChevronRightDownSmallVisualSource,
    super::IAnimatedVisualSource2
);
impl AnimatedChevronRightDownSmallVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedChevronRightDownSmallVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedChevronRightDownSmallVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedChevronRightDownSmallVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedChevronRightDownSmallVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronRightDownSmallVisualSource";
}
unsafe impl Send for AnimatedChevronRightDownSmallVisualSource {}
unsafe impl Sync for AnimatedChevronRightDownSmallVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedChevronUpDownSmallVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedChevronUpDownSmallVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(
    AnimatedChevronUpDownSmallVisualSource,
    super::IAnimatedVisualSource2
);
impl AnimatedChevronUpDownSmallVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedChevronUpDownSmallVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedChevronUpDownSmallVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedChevronUpDownSmallVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedChevronUpDownSmallVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedChevronUpDownSmallVisualSource";
}
unsafe impl Send for AnimatedChevronUpDownSmallVisualSource {}
unsafe impl Sync for AnimatedChevronUpDownSmallVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedFindVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedFindVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(AnimatedFindVisualSource, super::IAnimatedVisualSource2);
impl AnimatedFindVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedFindVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedFindVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedFindVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedFindVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedFindVisualSource";
}
unsafe impl Send for AnimatedFindVisualSource {}
unsafe impl Sync for AnimatedFindVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedGlobalNavigationButtonVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedGlobalNavigationButtonVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(
    AnimatedGlobalNavigationButtonVisualSource,
    super::IAnimatedVisualSource2
);
impl AnimatedGlobalNavigationButtonVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedGlobalNavigationButtonVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedGlobalNavigationButtonVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedGlobalNavigationButtonVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedGlobalNavigationButtonVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedGlobalNavigationButtonVisualSource";
}
unsafe impl Send for AnimatedGlobalNavigationButtonVisualSource {}
unsafe impl Sync for AnimatedGlobalNavigationButtonVisualSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnimatedSettingsVisualSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnimatedSettingsVisualSource,
    windows_core::IUnknown,
    windows_core::IInspectable,
    super::IAnimatedVisualSource
);
windows_core::imp::required_hierarchy!(AnimatedSettingsVisualSource, super::IAnimatedVisualSource2);
impl AnimatedSettingsVisualSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnimatedSettingsVisualSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryCreateAnimatedVisual<P0>(
        &self,
        compositor: P0,
        diagnostics: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<super::IAnimatedVisual>
    where
        P0: windows_core::Param<super::super::super::Composition::Compositor>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryCreateAnimatedVisual)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                diagnostics as *mut _ as _,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Markers(
        &self,
    ) -> windows_core::Result<windows_collections::IMapView<windows_core::HSTRING, f64>> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Markers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetColorProperty(
        &self,
        propertyname: &windows_core::HSTRING,
        value: windows::UI::Color,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IAnimatedVisualSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for AnimatedSettingsVisualSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, super::IAnimatedVisualSource>();
}
unsafe impl windows_core::Interface for AnimatedSettingsVisualSource {
    type Vtable = <super::IAnimatedVisualSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <super::IAnimatedVisualSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnimatedSettingsVisualSource {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Controls.AnimatedVisuals.AnimatedSettingsVisualSource";
}
unsafe impl Send for AnimatedSettingsVisualSource {}
unsafe impl Sync for AnimatedSettingsVisualSource {}
