// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Binding(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Binding,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Binding, BindingBase, super::DependencyObject);
impl Binding {
    pub fn Path(&self) -> windows_core::Result<super::PropertyPath> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Path)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetPath<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::PropertyPath>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPath)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> windows_core::Result<BindingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMode(&self, value: BindingMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Source(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeSource(&self) -> windows_core::Result<RelativeSource> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RelativeSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetRelativeSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<RelativeSource>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRelativeSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ElementName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetElementName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetElementName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Converter(&self) -> windows_core::Result<IValueConverter> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Converter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetConverter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IValueConverter>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConverter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConverterParameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConverterParameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetConverterParameter<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConverterParameter)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ConverterLanguage(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConverterLanguage)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetConverterLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConverterLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FallbackValue(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FallbackValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFallbackValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFallbackValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn TargetNullValue(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNullValue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTargetNullValue<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetNullValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn UpdateSourceTrigger(&self) -> windows_core::Result<UpdateSourceTrigger> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UpdateSourceTrigger)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUpdateSourceTrigger(&self, value: UpdateSourceTrigger) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUpdateSourceTrigger)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Binding> {
        Self::IBindingFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IBindingFactory<R, F: FnOnce(&IBindingFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Binding, IBindingFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Binding {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBinding>();
}
unsafe impl windows_core::Interface for Binding {
    type Vtable = <IBinding as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBinding as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Binding {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.Binding";
}
unsafe impl Send for Binding {}
unsafe impl Sync for Binding {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BindingBase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BindingBase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(BindingBase, super::DependencyObject);
impl BindingBase {
    pub fn new() -> windows_core::Result<BindingBase> {
        Self::IBindingBaseFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IBindingBaseFactory<R, F: FnOnce(&IBindingBaseFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BindingBase, IBindingBaseFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BindingBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBindingBase>();
}
unsafe impl windows_core::Interface for BindingBase {
    type Vtable = <IBindingBase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBindingBase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BindingBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.BindingBase";
}
unsafe impl Send for BindingBase {}
unsafe impl Sync for BindingBase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BindingExpression(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BindingExpression,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(BindingExpression, BindingExpressionBase);
impl BindingExpression {
    pub fn DataItem(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ParentBinding(&self) -> windows_core::Result<Binding> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentBinding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn UpdateSource(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateSource)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BindingExpression {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBindingExpression>();
}
unsafe impl windows_core::Interface for BindingExpression {
    type Vtable = <IBindingExpression as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBindingExpression as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BindingExpression {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.BindingExpression";
}
unsafe impl Send for BindingExpression {}
unsafe impl Sync for BindingExpression {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BindingExpressionBase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BindingExpressionBase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl BindingExpressionBase {}
impl windows_core::RuntimeType for BindingExpressionBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBindingExpressionBase>();
}
unsafe impl windows_core::Interface for BindingExpressionBase {
    type Vtable = <IBindingExpressionBase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBindingExpressionBase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BindingExpressionBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.BindingExpressionBase";
}
unsafe impl Send for BindingExpressionBase {}
unsafe impl Sync for BindingExpressionBase {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct BindingMode(pub i32);
impl BindingMode {
    pub const OneWay: Self = Self(1i32);
    pub const OneTime: Self = Self(2i32);
    pub const TwoWay: Self = Self(3i32);
}
impl windows_core::TypeKind for BindingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for BindingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.Data.BindingMode;i4)");
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BindingOperations(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BindingOperations,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl BindingOperations {
    pub fn SetBinding<P0, P1, P2>(target: P0, dp: P1, binding: P2) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<super::DependencyProperty>,
        P2: windows_core::Param<BindingBase>,
    {
        Self::IBindingOperationsStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetBinding)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                dp.param().abi(),
                binding.param().abi(),
            )
            .ok()
        })
    }
    fn IBindingOperationsStatics<
        R,
        F: FnOnce(&IBindingOperationsStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BindingOperations,
            IBindingOperationsStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BindingOperations {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBindingOperations>();
}
unsafe impl windows_core::Interface for BindingOperations {
    type Vtable = <IBindingOperations as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBindingOperations as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BindingOperations {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.BindingOperations";
}
unsafe impl Send for BindingOperations {}
unsafe impl Sync for BindingOperations {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CollectionViewSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CollectionViewSource,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(CollectionViewSource, super::DependencyObject);
impl CollectionViewSource {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CollectionViewSource,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Source(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Source)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSource<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSource)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn View(&self) -> windows_core::Result<ICollectionView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).View)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsSourceGrouped(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSourceGrouped)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSourceGrouped(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSourceGrouped)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ItemsPath(&self) -> windows_core::Result<super::PropertyPath> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsPath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetItemsPath<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::PropertyPath>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetItemsPath)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn SourceProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ICollectionViewSourceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourceProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ViewProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ICollectionViewSourceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ViewProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsSourceGroupedProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ICollectionViewSourceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSourceGroupedProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ItemsPathProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ICollectionViewSourceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemsPathProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICollectionViewSourceStatics<
        R,
        F: FnOnce(&ICollectionViewSourceStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CollectionViewSource,
            ICollectionViewSourceStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CollectionViewSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICollectionViewSource>();
}
unsafe impl windows_core::Interface for CollectionViewSource {
    type Vtable = <ICollectionViewSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICollectionViewSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CollectionViewSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.CollectionViewSource";
}
unsafe impl Send for CollectionViewSource {}
unsafe impl Sync for CollectionViewSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CurrentChangingEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CurrentChangingEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl CurrentChangingEventArgs {
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsCancelable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsCancelable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn new() -> windows_core::Result<CurrentChangingEventArgs> {
        Self::ICurrentChangingEventArgsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateWithCancelableParameter(
        iscancelable: bool,
    ) -> windows_core::Result<CurrentChangingEventArgs> {
        Self::ICurrentChangingEventArgsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWithCancelableParameter)(
                windows_core::Interface::as_raw(this),
                iscancelable,
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ICurrentChangingEventArgsFactory<
        R,
        F: FnOnce(&ICurrentChangingEventArgsFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CurrentChangingEventArgs,
            ICurrentChangingEventArgsFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CurrentChangingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICurrentChangingEventArgs>();
}
unsafe impl windows_core::Interface for CurrentChangingEventArgs {
    type Vtable = <ICurrentChangingEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICurrentChangingEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CurrentChangingEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.CurrentChangingEventArgs";
}
unsafe impl Send for CurrentChangingEventArgs {}
unsafe impl Sync for CurrentChangingEventArgs {}
windows_core::imp::define_interface!(
    CurrentChangingEventHandler,
    CurrentChangingEventHandler_Vtbl,
    0x3d2a98dd_95b3_5fd5_93b4_a1a2599f225c
);
impl windows_core::RuntimeType for CurrentChangingEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl CurrentChangingEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, CurrentChangingEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = CurrentChangingEventHandlerBox {
            vtable: &CurrentChangingEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<CurrentChangingEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct CurrentChangingEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct CurrentChangingEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, CurrentChangingEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const CurrentChangingEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, CurrentChangingEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > CurrentChangingEventHandlerBox<F>
{
    const VTABLE: CurrentChangingEventHandler_Vtbl = CurrentChangingEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <CurrentChangingEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DataErrorsChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DataErrorsChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DataErrorsChangedEventArgs {
    pub fn PropertyName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PropertyName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPropertyName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPropertyName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn CreateInstance(
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<DataErrorsChangedEventArgs> {
        Self::IDataErrorsChangedEventArgsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDataErrorsChangedEventArgsFactory<
        R,
        F: FnOnce(&IDataErrorsChangedEventArgsFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DataErrorsChangedEventArgs,
            IDataErrorsChangedEventArgsFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DataErrorsChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDataErrorsChangedEventArgs>();
}
unsafe impl windows_core::Interface for DataErrorsChangedEventArgs {
    type Vtable = <IDataErrorsChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDataErrorsChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DataErrorsChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.DataErrorsChangedEventArgs";
}
unsafe impl Send for DataErrorsChangedEventArgs {}
unsafe impl Sync for DataErrorsChangedEventArgs {}
windows_core::imp::define_interface!(
    IBinding,
    IBinding_Vtbl,
    0x501ea0e8_edd4_59de_8845_76af2eabbe00
);
impl windows_core::RuntimeType for IBinding {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBinding {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBinding";
}
pub trait IBinding_Impl: windows_core::IUnknownImpl {
    fn Path(&self) -> windows_core::Result<super::PropertyPath>;
    fn SetPath(
        &self,
        value: windows_core::Ref<'_, super::PropertyPath>,
    ) -> windows_core::Result<()>;
    fn Mode(&self) -> windows_core::Result<BindingMode>;
    fn SetMode(&self, value: BindingMode) -> windows_core::Result<()>;
    fn Source(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetSource(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn RelativeSource(&self) -> windows_core::Result<RelativeSource>;
    fn SetRelativeSource(
        &self,
        value: windows_core::Ref<'_, RelativeSource>,
    ) -> windows_core::Result<()>;
    fn ElementName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetElementName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Converter(&self) -> windows_core::Result<IValueConverter>;
    fn SetConverter(
        &self,
        value: windows_core::Ref<'_, IValueConverter>,
    ) -> windows_core::Result<()>;
    fn ConverterParameter(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetConverterParameter(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn ConverterLanguage(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetConverterLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FallbackValue(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetFallbackValue(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn TargetNullValue(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetTargetNullValue(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn UpdateSourceTrigger(&self) -> windows_core::Result<UpdateSourceTrigger>;
    fn SetUpdateSourceTrigger(&self, value: UpdateSourceTrigger) -> windows_core::Result<()>;
}
impl IBinding_Vtbl {
    pub const fn new<Identity: IBinding_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Path<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::Path(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPath<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetPath(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Mode<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut BindingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMode<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: BindingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetMode(this, value).into()
            }
        }
        unsafe extern "system" fn Source<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn RelativeSource<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::RelativeSource(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRelativeSource<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetRelativeSource(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ElementName<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::ElementName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetElementName<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetElementName(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Converter<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::Converter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConverter<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetConverter(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ConverterParameter<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::ConverterParameter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConverterParameter<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetConverterParameter(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ConverterLanguage<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::ConverterLanguage(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConverterLanguage<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetConverterLanguage(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FallbackValue<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::FallbackValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFallbackValue<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetFallbackValue(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn TargetNullValue<Identity: IBinding_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::TargetNullValue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetNullValue<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetTargetNullValue(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn UpdateSourceTrigger<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut UpdateSourceTrigger,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBinding_Impl::UpdateSourceTrigger(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUpdateSourceTrigger<
            Identity: IBinding_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: UpdateSourceTrigger,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBinding_Impl::SetUpdateSourceTrigger(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBinding, OFFSET>(),
            Path: Path::<Identity, OFFSET>,
            SetPath: SetPath::<Identity, OFFSET>,
            Mode: Mode::<Identity, OFFSET>,
            SetMode: SetMode::<Identity, OFFSET>,
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
            RelativeSource: RelativeSource::<Identity, OFFSET>,
            SetRelativeSource: SetRelativeSource::<Identity, OFFSET>,
            ElementName: ElementName::<Identity, OFFSET>,
            SetElementName: SetElementName::<Identity, OFFSET>,
            Converter: Converter::<Identity, OFFSET>,
            SetConverter: SetConverter::<Identity, OFFSET>,
            ConverterParameter: ConverterParameter::<Identity, OFFSET>,
            SetConverterParameter: SetConverterParameter::<Identity, OFFSET>,
            ConverterLanguage: ConverterLanguage::<Identity, OFFSET>,
            SetConverterLanguage: SetConverterLanguage::<Identity, OFFSET>,
            FallbackValue: FallbackValue::<Identity, OFFSET>,
            SetFallbackValue: SetFallbackValue::<Identity, OFFSET>,
            TargetNullValue: TargetNullValue::<Identity, OFFSET>,
            SetTargetNullValue: SetTargetNullValue::<Identity, OFFSET>,
            UpdateSourceTrigger: UpdateSourceTrigger::<Identity, OFFSET>,
            SetUpdateSourceTrigger: SetUpdateSourceTrigger::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBinding as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBinding_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut BindingMode,
    ) -> windows_core::HRESULT,
    pub SetMode:
        unsafe extern "system" fn(*mut core::ffi::c_void, BindingMode) -> windows_core::HRESULT,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RelativeSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetRelativeSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetElementName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Converter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetConverter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConverterParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetConverterParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConverterLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetConverterLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FallbackValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFallbackValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TargetNullValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetNullValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UpdateSourceTrigger: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut UpdateSourceTrigger,
    ) -> windows_core::HRESULT,
    pub SetUpdateSourceTrigger: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        UpdateSourceTrigger,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBindingBase,
    IBindingBase_Vtbl,
    0x91ddd141_5944_50ef_b85e_218e463f7a73
);
impl windows_core::RuntimeType for IBindingBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingBase";
}
pub trait IBindingBase_Impl: windows_core::IUnknownImpl {}
impl IBindingBase_Vtbl {
    pub const fn new<Identity: IBindingBase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingBase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingBase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingBase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBindingBaseFactory,
    IBindingBaseFactory_Vtbl,
    0xc8a866c5_f6f3_5f7a_9592_d385af48bd8f
);
impl windows_core::RuntimeType for IBindingBaseFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingBaseFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingBaseFactory";
}
pub trait IBindingBaseFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<BindingBase>;
}
impl IBindingBaseFactory_Vtbl {
    pub const fn new<Identity: IBindingBaseFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBindingBaseFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBindingBaseFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingBaseFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingBaseFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingBaseFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBindingExpression,
    IBindingExpression_Vtbl,
    0x4c023916_37bc_5b07_bc9d_15c547bd9b26
);
impl windows_core::RuntimeType for IBindingExpression {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingExpression {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingExpression";
}
pub trait IBindingExpression_Impl: windows_core::IUnknownImpl {
    fn DataItem(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn ParentBinding(&self) -> windows_core::Result<Binding>;
    fn UpdateSource(&self) -> windows_core::Result<()>;
}
impl IBindingExpression_Vtbl {
    pub const fn new<Identity: IBindingExpression_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DataItem<
            Identity: IBindingExpression_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBindingExpression_Impl::DataItem(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ParentBinding<
            Identity: IBindingExpression_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBindingExpression_Impl::ParentBinding(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn UpdateSource<
            Identity: IBindingExpression_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBindingExpression_Impl::UpdateSource(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingExpression, OFFSET>(),
            DataItem: DataItem::<Identity, OFFSET>,
            ParentBinding: ParentBinding::<Identity, OFFSET>,
            UpdateSource: UpdateSource::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingExpression as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingExpression_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DataItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ParentBinding: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UpdateSource: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBindingExpressionBase,
    IBindingExpressionBase_Vtbl,
    0x8825e5a9_d9a3_5e87_bcd8_c63133d29029
);
impl windows_core::RuntimeType for IBindingExpressionBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingExpressionBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingExpressionBase";
}
pub trait IBindingExpressionBase_Impl: windows_core::IUnknownImpl {}
impl IBindingExpressionBase_Vtbl {
    pub const fn new<Identity: IBindingExpressionBase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingExpressionBase, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingExpressionBase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingExpressionBase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBindingExpressionBaseFactory,
    IBindingExpressionBaseFactory_Vtbl,
    0x41d643b9_2629_5451_a716_596c0848b5dc
);
impl windows_core::RuntimeType for IBindingExpressionBaseFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingExpressionBaseFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactory";
}
pub trait IBindingExpressionBaseFactory_Impl: windows_core::IUnknownImpl {}
impl IBindingExpressionBaseFactory_Vtbl {
    pub const fn new<Identity: IBindingExpressionBaseFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBindingExpressionBaseFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingExpressionBaseFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingExpressionBaseFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBindingExpressionFactory,
    IBindingExpressionFactory_Vtbl,
    0x086cae14_81a1_588b_b619_05ee84c0f089
);
impl windows_core::RuntimeType for IBindingExpressionFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingExpressionFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingExpressionFactory";
}
pub trait IBindingExpressionFactory_Impl: windows_core::IUnknownImpl {}
impl IBindingExpressionFactory_Vtbl {
    pub const fn new<Identity: IBindingExpressionFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBindingExpressionFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingExpressionFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingExpressionFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBindingFactory,
    IBindingFactory_Vtbl,
    0xcb2de749_b115_5f67_b64a_797d54885d5c
);
impl windows_core::RuntimeType for IBindingFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingFactory";
}
pub trait IBindingFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Binding>;
}
impl IBindingFactory_Vtbl {
    pub const fn new<Identity: IBindingFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBindingFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBindingFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBindingOperations,
    IBindingOperations_Vtbl,
    0x9a319b95_aabe_5075_b227_8eb07e443d8b
);
impl windows_core::RuntimeType for IBindingOperations {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingOperations {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingOperations";
}
pub trait IBindingOperations_Impl: windows_core::IUnknownImpl {}
impl IBindingOperations_Vtbl {
    pub const fn new<Identity: IBindingOperations_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBindingOperations, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingOperations as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingOperations_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBindingOperationsStatics,
    IBindingOperationsStatics_Vtbl,
    0x1e1bdbd3_fca5_5c85_b87d_b504cd8fa8ac
);
impl windows_core::RuntimeType for IBindingOperationsStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBindingOperationsStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IBindingOperationsStatics";
}
pub trait IBindingOperationsStatics_Impl: windows_core::IUnknownImpl {
    fn SetBinding(
        &self,
        target: windows_core::Ref<'_, super::DependencyObject>,
        dp: windows_core::Ref<'_, super::DependencyProperty>,
        binding: windows_core::Ref<'_, BindingBase>,
    ) -> windows_core::Result<()>;
}
impl IBindingOperationsStatics_Vtbl {
    pub const fn new<Identity: IBindingOperationsStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetBinding<
            Identity: IBindingOperationsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            dp: *mut core::ffi::c_void,
            binding: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBindingOperationsStatics_Impl::SetBinding(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute_copy(&dp),
                    core::mem::transmute_copy(&binding),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBindingOperationsStatics,
                OFFSET,
            >(),
            SetBinding: SetBinding::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBindingOperationsStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingOperationsStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetBinding: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICollectionView,
    ICollectionView_Vtbl,
    0xf8bb90d8_e008_5d65_8c97_7bb790a4230c
);
impl windows_core::RuntimeType for ICollectionView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICollectionView,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ICollectionView,
    windows_collections::IIterable<windows_core::IInspectable>,
    windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    windows_collections::IVector<windows_core::IInspectable>
);
impl ICollectionView {
    pub fn CurrentItem(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentItem)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CurrentPosition(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsCurrentAfterLast(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsCurrentAfterLast)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsCurrentBeforeFirst(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsCurrentBeforeFirst)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CollectionGroups(
        &self,
    ) -> windows_core::Result<
        windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CollectionGroups)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn HasMoreItems(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasMoreItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CurrentChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCurrentChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCurrentChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CurrentChanging<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<CurrentChangingEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentChanging)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCurrentChanging(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCurrentChanging)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn MoveCurrentTo<P0>(&self, item: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentTo)(
                windows_core::Interface::as_raw(this),
                item.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveCurrentToPosition(&self, index: i32) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentToPosition)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveCurrentToFirst(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentToFirst)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveCurrentToLast(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentToLast)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveCurrentToNext(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentToNext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MoveCurrentToPrevious(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveCurrentToPrevious)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LoadMoreItemsAsync(
        &self,
        count: u32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<LoadMoreItemsResult>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LoadMoreItemsAsync)(
                windows_core::Interface::as_raw(this),
                count,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn First(
        &self,
    ) -> windows_core::Result<windows_collections::IIterator<windows_core::IInspectable>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IIterable<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn VectorChanged<P0>(&self, vhnd: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::Collections::VectorChangedEventHandler<windows_core::IInspectable>,
        >,
    {
        let this = &windows_core::Interface::cast::<
            windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VectorChanged)(
                windows_core::Interface::as_raw(this),
                vhnd.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveVectorChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveVectorChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<windows_core::IInspectable>> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<windows_core::IInspectable>],
    ) -> windows_core::Result<u32> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[Option<windows_core::IInspectable>],
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<
            windows_collections::IVector<windows_core::IInspectable>,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl IntoIterator for ICollectionView {
    type Item = windows_core::IInspectable;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &ICollectionView {
    type Item = windows_core::IInspectable;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
impl windows_core::RuntimeName for ICollectionView {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICollectionView";
}
pub trait ICollectionView_Impl:
    windows_collections::IIterable_Impl<windows_core::IInspectable>
    + windows::Foundation::Collections::IObservableVector_Impl<windows_core::IInspectable>
    + windows_collections::IVector_Impl<windows_core::IInspectable>
{
    fn CurrentItem(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn CurrentPosition(&self) -> windows_core::Result<i32>;
    fn IsCurrentAfterLast(&self) -> windows_core::Result<bool>;
    fn IsCurrentBeforeFirst(&self) -> windows_core::Result<bool>;
    fn CollectionGroups(
        &self,
    ) -> windows_core::Result<
        windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    >;
    fn HasMoreItems(&self) -> windows_core::Result<bool>;
    fn CurrentChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::EventHandler<windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCurrentChanged(&self, token: i64) -> windows_core::Result<()>;
    fn CurrentChanging(
        &self,
        handler: windows_core::Ref<'_, CurrentChangingEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveCurrentChanging(&self, token: i64) -> windows_core::Result<()>;
    fn MoveCurrentTo(
        &self,
        item: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<bool>;
    fn MoveCurrentToPosition(&self, index: i32) -> windows_core::Result<bool>;
    fn MoveCurrentToFirst(&self) -> windows_core::Result<bool>;
    fn MoveCurrentToLast(&self) -> windows_core::Result<bool>;
    fn MoveCurrentToNext(&self) -> windows_core::Result<bool>;
    fn MoveCurrentToPrevious(&self) -> windows_core::Result<bool>;
    fn LoadMoreItemsAsync(
        &self,
        count: u32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<LoadMoreItemsResult>>;
}
impl ICollectionView_Vtbl {
    pub const fn new<Identity: ICollectionView_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CurrentItem<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::CurrentItem(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CurrentPosition<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::CurrentPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsCurrentAfterLast<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::IsCurrentAfterLast(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsCurrentBeforeFirst<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::IsCurrentBeforeFirst(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CollectionGroups<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::CollectionGroups(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasMoreItems<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::HasMoreItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CurrentChanged<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::CurrentChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCurrentChanged<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICollectionView_Impl::RemoveCurrentChanged(this, token).into()
            }
        }
        unsafe extern "system" fn CurrentChanging<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::CurrentChanging(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCurrentChanging<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICollectionView_Impl::RemoveCurrentChanging(this, token).into()
            }
        }
        unsafe extern "system" fn MoveCurrentTo<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            item: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentTo(this, core::mem::transmute_copy(&item)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveCurrentToPosition<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: i32,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentToPosition(this, index) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveCurrentToFirst<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentToFirst(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveCurrentToLast<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentToLast(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveCurrentToNext<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentToNext(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveCurrentToPrevious<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::MoveCurrentToPrevious(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LoadMoreItemsAsync<
            Identity: ICollectionView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionView_Impl::LoadMoreItemsAsync(this, count) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICollectionView, OFFSET>(),
            CurrentItem: CurrentItem::<Identity, OFFSET>,
            CurrentPosition: CurrentPosition::<Identity, OFFSET>,
            IsCurrentAfterLast: IsCurrentAfterLast::<Identity, OFFSET>,
            IsCurrentBeforeFirst: IsCurrentBeforeFirst::<Identity, OFFSET>,
            CollectionGroups: CollectionGroups::<Identity, OFFSET>,
            HasMoreItems: HasMoreItems::<Identity, OFFSET>,
            CurrentChanged: CurrentChanged::<Identity, OFFSET>,
            RemoveCurrentChanged: RemoveCurrentChanged::<Identity, OFFSET>,
            CurrentChanging: CurrentChanging::<Identity, OFFSET>,
            RemoveCurrentChanging: RemoveCurrentChanging::<Identity, OFFSET>,
            MoveCurrentTo: MoveCurrentTo::<Identity, OFFSET>,
            MoveCurrentToPosition: MoveCurrentToPosition::<Identity, OFFSET>,
            MoveCurrentToFirst: MoveCurrentToFirst::<Identity, OFFSET>,
            MoveCurrentToLast: MoveCurrentToLast::<Identity, OFFSET>,
            MoveCurrentToNext: MoveCurrentToNext::<Identity, OFFSET>,
            MoveCurrentToPrevious: MoveCurrentToPrevious::<Identity, OFFSET>,
            LoadMoreItemsAsync: LoadMoreItemsAsync::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICollectionView as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICollectionView_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CurrentItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CurrentPosition:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub IsCurrentAfterLast:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsCurrentBeforeFirst:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CollectionGroups: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasMoreItems:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CurrentChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCurrentChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub CurrentChanging: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCurrentChanging:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub MoveCurrentTo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub MoveCurrentToPosition:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32, *mut bool) -> windows_core::HRESULT,
    pub MoveCurrentToFirst:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub MoveCurrentToLast:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub MoveCurrentToNext:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub MoveCurrentToPrevious:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LoadMoreItemsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICollectionViewFactory,
    ICollectionViewFactory_Vtbl,
    0xd971f795_5728_5bef_9602_43f2c4250e56
);
impl windows_core::RuntimeType for ICollectionViewFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICollectionViewFactory,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICollectionViewFactory {
    pub fn CreateView(&self) -> windows_core::Result<ICollectionView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ICollectionViewFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICollectionViewFactory";
}
pub trait ICollectionViewFactory_Impl: windows_core::IUnknownImpl {
    fn CreateView(&self) -> windows_core::Result<ICollectionView>;
}
impl ICollectionViewFactory_Vtbl {
    pub const fn new<Identity: ICollectionViewFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateView<
            Identity: ICollectionViewFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewFactory_Impl::CreateView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICollectionViewFactory, OFFSET>(
            ),
            CreateView: CreateView::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICollectionViewFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICollectionViewFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICollectionViewGroup,
    ICollectionViewGroup_Vtbl,
    0x96a08da8_be38_5ae0_903d_6fb6111e61f5
);
impl windows_core::RuntimeType for ICollectionViewGroup {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICollectionViewGroup,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICollectionViewGroup {
    pub fn Group(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Group)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GroupItems(
        &self,
    ) -> windows_core::Result<
        windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GroupItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ICollectionViewGroup {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICollectionViewGroup";
}
pub trait ICollectionViewGroup_Impl: windows_core::IUnknownImpl {
    fn Group(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn GroupItems(
        &self,
    ) -> windows_core::Result<
        windows::Foundation::Collections::IObservableVector<windows_core::IInspectable>,
    >;
}
impl ICollectionViewGroup_Vtbl {
    pub const fn new<Identity: ICollectionViewGroup_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Group<
            Identity: ICollectionViewGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewGroup_Impl::Group(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GroupItems<
            Identity: ICollectionViewGroup_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewGroup_Impl::GroupItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICollectionViewGroup, OFFSET>(
            ),
            Group: Group::<Identity, OFFSET>,
            GroupItems: GroupItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICollectionViewGroup as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICollectionViewGroup_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Group: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GroupItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICollectionViewSource,
    ICollectionViewSource_Vtbl,
    0xa45e3b3a_f31e_5bbb_8a7c_70cf5c64bc3f
);
impl windows_core::RuntimeType for ICollectionViewSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICollectionViewSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICollectionViewSource";
}
pub trait ICollectionViewSource_Impl: windows_core::IUnknownImpl {
    fn Source(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetSource(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn View(&self) -> windows_core::Result<ICollectionView>;
    fn IsSourceGrouped(&self) -> windows_core::Result<bool>;
    fn SetIsSourceGrouped(&self, value: bool) -> windows_core::Result<()>;
    fn ItemsPath(&self) -> windows_core::Result<super::PropertyPath>;
    fn SetItemsPath(
        &self,
        value: windows_core::Ref<'_, super::PropertyPath>,
    ) -> windows_core::Result<()>;
}
impl ICollectionViewSource_Vtbl {
    pub const fn new<Identity: ICollectionViewSource_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Source<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSource_Impl::Source(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSource<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICollectionViewSource_Impl::SetSource(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn View<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSource_Impl::View(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSourceGrouped<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSource_Impl::IsSourceGrouped(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSourceGrouped<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICollectionViewSource_Impl::SetIsSourceGrouped(this, value).into()
            }
        }
        unsafe extern "system" fn ItemsPath<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSource_Impl::ItemsPath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetItemsPath<
            Identity: ICollectionViewSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICollectionViewSource_Impl::SetItemsPath(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICollectionViewSource, OFFSET>(
            ),
            Source: Source::<Identity, OFFSET>,
            SetSource: SetSource::<Identity, OFFSET>,
            View: View::<Identity, OFFSET>,
            IsSourceGrouped: IsSourceGrouped::<Identity, OFFSET>,
            SetIsSourceGrouped: SetIsSourceGrouped::<Identity, OFFSET>,
            ItemsPath: ItemsPath::<Identity, OFFSET>,
            SetItemsPath: SetItemsPath::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICollectionViewSource as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICollectionViewSource_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub View: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsSourceGrouped:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSourceGrouped:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ItemsPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetItemsPath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICollectionViewSourceStatics,
    ICollectionViewSourceStatics_Vtbl,
    0xe282f10f_d4b1_5769_8a11_30f739e6113b
);
impl windows_core::RuntimeType for ICollectionViewSourceStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICollectionViewSourceStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICollectionViewSourceStatics";
}
pub trait ICollectionViewSourceStatics_Impl: windows_core::IUnknownImpl {
    fn SourceProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ViewProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn IsSourceGroupedProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ItemsPathProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl ICollectionViewSourceStatics_Vtbl {
    pub const fn new<Identity: ICollectionViewSourceStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SourceProperty<
            Identity: ICollectionViewSourceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSourceStatics_Impl::SourceProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ViewProperty<
            Identity: ICollectionViewSourceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSourceStatics_Impl::ViewProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSourceGroupedProperty<
            Identity: ICollectionViewSourceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSourceStatics_Impl::IsSourceGroupedProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ItemsPathProperty<
            Identity: ICollectionViewSourceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICollectionViewSourceStatics_Impl::ItemsPathProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICollectionViewSourceStatics,
                OFFSET,
            >(),
            SourceProperty: SourceProperty::<Identity, OFFSET>,
            ViewProperty: ViewProperty::<Identity, OFFSET>,
            IsSourceGroupedProperty: IsSourceGroupedProperty::<Identity, OFFSET>,
            ItemsPathProperty: ItemsPathProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICollectionViewSourceStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICollectionViewSourceStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SourceProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ViewProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsSourceGroupedProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ItemsPathProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICurrentChangingEventArgs,
    ICurrentChangingEventArgs_Vtbl,
    0x63e42ed6_e14a_51ea_9cb1_72f9c907dc80
);
impl windows_core::RuntimeType for ICurrentChangingEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICurrentChangingEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICurrentChangingEventArgs";
}
pub trait ICurrentChangingEventArgs_Impl: windows_core::IUnknownImpl {
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn IsCancelable(&self) -> windows_core::Result<bool>;
}
impl ICurrentChangingEventArgs_Vtbl {
    pub const fn new<Identity: ICurrentChangingEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Cancel<
            Identity: ICurrentChangingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICurrentChangingEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: ICurrentChangingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICurrentChangingEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn IsCancelable<
            Identity: ICurrentChangingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICurrentChangingEventArgs_Impl::IsCancelable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICurrentChangingEventArgs,
                OFFSET,
            >(),
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            IsCancelable: IsCancelable::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICurrentChangingEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICurrentChangingEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsCancelable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICurrentChangingEventArgsFactory,
    ICurrentChangingEventArgsFactory_Vtbl,
    0x3670f48a_ac2c_5352_8a4b_6b977a08e5f8
);
impl windows_core::RuntimeType for ICurrentChangingEventArgsFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICurrentChangingEventArgsFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICurrentChangingEventArgsFactory";
}
pub trait ICurrentChangingEventArgsFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<CurrentChangingEventArgs>;
    fn CreateWithCancelableParameter(
        &self,
        isCancelable: bool,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<CurrentChangingEventArgs>;
}
impl ICurrentChangingEventArgsFactory_Vtbl {
    pub const fn new<Identity: ICurrentChangingEventArgsFactory_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateInstance<
            Identity: ICurrentChangingEventArgsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICurrentChangingEventArgsFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateWithCancelableParameter<
            Identity: ICurrentChangingEventArgsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            iscancelable: bool,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICurrentChangingEventArgsFactory_Impl::CreateWithCancelableParameter(
                    this,
                    iscancelable,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICurrentChangingEventArgsFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
            CreateWithCancelableParameter: CreateWithCancelableParameter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICurrentChangingEventArgsFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICurrentChangingEventArgsFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateWithCancelableParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        bool,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICustomProperty,
    ICustomProperty_Vtbl,
    0x30da92c0_23e8_42a0_ae7c_734a0e5d2782
);
impl windows_core::RuntimeType for ICustomProperty {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICustomProperty,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICustomProperty {
    pub fn Type(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Type)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetValue<P0>(&self, target: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, target: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetIndexedValue<P0, P1>(
        &self,
        target: P0,
        index: P1,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIndexedValue)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                index.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetIndexedValue<P0, P1, P2>(
        &self,
        target: P0,
        value: P1,
        index: P2,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<windows_core::IInspectable>,
        P2: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIndexedValue)(
                windows_core::Interface::as_raw(this),
                target.param().abi(),
                value.param().abi(),
                index.param().abi(),
            )
            .ok()
        }
    }
    pub fn CanWrite(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanWrite)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanRead(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanRead)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeName for ICustomProperty {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICustomProperty";
}
pub trait ICustomProperty_Impl: windows_core::IUnknownImpl {
    fn Type(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn GetValue(
        &self,
        target: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn SetValue(
        &self,
        target: windows_core::Ref<'_, windows_core::IInspectable>,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn GetIndexedValue(
        &self,
        target: windows_core::Ref<'_, windows_core::IInspectable>,
        index: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn SetIndexedValue(
        &self,
        target: windows_core::Ref<'_, windows_core::IInspectable>,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
        index: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn CanWrite(&self) -> windows_core::Result<bool>;
    fn CanRead(&self) -> windows_core::Result<bool>;
}
impl ICustomProperty_Vtbl {
    pub const fn new<Identity: ICustomProperty_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Type<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::Type(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Name<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetValue<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::GetValue(this, core::mem::transmute_copy(&target)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICustomProperty_Impl::SetValue(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetIndexedValue<
            Identity: ICustomProperty_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            index: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::GetIndexedValue(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute_copy(&index),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIndexedValue<
            Identity: ICustomProperty_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            index: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICustomProperty_Impl::SetIndexedValue(
                    this,
                    core::mem::transmute_copy(&target),
                    core::mem::transmute_copy(&value),
                    core::mem::transmute_copy(&index),
                )
                .into()
            }
        }
        unsafe extern "system" fn CanWrite<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::CanWrite(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanRead<Identity: ICustomProperty_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomProperty_Impl::CanRead(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICustomProperty, OFFSET>(),
            Type: Type::<Identity, OFFSET>,
            Name: Name::<Identity, OFFSET>,
            GetValue: GetValue::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            GetIndexedValue: GetIndexedValue::<Identity, OFFSET>,
            SetIndexedValue: SetIndexedValue::<Identity, OFFSET>,
            CanWrite: CanWrite::<Identity, OFFSET>,
            CanRead: CanRead::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICustomProperty as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICustomProperty_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Type: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIndexedValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetIndexedValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CanWrite:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanRead:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICustomPropertyProvider,
    ICustomPropertyProvider_Vtbl,
    0x7c925755_3e48_42b4_8677_76372267033f
);
impl windows_core::RuntimeType for ICustomPropertyProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICustomPropertyProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICustomPropertyProvider {
    pub fn GetCustomProperty(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<ICustomProperty> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCustomProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetIndexedProperty(
        &self,
        name: &windows_core::HSTRING,
        r#type: &crate::Windows::UI::Xaml::Interop::TypeName,
    ) -> windows_core::Result<ICustomProperty> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIndexedProperty)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::mem::transmute_copy(r#type),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetStringRepresentation(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStringRepresentation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Type(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Type)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeName for ICustomPropertyProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ICustomPropertyProvider";
}
pub trait ICustomPropertyProvider_Impl: windows_core::IUnknownImpl {
    fn GetCustomProperty(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<ICustomProperty>;
    fn GetIndexedProperty(
        &self,
        name: &windows_core::HSTRING,
        r#type: &crate::Windows::UI::Xaml::Interop::TypeName,
    ) -> windows_core::Result<ICustomProperty>;
    fn GetStringRepresentation(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Type(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
}
impl ICustomPropertyProvider_Vtbl {
    pub const fn new<Identity: ICustomPropertyProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetCustomProperty<
            Identity: ICustomPropertyProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomPropertyProvider_Impl::GetCustomProperty(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIndexedProperty<
            Identity: ICustomPropertyProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            r#type: core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomPropertyProvider_Impl::GetIndexedProperty(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute(&r#type),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStringRepresentation<
            Identity: ICustomPropertyProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomPropertyProvider_Impl::GetStringRepresentation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Type<
            Identity: ICustomPropertyProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomPropertyProvider_Impl::Type(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICustomPropertyProvider, OFFSET>(
            ),
            GetCustomProperty: GetCustomProperty::<Identity, OFFSET>,
            GetIndexedProperty: GetIndexedProperty::<Identity, OFFSET>,
            GetStringRepresentation: GetStringRepresentation::<Identity, OFFSET>,
            Type: Type::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICustomPropertyProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICustomPropertyProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetCustomProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIndexedProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStringRepresentation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Type: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDataErrorsChangedEventArgs,
    IDataErrorsChangedEventArgs_Vtbl,
    0xd026dd64_5f26_5f15_a86a_0dec8a431796
);
impl windows_core::RuntimeType for IDataErrorsChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDataErrorsChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgs";
}
pub trait IDataErrorsChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn PropertyName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPropertyName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IDataErrorsChangedEventArgs_Vtbl {
    pub const fn new<Identity: IDataErrorsChangedEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PropertyName<
            Identity: IDataErrorsChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDataErrorsChangedEventArgs_Impl::PropertyName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPropertyName<
            Identity: IDataErrorsChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDataErrorsChangedEventArgs_Impl::SetPropertyName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDataErrorsChangedEventArgs,
                OFFSET,
            >(),
            PropertyName: PropertyName::<Identity, OFFSET>,
            SetPropertyName: SetPropertyName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDataErrorsChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataErrorsChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PropertyName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPropertyName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDataErrorsChangedEventArgsFactory,
    IDataErrorsChangedEventArgsFactory_Vtbl,
    0x62d0bd1e_b85f_5fcc_842a_7cb0dda37fe5
);
impl windows_core::RuntimeType for IDataErrorsChangedEventArgsFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDataErrorsChangedEventArgsFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IDataErrorsChangedEventArgsFactory";
}
pub trait IDataErrorsChangedEventArgsFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<DataErrorsChangedEventArgs>;
}
impl IDataErrorsChangedEventArgsFactory_Vtbl {
    pub const fn new<Identity: IDataErrorsChangedEventArgsFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IDataErrorsChangedEventArgsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDataErrorsChangedEventArgsFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&name),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDataErrorsChangedEventArgsFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDataErrorsChangedEventArgsFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataErrorsChangedEventArgsFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemIndexRange,
    IItemIndexRange_Vtbl,
    0xeba09846_2554_5b86_ac17_614f05105fa2
);
impl windows_core::RuntimeType for IItemIndexRange {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IItemIndexRange {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IItemIndexRange";
}
pub trait IItemIndexRange_Impl: windows_core::IUnknownImpl {
    fn FirstIndex(&self) -> windows_core::Result<i32>;
    fn Length(&self) -> windows_core::Result<u32>;
    fn LastIndex(&self) -> windows_core::Result<i32>;
}
impl IItemIndexRange_Vtbl {
    pub const fn new<Identity: IItemIndexRange_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FirstIndex<
            Identity: IItemIndexRange_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemIndexRange_Impl::FirstIndex(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Length<Identity: IItemIndexRange_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemIndexRange_Impl::Length(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LastIndex<Identity: IItemIndexRange_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemIndexRange_Impl::LastIndex(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemIndexRange, OFFSET>(),
            FirstIndex: FirstIndex::<Identity, OFFSET>,
            Length: Length::<Identity, OFFSET>,
            LastIndex: LastIndex::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemIndexRange as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemIndexRange_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FirstIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub Length:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub LastIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemIndexRangeFactory,
    IItemIndexRangeFactory_Vtbl,
    0x9fc73213_eda0_5238_aa2c_401c9921f0f9
);
impl windows_core::RuntimeType for IItemIndexRangeFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IItemIndexRangeFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IItemIndexRangeFactory";
}
pub trait IItemIndexRangeFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        firstIndex: i32,
        length: u32,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<ItemIndexRange>;
}
impl IItemIndexRangeFactory_Vtbl {
    pub const fn new<Identity: IItemIndexRangeFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IItemIndexRangeFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            firstindex: i32,
            length: u32,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemIndexRangeFactory_Impl::CreateInstance(
                    this,
                    firstindex,
                    length,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemIndexRangeFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemIndexRangeFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemIndexRangeFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemsRangeInfo,
    IItemsRangeInfo_Vtbl,
    0xb8376d08_85fb_563b_8273_39ef2d138256
);
impl windows_core::RuntimeType for IItemsRangeInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IItemsRangeInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(IItemsRangeInfo, windows::Foundation::IClosable);
impl IItemsRangeInfo {
    pub fn RangesChanged<P0, P1>(
        &self,
        visiblerange: P0,
        trackeditems: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ItemIndexRange>,
        P1: windows_core::Param<windows_collections::IVectorView<ItemIndexRange>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RangesChanged)(
                windows_core::Interface::as_raw(this),
                visiblerange.param().abi(),
                trackeditems.param().abi(),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for IItemsRangeInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IItemsRangeInfo";
}
pub trait IItemsRangeInfo_Impl: windows::Foundation::IClosable_Impl {
    fn RangesChanged(
        &self,
        visibleRange: windows_core::Ref<'_, ItemIndexRange>,
        trackedItems: windows_core::Ref<'_, windows_collections::IVectorView<ItemIndexRange>>,
    ) -> windows_core::Result<()>;
}
impl IItemsRangeInfo_Vtbl {
    pub const fn new<Identity: IItemsRangeInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn RangesChanged<
            Identity: IItemsRangeInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            visiblerange: *mut core::ffi::c_void,
            trackeditems: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IItemsRangeInfo_Impl::RangesChanged(
                    this,
                    core::mem::transmute_copy(&visiblerange),
                    core::mem::transmute_copy(&trackeditems),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemsRangeInfo, OFFSET>(),
            RangesChanged: RangesChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemsRangeInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemsRangeInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RangesChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INotifyDataErrorInfo,
    INotifyDataErrorInfo_Vtbl,
    0x0ee6c2cc_273e_567d_bc0a_1dd87ee51eba
);
impl windows_core::RuntimeType for INotifyDataErrorInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    INotifyDataErrorInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl INotifyDataErrorInfo {
    pub fn HasErrors(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasErrors)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ErrorsChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<DataErrorsChangedEventArgs>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ErrorsChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveErrorsChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveErrorsChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GetErrors(
        &self,
        propertyname: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_collections::IIterable<windows_core::IInspectable>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetErrors)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for INotifyDataErrorInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.INotifyDataErrorInfo";
}
pub trait INotifyDataErrorInfo_Impl: windows_core::IUnknownImpl {
    fn HasErrors(&self) -> windows_core::Result<bool>;
    fn ErrorsChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::EventHandler<DataErrorsChangedEventArgs>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveErrorsChanged(&self, token: i64) -> windows_core::Result<()>;
    fn GetErrors(
        &self,
        propertyName: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_collections::IIterable<windows_core::IInspectable>>;
}
impl INotifyDataErrorInfo_Vtbl {
    pub const fn new<Identity: INotifyDataErrorInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HasErrors<
            Identity: INotifyDataErrorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INotifyDataErrorInfo_Impl::HasErrors(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ErrorsChanged<
            Identity: INotifyDataErrorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INotifyDataErrorInfo_Impl::ErrorsChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveErrorsChanged<
            Identity: INotifyDataErrorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INotifyDataErrorInfo_Impl::RemoveErrorsChanged(this, token).into()
            }
        }
        unsafe extern "system" fn GetErrors<
            Identity: INotifyDataErrorInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            propertyname: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INotifyDataErrorInfo_Impl::GetErrors(
                    this,
                    core::mem::transmute(&propertyname),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INotifyDataErrorInfo, OFFSET>(
            ),
            HasErrors: HasErrors::<Identity, OFFSET>,
            ErrorsChanged: ErrorsChanged::<Identity, OFFSET>,
            RemoveErrorsChanged: RemoveErrorsChanged::<Identity, OFFSET>,
            GetErrors: GetErrors::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INotifyDataErrorInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INotifyDataErrorInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HasErrors:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ErrorsChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveErrorsChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GetErrors: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INotifyPropertyChanged,
    INotifyPropertyChanged_Vtbl,
    0x90b17601_b065_586e_83d9_9adc3a695284
);
impl windows_core::RuntimeType for INotifyPropertyChanged {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    INotifyPropertyChanged,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl INotifyPropertyChanged {
    pub fn PropertyChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<PropertyChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PropertyChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePropertyChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePropertyChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for INotifyPropertyChanged {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.INotifyPropertyChanged";
}
pub trait INotifyPropertyChanged_Impl: windows_core::IUnknownImpl {
    fn PropertyChanged(
        &self,
        handler: windows_core::Ref<'_, PropertyChangedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemovePropertyChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl INotifyPropertyChanged_Vtbl {
    pub const fn new<Identity: INotifyPropertyChanged_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PropertyChanged<
            Identity: INotifyPropertyChanged_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INotifyPropertyChanged_Impl::PropertyChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovePropertyChanged<
            Identity: INotifyPropertyChanged_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INotifyPropertyChanged_Impl::RemovePropertyChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INotifyPropertyChanged, OFFSET>(
            ),
            PropertyChanged: PropertyChanged::<Identity, OFFSET>,
            RemovePropertyChanged: RemovePropertyChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INotifyPropertyChanged as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INotifyPropertyChanged_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PropertyChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemovePropertyChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPropertyChangedEventArgs,
    IPropertyChangedEventArgs_Vtbl,
    0x63d0c952_396b_54f4_af8c_ba8724a427bf
);
impl windows_core::RuntimeType for IPropertyChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPropertyChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IPropertyChangedEventArgs";
}
pub trait IPropertyChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn PropertyName(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IPropertyChangedEventArgs_Vtbl {
    pub const fn new<Identity: IPropertyChangedEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PropertyName<
            Identity: IPropertyChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPropertyChangedEventArgs_Impl::PropertyName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPropertyChangedEventArgs,
                OFFSET,
            >(),
            PropertyName: PropertyName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPropertyChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PropertyName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPropertyChangedEventArgsFactory,
    IPropertyChangedEventArgsFactory_Vtbl,
    0x7c0c27a8_0b41_5070_b160_fc9ae960a36c
);
impl windows_core::RuntimeType for IPropertyChangedEventArgsFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPropertyChangedEventArgsFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IPropertyChangedEventArgsFactory";
}
pub trait IPropertyChangedEventArgsFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        name: &windows_core::HSTRING,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<PropertyChangedEventArgs>;
}
impl IPropertyChangedEventArgsFactory_Vtbl {
    pub const fn new<Identity: IPropertyChangedEventArgsFactory_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateInstance<
            Identity: IPropertyChangedEventArgsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPropertyChangedEventArgsFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&name),
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPropertyChangedEventArgsFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPropertyChangedEventArgsFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyChangedEventArgsFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRelativeSource,
    IRelativeSource_Vtbl,
    0x7ffc8126_5dd8_58bb_b686_c71eddea07b2
);
impl windows_core::RuntimeType for IRelativeSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRelativeSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IRelativeSource";
}
pub trait IRelativeSource_Impl: windows_core::IUnknownImpl {
    fn Mode(&self) -> windows_core::Result<RelativeSourceMode>;
    fn SetMode(&self, value: RelativeSourceMode) -> windows_core::Result<()>;
}
impl IRelativeSource_Vtbl {
    pub const fn new<Identity: IRelativeSource_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Mode<Identity: IRelativeSource_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut RelativeSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRelativeSource_Impl::Mode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMode<Identity: IRelativeSource_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: RelativeSourceMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRelativeSource_Impl::SetMode(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRelativeSource, OFFSET>(),
            Mode: Mode::<Identity, OFFSET>,
            SetMode: SetMode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRelativeSource as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativeSource_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut RelativeSourceMode,
    ) -> windows_core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        RelativeSourceMode,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRelativeSourceFactory,
    IRelativeSourceFactory_Vtbl,
    0x8518522c_85e3_5ae1_b9e9_28ea43c2051e
);
impl windows_core::RuntimeType for IRelativeSourceFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRelativeSourceFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IRelativeSourceFactory";
}
pub trait IRelativeSourceFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<RelativeSource>;
}
impl IRelativeSourceFactory_Vtbl {
    pub const fn new<Identity: IRelativeSourceFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IRelativeSourceFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRelativeSourceFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRelativeSourceFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRelativeSourceFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelativeSourceFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionInfo,
    ISelectionInfo_Vtbl,
    0x1b84c26b_9532_5803_935b_a03bf7e875dc
);
impl windows_core::RuntimeType for ISelectionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISelectionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISelectionInfo {
    pub fn SelectRange<P0>(&self, itemindexrange: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ItemIndexRange>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SelectRange)(
                windows_core::Interface::as_raw(this),
                itemindexrange.param().abi(),
            )
            .ok()
        }
    }
    pub fn DeselectRange<P0>(&self, itemindexrange: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ItemIndexRange>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).DeselectRange)(
                windows_core::Interface::as_raw(this),
                itemindexrange.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsSelected(&self, index: i32) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelected)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSelectedRanges(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<ItemIndexRange>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetSelectedRanges)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ISelectionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ISelectionInfo";
}
pub trait ISelectionInfo_Impl: windows_core::IUnknownImpl {
    fn SelectRange(
        &self,
        itemIndexRange: windows_core::Ref<'_, ItemIndexRange>,
    ) -> windows_core::Result<()>;
    fn DeselectRange(
        &self,
        itemIndexRange: windows_core::Ref<'_, ItemIndexRange>,
    ) -> windows_core::Result<()>;
    fn IsSelected(&self, index: i32) -> windows_core::Result<bool>;
    fn GetSelectedRanges(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<ItemIndexRange>>;
}
impl ISelectionInfo_Vtbl {
    pub const fn new<Identity: ISelectionInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SelectRange<
            Identity: ISelectionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemindexrange: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISelectionInfo_Impl::SelectRange(this, core::mem::transmute_copy(&itemindexrange))
                    .into()
            }
        }
        unsafe extern "system" fn DeselectRange<
            Identity: ISelectionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemindexrange: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISelectionInfo_Impl::DeselectRange(this, core::mem::transmute_copy(&itemindexrange))
                    .into()
            }
        }
        unsafe extern "system" fn IsSelected<Identity: ISelectionInfo_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            index: i32,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionInfo_Impl::IsSelected(this, index) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSelectedRanges<
            Identity: ISelectionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionInfo_Impl::GetSelectedRanges(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISelectionInfo, OFFSET>(),
            SelectRange: SelectRange::<Identity, OFFSET>,
            DeselectRange: DeselectRange::<Identity, OFFSET>,
            IsSelected: IsSelected::<Identity, OFFSET>,
            GetSelectedRanges: GetSelectedRanges::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SelectRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeselectRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsSelected:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32, *mut bool) -> windows_core::HRESULT,
    pub GetSelectedRanges: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISupportIncrementalLoading,
    ISupportIncrementalLoading_Vtbl,
    0xd8f9b586_a64a_5ff8_868e_204e144f2cf4
);
impl windows_core::RuntimeType for ISupportIncrementalLoading {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISupportIncrementalLoading,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISupportIncrementalLoading {
    pub fn LoadMoreItemsAsync(
        &self,
        count: u32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<LoadMoreItemsResult>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LoadMoreItemsAsync)(
                windows_core::Interface::as_raw(this),
                count,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn HasMoreItems(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasMoreItems)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeName for ISupportIncrementalLoading {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ISupportIncrementalLoading";
}
pub trait ISupportIncrementalLoading_Impl: windows_core::IUnknownImpl {
    fn LoadMoreItemsAsync(
        &self,
        count: u32,
    ) -> windows_core::Result<windows_future::IAsyncOperation<LoadMoreItemsResult>>;
    fn HasMoreItems(&self) -> windows_core::Result<bool>;
}
impl ISupportIncrementalLoading_Vtbl {
    pub const fn new<Identity: ISupportIncrementalLoading_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LoadMoreItemsAsync<
            Identity: ISupportIncrementalLoading_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISupportIncrementalLoading_Impl::LoadMoreItemsAsync(this, count) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasMoreItems<
            Identity: ISupportIncrementalLoading_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISupportIncrementalLoading_Impl::HasMoreItems(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISupportIncrementalLoading,
                OFFSET,
            >(),
            LoadMoreItemsAsync: LoadMoreItemsAsync::<Identity, OFFSET>,
            HasMoreItems: HasMoreItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISupportIncrementalLoading as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISupportIncrementalLoading_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LoadMoreItemsAsync: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasMoreItems:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IValueConverter,
    IValueConverter_Vtbl,
    0xafdd2bff_10f5_5173_b7c0_3590bd96cb35
);
impl windows_core::RuntimeType for IValueConverter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IValueConverter,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IValueConverter {
    pub fn Convert<P0, P2>(
        &self,
        value: P0,
        targettype: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: P2,
        language: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P2: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Convert)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                core::mem::transmute_copy(targettype),
                parameter.param().abi(),
                core::mem::transmute_copy(language),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ConvertBack<P0, P2>(
        &self,
        value: P0,
        targettype: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: P2,
        language: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P2: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConvertBack)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                core::mem::transmute_copy(targettype),
                parameter.param().abi(),
                core::mem::transmute_copy(language),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IValueConverter {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.IValueConverter";
}
pub trait IValueConverter_Impl: windows_core::IUnknownImpl {
    fn Convert(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
        targetType: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: windows_core::Ref<'_, windows_core::IInspectable>,
        language: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn ConvertBack(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
        targetType: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: windows_core::Ref<'_, windows_core::IInspectable>,
        language: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable>;
}
impl IValueConverter_Vtbl {
    pub const fn new<Identity: IValueConverter_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Convert<Identity: IValueConverter_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            targettype: core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
            parameter: *mut core::ffi::c_void,
            language: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValueConverter_Impl::Convert(
                    this,
                    core::mem::transmute_copy(&value),
                    core::mem::transmute(&targettype),
                    core::mem::transmute_copy(&parameter),
                    core::mem::transmute(&language),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertBack<
            Identity: IValueConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            targettype: core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
            parameter: *mut core::ffi::c_void,
            language: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValueConverter_Impl::ConvertBack(
                    this,
                    core::mem::transmute_copy(&value),
                    core::mem::transmute(&targettype),
                    core::mem::transmute_copy(&parameter),
                    core::mem::transmute(&language),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IValueConverter, OFFSET>(),
            Convert: Convert::<Identity, OFFSET>,
            ConvertBack: ConvertBack::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IValueConverter as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IValueConverter_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Convert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ConvertBack: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ItemIndexRange(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ItemIndexRange,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ItemIndexRange {
    pub fn FirstIndex(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FirstIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Length(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Length)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LastIndex(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LastIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CreateInstance(firstindex: i32, length: u32) -> windows_core::Result<ItemIndexRange> {
        Self::IItemIndexRangeFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                firstindex,
                length,
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IItemIndexRangeFactory<R, F: FnOnce(&IItemIndexRangeFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ItemIndexRange, IItemIndexRangeFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ItemIndexRange {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IItemIndexRange>();
}
unsafe impl windows_core::Interface for ItemIndexRange {
    type Vtable = <IItemIndexRange as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IItemIndexRange as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ItemIndexRange {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.ItemIndexRange";
}
unsafe impl Send for ItemIndexRange {}
unsafe impl Sync for ItemIndexRange {}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct LoadMoreItemsResult {
    pub Count: u32,
}
impl windows_core::TypeKind for LoadMoreItemsResult {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for LoadMoreItemsResult {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"struct(Microsoft.UI.Xaml.Data.LoadMoreItemsResult;u4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PropertyChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PropertyChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl PropertyChangedEventArgs {
    pub fn PropertyName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PropertyName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn CreateInstance(
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<PropertyChangedEventArgs> {
        Self::IPropertyChangedEventArgsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPropertyChangedEventArgsFactory<
        R,
        F: FnOnce(&IPropertyChangedEventArgsFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PropertyChangedEventArgs,
            IPropertyChangedEventArgsFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PropertyChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPropertyChangedEventArgs>();
}
unsafe impl windows_core::Interface for PropertyChangedEventArgs {
    type Vtable = <IPropertyChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPropertyChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PropertyChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.PropertyChangedEventArgs";
}
unsafe impl Send for PropertyChangedEventArgs {}
unsafe impl Sync for PropertyChangedEventArgs {}
windows_core::imp::define_interface!(
    PropertyChangedEventHandler,
    PropertyChangedEventHandler_Vtbl,
    0xe3de52f6_1e32_5da6_bb2d_b5b6096c962d
);
impl windows_core::RuntimeType for PropertyChangedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl PropertyChangedEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, PropertyChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = PropertyChangedEventHandlerBox {
            vtable: &PropertyChangedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<PropertyChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct PropertyChangedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct PropertyChangedEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, PropertyChangedEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const PropertyChangedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, PropertyChangedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > PropertyChangedEventHandlerBox<F>
{
    const VTABLE: PropertyChangedEventHandler_Vtbl = PropertyChangedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <PropertyChangedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RelativeSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RelativeSource,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(RelativeSource, super::DependencyObject);
impl RelativeSource {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Mode(&self) -> windows_core::Result<RelativeSourceMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Mode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMode(&self, value: RelativeSourceMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<RelativeSource> {
        Self::IRelativeSourceFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IRelativeSourceFactory<R, F: FnOnce(&IRelativeSourceFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<RelativeSource, IRelativeSourceFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for RelativeSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRelativeSource>();
}
unsafe impl windows_core::Interface for RelativeSource {
    type Vtable = <IRelativeSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRelativeSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RelativeSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Data.RelativeSource";
}
unsafe impl Send for RelativeSource {}
unsafe impl Sync for RelativeSource {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct RelativeSourceMode(pub i32);
impl RelativeSourceMode {
    pub const None: Self = Self(0i32);
    pub const TemplatedParent: Self = Self(1i32);
    pub const Self_: Self = Self(2i32);
}
impl windows_core::TypeKind for RelativeSourceMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for RelativeSourceMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Data.RelativeSourceMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct UpdateSourceTrigger(pub i32);
impl UpdateSourceTrigger {
    pub const Default: Self = Self(0i32);
    pub const PropertyChanged: Self = Self(1i32);
    pub const Explicit: Self = Self(2i32);
    pub const LostFocus: Self = Self(3i32);
}
impl windows_core::TypeKind for UpdateSourceTrigger {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for UpdateSourceTrigger {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Data.UpdateSourceTrigger;i4)",
    );
}
