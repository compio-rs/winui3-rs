// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AddDeleteThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AddDeleteThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    AddDeleteThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl AddDeleteThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AddDeleteThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for AddDeleteThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAddDeleteThemeTransition>();
}
unsafe impl windows_core::Interface for AddDeleteThemeTransition {
    type Vtable = <IAddDeleteThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAddDeleteThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AddDeleteThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition";
}
unsafe impl Send for AddDeleteThemeTransition {}
unsafe impl Sync for AddDeleteThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BackEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BackEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BackEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl BackEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BackEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Amplitude(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Amplitude)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAmplitude(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAmplitude)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AmplitudeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IBackEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AmplitudeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    fn IBackEaseStatics<R, F: FnOnce(&IBackEaseStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BackEase, IBackEaseStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BackEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBackEase>();
}
unsafe impl windows_core::Interface for BackEase {
    type Vtable = <IBackEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBackEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BackEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BackEase";
}
unsafe impl Send for BackEase {}
unsafe impl Sync for BackEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BasicConnectedAnimationConfiguration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BasicConnectedAnimationConfiguration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BasicConnectedAnimationConfiguration,
    ConnectedAnimationConfiguration
);
impl BasicConnectedAnimationConfiguration {
    pub fn new() -> windows_core::Result<BasicConnectedAnimationConfiguration> {
        Self::IBasicConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IBasicConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IBasicConnectedAnimationConfigurationFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BasicConnectedAnimationConfiguration,
            IBasicConnectedAnimationConfigurationFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BasicConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBasicConnectedAnimationConfiguration>();
}
unsafe impl windows_core::Interface for BasicConnectedAnimationConfiguration {
    type Vtable = <IBasicConnectedAnimationConfiguration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IBasicConnectedAnimationConfiguration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BasicConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration";
}
unsafe impl Send for BasicConnectedAnimationConfiguration {}
unsafe impl Sync for BasicConnectedAnimationConfiguration {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BeginStoryboard(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BeginStoryboard,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BeginStoryboard,
    super::super::TriggerAction,
    super::super::DependencyObject
);
impl BeginStoryboard {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BeginStoryboard,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Storyboard(&self) -> windows_core::Result<Storyboard> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Storyboard)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetStoryboard<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Storyboard>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStoryboard)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn StoryboardProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IBeginStoryboardStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StoryboardProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IBeginStoryboardStatics<
        R,
        F: FnOnce(&IBeginStoryboardStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BeginStoryboard, IBeginStoryboardStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BeginStoryboard {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBeginStoryboard>();
}
unsafe impl windows_core::Interface for BeginStoryboard {
    type Vtable = <IBeginStoryboard as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBeginStoryboard as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BeginStoryboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BeginStoryboard";
}
unsafe impl Send for BeginStoryboard {}
unsafe impl Sync for BeginStoryboard {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BounceEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BounceEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    BounceEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl BounceEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BounceEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Bounces(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounces)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBounces(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBounces)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Bounciness(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Bounciness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetBounciness(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBounciness)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BouncesProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IBounceEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BouncesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn BouncinessProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IBounceEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BouncinessProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    fn IBounceEaseStatics<R, F: FnOnce(&IBounceEaseStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BounceEase, IBounceEaseStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BounceEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBounceEase>();
}
unsafe impl windows_core::Interface for BounceEase {
    type Vtable = <IBounceEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBounceEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BounceEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BounceEase";
}
unsafe impl Send for BounceEase {}
unsafe impl Sync for BounceEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CircleEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CircleEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CircleEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl CircleEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CircleEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CircleEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICircleEase>();
}
unsafe impl windows_core::Interface for CircleEase {
    type Vtable = <ICircleEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICircleEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CircleEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CircleEase";
}
unsafe impl Send for CircleEase {}
unsafe impl Sync for CircleEase {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ClockState(pub i32);
impl ClockState {
    pub const Active: Self = Self(0i32);
    pub const Filling: Self = Self(1i32);
    pub const Stopped: Self = Self(2i32);
}
impl windows_core::TypeKind for ClockState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ClockState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.ClockState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ColorAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ColorAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ColorAnimation, Timeline, super::super::DependencyObject);
impl ColorAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ColorAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn From(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).From)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFrom<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFrom)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn To(&self) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).To)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTo<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTo)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn By(&self) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).By)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBy<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBy)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ByProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IColorAnimationStatics<R, F: FnOnce(&IColorAnimationStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ColorAnimation, IColorAnimationStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ColorAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IColorAnimation>();
}
unsafe impl windows_core::Interface for ColorAnimation {
    type Vtable = <IColorAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IColorAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ColorAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorAnimation";
}
unsafe impl Send for ColorAnimation {}
unsafe impl Sync for ColorAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ColorAnimationUsingKeyFrames(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ColorAnimationUsingKeyFrames,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ColorAnimationUsingKeyFrames,
    Timeline,
    super::super::DependencyObject
);
impl ColorAnimationUsingKeyFrames {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ColorAnimationUsingKeyFrames,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn KeyFrames(&self) -> windows_core::Result<ColorKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrames)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IColorAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IColorAnimationUsingKeyFramesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ColorAnimationUsingKeyFrames,
            IColorAnimationUsingKeyFramesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ColorAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IColorAnimationUsingKeyFrames>();
}
unsafe impl windows_core::Interface for ColorAnimationUsingKeyFrames {
    type Vtable = <IColorAnimationUsingKeyFrames as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IColorAnimationUsingKeyFrames as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ColorAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames";
}
unsafe impl Send for ColorAnimationUsingKeyFrames {}
unsafe impl Sync for ColorAnimationUsingKeyFrames {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ColorKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ColorKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ColorKeyFrame, super::super::DependencyObject);
impl ColorKeyFrame {
    pub fn Value(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ColorKeyFrame> {
        Self::IColorKeyFrameFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTimeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IColorKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IColorKeyFrameFactory<R, F: FnOnce(&IColorKeyFrameFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ColorKeyFrame, IColorKeyFrameFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IColorKeyFrameStatics<R, F: FnOnce(&IColorKeyFrameStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ColorKeyFrame, IColorKeyFrameStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IColorKeyFrame>();
}
unsafe impl windows_core::Interface for ColorKeyFrame {
    type Vtable = <IColorKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IColorKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame";
}
unsafe impl Send for ColorKeyFrame {}
unsafe impl Sync for ColorKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ColorKeyFrameCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ColorKeyFrameCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<ColorKeyFrame>
);
windows_core::imp::required_hierarchy!(
    ColorKeyFrameCollection,
    windows_collections::IIterable<ColorKeyFrame>
);
impl ColorKeyFrameCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ColorKeyFrameCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<ColorKeyFrame>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<ColorKeyFrame>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<ColorKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<ColorKeyFrame>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<ColorKeyFrame>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ColorKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ColorKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ColorKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<ColorKeyFrame>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<ColorKeyFrame>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ColorKeyFrameCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<ColorKeyFrame>,
    >();
}
unsafe impl windows_core::Interface for ColorKeyFrameCollection {
    type Vtable = <windows_collections::IVector<ColorKeyFrame> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<ColorKeyFrame> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ColorKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection";
}
unsafe impl Send for ColorKeyFrameCollection {}
unsafe impl Sync for ColorKeyFrameCollection {}
impl IntoIterator for ColorKeyFrameCollection {
    type Item = ColorKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &ColorKeyFrameCollection {
    type Item = ColorKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CommonNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CommonNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CommonNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl CommonNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CommonNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn IsStaggeringEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabledProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsStaggerElementProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggerElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetIsStaggerElement<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsStaggerElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetIsStaggerElement<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsStaggerElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
    fn ICommonNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&ICommonNavigationTransitionInfoStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CommonNavigationTransitionInfo,
            ICommonNavigationTransitionInfoStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CommonNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICommonNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for CommonNavigationTransitionInfo {
    type Vtable = <ICommonNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ICommonNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CommonNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo";
}
unsafe impl Send for CommonNavigationTransitionInfo {}
unsafe impl Sync for CommonNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ConnectedAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ConnectedAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ConnectedAnimation {
    pub fn IsScaleAnimationEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsScaleAnimationEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsScaleAnimationEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsScaleAnimationEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Configuration(&self) -> windows_core::Result<ConnectedAnimationConfiguration> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Configuration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetConfiguration<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ConnectedAnimationConfiguration>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetConfiguration)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<ConnectedAnimation, windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryStart<P0>(&self, destination: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryStart)(
                windows_core::Interface::as_raw(this),
                destination.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn TryStartWithCoordinatedElements<P0, P1>(
        &self,
        destination: P0,
        coordinatedelements: P1,
    ) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
        P1: windows_core::Param<windows_collections::IIterable<super::super::UIElement>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryStartWithCoordinatedElements)(
                windows_core::Interface::as_raw(this),
                destination.param().abi(),
                coordinatedelements.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Cancel(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetAnimationComponent<P1>(
        &self,
        component: ConnectedAnimationComponent,
        animation: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::super::super::Composition::ICompositionAnimationBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAnimationComponent)(
                windows_core::Interface::as_raw(this),
                component,
                animation.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ConnectedAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IConnectedAnimation>();
}
unsafe impl windows_core::Interface for ConnectedAnimation {
    type Vtable = <IConnectedAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IConnectedAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ConnectedAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation";
}
unsafe impl Send for ConnectedAnimation {}
unsafe impl Sync for ConnectedAnimation {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ConnectedAnimationComponent(pub i32);
impl ConnectedAnimationComponent {
    pub const OffsetX: Self = Self(0i32);
    pub const OffsetY: Self = Self(1i32);
    pub const CrossFade: Self = Self(2i32);
    pub const Scale: Self = Self(3i32);
}
impl windows_core::TypeKind for ConnectedAnimationComponent {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ConnectedAnimationComponent {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ConnectedAnimationConfiguration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ConnectedAnimationConfiguration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ConnectedAnimationConfiguration {}
impl windows_core::RuntimeType for ConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IConnectedAnimationConfiguration>();
}
unsafe impl windows_core::Interface for ConnectedAnimationConfiguration {
    type Vtable = <IConnectedAnimationConfiguration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IConnectedAnimationConfiguration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ConnectedAnimationConfiguration {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration";
}
unsafe impl Send for ConnectedAnimationConfiguration {}
unsafe impl Sync for ConnectedAnimationConfiguration {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ConnectedAnimationService(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ConnectedAnimationService,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ConnectedAnimationService {
    pub fn DefaultDuration(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultDuration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDefaultDuration(
        &self,
        value: windows::Foundation::TimeSpan,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn DefaultEasingFunction(
        &self,
    ) -> windows_core::Result<super::super::super::Composition::CompositionEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultEasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetDefaultEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::super::Composition::CompositionEasingFunction>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn PrepareToAnimate<P1>(
        &self,
        key: &windows_core::HSTRING,
        source: P1,
    ) -> windows_core::Result<ConnectedAnimation>
    where
        P1: windows_core::Param<super::super::UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PrepareToAnimate)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                source.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimation(
        &self,
        key: &windows_core::HSTRING,
    ) -> windows_core::Result<ConnectedAnimation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimation)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(key),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetForCurrentView() -> windows_core::Result<ConnectedAnimationService> {
        Self::IConnectedAnimationServiceStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetForCurrentView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IConnectedAnimationServiceStatics<
        R,
        F: FnOnce(&IConnectedAnimationServiceStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ConnectedAnimationService,
            IConnectedAnimationServiceStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ConnectedAnimationService {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IConnectedAnimationService>();
}
unsafe impl windows_core::Interface for ConnectedAnimationService {
    type Vtable = <IConnectedAnimationService as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IConnectedAnimationService as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ConnectedAnimationService {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService";
}
unsafe impl Send for ConnectedAnimationService {}
unsafe impl Sync for ConnectedAnimationService {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ContentThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl ContentThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ContentThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn HorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IContentThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn VerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IContentThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IContentThemeTransitionStatics<
        R,
        F: FnOnce(&IContentThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ContentThemeTransition,
            IContentThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ContentThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentThemeTransition>();
}
unsafe impl windows_core::Interface for ContentThemeTransition {
    type Vtable = <IContentThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition";
}
unsafe impl Send for ContentThemeTransition {}
unsafe impl Sync for ContentThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContinuumNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContinuumNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ContinuumNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl ContinuumNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ContinuumNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[cfg(feature = "UI_Composition")]
    pub fn ExitElement(&self) -> windows_core::Result<super::super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitElement)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetExitElement<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitElement)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ExitElementProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsEntranceElementProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEntranceElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetIsEntranceElement<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsEntranceElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetIsEntranceElement<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsEntranceElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn IsExitElementProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsExitElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetIsExitElement<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsExitElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetIsExitElement<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsExitElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ExitElementContainerProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitElementContainerProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub fn GetExitElementContainer<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::Controls::ListViewBase>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetExitElementContainer)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub fn SetExitElementContainer<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::Controls::ListViewBase>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetExitElementContainer)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
    fn IContinuumNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&IContinuumNavigationTransitionInfoStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ContinuumNavigationTransitionInfo,
            IContinuumNavigationTransitionInfoStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ContinuumNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContinuumNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for ContinuumNavigationTransitionInfo {
    type Vtable = <IContinuumNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContinuumNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContinuumNavigationTransitionInfo {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo";
}
unsafe impl Send for ContinuumNavigationTransitionInfo {}
unsafe impl Sync for ContinuumNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CubicEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CubicEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CubicEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl CubicEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CubicEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for CubicEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICubicEase>();
}
unsafe impl windows_core::Interface for CubicEase {
    type Vtable = <ICubicEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICubicEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CubicEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CubicEase";
}
unsafe impl Send for CubicEase {}
unsafe impl Sync for CubicEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DirectConnectedAnimationConfiguration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DirectConnectedAnimationConfiguration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DirectConnectedAnimationConfiguration,
    ConnectedAnimationConfiguration
);
impl DirectConnectedAnimationConfiguration {
    pub fn new() -> windows_core::Result<DirectConnectedAnimationConfiguration> {
        Self::IDirectConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDirectConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IDirectConnectedAnimationConfigurationFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DirectConnectedAnimationConfiguration,
            IDirectConnectedAnimationConfigurationFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DirectConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDirectConnectedAnimationConfiguration>();
}
unsafe impl windows_core::Interface for DirectConnectedAnimationConfiguration {
    type Vtable = <IDirectConnectedAnimationConfiguration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IDirectConnectedAnimationConfiguration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DirectConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration";
}
unsafe impl Send for DirectConnectedAnimationConfiguration {}
unsafe impl Sync for DirectConnectedAnimationConfiguration {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DiscreteColorKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DiscreteColorKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DiscreteColorKeyFrame,
    ColorKeyFrame,
    super::super::DependencyObject
);
impl DiscreteColorKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DiscreteColorKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for DiscreteColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDiscreteColorKeyFrame>();
}
unsafe impl windows_core::Interface for DiscreteColorKeyFrame {
    type Vtable = <IDiscreteColorKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDiscreteColorKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DiscreteColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame";
}
unsafe impl Send for DiscreteColorKeyFrame {}
unsafe impl Sync for DiscreteColorKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DiscreteDoubleKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DiscreteDoubleKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DiscreteDoubleKeyFrame,
    DoubleKeyFrame,
    super::super::DependencyObject
);
impl DiscreteDoubleKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DiscreteDoubleKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DiscreteDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDiscreteDoubleKeyFrame>();
}
unsafe impl windows_core::Interface for DiscreteDoubleKeyFrame {
    type Vtable = <IDiscreteDoubleKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDiscreteDoubleKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DiscreteDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame";
}
unsafe impl Send for DiscreteDoubleKeyFrame {}
unsafe impl Sync for DiscreteDoubleKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DiscreteObjectKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DiscreteObjectKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DiscreteObjectKeyFrame,
    ObjectKeyFrame,
    super::super::DependencyObject
);
impl DiscreteObjectKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DiscreteObjectKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DiscreteObjectKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDiscreteObjectKeyFrame>();
}
unsafe impl windows_core::Interface for DiscreteObjectKeyFrame {
    type Vtable = <IDiscreteObjectKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDiscreteObjectKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DiscreteObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame";
}
unsafe impl Send for DiscreteObjectKeyFrame {}
unsafe impl Sync for DiscreteObjectKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DiscretePointKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DiscretePointKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DiscretePointKeyFrame,
    PointKeyFrame,
    super::super::DependencyObject
);
impl DiscretePointKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DiscretePointKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DiscretePointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDiscretePointKeyFrame>();
}
unsafe impl windows_core::Interface for DiscretePointKeyFrame {
    type Vtable = <IDiscretePointKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDiscretePointKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DiscretePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame";
}
unsafe impl Send for DiscretePointKeyFrame {}
unsafe impl Sync for DiscretePointKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DoubleAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DoubleAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(DoubleAnimation, Timeline, super::super::DependencyObject);
impl DoubleAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DoubleAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn From(&self) -> windows_core::Result<windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).From)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFrom<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f64>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFrom)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn To(&self) -> windows_core::Result<windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).To)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTo<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f64>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTo)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn By(&self) -> windows_core::Result<windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).By)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBy<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<f64>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBy)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ByProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDoubleAnimationStatics<
        R,
        F: FnOnce(&IDoubleAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<DoubleAnimation, IDoubleAnimationStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DoubleAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDoubleAnimation>();
}
unsafe impl windows_core::Interface for DoubleAnimation {
    type Vtable = <IDoubleAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDoubleAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DoubleAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleAnimation";
}
unsafe impl Send for DoubleAnimation {}
unsafe impl Sync for DoubleAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DoubleAnimationUsingKeyFrames(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DoubleAnimationUsingKeyFrames,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DoubleAnimationUsingKeyFrames,
    Timeline,
    super::super::DependencyObject
);
impl DoubleAnimationUsingKeyFrames {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DoubleAnimationUsingKeyFrames,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn KeyFrames(&self) -> windows_core::Result<DoubleKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrames)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDoubleAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IDoubleAnimationUsingKeyFramesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DoubleAnimationUsingKeyFrames,
            IDoubleAnimationUsingKeyFramesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DoubleAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDoubleAnimationUsingKeyFrames>();
}
unsafe impl windows_core::Interface for DoubleAnimationUsingKeyFrames {
    type Vtable = <IDoubleAnimationUsingKeyFrames as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IDoubleAnimationUsingKeyFrames as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DoubleAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames";
}
unsafe impl Send for DoubleAnimationUsingKeyFrames {}
unsafe impl Sync for DoubleAnimationUsingKeyFrames {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DoubleKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DoubleKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(DoubleKeyFrame, super::super::DependencyObject);
impl DoubleKeyFrame {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<DoubleKeyFrame> {
        Self::IDoubleKeyFrameFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTimeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDoubleKeyFrameFactory<R, F: FnOnce(&IDoubleKeyFrameFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<DoubleKeyFrame, IDoubleKeyFrameFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IDoubleKeyFrameStatics<R, F: FnOnce(&IDoubleKeyFrameStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<DoubleKeyFrame, IDoubleKeyFrameStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDoubleKeyFrame>();
}
unsafe impl windows_core::Interface for DoubleKeyFrame {
    type Vtable = <IDoubleKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDoubleKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame";
}
unsafe impl Send for DoubleKeyFrame {}
unsafe impl Sync for DoubleKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DoubleKeyFrameCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DoubleKeyFrameCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<DoubleKeyFrame>
);
windows_core::imp::required_hierarchy!(
    DoubleKeyFrameCollection,
    windows_collections::IIterable<DoubleKeyFrame>
);
impl DoubleKeyFrameCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DoubleKeyFrameCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<DoubleKeyFrame>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<DoubleKeyFrame>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<DoubleKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<DoubleKeyFrame>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<DoubleKeyFrame>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<DoubleKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<DoubleKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<DoubleKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<DoubleKeyFrame>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<DoubleKeyFrame>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DoubleKeyFrameCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<DoubleKeyFrame>,
    >();
}
unsafe impl windows_core::Interface for DoubleKeyFrameCollection {
    type Vtable = <windows_collections::IVector<DoubleKeyFrame> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<DoubleKeyFrame> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DoubleKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection";
}
unsafe impl Send for DoubleKeyFrameCollection {}
unsafe impl Sync for DoubleKeyFrameCollection {}
impl IntoIterator for DoubleKeyFrameCollection {
    type Item = DoubleKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &DoubleKeyFrameCollection {
    type Item = DoubleKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DragItemThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DragItemThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DragItemThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl DragItemThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DragItemThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDragItemThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDragItemThemeAnimationStatics<
        R,
        F: FnOnce(&IDragItemThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DragItemThemeAnimation,
            IDragItemThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DragItemThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDragItemThemeAnimation>();
}
unsafe impl windows_core::Interface for DragItemThemeAnimation {
    type Vtable = <IDragItemThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDragItemThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DragItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation";
}
unsafe impl Send for DragItemThemeAnimation {}
unsafe impl Sync for DragItemThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DragOverThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DragOverThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DragOverThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl DragOverThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DragOverThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ToOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetToOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetToOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Direction(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Direction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DirectionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DirectionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDragOverThemeAnimationStatics<
        R,
        F: FnOnce(&IDragOverThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DragOverThemeAnimation,
            IDragOverThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DragOverThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDragOverThemeAnimation>();
}
unsafe impl windows_core::Interface for DragOverThemeAnimation {
    type Vtable = <IDragOverThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDragOverThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DragOverThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation";
}
unsafe impl Send for DragOverThemeAnimation {}
unsafe impl Sync for DragOverThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DrillInNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DrillInNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DrillInNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl DrillInNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DrillInNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for DrillInNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDrillInNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for DrillInNavigationTransitionInfo {
    type Vtable = <IDrillInNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IDrillInNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DrillInNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo";
}
unsafe impl Send for DrillInNavigationTransitionInfo {}
unsafe impl Sync for DrillInNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DrillInThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DrillInThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DrillInThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl DrillInThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DrillInThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EntranceTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetEntranceTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEntranceTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn EntranceTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEntranceTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEntranceTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ExitTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetExitTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExitTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EntranceTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EntranceTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ExitTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ExitTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDrillInThemeAnimationStatics<
        R,
        F: FnOnce(&IDrillInThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DrillInThemeAnimation,
            IDrillInThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DrillInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDrillInThemeAnimation>();
}
unsafe impl windows_core::Interface for DrillInThemeAnimation {
    type Vtable = <IDrillInThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDrillInThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DrillInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation";
}
unsafe impl Send for DrillInThemeAnimation {}
unsafe impl Sync for DrillInThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DrillOutThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DrillOutThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DrillOutThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl DrillOutThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DrillOutThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EntranceTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetEntranceTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEntranceTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn EntranceTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEntranceTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEntranceTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ExitTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetExitTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetExitTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EntranceTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EntranceTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EntranceTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ExitTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ExitTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDrillOutThemeAnimationStatics<
        R,
        F: FnOnce(&IDrillOutThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DrillOutThemeAnimation,
            IDrillOutThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DrillOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDrillOutThemeAnimation>();
}
unsafe impl windows_core::Interface for DrillOutThemeAnimation {
    type Vtable = <IDrillOutThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDrillOutThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DrillOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation";
}
unsafe impl Send for DrillOutThemeAnimation {}
unsafe impl Sync for DrillOutThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DropTargetItemThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DropTargetItemThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DropTargetItemThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl DropTargetItemThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DropTargetItemThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IDropTargetItemThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IDropTargetItemThemeAnimationStatics<
        R,
        F: FnOnce(&IDropTargetItemThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DropTargetItemThemeAnimation,
            IDropTargetItemThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DropTargetItemThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDropTargetItemThemeAnimation>();
}
unsafe impl windows_core::Interface for DropTargetItemThemeAnimation {
    type Vtable = <IDropTargetItemThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDropTargetItemThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DropTargetItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation";
}
unsafe impl Send for DropTargetItemThemeAnimation {}
unsafe impl Sync for DropTargetItemThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EasingColorKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EasingColorKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EasingColorKeyFrame,
    ColorKeyFrame,
    super::super::DependencyObject
);
impl EasingColorKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingColorKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEasingColorKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IEasingColorKeyFrameStatics<
        R,
        F: FnOnce(&IEasingColorKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingColorKeyFrame,
            IEasingColorKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EasingColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEasingColorKeyFrame>();
}
unsafe impl windows_core::Interface for EasingColorKeyFrame {
    type Vtable = <IEasingColorKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEasingColorKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EasingColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame";
}
unsafe impl Send for EasingColorKeyFrame {}
unsafe impl Sync for EasingColorKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EasingDoubleKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EasingDoubleKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EasingDoubleKeyFrame,
    DoubleKeyFrame,
    super::super::DependencyObject
);
impl EasingDoubleKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingDoubleKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEasingDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IEasingDoubleKeyFrameStatics<
        R,
        F: FnOnce(&IEasingDoubleKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingDoubleKeyFrame,
            IEasingDoubleKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EasingDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEasingDoubleKeyFrame>();
}
unsafe impl windows_core::Interface for EasingDoubleKeyFrame {
    type Vtable = <IEasingDoubleKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEasingDoubleKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EasingDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame";
}
unsafe impl Send for EasingDoubleKeyFrame {}
unsafe impl Sync for EasingDoubleKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EasingFunctionBase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EasingFunctionBase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(EasingFunctionBase, super::super::DependencyObject);
impl EasingFunctionBase {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn EasingModeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEasingFunctionBaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingModeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IEasingFunctionBaseStatics<
        R,
        F: FnOnce(&IEasingFunctionBaseStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingFunctionBase,
            IEasingFunctionBaseStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EasingFunctionBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEasingFunctionBase>();
}
unsafe impl windows_core::Interface for EasingFunctionBase {
    type Vtable = <IEasingFunctionBase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEasingFunctionBase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EasingFunctionBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase";
}
unsafe impl Send for EasingFunctionBase {}
unsafe impl Sync for EasingFunctionBase {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct EasingMode(pub i32);
impl EasingMode {
    pub const EaseOut: Self = Self(0i32);
    pub const EaseIn: Self = Self(1i32);
    pub const EaseInOut: Self = Self(2i32);
}
impl windows_core::TypeKind for EasingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for EasingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.EasingMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EasingPointKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EasingPointKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EasingPointKeyFrame,
    PointKeyFrame,
    super::super::DependencyObject
);
impl EasingPointKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingPointKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEasingPointKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Value(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    fn IEasingPointKeyFrameStatics<
        R,
        F: FnOnce(&IEasingPointKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EasingPointKeyFrame,
            IEasingPointKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EasingPointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEasingPointKeyFrame>();
}
unsafe impl windows_core::Interface for EasingPointKeyFrame {
    type Vtable = <IEasingPointKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEasingPointKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EasingPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame";
}
unsafe impl Send for EasingPointKeyFrame {}
unsafe impl Sync for EasingPointKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EdgeUIThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EdgeUIThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EdgeUIThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl EdgeUIThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EdgeUIThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Edge(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::EdgeTransitionLocation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Edge)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEdge)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EdgeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEdgeUIThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EdgeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IEdgeUIThemeTransitionStatics<
        R,
        F: FnOnce(&IEdgeUIThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EdgeUIThemeTransition,
            IEdgeUIThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EdgeUIThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEdgeUIThemeTransition>();
}
unsafe impl windows_core::Interface for EdgeUIThemeTransition {
    type Vtable = <IEdgeUIThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEdgeUIThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EdgeUIThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition";
}
unsafe impl Send for EdgeUIThemeTransition {}
unsafe impl Sync for EdgeUIThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ElasticEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ElasticEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ElasticEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl ElasticEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ElasticEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Oscillations(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Oscillations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOscillations(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOscillations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Springiness(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Springiness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpringiness(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpringiness)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OscillationsProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IElasticEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OscillationsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SpringinessProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IElasticEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpringinessProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IElasticEaseStatics<R, F: FnOnce(&IElasticEaseStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ElasticEase, IElasticEaseStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ElasticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IElasticEase>();
}
unsafe impl windows_core::Interface for ElasticEase {
    type Vtable = <IElasticEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IElasticEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ElasticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ElasticEase";
}
unsafe impl Send for ElasticEase {}
unsafe impl Sync for ElasticEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EntranceNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EntranceNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EntranceNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl EntranceNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EntranceNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsTargetElementProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTargetElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetIsTargetElement<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsTargetElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetIsTargetElement<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::UIElement>,
    {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsTargetElement)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
    fn IEntranceNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&IEntranceNavigationTransitionInfoStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EntranceNavigationTransitionInfo,
            IEntranceNavigationTransitionInfoStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EntranceNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEntranceNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for EntranceNavigationTransitionInfo {
    type Vtable = <IEntranceNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IEntranceNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EntranceNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo";
}
unsafe impl Send for EntranceNavigationTransitionInfo {}
unsafe impl Sync for EntranceNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct EntranceThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    EntranceThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    EntranceThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl EntranceThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EntranceThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FromHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsStaggeringEnabledProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IEntranceThemeTransitionStatics<
        R,
        F: FnOnce(&IEntranceThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            EntranceThemeTransition,
            IEntranceThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for EntranceThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IEntranceThemeTransition>();
}
unsafe impl windows_core::Interface for EntranceThemeTransition {
    type Vtable = <IEntranceThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IEntranceThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for EntranceThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition";
}
unsafe impl Send for EntranceThemeTransition {}
unsafe impl Sync for EntranceThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ExponentialEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ExponentialEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ExponentialEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl ExponentialEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ExponentialEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Exponent(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Exponent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExponent(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExponent)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExponentProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IExponentialEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExponentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IExponentialEaseStatics<
        R,
        F: FnOnce(&IExponentialEaseStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ExponentialEase, IExponentialEaseStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ExponentialEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IExponentialEase>();
}
unsafe impl windows_core::Interface for ExponentialEase {
    type Vtable = <IExponentialEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IExponentialEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ExponentialEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ExponentialEase";
}
unsafe impl Send for ExponentialEase {}
unsafe impl Sync for ExponentialEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct FadeInThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    FadeInThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    FadeInThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl FadeInThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            FadeInThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IFadeInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IFadeInThemeAnimationStatics<
        R,
        F: FnOnce(&IFadeInThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            FadeInThemeAnimation,
            IFadeInThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for FadeInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IFadeInThemeAnimation>();
}
unsafe impl windows_core::Interface for FadeInThemeAnimation {
    type Vtable = <IFadeInThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IFadeInThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for FadeInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation";
}
unsafe impl Send for FadeInThemeAnimation {}
unsafe impl Sync for FadeInThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct FadeOutThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    FadeOutThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    FadeOutThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl FadeOutThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            FadeOutThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IFadeOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IFadeOutThemeAnimationStatics<
        R,
        F: FnOnce(&IFadeOutThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            FadeOutThemeAnimation,
            IFadeOutThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for FadeOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IFadeOutThemeAnimation>();
}
unsafe impl windows_core::Interface for FadeOutThemeAnimation {
    type Vtable = <IFadeOutThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IFadeOutThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for FadeOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation";
}
unsafe impl Send for FadeOutThemeAnimation {}
unsafe impl Sync for FadeOutThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct FillBehavior(pub i32);
impl FillBehavior {
    pub const HoldEnd: Self = Self(0i32);
    pub const Stop: Self = Self(1i32);
}
impl windows_core::TypeKind for FillBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for FillBehavior {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.FillBehavior;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct GravityConnectedAnimationConfiguration(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    GravityConnectedAnimationConfiguration,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    GravityConnectedAnimationConfiguration,
    ConnectedAnimationConfiguration
);
impl GravityConnectedAnimationConfiguration {
    pub fn IsShadowEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsShadowEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsShadowEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsShadowEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<GravityConnectedAnimationConfiguration> {
        Self::IGravityConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IGravityConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IGravityConnectedAnimationConfigurationFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            GravityConnectedAnimationConfiguration,
            IGravityConnectedAnimationConfigurationFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for GravityConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IGravityConnectedAnimationConfiguration>(
        );
}
unsafe impl windows_core::Interface for GravityConnectedAnimationConfiguration {
    type Vtable = <IGravityConnectedAnimationConfiguration as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IGravityConnectedAnimationConfiguration as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for GravityConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration";
}
unsafe impl Send for GravityConnectedAnimationConfiguration {}
unsafe impl Sync for GravityConnectedAnimationConfiguration {}
windows_core::imp::define_interface!(
    IAddDeleteThemeTransition,
    IAddDeleteThemeTransition_Vtbl,
    0x3728595e_0ea2_524b_9348_86cfb860a0ff
);
impl windows_core::RuntimeType for IAddDeleteThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAddDeleteThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransition";
}
pub trait IAddDeleteThemeTransition_Impl: windows_core::IUnknownImpl {}
impl IAddDeleteThemeTransition_Vtbl {
    pub const fn new<Identity: IAddDeleteThemeTransition_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAddDeleteThemeTransition,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAddDeleteThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAddDeleteThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBackEase,
    IBackEase_Vtbl,
    0x1775bd43_1939_57cb_8c31_cd7590ec9543
);
impl windows_core::RuntimeType for IBackEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBackEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBackEase";
}
pub trait IBackEase_Impl: windows_core::IUnknownImpl {
    fn Amplitude(&self) -> windows_core::Result<f64>;
    fn SetAmplitude(&self, value: f64) -> windows_core::Result<()>;
}
impl IBackEase_Vtbl {
    pub const fn new<Identity: IBackEase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Amplitude<Identity: IBackEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBackEase_Impl::Amplitude(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAmplitude<Identity: IBackEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBackEase_Impl::SetAmplitude(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBackEase, OFFSET>(),
            Amplitude: Amplitude::<Identity, OFFSET>,
            SetAmplitude: SetAmplitude::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBackEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Amplitude:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetAmplitude:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBackEaseStatics,
    IBackEaseStatics_Vtbl,
    0x1ead2ef9_7901_542d_ae08_7b5937b32ef0
);
impl windows_core::RuntimeType for IBackEaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBackEaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBackEaseStatics";
}
pub trait IBackEaseStatics_Impl: windows_core::IUnknownImpl {
    fn AmplitudeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IBackEaseStatics_Vtbl {
    pub const fn new<Identity: IBackEaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AmplitudeProperty<
            Identity: IBackEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBackEaseStatics_Impl::AmplitudeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBackEaseStatics, OFFSET>(),
            AmplitudeProperty: AmplitudeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBackEaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AmplitudeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBasicConnectedAnimationConfiguration,
    IBasicConnectedAnimationConfiguration_Vtbl,
    0x7ff18afe_91e8_52fa_a1c1_7b2c1a140118
);
impl windows_core::RuntimeType for IBasicConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfiguration";
}
pub trait IBasicConnectedAnimationConfiguration_Impl: windows_core::IUnknownImpl {}
impl IBasicConnectedAnimationConfiguration_Vtbl {
    pub const fn new<Identity: IBasicConnectedAnimationConfiguration_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBasicConnectedAnimationConfiguration,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicConnectedAnimationConfiguration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicConnectedAnimationConfiguration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IBasicConnectedAnimationConfigurationFactory,
    IBasicConnectedAnimationConfigurationFactory_Vtbl,
    0x2d156a02_0fb5_5ad1_af9b_bc9c2720fecb
);
impl windows_core::RuntimeType for IBasicConnectedAnimationConfigurationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicConnectedAnimationConfigurationFactory {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationFactory";
}
pub trait IBasicConnectedAnimationConfigurationFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<BasicConnectedAnimationConfiguration>;
}
impl IBasicConnectedAnimationConfigurationFactory_Vtbl {
    pub const fn new<
        Identity: IBasicConnectedAnimationConfigurationFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBasicConnectedAnimationConfigurationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicConnectedAnimationConfigurationFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBasicConnectedAnimationConfigurationFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicConnectedAnimationConfigurationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBeginStoryboard,
    IBeginStoryboard_Vtbl,
    0xbb364720_ee5a_5b32_91e2_62589729fd3a
);
impl windows_core::RuntimeType for IBeginStoryboard {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBeginStoryboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBeginStoryboard";
}
pub trait IBeginStoryboard_Impl: windows_core::IUnknownImpl {
    fn Storyboard(&self) -> windows_core::Result<Storyboard>;
    fn SetStoryboard(&self, value: windows_core::Ref<'_, Storyboard>) -> windows_core::Result<()>;
}
impl IBeginStoryboard_Vtbl {
    pub const fn new<Identity: IBeginStoryboard_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Storyboard<
            Identity: IBeginStoryboard_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBeginStoryboard_Impl::Storyboard(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStoryboard<
            Identity: IBeginStoryboard_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBeginStoryboard_Impl::SetStoryboard(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBeginStoryboard, OFFSET>(),
            Storyboard: Storyboard::<Identity, OFFSET>,
            SetStoryboard: SetStoryboard::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBeginStoryboard as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBeginStoryboard_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Storyboard: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetStoryboard: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBeginStoryboardStatics,
    IBeginStoryboardStatics_Vtbl,
    0x4d5fdbeb_6b0e_5a8f_a8f0_01f438df8fb2
);
impl windows_core::RuntimeType for IBeginStoryboardStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBeginStoryboardStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStatics";
}
pub trait IBeginStoryboardStatics_Impl: windows_core::IUnknownImpl {
    fn StoryboardProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IBeginStoryboardStatics_Vtbl {
    pub const fn new<Identity: IBeginStoryboardStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn StoryboardProperty<
            Identity: IBeginStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBeginStoryboardStatics_Impl::StoryboardProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBeginStoryboardStatics, OFFSET>(
            ),
            StoryboardProperty: StoryboardProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBeginStoryboardStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBeginStoryboardStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub StoryboardProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceEase,
    IBounceEase_Vtbl,
    0xc138bfff_87c8_5c60_b280_682a499c58c3
);
impl windows_core::RuntimeType for IBounceEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBounceEase";
}
pub trait IBounceEase_Impl: windows_core::IUnknownImpl {
    fn Bounces(&self) -> windows_core::Result<i32>;
    fn SetBounces(&self, value: i32) -> windows_core::Result<()>;
    fn Bounciness(&self) -> windows_core::Result<f64>;
    fn SetBounciness(&self, value: f64) -> windows_core::Result<()>;
}
impl IBounceEase_Vtbl {
    pub const fn new<Identity: IBounceEase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Bounces<Identity: IBounceEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEase_Impl::Bounces(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBounces<Identity: IBounceEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceEase_Impl::SetBounces(this, value).into()
            }
        }
        unsafe extern "system" fn Bounciness<Identity: IBounceEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEase_Impl::Bounciness(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBounciness<Identity: IBounceEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBounceEase_Impl::SetBounciness(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBounceEase, OFFSET>(),
            Bounces: Bounces::<Identity, OFFSET>,
            SetBounces: SetBounces::<Identity, OFFSET>,
            Bounciness: Bounciness::<Identity, OFFSET>,
            SetBounciness: SetBounciness::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Bounces:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetBounces: unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Bounciness:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetBounciness:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBounceEaseStatics,
    IBounceEaseStatics_Vtbl,
    0xd7716b38_c705_5093_96d6_735c13105a30
);
impl windows_core::RuntimeType for IBounceEaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBounceEaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IBounceEaseStatics";
}
pub trait IBounceEaseStatics_Impl: windows_core::IUnknownImpl {
    fn BouncesProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn BouncinessProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IBounceEaseStatics_Vtbl {
    pub const fn new<Identity: IBounceEaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn BouncesProperty<
            Identity: IBounceEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEaseStatics_Impl::BouncesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BouncinessProperty<
            Identity: IBounceEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBounceEaseStatics_Impl::BouncinessProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBounceEaseStatics, OFFSET>(),
            BouncesProperty: BouncesProperty::<Identity, OFFSET>,
            BouncinessProperty: BouncinessProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBounceEaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub BouncesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BouncinessProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICircleEase,
    ICircleEase_Vtbl,
    0x88209080_2929_5924_9b52_f95196568713
);
impl windows_core::RuntimeType for ICircleEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICircleEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ICircleEase";
}
pub trait ICircleEase_Impl: windows_core::IUnknownImpl {}
impl ICircleEase_Vtbl {
    pub const fn new<Identity: ICircleEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICircleEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICircleEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICircleEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IColorAnimation,
    IColorAnimation_Vtbl,
    0x6df862d2_65f2_53a8_8b1b_1b6c1763c175
);
impl windows_core::RuntimeType for IColorAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorAnimation";
}
pub trait IColorAnimation_Impl: windows_core::IUnknownImpl {
    fn From(&self) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>>;
    fn SetFrom(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::UI::Color>>,
    ) -> windows_core::Result<()>;
    fn To(&self) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>>;
    fn SetTo(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::UI::Color>>,
    ) -> windows_core::Result<()>;
    fn By(&self) -> windows_core::Result<windows::Foundation::IReference<windows::UI::Color>>;
    fn SetBy(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::UI::Color>>,
    ) -> windows_core::Result<()>;
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IColorAnimation_Vtbl {
    pub const fn new<Identity: IColorAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn From<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimation_Impl::From(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFrom<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimation_Impl::SetFrom(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn To<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimation_Impl::To(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTo<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimation_Impl::SetTo(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn By<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimation_Impl::By(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBy<Identity: IColorAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimation_Impl::SetBy(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn EasingFunction<
            Identity: IColorAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimation_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IColorAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimation_Impl::SetEasingFunction(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IColorAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimation_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IColorAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimation_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorAnimation, OFFSET>(),
            From: From::<Identity, OFFSET>,
            SetFrom: SetFrom::<Identity, OFFSET>,
            To: To::<Identity, OFFSET>,
            SetTo: SetTo::<Identity, OFFSET>,
            By: By::<Identity, OFFSET>,
            SetBy: SetBy::<Identity, OFFSET>,
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub To: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub By: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorAnimationStatics,
    IColorAnimationStatics_Vtbl,
    0x99aebe0f_928e_52cb_842f_f43fe660ff06
);
impl windows_core::RuntimeType for IColorAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorAnimationStatics";
}
pub trait IColorAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn FromProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ByProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IColorAnimationStatics_Vtbl {
    pub const fn new<Identity: IColorAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromProperty<
            Identity: IColorAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationStatics_Impl::FromProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToProperty<
            Identity: IColorAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationStatics_Impl::ToProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ByProperty<
            Identity: IColorAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationStatics_Impl::ByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IColorAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IColorAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationStatics_Impl::EnableDependentAnimationProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorAnimationStatics, OFFSET>(
            ),
            FromProperty: FromProperty::<Identity, OFFSET>,
            ToProperty: ToProperty::<Identity, OFFSET>,
            ByProperty: ByProperty::<Identity, OFFSET>,
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorAnimationUsingKeyFrames,
    IColorAnimationUsingKeyFrames_Vtbl,
    0x96f28c97_67eb_5393_8e37_a81d8fda18b3
);
impl windows_core::RuntimeType for IColorAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFrames";
}
pub trait IColorAnimationUsingKeyFrames_Impl: windows_core::IUnknownImpl {
    fn KeyFrames(&self) -> windows_core::Result<ColorKeyFrameCollection>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IColorAnimationUsingKeyFrames_Vtbl {
    pub const fn new<Identity: IColorAnimationUsingKeyFrames_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeyFrames<
            Identity: IColorAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationUsingKeyFrames_Impl::KeyFrames(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IColorAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationUsingKeyFrames_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IColorAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorAnimationUsingKeyFrames_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IColorAnimationUsingKeyFrames,
                OFFSET,
            >(),
            KeyFrames: KeyFrames::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorAnimationUsingKeyFrames as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationUsingKeyFrames_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorAnimationUsingKeyFramesStatics,
    IColorAnimationUsingKeyFramesStatics_Vtbl,
    0x5b0f4840_0ef7_5ad7_a8f2_d49424ed906f
);
impl windows_core::RuntimeType for IColorAnimationUsingKeyFramesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorAnimationUsingKeyFramesStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStatics";
}
pub trait IColorAnimationUsingKeyFramesStatics_Impl: windows_core::IUnknownImpl {
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IColorAnimationUsingKeyFramesStatics_Vtbl {
    pub const fn new<Identity: IColorAnimationUsingKeyFramesStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IColorAnimationUsingKeyFramesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorAnimationUsingKeyFramesStatics_Impl::EnableDependentAnimationProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IColorAnimationUsingKeyFramesStatics,
                OFFSET,
            >(),
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorAnimationUsingKeyFramesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorKeyFrame,
    IColorKeyFrame_Vtbl,
    0x02848c7e_c772_5f66_842b_fd494d0da669
);
impl windows_core::RuntimeType for IColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorKeyFrame";
}
pub trait IColorKeyFrame_Impl: windows_core::IUnknownImpl {
    fn Value(&self) -> windows_core::Result<windows::UI::Color>;
    fn SetValue(&self, value: &windows::UI::Color) -> windows_core::Result<()>;
    fn KeyTime(&self) -> windows_core::Result<KeyTime>;
    fn SetKeyTime(&self, value: &KeyTime) -> windows_core::Result<()>;
}
impl IColorKeyFrame_Vtbl {
    pub const fn new<Identity: IColorKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Value<Identity: IColorKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrame_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: IColorKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorKeyFrame_Impl::SetValue(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn KeyTime<Identity: IColorKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrame_Impl::KeyTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTime<Identity: IColorKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IColorKeyFrame_Impl::SetKeyTime(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorKeyFrame, OFFSET>(),
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            KeyTime: KeyTime::<Identity, OFFSET>,
            SetKeyTime: SetKeyTime::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub KeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut KeyTime) -> windows_core::HRESULT,
    pub SetKeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, KeyTime) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorKeyFrameFactory,
    IColorKeyFrameFactory_Vtbl,
    0xa82cc182_9d80_508c_b962_d74225587200
);
impl windows_core::RuntimeType for IColorKeyFrameFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorKeyFrameFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactory";
}
pub trait IColorKeyFrameFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<ColorKeyFrame>;
}
impl IColorKeyFrameFactory_Vtbl {
    pub const fn new<Identity: IColorKeyFrameFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IColorKeyFrameFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrameFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorKeyFrameFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorKeyFrameFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IColorKeyFrameStatics,
    IColorKeyFrameStatics_Vtbl,
    0xb62fdd68_15c7_5c6c_a4fa_0cee10e04556
);
impl windows_core::RuntimeType for IColorKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IColorKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStatics";
}
pub trait IColorKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn ValueProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn KeyTimeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IColorKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IColorKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ValueProperty<
            Identity: IColorKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrameStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTimeProperty<
            Identity: IColorKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IColorKeyFrameStatics_Impl::KeyTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IColorKeyFrameStatics, OFFSET>(
            ),
            ValueProperty: ValueProperty::<Identity, OFFSET>,
            KeyTimeProperty: KeyTimeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IColorKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICommonNavigationTransitionInfo,
    ICommonNavigationTransitionInfo_Vtbl,
    0xb21cc95f_9e3d_540a_b35a_17b99dc41b1e
);
impl windows_core::RuntimeType for ICommonNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICommonNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfo";
}
pub trait ICommonNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {
    fn IsStaggeringEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl ICommonNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: ICommonNavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn IsStaggeringEnabled<
            Identity: ICommonNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICommonNavigationTransitionInfo_Impl::IsStaggeringEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStaggeringEnabled<
            Identity: ICommonNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICommonNavigationTransitionInfo_Impl::SetIsStaggeringEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICommonNavigationTransitionInfo,
                OFFSET,
            >(),
            IsStaggeringEnabled: IsStaggeringEnabled::<Identity, OFFSET>,
            SetIsStaggeringEnabled: SetIsStaggeringEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICommonNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommonNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICommonNavigationTransitionInfoStatics,
    ICommonNavigationTransitionInfoStatics_Vtbl,
    0x20020be1_c1ba_59f5_997a_c04f5e3833b0
);
impl windows_core::RuntimeType for ICommonNavigationTransitionInfoStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ICommonNavigationTransitionInfoStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait ICommonNavigationTransitionInfoStatics_Impl: windows_core::IUnknownImpl {
    fn IsStaggeringEnabledProperty(&self)
        -> windows_core::Result<super::super::DependencyProperty>;
    fn IsStaggerElementProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetIsStaggerElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<bool>;
    fn SetIsStaggerElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
        value: bool,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl ICommonNavigationTransitionInfoStatics_Vtbl {
    pub const fn new<Identity: ICommonNavigationTransitionInfoStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn IsStaggeringEnabledProperty<
            Identity: ICommonNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICommonNavigationTransitionInfoStatics_Impl::IsStaggeringEnabledProperty(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsStaggerElementProperty<
            Identity: ICommonNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICommonNavigationTransitionInfoStatics_Impl::IsStaggerElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsStaggerElement<
            Identity: ICommonNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICommonNavigationTransitionInfoStatics_Impl::GetIsStaggerElement(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStaggerElement<
            Identity: ICommonNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICommonNavigationTransitionInfoStatics_Impl::SetIsStaggerElement(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICommonNavigationTransitionInfoStatics,
                OFFSET,
            >(),
            IsStaggeringEnabledProperty: IsStaggeringEnabledProperty::<Identity, OFFSET>,
            IsStaggerElementProperty: IsStaggerElementProperty::<Identity, OFFSET>,
            GetIsStaggerElement: GetIsStaggerElement::<Identity, OFFSET>,
            SetIsStaggerElement: SetIsStaggerElement::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICommonNavigationTransitionInfoStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommonNavigationTransitionInfoStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsStaggerElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetIsStaggerElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetIsStaggerElement: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsStaggerElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsStaggerElement: usize,
}
windows_core::imp::define_interface!(
    IConnectedAnimation,
    IConnectedAnimation_Vtbl,
    0xa9c1c6ad_7670_589c_a608_9b5c01cec71f
);
impl windows_core::RuntimeType for IConnectedAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IConnectedAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IConnectedAnimation";
}
#[cfg(feature = "UI_Composition")]
pub trait IConnectedAnimation_Impl: windows_core::IUnknownImpl {
    fn IsScaleAnimationEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsScaleAnimationEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn Configuration(&self) -> windows_core::Result<ConnectedAnimationConfiguration>;
    fn SetConfiguration(
        &self,
        value: windows_core::Ref<'_, ConnectedAnimationConfiguration>,
    ) -> windows_core::Result<()>;
    fn Completed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<ConnectedAnimation, windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()>;
    fn TryStart(
        &self,
        destination: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<bool>;
    fn TryStartWithCoordinatedElements(
        &self,
        destination: windows_core::Ref<'_, super::super::UIElement>,
        coordinatedElements: windows_core::Ref<
            '_,
            windows_collections::IIterable<super::super::UIElement>,
        >,
    ) -> windows_core::Result<bool>;
    fn Cancel(&self) -> windows_core::Result<()>;
    fn SetAnimationComponent(
        &self,
        component: ConnectedAnimationComponent,
        animation: windows_core::Ref<
            '_,
            super::super::super::Composition::ICompositionAnimationBase,
        >,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IConnectedAnimation_Vtbl {
    pub const fn new<Identity: IConnectedAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsScaleAnimationEnabled<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimation_Impl::IsScaleAnimationEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsScaleAnimationEnabled<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimation_Impl::SetIsScaleAnimationEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn Configuration<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimation_Impl::Configuration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetConfiguration<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimation_Impl::SetConfiguration(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn Completed<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimation_Impl::Completed(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCompleted<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimation_Impl::RemoveCompleted(this, token).into()
            }
        }
        unsafe extern "system" fn TryStart<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            destination: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimation_Impl::TryStart(
                    this,
                    core::mem::transmute_copy(&destination),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryStartWithCoordinatedElements<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            destination: *mut core::ffi::c_void,
            coordinatedelements: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimation_Impl::TryStartWithCoordinatedElements(
                    this,
                    core::mem::transmute_copy(&destination),
                    core::mem::transmute_copy(&coordinatedelements),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimation_Impl::Cancel(this).into()
            }
        }
        unsafe extern "system" fn SetAnimationComponent<
            Identity: IConnectedAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            component: ConnectedAnimationComponent,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimation_Impl::SetAnimationComponent(
                    this,
                    component,
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IConnectedAnimation, OFFSET>(),
            IsScaleAnimationEnabled: IsScaleAnimationEnabled::<Identity, OFFSET>,
            SetIsScaleAnimationEnabled: SetIsScaleAnimationEnabled::<Identity, OFFSET>,
            Configuration: Configuration::<Identity, OFFSET>,
            SetConfiguration: SetConfiguration::<Identity, OFFSET>,
            Completed: Completed::<Identity, OFFSET>,
            RemoveCompleted: RemoveCompleted::<Identity, OFFSET>,
            TryStart: TryStart::<Identity, OFFSET>,
            TryStartWithCoordinatedElements: TryStartWithCoordinatedElements::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
            SetAnimationComponent: SetAnimationComponent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IConnectedAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsScaleAnimationEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsScaleAnimationEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub Configuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub TryStart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    TryStart: usize,
    #[cfg(feature = "UI_Composition")]
    pub TryStartWithCoordinatedElements: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    TryStartWithCoordinatedElements: usize,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub SetAnimationComponent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ConnectedAnimationComponent,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetAnimationComponent: usize,
}
windows_core::imp::define_interface!(
    IConnectedAnimationConfiguration,
    IConnectedAnimationConfiguration_Vtbl,
    0xe848379d_7e25_5976_bfb3_086bac4e8849
);
impl windows_core::RuntimeType for IConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IConnectedAnimationConfiguration {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfiguration";
}
pub trait IConnectedAnimationConfiguration_Impl: windows_core::IUnknownImpl {}
impl IConnectedAnimationConfiguration_Vtbl {
    pub const fn new<Identity: IConnectedAnimationConfiguration_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IConnectedAnimationConfiguration,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IConnectedAnimationConfiguration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationConfiguration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IConnectedAnimationConfigurationFactory,
    IConnectedAnimationConfigurationFactory_Vtbl,
    0x71008845_4a12_5a1a_969c_4152b5174922
);
impl windows_core::RuntimeType for IConnectedAnimationConfigurationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IConnectedAnimationConfigurationFactory {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactory";
}
pub trait IConnectedAnimationConfigurationFactory_Impl: windows_core::IUnknownImpl {}
impl IConnectedAnimationConfigurationFactory_Vtbl {
    pub const fn new<
        Identity: IConnectedAnimationConfigurationFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IConnectedAnimationConfigurationFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IConnectedAnimationConfigurationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IConnectedAnimationService,
    IConnectedAnimationService_Vtbl,
    0x85f72163_c3c8_586a_91fe_3e0315a3a4fc
);
impl windows_core::RuntimeType for IConnectedAnimationService {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IConnectedAnimationService {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationService";
}
#[cfg(feature = "UI_Composition")]
pub trait IConnectedAnimationService_Impl: windows_core::IUnknownImpl {
    fn DefaultDuration(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SetDefaultDuration(&self, value: &windows::Foundation::TimeSpan)
        -> windows_core::Result<()>;
    fn DefaultEasingFunction(
        &self,
    ) -> windows_core::Result<super::super::super::Composition::CompositionEasingFunction>;
    fn SetDefaultEasingFunction(
        &self,
        value: windows_core::Ref<'_, super::super::super::Composition::CompositionEasingFunction>,
    ) -> windows_core::Result<()>;
    fn PrepareToAnimate(
        &self,
        key: &windows_core::HSTRING,
        source: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<ConnectedAnimation>;
    fn GetAnimation(&self, key: &windows_core::HSTRING)
        -> windows_core::Result<ConnectedAnimation>;
}
#[cfg(feature = "UI_Composition")]
impl IConnectedAnimationService_Vtbl {
    pub const fn new<Identity: IConnectedAnimationService_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DefaultDuration<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimationService_Impl::DefaultDuration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultDuration<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimationService_Impl::SetDefaultDuration(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn DefaultEasingFunction<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimationService_Impl::DefaultEasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultEasingFunction<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IConnectedAnimationService_Impl::SetDefaultEasingFunction(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn PrepareToAnimate<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimationService_Impl::PrepareToAnimate(
                    this,
                    core::mem::transmute(&key),
                    core::mem::transmute_copy(&source),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAnimation<
            Identity: IConnectedAnimationService_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            key: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimationService_Impl::GetAnimation(
                    this,
                    core::mem::transmute(&key),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IConnectedAnimationService,
                OFFSET,
            >(),
            DefaultDuration: DefaultDuration::<Identity, OFFSET>,
            SetDefaultDuration: SetDefaultDuration::<Identity, OFFSET>,
            DefaultEasingFunction: DefaultEasingFunction::<Identity, OFFSET>,
            SetDefaultEasingFunction: SetDefaultEasingFunction::<Identity, OFFSET>,
            PrepareToAnimate: PrepareToAnimate::<Identity, OFFSET>,
            GetAnimation: GetAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IConnectedAnimationService as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationService_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DefaultDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SetDefaultDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub DefaultEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    DefaultEasingFunction: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetDefaultEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetDefaultEasingFunction: usize,
    #[cfg(feature = "UI_Composition")]
    pub PrepareToAnimate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    PrepareToAnimate: usize,
    pub GetAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IConnectedAnimationServiceStatics,
    IConnectedAnimationServiceStatics_Vtbl,
    0xf30ad68d_3426_5564_92c6_288b819e652a
);
impl windows_core::RuntimeType for IConnectedAnimationServiceStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IConnectedAnimationServiceStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStatics";
}
pub trait IConnectedAnimationServiceStatics_Impl: windows_core::IUnknownImpl {
    fn GetForCurrentView(&self) -> windows_core::Result<ConnectedAnimationService>;
}
impl IConnectedAnimationServiceStatics_Vtbl {
    pub const fn new<Identity: IConnectedAnimationServiceStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GetForCurrentView<
            Identity: IConnectedAnimationServiceStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IConnectedAnimationServiceStatics_Impl::GetForCurrentView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IConnectedAnimationServiceStatics,
                OFFSET,
            >(),
            GetForCurrentView: GetForCurrentView::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IConnectedAnimationServiceStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationServiceStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetForCurrentView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentThemeTransition,
    IContentThemeTransition_Vtbl,
    0xdff47071_cc51_556c_a3fe_8bbb4cba6195
);
impl windows_core::RuntimeType for IContentThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IContentThemeTransition";
}
pub trait IContentThemeTransition_Impl: windows_core::IUnknownImpl {
    fn HorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn VerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl IContentThemeTransition_Vtbl {
    pub const fn new<Identity: IContentThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontalOffset<
            Identity: IContentThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentThemeTransition_Impl::HorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalOffset<
            Identity: IContentThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentThemeTransition_Impl::SetHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn VerticalOffset<
            Identity: IContentThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentThemeTransition_Impl::VerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVerticalOffset<
            Identity: IContentThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentThemeTransition_Impl::SetVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentThemeTransition, OFFSET>(
            ),
            HorizontalOffset: HorizontalOffset::<Identity, OFFSET>,
            SetHorizontalOffset: SetHorizontalOffset::<Identity, OFFSET>,
            VerticalOffset: VerticalOffset::<Identity, OFFSET>,
            SetVerticalOffset: SetVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub VerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentThemeTransitionStatics,
    IContentThemeTransitionStatics_Vtbl,
    0x95cda8b1_6667_56e3_be40_866eef53663c
);
impl windows_core::RuntimeType for IContentThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentThemeTransitionStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStatics";
}
pub trait IContentThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn HorizontalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn VerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IContentThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IContentThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontalOffsetProperty<
            Identity: IContentThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentThemeTransitionStatics_Impl::HorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalOffsetProperty<
            Identity: IContentThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentThemeTransitionStatics_Impl::VerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentThemeTransitionStatics,
                OFFSET,
            >(),
            HorizontalOffsetProperty: HorizontalOffsetProperty::<Identity, OFFSET>,
            VerticalOffsetProperty: VerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub VerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContinuumNavigationTransitionInfo,
    IContinuumNavigationTransitionInfo_Vtbl,
    0xc55da70f_ff2a_5fc3_81c5_9670f4d78752
);
impl windows_core::RuntimeType for IContinuumNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IContinuumNavigationTransitionInfo {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfo";
}
#[cfg(feature = "UI_Composition")]
pub trait IContinuumNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {
    fn ExitElement(&self) -> windows_core::Result<super::super::UIElement>;
    fn SetExitElement(
        &self,
        value: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IContinuumNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: IContinuumNavigationTransitionInfo_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ExitElement<
            Identity: IContinuumNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfo_Impl::ExitElement(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitElement<
            Identity: IContinuumNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContinuumNavigationTransitionInfo_Impl::SetExitElement(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContinuumNavigationTransitionInfo,
                OFFSET,
            >(),
            ExitElement: ExitElement::<Identity, OFFSET>,
            SetExitElement: SetExitElement::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContinuumNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinuumNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub ExitElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    ExitElement: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetExitElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetExitElement: usize,
}
windows_core::imp::define_interface!(
    IContinuumNavigationTransitionInfoStatics,
    IContinuumNavigationTransitionInfoStatics_Vtbl,
    0xca9006fd_f513_5f34_ad7f_49f9d7a99432
);
impl windows_core::RuntimeType for IContinuumNavigationTransitionInfoStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl windows_core::RuntimeName for IContinuumNavigationTransitionInfoStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStatics";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
pub trait IContinuumNavigationTransitionInfoStatics_Impl: windows_core::IUnknownImpl {
    fn ExitElementProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn IsEntranceElementProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetIsEntranceElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<bool>;
    fn SetIsEntranceElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn IsExitElementProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetIsExitElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<bool>;
    fn SetIsExitElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn ExitElementContainerProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetExitElementContainer(
        &self,
        element: windows_core::Ref<'_, super::super::Controls::ListViewBase>,
    ) -> windows_core::Result<bool>;
    fn SetExitElementContainer(
        &self,
        element: windows_core::Ref<'_, super::super::Controls::ListViewBase>,
        value: bool,
    ) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
impl IContinuumNavigationTransitionInfoStatics_Vtbl {
    pub const fn new<
        Identity: IContinuumNavigationTransitionInfoStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn ExitElementProperty<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::ExitElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEntranceElementProperty<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::IsEntranceElementProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsEntranceElement<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::GetIsEntranceElement(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsEntranceElement<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContinuumNavigationTransitionInfoStatics_Impl::SetIsEntranceElement(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn IsExitElementProperty<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::IsExitElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsExitElement<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::GetIsExitElement(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsExitElement<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContinuumNavigationTransitionInfoStatics_Impl::SetIsExitElement(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ExitElementContainerProperty<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::ExitElementContainerProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetExitElementContainer<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContinuumNavigationTransitionInfoStatics_Impl::GetExitElementContainer(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitElementContainer<
            Identity: IContinuumNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContinuumNavigationTransitionInfoStatics_Impl::SetExitElementContainer(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContinuumNavigationTransitionInfoStatics,
                OFFSET,
            >(),
            ExitElementProperty: ExitElementProperty::<Identity, OFFSET>,
            IsEntranceElementProperty: IsEntranceElementProperty::<Identity, OFFSET>,
            GetIsEntranceElement: GetIsEntranceElement::<Identity, OFFSET>,
            SetIsEntranceElement: SetIsEntranceElement::<Identity, OFFSET>,
            IsExitElementProperty: IsExitElementProperty::<Identity, OFFSET>,
            GetIsExitElement: GetIsExitElement::<Identity, OFFSET>,
            SetIsExitElement: SetIsExitElement::<Identity, OFFSET>,
            ExitElementContainerProperty: ExitElementContainerProperty::<Identity, OFFSET>,
            GetExitElementContainer: GetExitElementContainer::<Identity, OFFSET>,
            SetExitElementContainer: SetExitElementContainer::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContinuumNavigationTransitionInfoStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinuumNavigationTransitionInfoStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExitElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsEntranceElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetIsEntranceElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetIsEntranceElement: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsEntranceElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsEntranceElement: usize,
    pub IsExitElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetIsExitElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetIsExitElement: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsExitElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsExitElement: usize,
    pub ExitElementContainerProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub GetExitElementContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    GetExitElementContainer: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives"))]
    pub SetExitElementContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls_Primitives")))]
    SetExitElementContainer: usize,
}
windows_core::imp::define_interface!(
    ICubicEase,
    ICubicEase_Vtbl,
    0x01a218b4_eb7e_54f9_bfb6_c6ee128013d2
);
impl windows_core::RuntimeType for ICubicEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICubicEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ICubicEase";
}
pub trait ICubicEase_Impl: windows_core::IUnknownImpl {}
impl ICubicEase_Vtbl {
    pub const fn new<Identity: ICubicEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICubicEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICubicEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICubicEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDirectConnectedAnimationConfiguration,
    IDirectConnectedAnimationConfiguration_Vtbl,
    0x44f192eb_cc11_545e_8fa2_1f0ec9c4438a
);
impl windows_core::RuntimeType for IDirectConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDirectConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfiguration";
}
pub trait IDirectConnectedAnimationConfiguration_Impl: windows_core::IUnknownImpl {}
impl IDirectConnectedAnimationConfiguration_Vtbl {
    pub const fn new<Identity: IDirectConnectedAnimationConfiguration_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDirectConnectedAnimationConfiguration,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDirectConnectedAnimationConfiguration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectConnectedAnimationConfiguration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDirectConnectedAnimationConfigurationFactory,
    IDirectConnectedAnimationConfigurationFactory_Vtbl,
    0x604aba9b_4eb8_5310_91dc_30962e25ab00
);
impl windows_core::RuntimeType for IDirectConnectedAnimationConfigurationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDirectConnectedAnimationConfigurationFactory {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationFactory";
}
pub trait IDirectConnectedAnimationConfigurationFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<DirectConnectedAnimationConfiguration>;
}
impl IDirectConnectedAnimationConfigurationFactory_Vtbl {
    pub const fn new<
        Identity: IDirectConnectedAnimationConfigurationFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IDirectConnectedAnimationConfigurationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDirectConnectedAnimationConfigurationFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDirectConnectedAnimationConfigurationFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDirectConnectedAnimationConfigurationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDiscreteColorKeyFrame,
    IDiscreteColorKeyFrame_Vtbl,
    0x9b3d88a7_31d3_5912_8646_641a8a565ca1
);
impl windows_core::RuntimeType for IDiscreteColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDiscreteColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrame";
}
pub trait IDiscreteColorKeyFrame_Impl: windows_core::IUnknownImpl {}
impl IDiscreteColorKeyFrame_Vtbl {
    pub const fn new<Identity: IDiscreteColorKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDiscreteColorKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDiscreteColorKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteColorKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDiscreteDoubleKeyFrame,
    IDiscreteDoubleKeyFrame_Vtbl,
    0xec16a555_c083_5a18_805b_a14b90bc80e2
);
impl windows_core::RuntimeType for IDiscreteDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDiscreteDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrame";
}
pub trait IDiscreteDoubleKeyFrame_Impl: windows_core::IUnknownImpl {}
impl IDiscreteDoubleKeyFrame_Vtbl {
    pub const fn new<Identity: IDiscreteDoubleKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDiscreteDoubleKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDiscreteDoubleKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteDoubleKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDiscreteObjectKeyFrame,
    IDiscreteObjectKeyFrame_Vtbl,
    0x542fa813_6892_559d_9f69_1f2ac666af13
);
impl windows_core::RuntimeType for IDiscreteObjectKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDiscreteObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrame";
}
pub trait IDiscreteObjectKeyFrame_Impl: windows_core::IUnknownImpl {}
impl IDiscreteObjectKeyFrame_Vtbl {
    pub const fn new<Identity: IDiscreteObjectKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDiscreteObjectKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDiscreteObjectKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteObjectKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDiscretePointKeyFrame,
    IDiscretePointKeyFrame_Vtbl,
    0x2255a291_007e_57ce_aa53_97d1e4a0d7e2
);
impl windows_core::RuntimeType for IDiscretePointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDiscretePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrame";
}
pub trait IDiscretePointKeyFrame_Impl: windows_core::IUnknownImpl {}
impl IDiscretePointKeyFrame_Vtbl {
    pub const fn new<Identity: IDiscretePointKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDiscretePointKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDiscretePointKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscretePointKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDoubleAnimation,
    IDoubleAnimation_Vtbl,
    0x651ec97e_e483_5985_aa0b_49cfb07432dd
);
impl windows_core::RuntimeType for IDoubleAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleAnimation";
}
pub trait IDoubleAnimation_Impl: windows_core::IUnknownImpl {
    fn From(&self) -> windows_core::Result<windows::Foundation::IReference<f64>>;
    fn SetFrom(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f64>>,
    ) -> windows_core::Result<()>;
    fn To(&self) -> windows_core::Result<windows::Foundation::IReference<f64>>;
    fn SetTo(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f64>>,
    ) -> windows_core::Result<()>;
    fn By(&self) -> windows_core::Result<windows::Foundation::IReference<f64>>;
    fn SetBy(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<f64>>,
    ) -> windows_core::Result<()>;
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IDoubleAnimation_Vtbl {
    pub const fn new<Identity: IDoubleAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn From<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimation_Impl::From(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFrom<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimation_Impl::SetFrom(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn To<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimation_Impl::To(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTo<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimation_Impl::SetTo(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn By<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimation_Impl::By(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBy<Identity: IDoubleAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimation_Impl::SetBy(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn EasingFunction<
            Identity: IDoubleAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimation_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IDoubleAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimation_Impl::SetEasingFunction(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IDoubleAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimation_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IDoubleAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimation_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDoubleAnimation, OFFSET>(),
            From: From::<Identity, OFFSET>,
            SetFrom: SetFrom::<Identity, OFFSET>,
            To: To::<Identity, OFFSET>,
            SetTo: SetTo::<Identity, OFFSET>,
            By: By::<Identity, OFFSET>,
            SetBy: SetBy::<Identity, OFFSET>,
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub To: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub By: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleAnimationStatics,
    IDoubleAnimationStatics_Vtbl,
    0x4e098387_adc6_5549_ad21_633e4fa244c2
);
impl windows_core::RuntimeType for IDoubleAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStatics";
}
pub trait IDoubleAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn FromProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ByProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDoubleAnimationStatics_Vtbl {
    pub const fn new<Identity: IDoubleAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromProperty<
            Identity: IDoubleAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationStatics_Impl::FromProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToProperty<
            Identity: IDoubleAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationStatics_Impl::ToProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ByProperty<
            Identity: IDoubleAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationStatics_Impl::ByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IDoubleAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IDoubleAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationStatics_Impl::EnableDependentAnimationProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDoubleAnimationStatics, OFFSET>(
            ),
            FromProperty: FromProperty::<Identity, OFFSET>,
            ToProperty: ToProperty::<Identity, OFFSET>,
            ByProperty: ByProperty::<Identity, OFFSET>,
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleAnimationUsingKeyFrames,
    IDoubleAnimationUsingKeyFrames_Vtbl,
    0x815437d5_63cf_54a5_aea5_24b84708d12d
);
impl windows_core::RuntimeType for IDoubleAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFrames";
}
pub trait IDoubleAnimationUsingKeyFrames_Impl: windows_core::IUnknownImpl {
    fn KeyFrames(&self) -> windows_core::Result<DoubleKeyFrameCollection>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IDoubleAnimationUsingKeyFrames_Vtbl {
    pub const fn new<Identity: IDoubleAnimationUsingKeyFrames_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeyFrames<
            Identity: IDoubleAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationUsingKeyFrames_Impl::KeyFrames(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IDoubleAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationUsingKeyFrames_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IDoubleAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleAnimationUsingKeyFrames_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDoubleAnimationUsingKeyFrames,
                OFFSET,
            >(),
            KeyFrames: KeyFrames::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleAnimationUsingKeyFrames as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationUsingKeyFrames_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleAnimationUsingKeyFramesStatics,
    IDoubleAnimationUsingKeyFramesStatics_Vtbl,
    0x4c1c9bf1_3a03_5689_b18f_6c44251e13d9
);
impl windows_core::RuntimeType for IDoubleAnimationUsingKeyFramesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleAnimationUsingKeyFramesStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStatics";
}
pub trait IDoubleAnimationUsingKeyFramesStatics_Impl: windows_core::IUnknownImpl {
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDoubleAnimationUsingKeyFramesStatics_Vtbl {
    pub const fn new<Identity: IDoubleAnimationUsingKeyFramesStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IDoubleAnimationUsingKeyFramesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleAnimationUsingKeyFramesStatics_Impl::EnableDependentAnimationProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDoubleAnimationUsingKeyFramesStatics,
                OFFSET,
            >(),
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleAnimationUsingKeyFramesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleKeyFrame,
    IDoubleKeyFrame_Vtbl,
    0x94c82ae6_ca62_5f52_934c_3e427e75d69a
);
impl windows_core::RuntimeType for IDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrame";
}
pub trait IDoubleKeyFrame_Impl: windows_core::IUnknownImpl {
    fn Value(&self) -> windows_core::Result<f64>;
    fn SetValue(&self, value: f64) -> windows_core::Result<()>;
    fn KeyTime(&self) -> windows_core::Result<KeyTime>;
    fn SetKeyTime(&self, value: &KeyTime) -> windows_core::Result<()>;
}
impl IDoubleKeyFrame_Vtbl {
    pub const fn new<Identity: IDoubleKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Value<Identity: IDoubleKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleKeyFrame_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: IDoubleKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleKeyFrame_Impl::SetValue(this, value).into()
            }
        }
        unsafe extern "system" fn KeyTime<Identity: IDoubleKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleKeyFrame_Impl::KeyTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTime<
            Identity: IDoubleKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDoubleKeyFrame_Impl::SetKeyTime(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDoubleKeyFrame, OFFSET>(),
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            KeyTime: KeyTime::<Identity, OFFSET>,
            SetKeyTime: SetKeyTime::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub KeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut KeyTime) -> windows_core::HRESULT,
    pub SetKeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, KeyTime) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleKeyFrameFactory,
    IDoubleKeyFrameFactory_Vtbl,
    0x2d492cb3_f488_5d30_b00c_b6f2547d0efe
);
impl windows_core::RuntimeType for IDoubleKeyFrameFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleKeyFrameFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactory";
}
pub trait IDoubleKeyFrameFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<DoubleKeyFrame>;
}
impl IDoubleKeyFrameFactory_Vtbl {
    pub const fn new<Identity: IDoubleKeyFrameFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IDoubleKeyFrameFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleKeyFrameFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDoubleKeyFrameFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleKeyFrameFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrameFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDoubleKeyFrameStatics,
    IDoubleKeyFrameStatics_Vtbl,
    0x0e56914c_b430_538f_bb66_0b8e83ab3db6
);
impl windows_core::RuntimeType for IDoubleKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDoubleKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStatics";
}
pub trait IDoubleKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn ValueProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn KeyTimeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDoubleKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IDoubleKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ValueProperty<
            Identity: IDoubleKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleKeyFrameStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTimeProperty<
            Identity: IDoubleKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDoubleKeyFrameStatics_Impl::KeyTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDoubleKeyFrameStatics, OFFSET>(
            ),
            ValueProperty: ValueProperty::<Identity, OFFSET>,
            KeyTimeProperty: KeyTimeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDoubleKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDragItemThemeAnimation,
    IDragItemThemeAnimation_Vtbl,
    0x648e690e_a2c0_58ca_b15d_db6fccc663f2
);
impl windows_core::RuntimeType for IDragItemThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDragItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimation";
}
pub trait IDragItemThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IDragItemThemeAnimation_Vtbl {
    pub const fn new<Identity: IDragItemThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IDragItemThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragItemThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IDragItemThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDragItemThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDragItemThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragItemThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDragItemThemeAnimationStatics,
    IDragItemThemeAnimationStatics_Vtbl,
    0xcdbdb41a_ce84_50a1_8b96_96599cd9619d
);
impl windows_core::RuntimeType for IDragItemThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDragItemThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStatics";
}
pub trait IDragItemThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDragItemThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IDragItemThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IDragItemThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragItemThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDragItemThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragItemThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDragOverThemeAnimation,
    IDragOverThemeAnimation_Vtbl,
    0x633cd3c0_71af_52fd_993e_504e3e6f56d4
);
impl windows_core::RuntimeType for IDragOverThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for IDragOverThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimation";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait IDragOverThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ToOffset(&self) -> windows_core::Result<f64>;
    fn SetToOffset(&self, value: f64) -> windows_core::Result<()>;
    fn Direction(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection>;
    fn SetDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl IDragOverThemeAnimation_Vtbl {
    pub const fn new<Identity: IDragOverThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDragOverThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ToOffset<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimation_Impl::ToOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetToOffset<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDragOverThemeAnimation_Impl::SetToOffset(this, value).into()
            }
        }
        unsafe extern "system" fn Direction<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimation_Impl::Direction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDirection<
            Identity: IDragOverThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDragOverThemeAnimation_Impl::SetDirection(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDragOverThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            ToOffset: ToOffset::<Identity, OFFSET>,
            SetToOffset: SetToOffset::<Identity, OFFSET>,
            Direction: Direction::<Identity, OFFSET>,
            SetDirection: SetDirection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragOverThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragOverThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetToOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Direction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Direction: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetDirection: usize,
}
windows_core::imp::define_interface!(
    IDragOverThemeAnimationStatics,
    IDragOverThemeAnimationStatics_Vtbl,
    0x8301afd2_68b2_5c6c_aadf_9a98d620e8d2
);
impl windows_core::RuntimeType for IDragOverThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDragOverThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStatics";
}
pub trait IDragOverThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn DirectionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDragOverThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IDragOverThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IDragOverThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToOffsetProperty<
            Identity: IDragOverThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimationStatics_Impl::ToOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DirectionProperty<
            Identity: IDragOverThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragOverThemeAnimationStatics_Impl::DirectionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDragOverThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            ToOffsetProperty: ToOffsetProperty::<Identity, OFFSET>,
            DirectionProperty: DirectionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragOverThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragOverThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DirectionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDrillInNavigationTransitionInfo,
    IDrillInNavigationTransitionInfo_Vtbl,
    0x5d5863d6_4bbf_5b30_94fa_034531cfa2aa
);
impl windows_core::RuntimeType for IDrillInNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDrillInNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfo";
}
pub trait IDrillInNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {}
impl IDrillInNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: IDrillInNavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDrillInNavigationTransitionInfo,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDrillInNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDrillInThemeAnimation,
    IDrillInThemeAnimation_Vtbl,
    0x097577e0_3027_5f24_af8c_976d9faed830
);
impl windows_core::RuntimeType for IDrillInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDrillInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimation";
}
pub trait IDrillInThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn EntranceTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetEntranceTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn EntranceTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetEntranceTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ExitTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetExitTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ExitTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetExitTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
}
impl IDrillInThemeAnimation_Vtbl {
    pub const fn new<Identity: IDrillInThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EntranceTargetName<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimation_Impl::EntranceTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEntranceTargetName<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillInThemeAnimation_Impl::SetEntranceTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn EntranceTarget<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimation_Impl::EntranceTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEntranceTarget<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillInThemeAnimation_Impl::SetEntranceTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ExitTargetName<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimation_Impl::ExitTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitTargetName<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillInThemeAnimation_Impl::SetExitTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ExitTarget<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimation_Impl::ExitTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitTarget<
            Identity: IDrillInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillInThemeAnimation_Impl::SetExitTarget(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDrillInThemeAnimation, OFFSET>(
            ),
            EntranceTargetName: EntranceTargetName::<Identity, OFFSET>,
            SetEntranceTargetName: SetEntranceTargetName::<Identity, OFFSET>,
            EntranceTarget: EntranceTarget::<Identity, OFFSET>,
            SetEntranceTarget: SetEntranceTarget::<Identity, OFFSET>,
            ExitTargetName: ExitTargetName::<Identity, OFFSET>,
            SetExitTargetName: SetExitTargetName::<Identity, OFFSET>,
            ExitTarget: ExitTarget::<Identity, OFFSET>,
            SetExitTarget: SetExitTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDrillInThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EntranceTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEntranceTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EntranceTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEntranceTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetExitTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetExitTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDrillInThemeAnimationStatics,
    IDrillInThemeAnimationStatics_Vtbl,
    0xba24258e_3a8e_5804_915a_7670893dbea4
);
impl windows_core::RuntimeType for IDrillInThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDrillInThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStatics";
}
pub trait IDrillInThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn EntranceTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EntranceTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ExitTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ExitTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDrillInThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IDrillInThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EntranceTargetNameProperty<
            Identity: IDrillInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimationStatics_Impl::EntranceTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EntranceTargetProperty<
            Identity: IDrillInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimationStatics_Impl::EntranceTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitTargetNameProperty<
            Identity: IDrillInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimationStatics_Impl::ExitTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitTargetProperty<
            Identity: IDrillInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillInThemeAnimationStatics_Impl::ExitTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDrillInThemeAnimationStatics,
                OFFSET,
            >(),
            EntranceTargetNameProperty: EntranceTargetNameProperty::<Identity, OFFSET>,
            EntranceTargetProperty: EntranceTargetProperty::<Identity, OFFSET>,
            ExitTargetNameProperty: ExitTargetNameProperty::<Identity, OFFSET>,
            ExitTargetProperty: ExitTargetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDrillInThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EntranceTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EntranceTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDrillOutThemeAnimation,
    IDrillOutThemeAnimation_Vtbl,
    0x9a93b9cc_925f_525a_9eac_55d39db3d314
);
impl windows_core::RuntimeType for IDrillOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDrillOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimation";
}
pub trait IDrillOutThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn EntranceTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetEntranceTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn EntranceTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetEntranceTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ExitTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetExitTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ExitTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetExitTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
}
impl IDrillOutThemeAnimation_Vtbl {
    pub const fn new<Identity: IDrillOutThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EntranceTargetName<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimation_Impl::EntranceTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEntranceTargetName<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillOutThemeAnimation_Impl::SetEntranceTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn EntranceTarget<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimation_Impl::EntranceTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEntranceTarget<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillOutThemeAnimation_Impl::SetEntranceTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ExitTargetName<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimation_Impl::ExitTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitTargetName<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillOutThemeAnimation_Impl::SetExitTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ExitTarget<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimation_Impl::ExitTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitTarget<
            Identity: IDrillOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDrillOutThemeAnimation_Impl::SetExitTarget(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDrillOutThemeAnimation, OFFSET>(
            ),
            EntranceTargetName: EntranceTargetName::<Identity, OFFSET>,
            SetEntranceTargetName: SetEntranceTargetName::<Identity, OFFSET>,
            EntranceTarget: EntranceTarget::<Identity, OFFSET>,
            SetEntranceTarget: SetEntranceTarget::<Identity, OFFSET>,
            ExitTargetName: ExitTargetName::<Identity, OFFSET>,
            SetExitTargetName: SetExitTargetName::<Identity, OFFSET>,
            ExitTarget: ExitTarget::<Identity, OFFSET>,
            SetExitTarget: SetExitTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDrillOutThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillOutThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EntranceTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEntranceTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EntranceTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEntranceTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetExitTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetExitTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDrillOutThemeAnimationStatics,
    IDrillOutThemeAnimationStatics_Vtbl,
    0x6eb9693b_c0d0_5bae_9cd2_10d80b8d3867
);
impl windows_core::RuntimeType for IDrillOutThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDrillOutThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStatics";
}
pub trait IDrillOutThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn EntranceTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EntranceTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ExitTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ExitTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDrillOutThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IDrillOutThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EntranceTargetNameProperty<
            Identity: IDrillOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimationStatics_Impl::EntranceTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EntranceTargetProperty<
            Identity: IDrillOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimationStatics_Impl::EntranceTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitTargetNameProperty<
            Identity: IDrillOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimationStatics_Impl::ExitTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitTargetProperty<
            Identity: IDrillOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDrillOutThemeAnimationStatics_Impl::ExitTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDrillOutThemeAnimationStatics,
                OFFSET,
            >(),
            EntranceTargetNameProperty: EntranceTargetNameProperty::<Identity, OFFSET>,
            EntranceTargetProperty: EntranceTargetProperty::<Identity, OFFSET>,
            ExitTargetNameProperty: ExitTargetNameProperty::<Identity, OFFSET>,
            ExitTargetProperty: ExitTargetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDrillOutThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillOutThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EntranceTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EntranceTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropTargetItemThemeAnimation,
    IDropTargetItemThemeAnimation_Vtbl,
    0xb97f19c0_f1e2_5705_a252_2db05d2e5a54
);
impl windows_core::RuntimeType for IDropTargetItemThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropTargetItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimation";
}
pub trait IDropTargetItemThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IDropTargetItemThemeAnimation_Vtbl {
    pub const fn new<Identity: IDropTargetItemThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IDropTargetItemThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetItemThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IDropTargetItemThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDropTargetItemThemeAnimation_Impl::SetTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDropTargetItemThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropTargetItemThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetItemThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropTargetItemThemeAnimationStatics,
    IDropTargetItemThemeAnimationStatics_Vtbl,
    0xa0ce9e16_ae12_55fc_a9e5_29dc94a713bd
);
impl windows_core::RuntimeType for IDropTargetItemThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropTargetItemThemeAnimationStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStatics";
}
pub trait IDropTargetItemThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IDropTargetItemThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IDropTargetItemThemeAnimationStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IDropTargetItemThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetItemThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDropTargetItemThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropTargetItemThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetItemThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingColorKeyFrame,
    IEasingColorKeyFrame_Vtbl,
    0xa137a710_da3c_5426_a1a2_3a5a672a4264
);
impl windows_core::RuntimeType for IEasingColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrame";
}
pub trait IEasingColorKeyFrame_Impl: windows_core::IUnknownImpl {
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
}
impl IEasingColorKeyFrame_Vtbl {
    pub const fn new<Identity: IEasingColorKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunction<
            Identity: IEasingColorKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingColorKeyFrame_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IEasingColorKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEasingColorKeyFrame_Impl::SetEasingFunction(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IEasingColorKeyFrame, OFFSET>(
            ),
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingColorKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingColorKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingColorKeyFrameStatics,
    IEasingColorKeyFrameStatics_Vtbl,
    0xc57818c0_3361_587d_b381_620b69251bcf
);
impl windows_core::RuntimeType for IEasingColorKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingColorKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStatics";
}
pub trait IEasingColorKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEasingColorKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IEasingColorKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IEasingColorKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingColorKeyFrameStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEasingColorKeyFrameStatics,
                OFFSET,
            >(),
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingColorKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingColorKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingDoubleKeyFrame,
    IEasingDoubleKeyFrame_Vtbl,
    0x935d9b7e_da61_5bb2_a574_7d2e53b60561
);
impl windows_core::RuntimeType for IEasingDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrame";
}
pub trait IEasingDoubleKeyFrame_Impl: windows_core::IUnknownImpl {
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
}
impl IEasingDoubleKeyFrame_Vtbl {
    pub const fn new<Identity: IEasingDoubleKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunction<
            Identity: IEasingDoubleKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingDoubleKeyFrame_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IEasingDoubleKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEasingDoubleKeyFrame_Impl::SetEasingFunction(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IEasingDoubleKeyFrame, OFFSET>(
            ),
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingDoubleKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingDoubleKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingDoubleKeyFrameStatics,
    IEasingDoubleKeyFrameStatics_Vtbl,
    0x8cc08735_4221_5127_ab2f_1e7e3df95fb9
);
impl windows_core::RuntimeType for IEasingDoubleKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingDoubleKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStatics";
}
pub trait IEasingDoubleKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEasingDoubleKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IEasingDoubleKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IEasingDoubleKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingDoubleKeyFrameStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEasingDoubleKeyFrameStatics,
                OFFSET,
            >(),
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingDoubleKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingDoubleKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingFunctionBase,
    IEasingFunctionBase_Vtbl,
    0x4fab519a_a93d_5d28_af18_84532bd32efe
);
impl windows_core::RuntimeType for IEasingFunctionBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingFunctionBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBase";
}
pub trait IEasingFunctionBase_Impl: windows_core::IUnknownImpl {
    fn EasingMode(&self) -> windows_core::Result<EasingMode>;
    fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()>;
    fn Ease(&self, normalizedTime: f64) -> windows_core::Result<f64>;
}
impl IEasingFunctionBase_Vtbl {
    pub const fn new<Identity: IEasingFunctionBase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingMode<
            Identity: IEasingFunctionBase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut EasingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingFunctionBase_Impl::EasingMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingMode<
            Identity: IEasingFunctionBase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: EasingMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEasingFunctionBase_Impl::SetEasingMode(this, value).into()
            }
        }
        unsafe extern "system" fn Ease<Identity: IEasingFunctionBase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            normalizedtime: f64,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingFunctionBase_Impl::Ease(this, normalizedtime) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IEasingFunctionBase, OFFSET>(),
            EasingMode: EasingMode::<Identity, OFFSET>,
            SetEasingMode: SetEasingMode::<Identity, OFFSET>,
            Ease: Ease::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingFunctionBase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingMode:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut EasingMode) -> windows_core::HRESULT,
    pub SetEasingMode:
        unsafe extern "system" fn(*mut core::ffi::c_void, EasingMode) -> windows_core::HRESULT,
    pub Ease:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64, *mut f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingFunctionBaseFactory,
    IEasingFunctionBaseFactory_Vtbl,
    0xb1b92f4c_5ec7_5cda_b1d4_fd159595ca47
);
impl windows_core::RuntimeType for IEasingFunctionBaseFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingFunctionBaseFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactory";
}
pub trait IEasingFunctionBaseFactory_Impl: windows_core::IUnknownImpl {}
impl IEasingFunctionBaseFactory_Vtbl {
    pub const fn new<Identity: IEasingFunctionBaseFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEasingFunctionBaseFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingFunctionBaseFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBaseFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IEasingFunctionBaseStatics,
    IEasingFunctionBaseStatics_Vtbl,
    0x09032445_967c_52b8_b712_15f066b32821
);
impl windows_core::RuntimeType for IEasingFunctionBaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingFunctionBaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStatics";
}
pub trait IEasingFunctionBaseStatics_Impl: windows_core::IUnknownImpl {
    fn EasingModeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEasingFunctionBaseStatics_Vtbl {
    pub const fn new<Identity: IEasingFunctionBaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingModeProperty<
            Identity: IEasingFunctionBaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingFunctionBaseStatics_Impl::EasingModeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEasingFunctionBaseStatics,
                OFFSET,
            >(),
            EasingModeProperty: EasingModeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingFunctionBaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingModeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingPointKeyFrame,
    IEasingPointKeyFrame_Vtbl,
    0x9406ee8e_3641_54fe_a424_83420ea45cd3
);
impl windows_core::RuntimeType for IEasingPointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrame";
}
pub trait IEasingPointKeyFrame_Impl: windows_core::IUnknownImpl {
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
}
impl IEasingPointKeyFrame_Vtbl {
    pub const fn new<Identity: IEasingPointKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunction<
            Identity: IEasingPointKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingPointKeyFrame_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IEasingPointKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEasingPointKeyFrame_Impl::SetEasingFunction(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IEasingPointKeyFrame, OFFSET>(
            ),
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingPointKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingPointKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEasingPointKeyFrameStatics,
    IEasingPointKeyFrameStatics_Vtbl,
    0xac727659_92a3_52ea_8949_b609e48c233d
);
impl windows_core::RuntimeType for IEasingPointKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEasingPointKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStatics";
}
pub trait IEasingPointKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEasingPointKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IEasingPointKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IEasingPointKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEasingPointKeyFrameStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEasingPointKeyFrameStatics,
                OFFSET,
            >(),
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEasingPointKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingPointKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEdgeUIThemeTransition,
    IEdgeUIThemeTransition_Vtbl,
    0x57089964_e358_5fe2_84e7_15e82bba9c06
);
impl windows_core::RuntimeType for IEdgeUIThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for IEdgeUIThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransition";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait IEdgeUIThemeTransition_Impl: windows_core::IUnknownImpl {
    fn Edge(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::EdgeTransitionLocation>;
    fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl IEdgeUIThemeTransition_Vtbl {
    pub const fn new<Identity: IEdgeUIThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Edge<
            Identity: IEdgeUIThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Controls::Primitives::EdgeTransitionLocation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEdgeUIThemeTransition_Impl::Edge(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEdge<
            Identity: IEdgeUIThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::Controls::Primitives::EdgeTransitionLocation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEdgeUIThemeTransition_Impl::SetEdge(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IEdgeUIThemeTransition, OFFSET>(
            ),
            Edge: Edge::<Identity, OFFSET>,
            SetEdge: SetEdge::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEdgeUIThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEdgeUIThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Edge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Edge: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetEdge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetEdge: usize,
}
windows_core::imp::define_interface!(
    IEdgeUIThemeTransitionStatics,
    IEdgeUIThemeTransitionStatics_Vtbl,
    0x316af8d4_d2a0_5d27_9af6_747797965d46
);
impl windows_core::RuntimeType for IEdgeUIThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEdgeUIThemeTransitionStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStatics";
}
pub trait IEdgeUIThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn EdgeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEdgeUIThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IEdgeUIThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EdgeProperty<
            Identity: IEdgeUIThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEdgeUIThemeTransitionStatics_Impl::EdgeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEdgeUIThemeTransitionStatics,
                OFFSET,
            >(),
            EdgeProperty: EdgeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEdgeUIThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEdgeUIThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EdgeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IElasticEase,
    IElasticEase_Vtbl,
    0x2b18d50b_4d34_509b_915c_61b1aa6f83d8
);
impl windows_core::RuntimeType for IElasticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IElasticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IElasticEase";
}
pub trait IElasticEase_Impl: windows_core::IUnknownImpl {
    fn Oscillations(&self) -> windows_core::Result<i32>;
    fn SetOscillations(&self, value: i32) -> windows_core::Result<()>;
    fn Springiness(&self) -> windows_core::Result<f64>;
    fn SetSpringiness(&self, value: f64) -> windows_core::Result<()>;
}
impl IElasticEase_Vtbl {
    pub const fn new<Identity: IElasticEase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Oscillations<Identity: IElasticEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEase_Impl::Oscillations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOscillations<
            Identity: IElasticEase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElasticEase_Impl::SetOscillations(this, value).into()
            }
        }
        unsafe extern "system" fn Springiness<Identity: IElasticEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEase_Impl::Springiness(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSpringiness<
            Identity: IElasticEase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElasticEase_Impl::SetSpringiness(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IElasticEase, OFFSET>(),
            Oscillations: Oscillations::<Identity, OFFSET>,
            SetOscillations: SetOscillations::<Identity, OFFSET>,
            Springiness: Springiness::<Identity, OFFSET>,
            SetSpringiness: SetSpringiness::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IElasticEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Oscillations:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetOscillations:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Springiness:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetSpringiness:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IElasticEaseStatics,
    IElasticEaseStatics_Vtbl,
    0x95fd9290_d279_5857_9f50_3f299a2d02f4
);
impl windows_core::RuntimeType for IElasticEaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IElasticEaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IElasticEaseStatics";
}
pub trait IElasticEaseStatics_Impl: windows_core::IUnknownImpl {
    fn OscillationsProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn SpringinessProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IElasticEaseStatics_Vtbl {
    pub const fn new<Identity: IElasticEaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OscillationsProperty<
            Identity: IElasticEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEaseStatics_Impl::OscillationsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SpringinessProperty<
            Identity: IElasticEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElasticEaseStatics_Impl::SpringinessProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IElasticEaseStatics, OFFSET>(),
            OscillationsProperty: OscillationsProperty::<Identity, OFFSET>,
            SpringinessProperty: SpringinessProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IElasticEaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OscillationsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SpringinessProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEntranceNavigationTransitionInfo,
    IEntranceNavigationTransitionInfo_Vtbl,
    0xdec74921_0ed7_54e1_8c1d_30b8cccc4b8d
);
impl windows_core::RuntimeType for IEntranceNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEntranceNavigationTransitionInfo {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfo";
}
pub trait IEntranceNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {}
impl IEntranceNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: IEntranceNavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEntranceNavigationTransitionInfo,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEntranceNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IEntranceNavigationTransitionInfoStatics,
    IEntranceNavigationTransitionInfoStatics_Vtbl,
    0xf1096de1_1f79_5d38_a4d6_16f3bdaab7f0
);
impl windows_core::RuntimeType for IEntranceNavigationTransitionInfoStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IEntranceNavigationTransitionInfoStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IEntranceNavigationTransitionInfoStatics_Impl: windows_core::IUnknownImpl {
    fn IsTargetElementProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetIsTargetElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
    ) -> windows_core::Result<bool>;
    fn SetIsTargetElement(
        &self,
        element: windows_core::Ref<'_, super::super::UIElement>,
        value: bool,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IEntranceNavigationTransitionInfoStatics_Vtbl {
    pub const fn new<
        Identity: IEntranceNavigationTransitionInfoStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsTargetElementProperty<
            Identity: IEntranceNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceNavigationTransitionInfoStatics_Impl::IsTargetElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsTargetElement<
            Identity: IEntranceNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceNavigationTransitionInfoStatics_Impl::GetIsTargetElement(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTargetElement<
            Identity: IEntranceNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEntranceNavigationTransitionInfoStatics_Impl::SetIsTargetElement(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEntranceNavigationTransitionInfoStatics,
                OFFSET,
            >(),
            IsTargetElementProperty: IsTargetElementProperty::<Identity, OFFSET>,
            GetIsTargetElement: GetIsTargetElement::<Identity, OFFSET>,
            SetIsTargetElement: SetIsTargetElement::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEntranceNavigationTransitionInfoStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceNavigationTransitionInfoStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsTargetElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetIsTargetElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetIsTargetElement: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsTargetElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsTargetElement: usize,
}
windows_core::imp::define_interface!(
    IEntranceThemeTransition,
    IEntranceThemeTransition_Vtbl,
    0x8eb681fa_1629_5e29_ac1e_70f3639329f8
);
impl windows_core::RuntimeType for IEntranceThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEntranceThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransition";
}
pub trait IEntranceThemeTransition_Impl: windows_core::IUnknownImpl {
    fn FromHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn FromVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn IsStaggeringEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl IEntranceThemeTransition_Vtbl {
    pub const fn new<Identity: IEntranceThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromHorizontalOffset<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransition_Impl::FromHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromHorizontalOffset<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEntranceThemeTransition_Impl::SetFromHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn FromVerticalOffset<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransition_Impl::FromVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromVerticalOffset<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEntranceThemeTransition_Impl::SetFromVerticalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn IsStaggeringEnabled<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransition_Impl::IsStaggeringEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStaggeringEnabled<
            Identity: IEntranceThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IEntranceThemeTransition_Impl::SetIsStaggeringEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEntranceThemeTransition,
                OFFSET,
            >(),
            FromHorizontalOffset: FromHorizontalOffset::<Identity, OFFSET>,
            SetFromHorizontalOffset: SetFromHorizontalOffset::<Identity, OFFSET>,
            FromVerticalOffset: FromVerticalOffset::<Identity, OFFSET>,
            SetFromVerticalOffset: SetFromVerticalOffset::<Identity, OFFSET>,
            IsStaggeringEnabled: IsStaggeringEnabled::<Identity, OFFSET>,
            SetIsStaggeringEnabled: SetIsStaggeringEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEntranceThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub IsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IEntranceThemeTransitionStatics,
    IEntranceThemeTransitionStatics_Vtbl,
    0xc99e5435_facc_50af_b96c_63b14fe7156e
);
impl windows_core::RuntimeType for IEntranceThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IEntranceThemeTransitionStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStatics";
}
pub trait IEntranceThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn FromHorizontalOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn IsStaggeringEnabledProperty(&self)
        -> windows_core::Result<super::super::DependencyProperty>;
}
impl IEntranceThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IEntranceThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn FromHorizontalOffsetProperty<
            Identity: IEntranceThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransitionStatics_Impl::FromHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromVerticalOffsetProperty<
            Identity: IEntranceThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransitionStatics_Impl::FromVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsStaggeringEnabledProperty<
            Identity: IEntranceThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IEntranceThemeTransitionStatics_Impl::IsStaggeringEnabledProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IEntranceThemeTransitionStatics,
                OFFSET,
            >(),
            FromHorizontalOffsetProperty: FromHorizontalOffsetProperty::<Identity, OFFSET>,
            FromVerticalOffsetProperty: FromVerticalOffsetProperty::<Identity, OFFSET>,
            IsStaggeringEnabledProperty: IsStaggeringEnabledProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IEntranceThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExponentialEase,
    IExponentialEase_Vtbl,
    0x4d289262_e832_5fbc_a98b_87a6ecb3b6cc
);
impl windows_core::RuntimeType for IExponentialEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExponentialEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IExponentialEase";
}
pub trait IExponentialEase_Impl: windows_core::IUnknownImpl {
    fn Exponent(&self) -> windows_core::Result<f64>;
    fn SetExponent(&self, value: f64) -> windows_core::Result<()>;
}
impl IExponentialEase_Vtbl {
    pub const fn new<Identity: IExponentialEase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Exponent<Identity: IExponentialEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExponentialEase_Impl::Exponent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExponent<
            Identity: IExponentialEase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IExponentialEase_Impl::SetExponent(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IExponentialEase, OFFSET>(),
            Exponent: Exponent::<Identity, OFFSET>,
            SetExponent: SetExponent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExponentialEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Exponent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetExponent:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExponentialEaseStatics,
    IExponentialEaseStatics_Vtbl,
    0x8394ab8f_ddf1_55d0_acf1_07fedd929bb5
);
impl windows_core::RuntimeType for IExponentialEaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExponentialEaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStatics";
}
pub trait IExponentialEaseStatics_Impl: windows_core::IUnknownImpl {
    fn ExponentProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IExponentialEaseStatics_Vtbl {
    pub const fn new<Identity: IExponentialEaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ExponentProperty<
            Identity: IExponentialEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExponentialEaseStatics_Impl::ExponentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IExponentialEaseStatics, OFFSET>(
            ),
            ExponentProperty: ExponentProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExponentialEaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExponentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFadeInThemeAnimation,
    IFadeInThemeAnimation_Vtbl,
    0x0dca074a_31cc_5e70_8b6b_8dbd7fff01f6
);
impl windows_core::RuntimeType for IFadeInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IFadeInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimation";
}
pub trait IFadeInThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IFadeInThemeAnimation_Vtbl {
    pub const fn new<Identity: IFadeInThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IFadeInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFadeInThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IFadeInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IFadeInThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IFadeInThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFadeInThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeInThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFadeInThemeAnimationStatics,
    IFadeInThemeAnimationStatics_Vtbl,
    0x5d74a6a6_92c6_5e49_865f_676087247179
);
impl windows_core::RuntimeType for IFadeInThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IFadeInThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStatics";
}
pub trait IFadeInThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IFadeInThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IFadeInThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IFadeInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFadeInThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IFadeInThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFadeInThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeInThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFadeOutThemeAnimation,
    IFadeOutThemeAnimation_Vtbl,
    0x114024d6_5d67_5c9c_83c5_54a8bd7b671a
);
impl windows_core::RuntimeType for IFadeOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IFadeOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimation";
}
pub trait IFadeOutThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IFadeOutThemeAnimation_Vtbl {
    pub const fn new<Identity: IFadeOutThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IFadeOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFadeOutThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IFadeOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IFadeOutThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IFadeOutThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFadeOutThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeOutThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFadeOutThemeAnimationStatics,
    IFadeOutThemeAnimationStatics_Vtbl,
    0x0277bea1_a0a5_5e26_9b56_6a4208862738
);
impl windows_core::RuntimeType for IFadeOutThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IFadeOutThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStatics";
}
pub trait IFadeOutThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IFadeOutThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IFadeOutThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IFadeOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFadeOutThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IFadeOutThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFadeOutThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeOutThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGravityConnectedAnimationConfiguration,
    IGravityConnectedAnimationConfiguration_Vtbl,
    0x04c8b276_cff3_5a55_9229_33dc66c99e20
);
impl windows_core::RuntimeType for IGravityConnectedAnimationConfiguration {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGravityConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfiguration";
}
pub trait IGravityConnectedAnimationConfiguration_Impl: windows_core::IUnknownImpl {
    fn IsShadowEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsShadowEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl IGravityConnectedAnimationConfiguration_Vtbl {
    pub const fn new<
        Identity: IGravityConnectedAnimationConfiguration_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsShadowEnabled<
            Identity: IGravityConnectedAnimationConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGravityConnectedAnimationConfiguration_Impl::IsShadowEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsShadowEnabled<
            Identity: IGravityConnectedAnimationConfiguration_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGravityConnectedAnimationConfiguration_Impl::SetIsShadowEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IGravityConnectedAnimationConfiguration,
                OFFSET,
            >(),
            IsShadowEnabled: IsShadowEnabled::<Identity, OFFSET>,
            SetIsShadowEnabled: SetIsShadowEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGravityConnectedAnimationConfiguration as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGravityConnectedAnimationConfiguration_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsShadowEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsShadowEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGravityConnectedAnimationConfigurationFactory,
    IGravityConnectedAnimationConfigurationFactory_Vtbl,
    0xbc7a71b5_7cda_5bb7_967e_d6a031285a9c
);
impl windows_core::RuntimeType for IGravityConnectedAnimationConfigurationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGravityConnectedAnimationConfigurationFactory {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationFactory";
}
pub trait IGravityConnectedAnimationConfigurationFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<GravityConnectedAnimationConfiguration>;
}
impl IGravityConnectedAnimationConfigurationFactory_Vtbl {
    pub const fn new<
        Identity: IGravityConnectedAnimationConfigurationFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IGravityConnectedAnimationConfigurationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGravityConnectedAnimationConfigurationFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IGravityConnectedAnimationConfigurationFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGravityConnectedAnimationConfigurationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGravityConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeySpline,
    IKeySpline_Vtbl,
    0x130d8b2b_0b52_5253_881b_36ab48592e6b
);
impl windows_core::RuntimeType for IKeySpline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeySpline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IKeySpline";
}
pub trait IKeySpline_Impl: windows_core::IUnknownImpl {
    fn ControlPoint1(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetControlPoint1(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
    fn ControlPoint2(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetControlPoint2(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
}
impl IKeySpline_Vtbl {
    pub const fn new<Identity: IKeySpline_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ControlPoint1<Identity: IKeySpline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeySpline_Impl::ControlPoint1(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetControlPoint1<
            Identity: IKeySpline_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeySpline_Impl::SetControlPoint1(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ControlPoint2<Identity: IKeySpline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeySpline_Impl::ControlPoint2(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetControlPoint2<
            Identity: IKeySpline_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IKeySpline_Impl::SetControlPoint2(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeySpline, OFFSET>(),
            ControlPoint1: ControlPoint1::<Identity, OFFSET>,
            SetControlPoint1: SetControlPoint1::<Identity, OFFSET>,
            ControlPoint2: ControlPoint2::<Identity, OFFSET>,
            SetControlPoint2: SetControlPoint2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeySpline as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeySpline_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ControlPoint1: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetControlPoint1: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub ControlPoint2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetControlPoint2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IKeyTimeHelper,
    IKeyTimeHelper_Vtbl,
    0xe354da44_1f24_59c6_bc5b_d6b1ba267e9c
);
impl windows_core::RuntimeType for IKeyTimeHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyTimeHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IKeyTimeHelper";
}
pub trait IKeyTimeHelper_Impl: windows_core::IUnknownImpl {}
impl IKeyTimeHelper_Vtbl {
    pub const fn new<Identity: IKeyTimeHelper_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyTimeHelper, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyTimeHelper as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyTimeHelper_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IKeyTimeHelperStatics,
    IKeyTimeHelperStatics_Vtbl,
    0xae5d22c9_0fdb_5823_8846_8a4d0b9eebfa
);
impl windows_core::RuntimeType for IKeyTimeHelperStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKeyTimeHelperStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IKeyTimeHelperStatics";
}
pub trait IKeyTimeHelperStatics_Impl: windows_core::IUnknownImpl {
    fn FromTimeSpan(
        &self,
        timeSpan: &windows::Foundation::TimeSpan,
    ) -> windows_core::Result<KeyTime>;
}
impl IKeyTimeHelperStatics_Vtbl {
    pub const fn new<Identity: IKeyTimeHelperStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromTimeSpan<
            Identity: IKeyTimeHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timespan: windows::Foundation::TimeSpan,
            result__: *mut KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKeyTimeHelperStatics_Impl::FromTimeSpan(
                    this,
                    core::mem::transmute(&timespan),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IKeyTimeHelperStatics, OFFSET>(
            ),
            FromTimeSpan: FromTimeSpan::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKeyTimeHelperStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyTimeHelperStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromTimeSpan: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
        *mut KeyTime,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ILinearColorKeyFrame,
    ILinearColorKeyFrame_Vtbl,
    0x0bce4cd6_3a80_5f2f_932e_619a8546d0bd
);
impl windows_core::RuntimeType for ILinearColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILinearColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrame";
}
pub trait ILinearColorKeyFrame_Impl: windows_core::IUnknownImpl {}
impl ILinearColorKeyFrame_Vtbl {
    pub const fn new<Identity: ILinearColorKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILinearColorKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILinearColorKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearColorKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ILinearDoubleKeyFrame,
    ILinearDoubleKeyFrame_Vtbl,
    0x38a635b9_f613_55e0_aaec_9d4e097eff91
);
impl windows_core::RuntimeType for ILinearDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILinearDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrame";
}
pub trait ILinearDoubleKeyFrame_Impl: windows_core::IUnknownImpl {}
impl ILinearDoubleKeyFrame_Vtbl {
    pub const fn new<Identity: ILinearDoubleKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILinearDoubleKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILinearDoubleKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearDoubleKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ILinearPointKeyFrame,
    ILinearPointKeyFrame_Vtbl,
    0x4ec22493_bacb_5105_ac16_8ea5418ab76e
);
impl windows_core::RuntimeType for ILinearPointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILinearPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrame";
}
pub trait ILinearPointKeyFrame_Impl: windows_core::IUnknownImpl {}
impl ILinearPointKeyFrame_Vtbl {
    pub const fn new<Identity: ILinearPointKeyFrame_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILinearPointKeyFrame, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILinearPointKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearPointKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    INavigationThemeTransition,
    INavigationThemeTransition_Vtbl,
    0xd7cfbd3b_0d27_5ea1_beb7_f6b847520dc6
);
impl windows_core::RuntimeType for INavigationThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransition";
}
pub trait INavigationThemeTransition_Impl: windows_core::IUnknownImpl {
    fn DefaultNavigationTransitionInfo(&self) -> windows_core::Result<NavigationTransitionInfo>;
    fn SetDefaultNavigationTransitionInfo(
        &self,
        value: windows_core::Ref<'_, NavigationTransitionInfo>,
    ) -> windows_core::Result<()>;
}
impl INavigationThemeTransition_Vtbl {
    pub const fn new<Identity: INavigationThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DefaultNavigationTransitionInfo<
            Identity: INavigationThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationThemeTransition_Impl::DefaultNavigationTransitionInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDefaultNavigationTransitionInfo<
            Identity: INavigationThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INavigationThemeTransition_Impl::SetDefaultNavigationTransitionInfo(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationThemeTransition,
                OFFSET,
            >(),
            DefaultNavigationTransitionInfo: DefaultNavigationTransitionInfo::<Identity, OFFSET>,
            SetDefaultNavigationTransitionInfo: SetDefaultNavigationTransitionInfo::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DefaultNavigationTransitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetDefaultNavigationTransitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INavigationThemeTransitionStatics,
    INavigationThemeTransitionStatics_Vtbl,
    0x78323eff_d543_551d_b2c7_94e93a16065b
);
impl windows_core::RuntimeType for INavigationThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationThemeTransitionStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStatics";
}
pub trait INavigationThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn DefaultNavigationTransitionInfoProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl INavigationThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: INavigationThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn DefaultNavigationTransitionInfoProperty<
            Identity: INavigationThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationThemeTransitionStatics_Impl:: DefaultNavigationTransitionInfoProperty ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationThemeTransitionStatics,
                OFFSET,
            >(),
            DefaultNavigationTransitionInfoProperty: DefaultNavigationTransitionInfoProperty::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DefaultNavigationTransitionInfoProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INavigationTransitionInfo,
    INavigationTransitionInfo_Vtbl,
    0x25bb17fb_6e15_514e_b278_197537a4d990
);
impl windows_core::RuntimeType for INavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfo";
}
pub trait INavigationTransitionInfo_Impl: windows_core::IUnknownImpl {}
impl INavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: INavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationTransitionInfo,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    INavigationTransitionInfoFactory,
    INavigationTransitionInfoFactory_Vtbl,
    0xc514b6ff_f6ed_572e_8392_3ea17bc7d4c4
);
impl windows_core::RuntimeType for INavigationTransitionInfoFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationTransitionInfoFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactory";
}
pub trait INavigationTransitionInfoFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<NavigationTransitionInfo>;
}
impl INavigationTransitionInfoFactory_Vtbl {
    pub const fn new<Identity: INavigationTransitionInfoFactory_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateInstance<
            Identity: INavigationTransitionInfoFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationTransitionInfoFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationTransitionInfoFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationTransitionInfoFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfoFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INavigationTransitionInfoOverrides,
    INavigationTransitionInfoOverrides_Vtbl,
    0x3d6af190_5a56_513d_aff9_631925d0fa43
);
impl windows_core::RuntimeType for INavigationTransitionInfoOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationTransitionInfoOverrides {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides";
}
pub trait INavigationTransitionInfoOverrides_Impl: windows_core::IUnknownImpl {
    fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetNavigationStateCore(
        &self,
        navigationState: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl INavigationTransitionInfoOverrides_Vtbl {
    pub const fn new<Identity: INavigationTransitionInfoOverrides_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn GetNavigationStateCore<
            Identity: INavigationTransitionInfoOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationTransitionInfoOverrides_Impl::GetNavigationStateCore(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNavigationStateCore<
            Identity: INavigationTransitionInfoOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            navigationstate: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INavigationTransitionInfoOverrides_Impl::SetNavigationStateCore(
                    this,
                    core::mem::transmute(&navigationstate),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationTransitionInfoOverrides,
                OFFSET,
            >(),
            GetNavigationStateCore: GetNavigationStateCore::<Identity, OFFSET>,
            SetNavigationStateCore: SetNavigationStateCore::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationTransitionInfoOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfoOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetNavigationStateCore: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNavigationStateCore: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectAnimationUsingKeyFrames,
    IObjectAnimationUsingKeyFrames_Vtbl,
    0xaa08dc4c_0b03_5c0a_b084_d95d272b2f0d
);
impl windows_core::RuntimeType for IObjectAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IObjectAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFrames";
}
pub trait IObjectAnimationUsingKeyFrames_Impl: windows_core::IUnknownImpl {
    fn KeyFrames(&self) -> windows_core::Result<ObjectKeyFrameCollection>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IObjectAnimationUsingKeyFrames_Vtbl {
    pub const fn new<Identity: IObjectAnimationUsingKeyFrames_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeyFrames<
            Identity: IObjectAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectAnimationUsingKeyFrames_Impl::KeyFrames(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IObjectAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectAnimationUsingKeyFrames_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IObjectAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IObjectAnimationUsingKeyFrames_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IObjectAnimationUsingKeyFrames,
                OFFSET,
            >(),
            KeyFrames: KeyFrames::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectAnimationUsingKeyFrames as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectAnimationUsingKeyFrames_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectAnimationUsingKeyFramesStatics,
    IObjectAnimationUsingKeyFramesStatics_Vtbl,
    0x411a09b0_9ab4_54b9_99b9_54f955a6754e
);
impl windows_core::RuntimeType for IObjectAnimationUsingKeyFramesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IObjectAnimationUsingKeyFramesStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStatics";
}
pub trait IObjectAnimationUsingKeyFramesStatics_Impl: windows_core::IUnknownImpl {
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IObjectAnimationUsingKeyFramesStatics_Vtbl {
    pub const fn new<Identity: IObjectAnimationUsingKeyFramesStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IObjectAnimationUsingKeyFramesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectAnimationUsingKeyFramesStatics_Impl::EnableDependentAnimationProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IObjectAnimationUsingKeyFramesStatics,
                OFFSET,
            >(),
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectAnimationUsingKeyFramesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectKeyFrame,
    IObjectKeyFrame_Vtbl,
    0xc5a9f65b_fc69_5a88_a797_34f46d761381
);
impl windows_core::RuntimeType for IObjectKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrame";
}
pub trait IObjectKeyFrame_Impl: windows_core::IUnknownImpl {
    fn Value(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetValue(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn KeyTime(&self) -> windows_core::Result<KeyTime>;
    fn SetKeyTime(&self, value: &KeyTime) -> windows_core::Result<()>;
}
impl IObjectKeyFrame_Vtbl {
    pub const fn new<Identity: IObjectKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Value<Identity: IObjectKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectKeyFrame_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: IObjectKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IObjectKeyFrame_Impl::SetValue(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn KeyTime<Identity: IObjectKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectKeyFrame_Impl::KeyTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTime<
            Identity: IObjectKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IObjectKeyFrame_Impl::SetKeyTime(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IObjectKeyFrame, OFFSET>(),
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            KeyTime: KeyTime::<Identity, OFFSET>,
            SetKeyTime: SetKeyTime::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut KeyTime) -> windows_core::HRESULT,
    pub SetKeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, KeyTime) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectKeyFrameFactory,
    IObjectKeyFrameFactory_Vtbl,
    0xdc59da6e_82b9_55f7_a358_ba2a07665aa9
);
impl windows_core::RuntimeType for IObjectKeyFrameFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IObjectKeyFrameFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactory";
}
pub trait IObjectKeyFrameFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<ObjectKeyFrame>;
}
impl IObjectKeyFrameFactory_Vtbl {
    pub const fn new<Identity: IObjectKeyFrameFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IObjectKeyFrameFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectKeyFrameFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IObjectKeyFrameFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectKeyFrameFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrameFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectKeyFrameStatics,
    IObjectKeyFrameStatics_Vtbl,
    0x39e59ceb_2859_5a5f_acd8_bc491d49c4b6
);
impl windows_core::RuntimeType for IObjectKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IObjectKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStatics";
}
pub trait IObjectKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn ValueProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn KeyTimeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IObjectKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IObjectKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ValueProperty<
            Identity: IObjectKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectKeyFrameStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTimeProperty<
            Identity: IObjectKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectKeyFrameStatics_Impl::KeyTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IObjectKeyFrameStatics, OFFSET>(
            ),
            ValueProperty: ValueProperty::<Identity, OFFSET>,
            KeyTimeProperty: KeyTimeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPaneThemeTransition,
    IPaneThemeTransition_Vtbl,
    0x321bcd80_157c_5e10_b0fe_6440bd92529a
);
impl windows_core::RuntimeType for IPaneThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for IPaneThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransition";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait IPaneThemeTransition_Impl: windows_core::IUnknownImpl {
    fn Edge(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::EdgeTransitionLocation>;
    fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl IPaneThemeTransition_Vtbl {
    pub const fn new<Identity: IPaneThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Edge<Identity: IPaneThemeTransition_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Controls::Primitives::EdgeTransitionLocation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPaneThemeTransition_Impl::Edge(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEdge<
            Identity: IPaneThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::Controls::Primitives::EdgeTransitionLocation,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPaneThemeTransition_Impl::SetEdge(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPaneThemeTransition, OFFSET>(
            ),
            Edge: Edge::<Identity, OFFSET>,
            SetEdge: SetEdge::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPaneThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPaneThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Edge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Edge: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetEdge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetEdge: usize,
}
windows_core::imp::define_interface!(
    IPaneThemeTransitionStatics,
    IPaneThemeTransitionStatics_Vtbl,
    0x47e01752_5264_5fb1_8946_ab49fe6af8fd
);
impl windows_core::RuntimeType for IPaneThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPaneThemeTransitionStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStatics";
}
pub trait IPaneThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn EdgeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPaneThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IPaneThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn EdgeProperty<
            Identity: IPaneThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPaneThemeTransitionStatics_Impl::EdgeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPaneThemeTransitionStatics,
                OFFSET,
            >(),
            EdgeProperty: EdgeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPaneThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPaneThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EdgeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointAnimation,
    IPointAnimation_Vtbl,
    0xa0737cc4_2eab_5c13_a5d7_78361df1000e
);
impl windows_core::RuntimeType for IPointAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointAnimation";
}
pub trait IPointAnimation_Impl: windows_core::IUnknownImpl {
    fn From(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>>;
    fn SetFrom(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::Foundation::Point>>,
    ) -> windows_core::Result<()>;
    fn To(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>>;
    fn SetTo(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::Foundation::Point>>,
    ) -> windows_core::Result<()>;
    fn By(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>>;
    fn SetBy(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<windows::Foundation::Point>>,
    ) -> windows_core::Result<()>;
    fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase>;
    fn SetEasingFunction(
        &self,
        value: windows_core::Ref<'_, EasingFunctionBase>,
    ) -> windows_core::Result<()>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IPointAnimation_Vtbl {
    pub const fn new<Identity: IPointAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn From<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimation_Impl::From(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFrom<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimation_Impl::SetFrom(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn To<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimation_Impl::To(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTo<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimation_Impl::SetTo(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn By<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimation_Impl::By(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBy<Identity: IPointAnimation_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimation_Impl::SetBy(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn EasingFunction<
            Identity: IPointAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimation_Impl::EasingFunction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEasingFunction<
            Identity: IPointAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimation_Impl::SetEasingFunction(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IPointAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimation_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IPointAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimation_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointAnimation, OFFSET>(),
            From: From::<Identity, OFFSET>,
            SetFrom: SetFrom::<Identity, OFFSET>,
            To: To::<Identity, OFFSET>,
            SetTo: SetTo::<Identity, OFFSET>,
            By: By::<Identity, OFFSET>,
            SetBy: SetBy::<Identity, OFFSET>,
            EasingFunction: EasingFunction::<Identity, OFFSET>,
            SetEasingFunction: SetEasingFunction::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub To: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub By: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointAnimationStatics,
    IPointAnimationStatics_Vtbl,
    0x71cfb43b_bada_554b_8fca_b558d623bbc0
);
impl windows_core::RuntimeType for IPointAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointAnimationStatics";
}
pub trait IPointAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn FromProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ByProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EasingFunctionProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPointAnimationStatics_Vtbl {
    pub const fn new<Identity: IPointAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromProperty<
            Identity: IPointAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationStatics_Impl::FromProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToProperty<
            Identity: IPointAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationStatics_Impl::ToProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ByProperty<
            Identity: IPointAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationStatics_Impl::ByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EasingFunctionProperty<
            Identity: IPointAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationStatics_Impl::EasingFunctionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IPointAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationStatics_Impl::EnableDependentAnimationProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointAnimationStatics, OFFSET>(
            ),
            FromProperty: FromProperty::<Identity, OFFSET>,
            ToProperty: ToProperty::<Identity, OFFSET>,
            ByProperty: ByProperty::<Identity, OFFSET>,
            EasingFunctionProperty: EasingFunctionProperty::<Identity, OFFSET>,
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointAnimationUsingKeyFrames,
    IPointAnimationUsingKeyFrames_Vtbl,
    0xbdd63992_df13_5514_8611_4952f722f6d0
);
impl windows_core::RuntimeType for IPointAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFrames";
}
pub trait IPointAnimationUsingKeyFrames_Impl: windows_core::IUnknownImpl {
    fn KeyFrames(&self) -> windows_core::Result<PointKeyFrameCollection>;
    fn EnableDependentAnimation(&self) -> windows_core::Result<bool>;
    fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()>;
}
impl IPointAnimationUsingKeyFrames_Vtbl {
    pub const fn new<Identity: IPointAnimationUsingKeyFrames_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeyFrames<
            Identity: IPointAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationUsingKeyFrames_Impl::KeyFrames(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnableDependentAnimation<
            Identity: IPointAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationUsingKeyFrames_Impl::EnableDependentAnimation(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEnableDependentAnimation<
            Identity: IPointAnimationUsingKeyFrames_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointAnimationUsingKeyFrames_Impl::SetEnableDependentAnimation(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointAnimationUsingKeyFrames,
                OFFSET,
            >(),
            KeyFrames: KeyFrames::<Identity, OFFSET>,
            EnableDependentAnimation: EnableDependentAnimation::<Identity, OFFSET>,
            SetEnableDependentAnimation: SetEnableDependentAnimation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointAnimationUsingKeyFrames as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationUsingKeyFrames_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetEnableDependentAnimation:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointAnimationUsingKeyFramesStatics,
    IPointAnimationUsingKeyFramesStatics_Vtbl,
    0x04152b3b_f0da_5b28_877d_9ac96d334a77
);
impl windows_core::RuntimeType for IPointAnimationUsingKeyFramesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointAnimationUsingKeyFramesStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStatics";
}
pub trait IPointAnimationUsingKeyFramesStatics_Impl: windows_core::IUnknownImpl {
    fn EnableDependentAnimationProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPointAnimationUsingKeyFramesStatics_Vtbl {
    pub const fn new<Identity: IPointAnimationUsingKeyFramesStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn EnableDependentAnimationProperty<
            Identity: IPointAnimationUsingKeyFramesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointAnimationUsingKeyFramesStatics_Impl::EnableDependentAnimationProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointAnimationUsingKeyFramesStatics,
                OFFSET,
            >(),
            EnableDependentAnimationProperty: EnableDependentAnimationProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointAnimationUsingKeyFramesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointKeyFrame,
    IPointKeyFrame_Vtbl,
    0x59d5c07d_a3a7_5450_9dfb_4b7e77d58f93
);
impl windows_core::RuntimeType for IPointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointKeyFrame";
}
pub trait IPointKeyFrame_Impl: windows_core::IUnknownImpl {
    fn Value(&self) -> windows_core::Result<windows::Foundation::Point>;
    fn SetValue(&self, value: &windows::Foundation::Point) -> windows_core::Result<()>;
    fn KeyTime(&self) -> windows_core::Result<KeyTime>;
    fn SetKeyTime(&self, value: &KeyTime) -> windows_core::Result<()>;
}
impl IPointKeyFrame_Vtbl {
    pub const fn new<Identity: IPointKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Value<Identity: IPointKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointKeyFrame_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: IPointKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointKeyFrame_Impl::SetValue(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn KeyTime<Identity: IPointKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointKeyFrame_Impl::KeyTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTime<Identity: IPointKeyFrame_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: KeyTime,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointKeyFrame_Impl::SetKeyTime(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointKeyFrame, OFFSET>(),
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
            KeyTime: KeyTime::<Identity, OFFSET>,
            SetKeyTime: SetKeyTime::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub KeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut KeyTime) -> windows_core::HRESULT,
    pub SetKeyTime:
        unsafe extern "system" fn(*mut core::ffi::c_void, KeyTime) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointKeyFrameFactory,
    IPointKeyFrameFactory_Vtbl,
    0xc52ee293_f10e_5252_bc08_a28659740f0e
);
impl windows_core::RuntimeType for IPointKeyFrameFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointKeyFrameFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactory";
}
pub trait IPointKeyFrameFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<PointKeyFrame>;
}
impl IPointKeyFrameFactory_Vtbl {
    pub const fn new<Identity: IPointKeyFrameFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IPointKeyFrameFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointKeyFrameFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointKeyFrameFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointKeyFrameFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrameFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointKeyFrameStatics,
    IPointKeyFrameStatics_Vtbl,
    0x96cd72fd_d834_5b23_9a17_1548961dc348
);
impl windows_core::RuntimeType for IPointKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStatics";
}
pub trait IPointKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn ValueProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn KeyTimeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPointKeyFrameStatics_Vtbl {
    pub const fn new<Identity: IPointKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ValueProperty<
            Identity: IPointKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointKeyFrameStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTimeProperty<
            Identity: IPointKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointKeyFrameStatics_Impl::KeyTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPointKeyFrameStatics, OFFSET>(
            ),
            ValueProperty: ValueProperty::<Identity, OFFSET>,
            KeyTimeProperty: KeyTimeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointerDownThemeAnimation,
    IPointerDownThemeAnimation_Vtbl,
    0xabdd1acc_40df_595d_be68_0362fe681b91
);
impl windows_core::RuntimeType for IPointerDownThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointerDownThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimation";
}
pub trait IPointerDownThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IPointerDownThemeAnimation_Vtbl {
    pub const fn new<Identity: IPointerDownThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IPointerDownThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointerDownThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IPointerDownThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointerDownThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointerDownThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointerDownThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerDownThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointerDownThemeAnimationStatics,
    IPointerDownThemeAnimationStatics_Vtbl,
    0x12268b39_fb7d_53da_8ccc_5967dc06bce9
);
impl windows_core::RuntimeType for IPointerDownThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointerDownThemeAnimationStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStatics";
}
pub trait IPointerDownThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPointerDownThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IPointerDownThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IPointerDownThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointerDownThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointerDownThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointerDownThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerDownThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointerUpThemeAnimation,
    IPointerUpThemeAnimation_Vtbl,
    0x94896d1c_c938_5d68_84da_552bde815810
);
impl windows_core::RuntimeType for IPointerUpThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointerUpThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimation";
}
pub trait IPointerUpThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IPointerUpThemeAnimation_Vtbl {
    pub const fn new<Identity: IPointerUpThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IPointerUpThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointerUpThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IPointerUpThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPointerUpThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointerUpThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointerUpThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerUpThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPointerUpThemeAnimationStatics,
    IPointerUpThemeAnimationStatics_Vtbl,
    0x51a3117e_c6fa_5dc5_8db8_73f060003ae4
);
impl windows_core::RuntimeType for IPointerUpThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPointerUpThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStatics";
}
pub trait IPointerUpThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPointerUpThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IPointerUpThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IPointerUpThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPointerUpThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPointerUpThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPointerUpThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerUpThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopInThemeAnimation,
    IPopInThemeAnimation_Vtbl,
    0x20136388_b4e4_5cbb_9cb2_df2ea7e6c44b
);
impl windows_core::RuntimeType for IPopInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimation";
}
pub trait IPopInThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FromHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn FromVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl IPopInThemeAnimation_Vtbl {
    pub const fn new<Identity: IPopInThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopInThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FromHorizontalOffset<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimation_Impl::FromHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromHorizontalOffset<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopInThemeAnimation_Impl::SetFromHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn FromVerticalOffset<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimation_Impl::FromVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromVerticalOffset<
            Identity: IPopInThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopInThemeAnimation_Impl::SetFromVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPopInThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            FromHorizontalOffset: FromHorizontalOffset::<Identity, OFFSET>,
            SetFromHorizontalOffset: SetFromHorizontalOffset::<Identity, OFFSET>,
            FromVerticalOffset: FromVerticalOffset::<Identity, OFFSET>,
            SetFromVerticalOffset: SetFromVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopInThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopInThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopInThemeAnimationStatics,
    IPopInThemeAnimationStatics_Vtbl,
    0x8c9378a9_d276_5a1d_8188_f48f07840a16
);
impl windows_core::RuntimeType for IPopInThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopInThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStatics";
}
pub trait IPopInThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromHorizontalOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPopInThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IPopInThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IPopInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromHorizontalOffsetProperty<
            Identity: IPopInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimationStatics_Impl::FromHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromVerticalOffsetProperty<
            Identity: IPopInThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopInThemeAnimationStatics_Impl::FromVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPopInThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            FromHorizontalOffsetProperty: FromHorizontalOffsetProperty::<Identity, OFFSET>,
            FromVerticalOffsetProperty: FromVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopInThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopInThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopOutThemeAnimation,
    IPopOutThemeAnimation_Vtbl,
    0x1bb20dd3_5648_541a_a0c9_37a955db10a6
);
impl windows_core::RuntimeType for IPopOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimation";
}
pub trait IPopOutThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IPopOutThemeAnimation_Vtbl {
    pub const fn new<Identity: IPopOutThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IPopOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopOutThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IPopOutThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopOutThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPopOutThemeAnimation, OFFSET>(
            ),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopOutThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopOutThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopOutThemeAnimationStatics,
    IPopOutThemeAnimationStatics_Vtbl,
    0x3f569f96_367e_595c_9732_2fb919388d84
);
impl windows_core::RuntimeType for IPopOutThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopOutThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStatics";
}
pub trait IPopOutThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPopOutThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IPopOutThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IPopOutThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopOutThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPopOutThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopOutThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopOutThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopupThemeTransition,
    IPopupThemeTransition_Vtbl,
    0xe1fa6b8a_add3_5299_a000_121d6dbacc80
);
impl windows_core::RuntimeType for IPopupThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopupThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransition";
}
pub trait IPopupThemeTransition_Impl: windows_core::IUnknownImpl {
    fn FromHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn FromVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl IPopupThemeTransition_Vtbl {
    pub const fn new<Identity: IPopupThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromHorizontalOffset<
            Identity: IPopupThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopupThemeTransition_Impl::FromHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromHorizontalOffset<
            Identity: IPopupThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopupThemeTransition_Impl::SetFromHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn FromVerticalOffset<
            Identity: IPopupThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopupThemeTransition_Impl::FromVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromVerticalOffset<
            Identity: IPopupThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPopupThemeTransition_Impl::SetFromVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPopupThemeTransition, OFFSET>(
            ),
            FromHorizontalOffset: FromHorizontalOffset::<Identity, OFFSET>,
            SetFromHorizontalOffset: SetFromHorizontalOffset::<Identity, OFFSET>,
            FromVerticalOffset: FromVerticalOffset::<Identity, OFFSET>,
            SetFromVerticalOffset: SetFromVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopupThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopupThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPopupThemeTransitionStatics,
    IPopupThemeTransitionStatics_Vtbl,
    0x538b2114_415c_5f99_b74d_a85966dacc54
);
impl windows_core::RuntimeType for IPopupThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPopupThemeTransitionStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStatics";
}
pub trait IPopupThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn FromHorizontalOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPopupThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IPopupThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FromHorizontalOffsetProperty<
            Identity: IPopupThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopupThemeTransitionStatics_Impl::FromHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromVerticalOffsetProperty<
            Identity: IPopupThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPopupThemeTransitionStatics_Impl::FromVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPopupThemeTransitionStatics,
                OFFSET,
            >(),
            FromHorizontalOffsetProperty: FromHorizontalOffsetProperty::<Identity, OFFSET>,
            FromVerticalOffsetProperty: FromVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPopupThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopupThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPowerEase,
    IPowerEase_Vtbl,
    0x372dfad0_5177_5df9_8e1e_920962468714
);
impl windows_core::RuntimeType for IPowerEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPowerEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPowerEase";
}
pub trait IPowerEase_Impl: windows_core::IUnknownImpl {
    fn Power(&self) -> windows_core::Result<f64>;
    fn SetPower(&self, value: f64) -> windows_core::Result<()>;
}
impl IPowerEase_Vtbl {
    pub const fn new<Identity: IPowerEase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Power<Identity: IPowerEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPowerEase_Impl::Power(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPower<Identity: IPowerEase_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPowerEase_Impl::SetPower(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPowerEase, OFFSET>(),
            Power: Power::<Identity, OFFSET>,
            SetPower: SetPower::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPowerEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Power: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetPower: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPowerEaseStatics,
    IPowerEaseStatics_Vtbl,
    0x8eb72edb_3e7e_5d40_928b_4505d57c21ce
);
impl windows_core::RuntimeType for IPowerEaseStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPowerEaseStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IPowerEaseStatics";
}
pub trait IPowerEaseStatics_Impl: windows_core::IUnknownImpl {
    fn PowerProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPowerEaseStatics_Vtbl {
    pub const fn new<Identity: IPowerEaseStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn PowerProperty<
            Identity: IPowerEaseStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPowerEaseStatics_Impl::PowerProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPowerEaseStatics, OFFSET>(),
            PowerProperty: PowerProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPowerEaseStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEaseStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub PowerProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IQuadraticEase,
    IQuadraticEase_Vtbl,
    0xdb85fda1_03b7_57cd_a1ef_8855cbf62191
);
impl windows_core::RuntimeType for IQuadraticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IQuadraticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IQuadraticEase";
}
pub trait IQuadraticEase_Impl: windows_core::IUnknownImpl {}
impl IQuadraticEase_Vtbl {
    pub const fn new<Identity: IQuadraticEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IQuadraticEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IQuadraticEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuadraticEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IQuarticEase,
    IQuarticEase_Vtbl,
    0x48215273_05f1_58aa_bade_0b71d7bd0484
);
impl windows_core::RuntimeType for IQuarticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IQuarticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IQuarticEase";
}
pub trait IQuarticEase_Impl: windows_core::IUnknownImpl {}
impl IQuarticEase_Vtbl {
    pub const fn new<Identity: IQuarticEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IQuarticEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IQuarticEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuarticEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IQuinticEase,
    IQuinticEase_Vtbl,
    0xdc2f05d5_a3ac_5dce_9b85_753a0c800fc2
);
impl windows_core::RuntimeType for IQuinticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IQuinticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IQuinticEase";
}
pub trait IQuinticEase_Impl: windows_core::IUnknownImpl {}
impl IQuinticEase_Vtbl {
    pub const fn new<Identity: IQuinticEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IQuinticEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IQuinticEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuinticEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IReorderThemeTransition,
    IReorderThemeTransition_Vtbl,
    0x0d5a0874_1df5_5379_b626_74721759438a
);
impl windows_core::RuntimeType for IReorderThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IReorderThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransition";
}
pub trait IReorderThemeTransition_Impl: windows_core::IUnknownImpl {}
impl IReorderThemeTransition_Vtbl {
    pub const fn new<Identity: IReorderThemeTransition_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IReorderThemeTransition, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IReorderThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IReorderThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IRepeatBehaviorHelper,
    IRepeatBehaviorHelper_Vtbl,
    0x4643f139_ffef_5c6a_8de6_142b41cd51a5
);
impl windows_core::RuntimeType for IRepeatBehaviorHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepeatBehaviorHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IRepeatBehaviorHelper";
}
pub trait IRepeatBehaviorHelper_Impl: windows_core::IUnknownImpl {}
impl IRepeatBehaviorHelper_Vtbl {
    pub const fn new<Identity: IRepeatBehaviorHelper_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRepeatBehaviorHelper, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepeatBehaviorHelper as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepeatBehaviorHelper_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IRepeatBehaviorHelperStatics,
    IRepeatBehaviorHelperStatics_Vtbl,
    0xc66d4425_6461_5189_b17d_cca0cca34ca0
);
impl windows_core::RuntimeType for IRepeatBehaviorHelperStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepeatBehaviorHelperStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IRepeatBehaviorHelperStatics";
}
pub trait IRepeatBehaviorHelperStatics_Impl: windows_core::IUnknownImpl {
    fn Forever(&self) -> windows_core::Result<RepeatBehavior>;
    fn FromCount(&self, count: f64) -> windows_core::Result<RepeatBehavior>;
    fn FromDuration(
        &self,
        duration: &windows::Foundation::TimeSpan,
    ) -> windows_core::Result<RepeatBehavior>;
    fn GetHasCount(&self, target: &RepeatBehavior) -> windows_core::Result<bool>;
    fn GetHasDuration(&self, target: &RepeatBehavior) -> windows_core::Result<bool>;
    fn Equals(&self, target: &RepeatBehavior, value: &RepeatBehavior)
        -> windows_core::Result<bool>;
}
impl IRepeatBehaviorHelperStatics_Vtbl {
    pub const fn new<Identity: IRepeatBehaviorHelperStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Forever<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut RepeatBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::Forever(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromCount<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: f64,
            result__: *mut RepeatBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::FromCount(this, count) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromDuration<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            duration: windows::Foundation::TimeSpan,
            result__: *mut RepeatBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::FromDuration(
                    this,
                    core::mem::transmute(&duration),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHasCount<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: RepeatBehavior,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::GetHasCount(
                    this,
                    core::mem::transmute(&target),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHasDuration<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: RepeatBehavior,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::GetHasDuration(
                    this,
                    core::mem::transmute(&target),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Equals<
            Identity: IRepeatBehaviorHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: RepeatBehavior,
            value: RepeatBehavior,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepeatBehaviorHelperStatics_Impl::Equals(
                    this,
                    core::mem::transmute(&target),
                    core::mem::transmute(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRepeatBehaviorHelperStatics,
                OFFSET,
            >(),
            Forever: Forever::<Identity, OFFSET>,
            FromCount: FromCount::<Identity, OFFSET>,
            FromDuration: FromDuration::<Identity, OFFSET>,
            GetHasCount: GetHasCount::<Identity, OFFSET>,
            GetHasDuration: GetHasDuration::<Identity, OFFSET>,
            Equals: Equals::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepeatBehaviorHelperStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepeatBehaviorHelperStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Forever: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut RepeatBehavior,
    ) -> windows_core::HRESULT,
    pub FromCount: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f64,
        *mut RepeatBehavior,
    ) -> windows_core::HRESULT,
    pub FromDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
        *mut RepeatBehavior,
    ) -> windows_core::HRESULT,
    pub GetHasCount: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        RepeatBehavior,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub GetHasDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        RepeatBehavior,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub Equals: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        RepeatBehavior,
        RepeatBehavior,
        *mut bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRepositionThemeAnimation,
    IRepositionThemeAnimation_Vtbl,
    0x36f7e025_23c1_53de_8df9_7dc1e9c788fd
);
impl windows_core::RuntimeType for IRepositionThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepositionThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimation";
}
pub trait IRepositionThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FromHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn FromVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl IRepositionThemeAnimation_Vtbl {
    pub const fn new<Identity: IRepositionThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRepositionThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn FromHorizontalOffset<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimation_Impl::FromHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromHorizontalOffset<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRepositionThemeAnimation_Impl::SetFromHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn FromVerticalOffset<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimation_Impl::FromVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromVerticalOffset<
            Identity: IRepositionThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRepositionThemeAnimation_Impl::SetFromVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRepositionThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            FromHorizontalOffset: FromHorizontalOffset::<Identity, OFFSET>,
            SetFromHorizontalOffset: SetFromHorizontalOffset::<Identity, OFFSET>,
            FromVerticalOffset: FromVerticalOffset::<Identity, OFFSET>,
            SetFromVerticalOffset: SetFromVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepositionThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRepositionThemeAnimationStatics,
    IRepositionThemeAnimationStatics_Vtbl,
    0xc04118de_aff5_5fa9_aee7_94a621c82618
);
impl windows_core::RuntimeType for IRepositionThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepositionThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStatics";
}
pub trait IRepositionThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromHorizontalOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IRepositionThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: IRepositionThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn TargetNameProperty<
            Identity: IRepositionThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromHorizontalOffsetProperty<
            Identity: IRepositionThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimationStatics_Impl::FromHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromVerticalOffsetProperty<
            Identity: IRepositionThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeAnimationStatics_Impl::FromVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRepositionThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            FromHorizontalOffsetProperty: FromHorizontalOffsetProperty::<Identity, OFFSET>,
            FromVerticalOffsetProperty: FromVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepositionThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRepositionThemeTransition,
    IRepositionThemeTransition_Vtbl,
    0x7728e3f0_24b1_5484_824a_c0b41c2745d5
);
impl windows_core::RuntimeType for IRepositionThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepositionThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransition";
}
pub trait IRepositionThemeTransition_Impl: windows_core::IUnknownImpl {
    fn IsStaggeringEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()>;
}
impl IRepositionThemeTransition_Vtbl {
    pub const fn new<Identity: IRepositionThemeTransition_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsStaggeringEnabled<
            Identity: IRepositionThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeTransition_Impl::IsStaggeringEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsStaggeringEnabled<
            Identity: IRepositionThemeTransition_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRepositionThemeTransition_Impl::SetIsStaggeringEnabled(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRepositionThemeTransition,
                OFFSET,
            >(),
            IsStaggeringEnabled: IsStaggeringEnabled::<Identity, OFFSET>,
            SetIsStaggeringEnabled: SetIsStaggeringEnabled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepositionThemeTransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeTransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsStaggeringEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRepositionThemeTransitionStatics,
    IRepositionThemeTransitionStatics_Vtbl,
    0xc70a0f9a_485e_53bb_ad3c_8b41b6788bf9
);
impl windows_core::RuntimeType for IRepositionThemeTransitionStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRepositionThemeTransitionStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStatics";
}
pub trait IRepositionThemeTransitionStatics_Impl: windows_core::IUnknownImpl {
    fn IsStaggeringEnabledProperty(&self)
        -> windows_core::Result<super::super::DependencyProperty>;
}
impl IRepositionThemeTransitionStatics_Vtbl {
    pub const fn new<Identity: IRepositionThemeTransitionStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn IsStaggeringEnabledProperty<
            Identity: IRepositionThemeTransitionStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRepositionThemeTransitionStatics_Impl::IsStaggeringEnabledProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRepositionThemeTransitionStatics,
                OFFSET,
            >(),
            IsStaggeringEnabledProperty: IsStaggeringEnabledProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRepositionThemeTransitionStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeTransitionStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISineEase,
    ISineEase_Vtbl,
    0x6115539b_663d_5131_b7c2_74bb5fdc6a1d
);
impl windows_core::RuntimeType for ISineEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISineEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISineEase";
}
pub trait ISineEase_Impl: windows_core::IUnknownImpl {}
impl ISineEase_Vtbl {
    pub const fn new<Identity: ISineEase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISineEase, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISineEase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISineEase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISlideNavigationTransitionInfo,
    ISlideNavigationTransitionInfo_Vtbl,
    0x53eade0e_6b01_511f_a563_6f5724a6c1c1
);
impl windows_core::RuntimeType for ISlideNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISlideNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfo";
}
pub trait ISlideNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {
    fn Effect(&self) -> windows_core::Result<SlideNavigationTransitionEffect>;
    fn SetEffect(&self, value: SlideNavigationTransitionEffect) -> windows_core::Result<()>;
}
impl ISlideNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: ISlideNavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Effect<
            Identity: ISlideNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut SlideNavigationTransitionEffect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlideNavigationTransitionInfo_Impl::Effect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEffect<
            Identity: ISlideNavigationTransitionInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: SlideNavigationTransitionEffect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISlideNavigationTransitionInfo_Impl::SetEffect(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISlideNavigationTransitionInfo,
                OFFSET,
            >(),
            Effect: Effect::<Identity, OFFSET>,
            SetEffect: SetEffect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISlideNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlideNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Effect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut SlideNavigationTransitionEffect,
    ) -> windows_core::HRESULT,
    pub SetEffect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        SlideNavigationTransitionEffect,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISlideNavigationTransitionInfoStatics,
    ISlideNavigationTransitionInfoStatics_Vtbl,
    0x90ba0c6c_cd45_5a6c_bbb2_88037d43cd79
);
impl windows_core::RuntimeType for ISlideNavigationTransitionInfoStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISlideNavigationTransitionInfoStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStatics";
}
pub trait ISlideNavigationTransitionInfoStatics_Impl: windows_core::IUnknownImpl {
    fn EffectProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISlideNavigationTransitionInfoStatics_Vtbl {
    pub const fn new<Identity: ISlideNavigationTransitionInfoStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn EffectProperty<
            Identity: ISlideNavigationTransitionInfoStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISlideNavigationTransitionInfoStatics_Impl::EffectProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISlideNavigationTransitionInfoStatics,
                OFFSET,
            >(),
            EffectProperty: EffectProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISlideNavigationTransitionInfoStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlideNavigationTransitionInfoStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub EffectProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplineColorKeyFrame,
    ISplineColorKeyFrame_Vtbl,
    0x60c5905f_4343_504d_a2c6_64b8d924b438
);
impl windows_core::RuntimeType for ISplineColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplineColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrame";
}
pub trait ISplineColorKeyFrame_Impl: windows_core::IUnknownImpl {
    fn KeySpline(&self) -> windows_core::Result<KeySpline>;
    fn SetKeySpline(&self, value: windows_core::Ref<'_, KeySpline>) -> windows_core::Result<()>;
}
impl ISplineColorKeyFrame_Vtbl {
    pub const fn new<Identity: ISplineColorKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySpline<
            Identity: ISplineColorKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplineColorKeyFrame_Impl::KeySpline(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeySpline<
            Identity: ISplineColorKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplineColorKeyFrame_Impl::SetKeySpline(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISplineColorKeyFrame, OFFSET>(
            ),
            KeySpline: KeySpline::<Identity, OFFSET>,
            SetKeySpline: SetKeySpline::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplineColorKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineColorKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplineColorKeyFrameStatics,
    ISplineColorKeyFrameStatics_Vtbl,
    0xd89c7062_753d_5652_b215_c195ae2c7a18
);
impl windows_core::RuntimeType for ISplineColorKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplineColorKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStatics";
}
pub trait ISplineColorKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn KeySplineProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISplineColorKeyFrameStatics_Vtbl {
    pub const fn new<Identity: ISplineColorKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySplineProperty<
            Identity: ISplineColorKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplineColorKeyFrameStatics_Impl::KeySplineProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplineColorKeyFrameStatics,
                OFFSET,
            >(),
            KeySplineProperty: KeySplineProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplineColorKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineColorKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplineDoubleKeyFrame,
    ISplineDoubleKeyFrame_Vtbl,
    0xaea80957_bb56_59b6_bb7a_6295f94bc961
);
impl windows_core::RuntimeType for ISplineDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplineDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrame";
}
pub trait ISplineDoubleKeyFrame_Impl: windows_core::IUnknownImpl {
    fn KeySpline(&self) -> windows_core::Result<KeySpline>;
    fn SetKeySpline(&self, value: windows_core::Ref<'_, KeySpline>) -> windows_core::Result<()>;
}
impl ISplineDoubleKeyFrame_Vtbl {
    pub const fn new<Identity: ISplineDoubleKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySpline<
            Identity: ISplineDoubleKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplineDoubleKeyFrame_Impl::KeySpline(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeySpline<
            Identity: ISplineDoubleKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplineDoubleKeyFrame_Impl::SetKeySpline(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISplineDoubleKeyFrame, OFFSET>(
            ),
            KeySpline: KeySpline::<Identity, OFFSET>,
            SetKeySpline: SetKeySpline::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplineDoubleKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineDoubleKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplineDoubleKeyFrameStatics,
    ISplineDoubleKeyFrameStatics_Vtbl,
    0xca88552e_7237_51f8_a8ca_79952c77883a
);
impl windows_core::RuntimeType for ISplineDoubleKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplineDoubleKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStatics";
}
pub trait ISplineDoubleKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn KeySplineProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISplineDoubleKeyFrameStatics_Vtbl {
    pub const fn new<Identity: ISplineDoubleKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySplineProperty<
            Identity: ISplineDoubleKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplineDoubleKeyFrameStatics_Impl::KeySplineProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplineDoubleKeyFrameStatics,
                OFFSET,
            >(),
            KeySplineProperty: KeySplineProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplineDoubleKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineDoubleKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplinePointKeyFrame,
    ISplinePointKeyFrame_Vtbl,
    0x2b7eb049_708c_5220_a178_a25dbc14ffbe
);
impl windows_core::RuntimeType for ISplinePointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplinePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrame";
}
pub trait ISplinePointKeyFrame_Impl: windows_core::IUnknownImpl {
    fn KeySpline(&self) -> windows_core::Result<KeySpline>;
    fn SetKeySpline(&self, value: windows_core::Ref<'_, KeySpline>) -> windows_core::Result<()>;
}
impl ISplinePointKeyFrame_Vtbl {
    pub const fn new<Identity: ISplinePointKeyFrame_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySpline<
            Identity: ISplinePointKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplinePointKeyFrame_Impl::KeySpline(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeySpline<
            Identity: ISplinePointKeyFrame_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplinePointKeyFrame_Impl::SetKeySpline(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISplinePointKeyFrame, OFFSET>(
            ),
            KeySpline: KeySpline::<Identity, OFFSET>,
            SetKeySpline: SetKeySpline::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplinePointKeyFrame as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplinePointKeyFrame_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplinePointKeyFrameStatics,
    ISplinePointKeyFrameStatics_Vtbl,
    0x1e100e36_bed1_5060_8dcf_0d5b32575ed1
);
impl windows_core::RuntimeType for ISplinePointKeyFrameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplinePointKeyFrameStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStatics";
}
pub trait ISplinePointKeyFrameStatics_Impl: windows_core::IUnknownImpl {
    fn KeySplineProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISplinePointKeyFrameStatics_Vtbl {
    pub const fn new<Identity: ISplinePointKeyFrameStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn KeySplineProperty<
            Identity: ISplinePointKeyFrameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplinePointKeyFrameStatics_Impl::KeySplineProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplinePointKeyFrameStatics,
                OFFSET,
            >(),
            KeySplineProperty: KeySplineProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplinePointKeyFrameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplinePointKeyFrameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplitCloseThemeAnimation,
    ISplitCloseThemeAnimation_Vtbl,
    0xb0dd1490_f646_5c18_b3ef_02f9b17f57df
);
impl windows_core::RuntimeType for ISplitCloseThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for ISplitCloseThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimation";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait ISplitCloseThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn OpenedTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetOpenedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn OpenedTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetOpenedTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ClosedTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetClosedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ClosedTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetClosedTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ContentTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetContentTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ContentTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetContentTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn OpenedLength(&self) -> windows_core::Result<f64>;
    fn SetOpenedLength(&self, value: f64) -> windows_core::Result<()>;
    fn ClosedLength(&self) -> windows_core::Result<f64>;
    fn SetClosedLength(&self, value: f64) -> windows_core::Result<()>;
    fn OffsetFromCenter(&self) -> windows_core::Result<f64>;
    fn SetOffsetFromCenter(&self, value: f64) -> windows_core::Result<()>;
    fn ContentTranslationDirection(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection>;
    fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()>;
    fn ContentTranslationOffset(&self) -> windows_core::Result<f64>;
    fn SetContentTranslationOffset(&self, value: f64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl ISplitCloseThemeAnimation_Vtbl {
    pub const fn new<Identity: ISplitCloseThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OpenedTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::OpenedTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetOpenedTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn OpenedTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::OpenedTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetOpenedTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ClosedTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ClosedTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetClosedTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ClosedTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ClosedTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetClosedTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ContentTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ContentTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTargetName<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetContentTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ContentTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ContentTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTarget<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetContentTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn OpenedLength<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::OpenedLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedLength<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetOpenedLength(this, value).into()
            }
        }
        unsafe extern "system" fn ClosedLength<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ClosedLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedLength<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetClosedLength(this, value).into()
            }
        }
        unsafe extern "system" fn OffsetFromCenter<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::OffsetFromCenter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffsetFromCenter<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetOffsetFromCenter(this, value).into()
            }
        }
        unsafe extern "system" fn ContentTranslationDirection<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ContentTranslationDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTranslationDirection<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetContentTranslationDirection(this, value).into()
            }
        }
        unsafe extern "system" fn ContentTranslationOffset<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimation_Impl::ContentTranslationOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTranslationOffset<
            Identity: ISplitCloseThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitCloseThemeAnimation_Impl::SetContentTranslationOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplitCloseThemeAnimation,
                OFFSET,
            >(),
            OpenedTargetName: OpenedTargetName::<Identity, OFFSET>,
            SetOpenedTargetName: SetOpenedTargetName::<Identity, OFFSET>,
            OpenedTarget: OpenedTarget::<Identity, OFFSET>,
            SetOpenedTarget: SetOpenedTarget::<Identity, OFFSET>,
            ClosedTargetName: ClosedTargetName::<Identity, OFFSET>,
            SetClosedTargetName: SetClosedTargetName::<Identity, OFFSET>,
            ClosedTarget: ClosedTarget::<Identity, OFFSET>,
            SetClosedTarget: SetClosedTarget::<Identity, OFFSET>,
            ContentTargetName: ContentTargetName::<Identity, OFFSET>,
            SetContentTargetName: SetContentTargetName::<Identity, OFFSET>,
            ContentTarget: ContentTarget::<Identity, OFFSET>,
            SetContentTarget: SetContentTarget::<Identity, OFFSET>,
            OpenedLength: OpenedLength::<Identity, OFFSET>,
            SetOpenedLength: SetOpenedLength::<Identity, OFFSET>,
            ClosedLength: ClosedLength::<Identity, OFFSET>,
            SetClosedLength: SetClosedLength::<Identity, OFFSET>,
            OffsetFromCenter: OffsetFromCenter::<Identity, OFFSET>,
            SetOffsetFromCenter: SetOffsetFromCenter::<Identity, OFFSET>,
            ContentTranslationDirection: ContentTranslationDirection::<Identity, OFFSET>,
            SetContentTranslationDirection: SetContentTranslationDirection::<Identity, OFFSET>,
            ContentTranslationOffset: ContentTranslationOffset::<Identity, OFFSET>,
            SetContentTranslationOffset: SetContentTranslationOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplitCloseThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitCloseThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OpenedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetOpenedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetOpenedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetClosedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetClosedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContentTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContentTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOpenedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ClosedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetClosedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OffsetFromCenter:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOffsetFromCenter:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub ContentTranslationDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    ContentTranslationDirection: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetContentTranslationDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetContentTranslationDirection: usize,
    pub ContentTranslationOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetContentTranslationOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplitCloseThemeAnimationStatics,
    ISplitCloseThemeAnimationStatics_Vtbl,
    0x32345cdd_2a3c_5571_b2eb_2fcabc2e92c6
);
impl windows_core::RuntimeType for ISplitCloseThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplitCloseThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStatics";
}
pub trait ISplitCloseThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn OpenedTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OpenedTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OpenedLengthProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedLengthProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OffsetFromCenterProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTranslationDirectionProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTranslationOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISplitCloseThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: ISplitCloseThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn OpenedTargetNameProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::OpenedTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OpenedTargetProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::OpenedTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedTargetNameProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ClosedTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedTargetProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ClosedTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTargetNameProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ContentTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTargetProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ContentTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OpenedLengthProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::OpenedLengthProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedLengthProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ClosedLengthProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OffsetFromCenterProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::OffsetFromCenterProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTranslationDirectionProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ContentTranslationDirectionProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTranslationOffsetProperty<
            Identity: ISplitCloseThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitCloseThemeAnimationStatics_Impl::ContentTranslationOffsetProperty(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplitCloseThemeAnimationStatics,
                OFFSET,
            >(),
            OpenedTargetNameProperty: OpenedTargetNameProperty::<Identity, OFFSET>,
            OpenedTargetProperty: OpenedTargetProperty::<Identity, OFFSET>,
            ClosedTargetNameProperty: ClosedTargetNameProperty::<Identity, OFFSET>,
            ClosedTargetProperty: ClosedTargetProperty::<Identity, OFFSET>,
            ContentTargetNameProperty: ContentTargetNameProperty::<Identity, OFFSET>,
            ContentTargetProperty: ContentTargetProperty::<Identity, OFFSET>,
            OpenedLengthProperty: OpenedLengthProperty::<Identity, OFFSET>,
            ClosedLengthProperty: ClosedLengthProperty::<Identity, OFFSET>,
            OffsetFromCenterProperty: OffsetFromCenterProperty::<Identity, OFFSET>,
            ContentTranslationDirectionProperty: ContentTranslationDirectionProperty::<
                Identity,
                OFFSET,
            >,
            ContentTranslationOffsetProperty: ContentTranslationOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplitCloseThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitCloseThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OpenedTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedLengthProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedLengthProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OffsetFromCenterProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTranslationDirectionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub ContentTranslationOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplitOpenThemeAnimation,
    ISplitOpenThemeAnimation_Vtbl,
    0x79fdfaca_4245_53f0_b5c7_da1ce2b0b851
);
impl windows_core::RuntimeType for ISplitOpenThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl windows_core::RuntimeName for ISplitOpenThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimation";
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
pub trait ISplitOpenThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn OpenedTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetOpenedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn OpenedTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetOpenedTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ClosedTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetClosedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ClosedTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetClosedTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ContentTargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetContentTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ContentTarget(&self) -> windows_core::Result<super::super::DependencyObject>;
    fn SetContentTarget(
        &self,
        value: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn OpenedLength(&self) -> windows_core::Result<f64>;
    fn SetOpenedLength(&self, value: f64) -> windows_core::Result<()>;
    fn ClosedLength(&self) -> windows_core::Result<f64>;
    fn SetClosedLength(&self, value: f64) -> windows_core::Result<()>;
    fn OffsetFromCenter(&self) -> windows_core::Result<f64>;
    fn SetOffsetFromCenter(&self, value: f64) -> windows_core::Result<()>;
    fn ContentTranslationDirection(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection>;
    fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()>;
    fn ContentTranslationOffset(&self) -> windows_core::Result<f64>;
    fn SetContentTranslationOffset(&self, value: f64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Controls_Primitives")]
impl ISplitOpenThemeAnimation_Vtbl {
    pub const fn new<Identity: ISplitOpenThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OpenedTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::OpenedTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetOpenedTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn OpenedTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::OpenedTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetOpenedTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ClosedTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ClosedTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetClosedTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ClosedTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ClosedTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetClosedTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ContentTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ContentTargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTargetName<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetContentTargetName(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ContentTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ContentTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTarget<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetContentTarget(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn OpenedLength<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::OpenedLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOpenedLength<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetOpenedLength(this, value).into()
            }
        }
        unsafe extern "system" fn ClosedLength<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ClosedLength(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClosedLength<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetClosedLength(this, value).into()
            }
        }
        unsafe extern "system" fn OffsetFromCenter<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::OffsetFromCenter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffsetFromCenter<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetOffsetFromCenter(this, value).into()
            }
        }
        unsafe extern "system" fn ContentTranslationDirection<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ContentTranslationDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTranslationDirection<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::super::Controls::Primitives::AnimationDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetContentTranslationDirection(this, value).into()
            }
        }
        unsafe extern "system" fn ContentTranslationOffset<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimation_Impl::ContentTranslationOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContentTranslationOffset<
            Identity: ISplitOpenThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISplitOpenThemeAnimation_Impl::SetContentTranslationOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplitOpenThemeAnimation,
                OFFSET,
            >(),
            OpenedTargetName: OpenedTargetName::<Identity, OFFSET>,
            SetOpenedTargetName: SetOpenedTargetName::<Identity, OFFSET>,
            OpenedTarget: OpenedTarget::<Identity, OFFSET>,
            SetOpenedTarget: SetOpenedTarget::<Identity, OFFSET>,
            ClosedTargetName: ClosedTargetName::<Identity, OFFSET>,
            SetClosedTargetName: SetClosedTargetName::<Identity, OFFSET>,
            ClosedTarget: ClosedTarget::<Identity, OFFSET>,
            SetClosedTarget: SetClosedTarget::<Identity, OFFSET>,
            ContentTargetName: ContentTargetName::<Identity, OFFSET>,
            SetContentTargetName: SetContentTargetName::<Identity, OFFSET>,
            ContentTarget: ContentTarget::<Identity, OFFSET>,
            SetContentTarget: SetContentTarget::<Identity, OFFSET>,
            OpenedLength: OpenedLength::<Identity, OFFSET>,
            SetOpenedLength: SetOpenedLength::<Identity, OFFSET>,
            ClosedLength: ClosedLength::<Identity, OFFSET>,
            SetClosedLength: SetClosedLength::<Identity, OFFSET>,
            OffsetFromCenter: OffsetFromCenter::<Identity, OFFSET>,
            SetOffsetFromCenter: SetOffsetFromCenter::<Identity, OFFSET>,
            ContentTranslationDirection: ContentTranslationDirection::<Identity, OFFSET>,
            SetContentTranslationDirection: SetContentTranslationDirection::<Identity, OFFSET>,
            ContentTranslationOffset: ContentTranslationOffset::<Identity, OFFSET>,
            SetContentTranslationOffset: SetContentTranslationOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplitOpenThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitOpenThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OpenedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetOpenedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetOpenedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetClosedTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetClosedTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContentTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetContentTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOpenedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ClosedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetClosedLength:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OffsetFromCenter:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOffsetFromCenter:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub ContentTranslationDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    ContentTranslationDirection: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetContentTranslationDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetContentTranslationDirection: usize,
    pub ContentTranslationOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetContentTranslationOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISplitOpenThemeAnimationStatics,
    ISplitOpenThemeAnimationStatics_Vtbl,
    0xe5a73b84_a4ae_5c38_84da_f7ed30fc9b6e
);
impl windows_core::RuntimeType for ISplitOpenThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISplitOpenThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStatics";
}
pub trait ISplitOpenThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn OpenedTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OpenedTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTargetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OpenedLengthProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ClosedLengthProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OffsetFromCenterProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTranslationDirectionProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn ContentTranslationOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISplitOpenThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: ISplitOpenThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn OpenedTargetNameProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::OpenedTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OpenedTargetProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::OpenedTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedTargetNameProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ClosedTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedTargetProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ClosedTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTargetNameProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ContentTargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTargetProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ContentTargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OpenedLengthProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::OpenedLengthProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClosedLengthProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ClosedLengthProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OffsetFromCenterProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::OffsetFromCenterProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTranslationDirectionProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ContentTranslationDirectionProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentTranslationOffsetProperty<
            Identity: ISplitOpenThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISplitOpenThemeAnimationStatics_Impl::ContentTranslationOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISplitOpenThemeAnimationStatics,
                OFFSET,
            >(),
            OpenedTargetNameProperty: OpenedTargetNameProperty::<Identity, OFFSET>,
            OpenedTargetProperty: OpenedTargetProperty::<Identity, OFFSET>,
            ClosedTargetNameProperty: ClosedTargetNameProperty::<Identity, OFFSET>,
            ClosedTargetProperty: ClosedTargetProperty::<Identity, OFFSET>,
            ContentTargetNameProperty: ContentTargetNameProperty::<Identity, OFFSET>,
            ContentTargetProperty: ContentTargetProperty::<Identity, OFFSET>,
            OpenedLengthProperty: OpenedLengthProperty::<Identity, OFFSET>,
            ClosedLengthProperty: ClosedLengthProperty::<Identity, OFFSET>,
            OffsetFromCenterProperty: OffsetFromCenterProperty::<Identity, OFFSET>,
            ContentTranslationDirectionProperty: ContentTranslationDirectionProperty::<
                Identity,
                OFFSET,
            >,
            ContentTranslationOffsetProperty: ContentTranslationOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISplitOpenThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitOpenThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OpenedTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OpenedLengthProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClosedLengthProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OffsetFromCenterProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentTranslationDirectionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub ContentTranslationOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IStoryboard,
    IStoryboard_Vtbl,
    0x04d41bb3_8721_519e_8e53_fb8b34920305
);
impl windows_core::RuntimeType for IStoryboard {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IStoryboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IStoryboard";
}
pub trait IStoryboard_Impl: windows_core::IUnknownImpl {
    fn Children(&self) -> windows_core::Result<TimelineCollection>;
    fn Seek(&self, offset: &windows::Foundation::TimeSpan) -> windows_core::Result<()>;
    fn Stop(&self) -> windows_core::Result<()>;
    fn Begin(&self) -> windows_core::Result<()>;
    fn Pause(&self) -> windows_core::Result<()>;
    fn Resume(&self) -> windows_core::Result<()>;
    fn GetCurrentState(&self) -> windows_core::Result<ClockState>;
    fn GetCurrentTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan>;
    fn SeekAlignedToLastTick(
        &self,
        offset: &windows::Foundation::TimeSpan,
    ) -> windows_core::Result<()>;
    fn SkipToFill(&self) -> windows_core::Result<()>;
}
impl IStoryboard_Vtbl {
    pub const fn new<Identity: IStoryboard_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Children<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboard_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Seek<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            offset: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::Seek(this, core::mem::transmute(&offset)).into()
            }
        }
        unsafe extern "system" fn Stop<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::Stop(this).into()
            }
        }
        unsafe extern "system" fn Begin<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::Begin(this).into()
            }
        }
        unsafe extern "system" fn Pause<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::Pause(this).into()
            }
        }
        unsafe extern "system" fn Resume<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::Resume(this).into()
            }
        }
        unsafe extern "system" fn GetCurrentState<
            Identity: IStoryboard_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ClockState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboard_Impl::GetCurrentState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCurrentTime<
            Identity: IStoryboard_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboard_Impl::GetCurrentTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SeekAlignedToLastTick<
            Identity: IStoryboard_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: windows::Foundation::TimeSpan,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::SeekAlignedToLastTick(this, core::mem::transmute(&offset)).into()
            }
        }
        unsafe extern "system" fn SkipToFill<Identity: IStoryboard_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboard_Impl::SkipToFill(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IStoryboard, OFFSET>(),
            Children: Children::<Identity, OFFSET>,
            Seek: Seek::<Identity, OFFSET>,
            Stop: Stop::<Identity, OFFSET>,
            Begin: Begin::<Identity, OFFSET>,
            Pause: Pause::<Identity, OFFSET>,
            Resume: Resume::<Identity, OFFSET>,
            GetCurrentState: GetCurrentState::<Identity, OFFSET>,
            GetCurrentTime: GetCurrentTime::<Identity, OFFSET>,
            SeekAlignedToLastTick: SeekAlignedToLastTick::<Identity, OFFSET>,
            SkipToFill: SkipToFill::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStoryboard as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStoryboard_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Seek: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Begin: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Pause: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub GetCurrentState:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut ClockState) -> windows_core::HRESULT,
    pub GetCurrentTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SeekAlignedToLastTick: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::TimeSpan,
    ) -> windows_core::HRESULT,
    pub SkipToFill: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IStoryboardStatics,
    IStoryboardStatics_Vtbl,
    0xdd18519b_d4e4_597d_a0b7_655ebdd35efa
);
impl windows_core::RuntimeType for IStoryboardStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IStoryboardStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.IStoryboardStatics";
}
pub trait IStoryboardStatics_Impl: windows_core::IUnknownImpl {
    fn TargetPropertyProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetTargetProperty(
        &self,
        element: windows_core::Ref<'_, Timeline>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetProperty(
        &self,
        element: windows_core::Ref<'_, Timeline>,
        path: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn GetTargetName(
        &self,
        element: windows_core::Ref<'_, Timeline>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(
        &self,
        element: windows_core::Ref<'_, Timeline>,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn SetTarget(
        &self,
        timeline: windows_core::Ref<'_, Timeline>,
        target: windows_core::Ref<'_, super::super::DependencyObject>,
    ) -> windows_core::Result<()>;
}
impl IStoryboardStatics_Vtbl {
    pub const fn new<Identity: IStoryboardStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetPropertyProperty<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboardStatics_Impl::TargetPropertyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetTargetProperty<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboardStatics_Impl::GetTargetProperty(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetProperty<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            path: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboardStatics_Impl::SetTargetProperty(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&path),
                )
                .into()
            }
        }
        unsafe extern "system" fn TargetNameProperty<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboardStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetTargetName<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStoryboardStatics_Impl::GetTargetName(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboardStatics_Impl::SetTargetName(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&name),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetTarget<
            Identity: IStoryboardStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeline: *mut core::ffi::c_void,
            target: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IStoryboardStatics_Impl::SetTarget(
                    this,
                    core::mem::transmute_copy(&timeline),
                    core::mem::transmute_copy(&target),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IStoryboardStatics, OFFSET>(),
            TargetPropertyProperty: TargetPropertyProperty::<Identity, OFFSET>,
            GetTargetProperty: GetTargetProperty::<Identity, OFFSET>,
            SetTargetProperty: SetTargetProperty::<Identity, OFFSET>,
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            GetTargetName: GetTargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            SetTarget: SetTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStoryboardStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStoryboardStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetPropertyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISuppressNavigationTransitionInfo,
    ISuppressNavigationTransitionInfo_Vtbl,
    0x3ecd2bd1_9805_5f51_bb9e_051fea8dc355
);
impl windows_core::RuntimeType for ISuppressNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISuppressNavigationTransitionInfo {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfo";
}
pub trait ISuppressNavigationTransitionInfo_Impl: windows_core::IUnknownImpl {}
impl ISuppressNavigationTransitionInfo_Vtbl {
    pub const fn new<Identity: ISuppressNavigationTransitionInfo_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISuppressNavigationTransitionInfo,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISuppressNavigationTransitionInfo as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISuppressNavigationTransitionInfo_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISwipeBackThemeAnimation,
    ISwipeBackThemeAnimation_Vtbl,
    0xf095d058_bc9e_58ee_8877_e084723b4333
);
impl windows_core::RuntimeType for ISwipeBackThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISwipeBackThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimation";
}
pub trait ISwipeBackThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FromHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn FromVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl ISwipeBackThemeAnimation_Vtbl {
    pub const fn new<Identity: ISwipeBackThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeBackThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn FromHorizontalOffset<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimation_Impl::FromHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromHorizontalOffset<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeBackThemeAnimation_Impl::SetFromHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn FromVerticalOffset<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimation_Impl::FromVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFromVerticalOffset<
            Identity: ISwipeBackThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeBackThemeAnimation_Impl::SetFromVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISwipeBackThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            FromHorizontalOffset: FromHorizontalOffset::<Identity, OFFSET>,
            SetFromHorizontalOffset: SetFromHorizontalOffset::<Identity, OFFSET>,
            FromVerticalOffset: FromVerticalOffset::<Identity, OFFSET>,
            SetFromVerticalOffset: SetFromVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwipeBackThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeBackThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFromVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISwipeBackThemeAnimationStatics,
    ISwipeBackThemeAnimationStatics_Vtbl,
    0x18a7a588_b9a2_573b_8e2b_38048c4635a7
);
impl windows_core::RuntimeType for ISwipeBackThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISwipeBackThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStatics";
}
pub trait ISwipeBackThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromHorizontalOffsetProperty(
        &self,
    ) -> windows_core::Result<super::super::DependencyProperty>;
    fn FromVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISwipeBackThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: ISwipeBackThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn TargetNameProperty<
            Identity: ISwipeBackThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromHorizontalOffsetProperty<
            Identity: ISwipeBackThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimationStatics_Impl::FromHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromVerticalOffsetProperty<
            Identity: ISwipeBackThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeBackThemeAnimationStatics_Impl::FromVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISwipeBackThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            FromHorizontalOffsetProperty: FromHorizontalOffsetProperty::<Identity, OFFSET>,
            FromVerticalOffsetProperty: FromVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwipeBackThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeBackThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISwipeHintThemeAnimation,
    ISwipeHintThemeAnimation_Vtbl,
    0x09de03d7_4b8a_55e1_afad_5f60598733ea
);
impl windows_core::RuntimeType for ISwipeHintThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISwipeHintThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimation";
}
pub trait ISwipeHintThemeAnimation_Impl: windows_core::IUnknownImpl {
    fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ToHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetToHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn ToVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetToVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
}
impl ISwipeHintThemeAnimation_Vtbl {
    pub const fn new<Identity: ISwipeHintThemeAnimation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TargetName<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimation_Impl::TargetName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTargetName<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeHintThemeAnimation_Impl::SetTargetName(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn ToHorizontalOffset<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimation_Impl::ToHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetToHorizontalOffset<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeHintThemeAnimation_Impl::SetToHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn ToVerticalOffset<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimation_Impl::ToVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetToVerticalOffset<
            Identity: ISwipeHintThemeAnimation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwipeHintThemeAnimation_Impl::SetToVerticalOffset(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISwipeHintThemeAnimation,
                OFFSET,
            >(),
            TargetName: TargetName::<Identity, OFFSET>,
            SetTargetName: SetTargetName::<Identity, OFFSET>,
            ToHorizontalOffset: ToHorizontalOffset::<Identity, OFFSET>,
            SetToHorizontalOffset: SetToHorizontalOffset::<Identity, OFFSET>,
            ToVerticalOffset: ToVerticalOffset::<Identity, OFFSET>,
            SetToVerticalOffset: SetToVerticalOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwipeHintThemeAnimation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeHintThemeAnimation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetToHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ToVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetToVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISwipeHintThemeAnimationStatics,
    ISwipeHintThemeAnimationStatics_Vtbl,
    0xf3308304_4f09_54d7_a4d5_ca558bbfe26f
);
impl windows_core::RuntimeType for ISwipeHintThemeAnimationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISwipeHintThemeAnimationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStatics";
}
pub trait ISwipeHintThemeAnimationStatics_Impl: windows_core::IUnknownImpl {
    fn TargetNameProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToHorizontalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ToVerticalOffsetProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ISwipeHintThemeAnimationStatics_Vtbl {
    pub const fn new<Identity: ISwipeHintThemeAnimationStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn TargetNameProperty<
            Identity: ISwipeHintThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimationStatics_Impl::TargetNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToHorizontalOffsetProperty<
            Identity: ISwipeHintThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimationStatics_Impl::ToHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ToVerticalOffsetProperty<
            Identity: ISwipeHintThemeAnimationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwipeHintThemeAnimationStatics_Impl::ToVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISwipeHintThemeAnimationStatics,
                OFFSET,
            >(),
            TargetNameProperty: TargetNameProperty::<Identity, OFFSET>,
            ToHorizontalOffsetProperty: ToHorizontalOffsetProperty::<Identity, OFFSET>,
            ToVerticalOffsetProperty: ToVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwipeHintThemeAnimationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeHintThemeAnimationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ToVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITimeline,
    ITimeline_Vtbl,
    0xd0f9b330_cc2a_5b05_9786_2da4c6584581
);
impl windows_core::RuntimeType for ITimeline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITimeline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ITimeline";
}
pub trait ITimeline_Impl: windows_core::IUnknownImpl {
    fn AutoReverse(&self) -> windows_core::Result<bool>;
    fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()>;
    fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>>;
    fn SetBeginTime(
        &self,
        value: windows_core::Ref<
            '_,
            windows::Foundation::IReference<windows::Foundation::TimeSpan>,
        >,
    ) -> windows_core::Result<()>;
    fn Duration(&self) -> windows_core::Result<super::super::Duration>;
    fn SetDuration(&self, value: &super::super::Duration) -> windows_core::Result<()>;
    fn SpeedRatio(&self) -> windows_core::Result<f64>;
    fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()>;
    fn FillBehavior(&self) -> windows_core::Result<FillBehavior>;
    fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()>;
    fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior>;
    fn SetRepeatBehavior(&self, value: &RepeatBehavior) -> windows_core::Result<()>;
    fn Completed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::EventHandler<windows_core::IInspectable>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()>;
}
impl ITimeline_Vtbl {
    pub const fn new<Identity: ITimeline_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AutoReverse<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::AutoReverse(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutoReverse<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetAutoReverse(this, value).into()
            }
        }
        unsafe extern "system" fn BeginTime<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::BeginTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBeginTime<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetBeginTime(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Duration<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::super::Duration,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::Duration(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDuration<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::super::Duration,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetDuration(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn SpeedRatio<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::SpeedRatio(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSpeedRatio<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetSpeedRatio(this, value).into()
            }
        }
        unsafe extern "system" fn FillBehavior<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut FillBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::FillBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFillBehavior<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: FillBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetFillBehavior(this, value).into()
            }
        }
        unsafe extern "system" fn RepeatBehavior<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut RepeatBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::RepeatBehavior(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRepeatBehavior<
            Identity: ITimeline_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: RepeatBehavior,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::SetRepeatBehavior(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Completed<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimeline_Impl::Completed(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveCompleted<Identity: ITimeline_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimeline_Impl::RemoveCompleted(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITimeline, OFFSET>(),
            AutoReverse: AutoReverse::<Identity, OFFSET>,
            SetAutoReverse: SetAutoReverse::<Identity, OFFSET>,
            BeginTime: BeginTime::<Identity, OFFSET>,
            SetBeginTime: SetBeginTime::<Identity, OFFSET>,
            Duration: Duration::<Identity, OFFSET>,
            SetDuration: SetDuration::<Identity, OFFSET>,
            SpeedRatio: SpeedRatio::<Identity, OFFSET>,
            SetSpeedRatio: SetSpeedRatio::<Identity, OFFSET>,
            FillBehavior: FillBehavior::<Identity, OFFSET>,
            SetFillBehavior: SetFillBehavior::<Identity, OFFSET>,
            RepeatBehavior: RepeatBehavior::<Identity, OFFSET>,
            SetRepeatBehavior: SetRepeatBehavior::<Identity, OFFSET>,
            Completed: Completed::<Identity, OFFSET>,
            RemoveCompleted: RemoveCompleted::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITimeline as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimeline_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutoReverse:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAutoReverse:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub BeginTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetBeginTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Duration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::super::Duration,
    ) -> windows_core::HRESULT,
    pub SetDuration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::Duration,
    ) -> windows_core::HRESULT,
    pub SpeedRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetSpeedRatio:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub FillBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut FillBehavior,
    ) -> windows_core::HRESULT,
    pub SetFillBehavior:
        unsafe extern "system" fn(*mut core::ffi::c_void, FillBehavior) -> windows_core::HRESULT,
    pub RepeatBehavior: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut RepeatBehavior,
    ) -> windows_core::HRESULT,
    pub SetRepeatBehavior:
        unsafe extern "system" fn(*mut core::ffi::c_void, RepeatBehavior) -> windows_core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITimelineFactory,
    ITimelineFactory_Vtbl,
    0x6a635732_a827_5398_9fc8_dfbc3b97e3c1
);
impl windows_core::RuntimeType for ITimelineFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITimelineFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ITimelineFactory";
}
pub trait ITimelineFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Timeline>;
}
impl ITimelineFactory_Vtbl {
    pub const fn new<Identity: ITimelineFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ITimelineFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITimelineFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITimelineFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimelineFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITimelineStatics,
    ITimelineStatics_Vtbl,
    0x778b8471_c831_503a_8748_fe6bbc7153b7
);
impl windows_core::RuntimeType for ITimelineStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITimelineStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ITimelineStatics";
}
pub trait ITimelineStatics_Impl: windows_core::IUnknownImpl {
    fn AllowDependentAnimations(&self) -> windows_core::Result<bool>;
    fn SetAllowDependentAnimations(&self, value: bool) -> windows_core::Result<()>;
    fn AutoReverseProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn BeginTimeProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn DurationProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn SpeedRatioProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn FillBehaviorProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn RepeatBehaviorProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ITimelineStatics_Vtbl {
    pub const fn new<Identity: ITimelineStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AllowDependentAnimations<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::AllowDependentAnimations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAllowDependentAnimations<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITimelineStatics_Impl::SetAllowDependentAnimations(this, value).into()
            }
        }
        unsafe extern "system" fn AutoReverseProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::AutoReverseProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BeginTimeProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::BeginTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DurationProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::DurationProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SpeedRatioProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::SpeedRatioProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillBehaviorProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::FillBehaviorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RepeatBehaviorProperty<
            Identity: ITimelineStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITimelineStatics_Impl::RepeatBehaviorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITimelineStatics, OFFSET>(),
            AllowDependentAnimations: AllowDependentAnimations::<Identity, OFFSET>,
            SetAllowDependentAnimations: SetAllowDependentAnimations::<Identity, OFFSET>,
            AutoReverseProperty: AutoReverseProperty::<Identity, OFFSET>,
            BeginTimeProperty: BeginTimeProperty::<Identity, OFFSET>,
            DurationProperty: DurationProperty::<Identity, OFFSET>,
            SpeedRatioProperty: SpeedRatioProperty::<Identity, OFFSET>,
            FillBehaviorProperty: FillBehaviorProperty::<Identity, OFFSET>,
            RepeatBehaviorProperty: RepeatBehaviorProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITimelineStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimelineStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AllowDependentAnimations:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAllowDependentAnimations:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AutoReverseProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DurationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SpeedRatioProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillBehaviorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RepeatBehaviorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransition,
    ITransition_Vtbl,
    0xe5b71956_8e44_5a38_b41e_274d706102bf
);
impl windows_core::RuntimeType for ITransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ITransition";
}
pub trait ITransition_Impl: windows_core::IUnknownImpl {}
impl ITransition_Vtbl {
    pub const fn new<Identity: ITransition_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransition, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransition as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransition_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITransitionFactory,
    ITransitionFactory_Vtbl,
    0xb7023e3b_bcd3_50ec_aacf_8cfcece25f17
);
impl windows_core::RuntimeType for ITransitionFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransitionFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ITransitionFactory";
}
pub trait ITransitionFactory_Impl: windows_core::IUnknownImpl {}
impl ITransitionFactory_Vtbl {
    pub const fn new<Identity: ITransitionFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransitionFactory, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransitionFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransitionFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct KeySpline(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeySpline,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(KeySpline, super::super::DependencyObject);
impl KeySpline {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            KeySpline,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ControlPoint1(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlPoint1)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetControlPoint1(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetControlPoint1)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ControlPoint2(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlPoint2)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetControlPoint2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetControlPoint2)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for KeySpline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeySpline>();
}
unsafe impl windows_core::Interface for KeySpline {
    type Vtable = <IKeySpline as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IKeySpline as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeySpline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.KeySpline";
}
unsafe impl Send for KeySpline {}
unsafe impl Sync for KeySpline {}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct KeyTime {
    pub TimeSpan: windows::Foundation::TimeSpan,
}
impl windows_core::TypeKind for KeyTime {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for KeyTime {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"struct(Microsoft.UI.Xaml.Media.Animation.KeyTime;struct(Windows.Foundation.TimeSpan;i8))",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct KeyTimeHelper(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    KeyTimeHelper,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl KeyTimeHelper {
    pub fn FromTimeSpan(timespan: windows::Foundation::TimeSpan) -> windows_core::Result<KeyTime> {
        Self::IKeyTimeHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromTimeSpan)(
                windows_core::Interface::as_raw(this),
                timespan,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn IKeyTimeHelperStatics<R, F: FnOnce(&IKeyTimeHelperStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<KeyTimeHelper, IKeyTimeHelperStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for KeyTimeHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IKeyTimeHelper>();
}
unsafe impl windows_core::Interface for KeyTimeHelper {
    type Vtable = <IKeyTimeHelper as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IKeyTimeHelper as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for KeyTimeHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.KeyTimeHelper";
}
unsafe impl Send for KeyTimeHelper {}
unsafe impl Sync for KeyTimeHelper {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LinearColorKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LinearColorKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    LinearColorKeyFrame,
    ColorKeyFrame,
    super::super::DependencyObject
);
impl LinearColorKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            LinearColorKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for LinearColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILinearColorKeyFrame>();
}
unsafe impl windows_core::Interface for LinearColorKeyFrame {
    type Vtable = <ILinearColorKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILinearColorKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LinearColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame";
}
unsafe impl Send for LinearColorKeyFrame {}
unsafe impl Sync for LinearColorKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LinearDoubleKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LinearDoubleKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    LinearDoubleKeyFrame,
    DoubleKeyFrame,
    super::super::DependencyObject
);
impl LinearDoubleKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            LinearDoubleKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for LinearDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILinearDoubleKeyFrame>();
}
unsafe impl windows_core::Interface for LinearDoubleKeyFrame {
    type Vtable = <ILinearDoubleKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILinearDoubleKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LinearDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame";
}
unsafe impl Send for LinearDoubleKeyFrame {}
unsafe impl Sync for LinearDoubleKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LinearPointKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LinearPointKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    LinearPointKeyFrame,
    PointKeyFrame,
    super::super::DependencyObject
);
impl LinearPointKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            LinearPointKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for LinearPointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILinearPointKeyFrame>();
}
unsafe impl windows_core::Interface for LinearPointKeyFrame {
    type Vtable = <ILinearPointKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILinearPointKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LinearPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame";
}
unsafe impl Send for LinearPointKeyFrame {}
unsafe impl Sync for LinearPointKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NavigationThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NavigationThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    NavigationThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl NavigationThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            NavigationThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DefaultNavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultNavigationTransitionInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDefaultNavigationTransitionInfo<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<NavigationTransitionInfo>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDefaultNavigationTransitionInfo)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultNavigationTransitionInfoProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::INavigationThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DefaultNavigationTransitionInfoProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn INavigationThemeTransitionStatics<
        R,
        F: FnOnce(&INavigationThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            NavigationThemeTransition,
            INavigationThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for NavigationThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INavigationThemeTransition>();
}
unsafe impl windows_core::Interface for NavigationThemeTransition {
    type Vtable = <INavigationThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INavigationThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NavigationThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition";
}
unsafe impl Send for NavigationThemeTransition {}
unsafe impl Sync for NavigationThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(NavigationTransitionInfo, super::super::DependencyObject);
impl NavigationTransitionInfo {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn new() -> windows_core::Result<NavigationTransitionInfo> {
        Self::INavigationTransitionInfoFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
    fn INavigationTransitionInfoFactory<
        R,
        F: FnOnce(&INavigationTransitionInfoFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            NavigationTransitionInfo,
            INavigationTransitionInfoFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for NavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for NavigationTransitionInfo {
    type Vtable = <INavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo";
}
unsafe impl Send for NavigationTransitionInfo {}
unsafe impl Sync for NavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ObjectAnimationUsingKeyFrames(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ObjectAnimationUsingKeyFrames,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ObjectAnimationUsingKeyFrames,
    Timeline,
    super::super::DependencyObject
);
impl ObjectAnimationUsingKeyFrames {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ObjectAnimationUsingKeyFrames,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn KeyFrames(&self) -> windows_core::Result<ObjectKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrames)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IObjectAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IObjectAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IObjectAnimationUsingKeyFramesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ObjectAnimationUsingKeyFrames,
            IObjectAnimationUsingKeyFramesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ObjectAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IObjectAnimationUsingKeyFrames>();
}
unsafe impl windows_core::Interface for ObjectAnimationUsingKeyFrames {
    type Vtable = <IObjectAnimationUsingKeyFrames as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IObjectAnimationUsingKeyFrames as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ObjectAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames";
}
unsafe impl Send for ObjectAnimationUsingKeyFrames {}
unsafe impl Sync for ObjectAnimationUsingKeyFrames {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ObjectKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ObjectKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ObjectKeyFrame, super::super::DependencyObject);
impl ObjectKeyFrame {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<ObjectKeyFrame> {
        Self::IObjectKeyFrameFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IObjectKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTimeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IObjectKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IObjectKeyFrameFactory<R, F: FnOnce(&IObjectKeyFrameFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ObjectKeyFrame, IObjectKeyFrameFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IObjectKeyFrameStatics<R, F: FnOnce(&IObjectKeyFrameStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ObjectKeyFrame, IObjectKeyFrameStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ObjectKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IObjectKeyFrame>();
}
unsafe impl windows_core::Interface for ObjectKeyFrame {
    type Vtable = <IObjectKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IObjectKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame";
}
unsafe impl Send for ObjectKeyFrame {}
unsafe impl Sync for ObjectKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ObjectKeyFrameCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ObjectKeyFrameCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<ObjectKeyFrame>
);
windows_core::imp::required_hierarchy!(
    ObjectKeyFrameCollection,
    windows_collections::IIterable<ObjectKeyFrame>
);
impl ObjectKeyFrameCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ObjectKeyFrameCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<ObjectKeyFrame>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<ObjectKeyFrame>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<ObjectKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<ObjectKeyFrame>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<ObjectKeyFrame>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ObjectKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ObjectKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ObjectKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<ObjectKeyFrame>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<ObjectKeyFrame>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ObjectKeyFrameCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<ObjectKeyFrame>,
    >();
}
unsafe impl windows_core::Interface for ObjectKeyFrameCollection {
    type Vtable = <windows_collections::IVector<ObjectKeyFrame> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<ObjectKeyFrame> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ObjectKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection";
}
unsafe impl Send for ObjectKeyFrameCollection {}
unsafe impl Sync for ObjectKeyFrameCollection {}
impl IntoIterator for ObjectKeyFrameCollection {
    type Item = ObjectKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &ObjectKeyFrameCollection {
    type Item = ObjectKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PaneThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PaneThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PaneThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl PaneThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PaneThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Edge(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::EdgeTransitionLocation> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Edge)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEdge)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EdgeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPaneThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EdgeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPaneThemeTransitionStatics<
        R,
        F: FnOnce(&IPaneThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PaneThemeTransition,
            IPaneThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PaneThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPaneThemeTransition>();
}
unsafe impl windows_core::Interface for PaneThemeTransition {
    type Vtable = <IPaneThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPaneThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PaneThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition";
}
unsafe impl Send for PaneThemeTransition {}
unsafe impl Sync for PaneThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(PointAnimation, Timeline, super::super::DependencyObject);
impl PointAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn From(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).From)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFrom<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::Point>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFrom)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn To(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).To)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTo<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::Point>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTo)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn By(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::Point>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).By)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBy<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::Point>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBy)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> windows_core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetEasingFunction<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingFunction)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ByProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EasingFunctionProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingFunctionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPointAnimationStatics<R, F: FnOnce(&IPointAnimationStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PointAnimation, IPointAnimationStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PointAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointAnimation>();
}
unsafe impl windows_core::Interface for PointAnimation {
    type Vtable = <IPointAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointAnimation";
}
unsafe impl Send for PointAnimation {}
unsafe impl Sync for PointAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointAnimationUsingKeyFrames(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointAnimationUsingKeyFrames,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PointAnimationUsingKeyFrames,
    Timeline,
    super::super::DependencyObject
);
impl PointAnimationUsingKeyFrames {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointAnimationUsingKeyFrames,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn KeyFrames(&self) -> windows_core::Result<PointKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyFrames)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnableDependentAnimation(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEnableDependentAnimation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnableDependentAnimationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPointAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IPointAnimationUsingKeyFramesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointAnimationUsingKeyFrames,
            IPointAnimationUsingKeyFramesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PointAnimationUsingKeyFrames {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointAnimationUsingKeyFrames>();
}
unsafe impl windows_core::Interface for PointAnimationUsingKeyFrames {
    type Vtable = <IPointAnimationUsingKeyFrames as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointAnimationUsingKeyFrames as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames";
}
unsafe impl Send for PointAnimationUsingKeyFrames {}
unsafe impl Sync for PointAnimationUsingKeyFrames {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(PointKeyFrame, super::super::DependencyObject);
impl PointKeyFrame {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<PointKeyFrame> {
        Self::IPointKeyFrameFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTimeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPointKeyFrameFactory<R, F: FnOnce(&IPointKeyFrameFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PointKeyFrame, IPointKeyFrameFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IPointKeyFrameStatics<R, F: FnOnce(&IPointKeyFrameStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PointKeyFrame, IPointKeyFrameStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointKeyFrame>();
}
unsafe impl windows_core::Interface for PointKeyFrame {
    type Vtable = <IPointKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointKeyFrame";
}
unsafe impl Send for PointKeyFrame {}
unsafe impl Sync for PointKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointKeyFrameCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointKeyFrameCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<PointKeyFrame>
);
windows_core::imp::required_hierarchy!(
    PointKeyFrameCollection,
    windows_collections::IIterable<PointKeyFrame>
);
impl PointKeyFrameCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointKeyFrameCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<PointKeyFrame>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<PointKeyFrame>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<PointKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<PointKeyFrame>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<PointKeyFrame>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<PointKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<PointKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<PointKeyFrame>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<PointKeyFrame>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<PointKeyFrame>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for PointKeyFrameCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<PointKeyFrame>,
    >();
}
unsafe impl windows_core::Interface for PointKeyFrameCollection {
    type Vtable = <windows_collections::IVector<PointKeyFrame> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<PointKeyFrame> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection";
}
unsafe impl Send for PointKeyFrameCollection {}
unsafe impl Sync for PointKeyFrameCollection {}
impl IntoIterator for PointKeyFrameCollection {
    type Item = PointKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &PointKeyFrameCollection {
    type Item = PointKeyFrame;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointerDownThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointerDownThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PointerDownThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl PointerDownThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointerDownThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointerDownThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPointerDownThemeAnimationStatics<
        R,
        F: FnOnce(&IPointerDownThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointerDownThemeAnimation,
            IPointerDownThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PointerDownThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointerDownThemeAnimation>();
}
unsafe impl windows_core::Interface for PointerDownThemeAnimation {
    type Vtable = <IPointerDownThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointerDownThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointerDownThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation";
}
unsafe impl Send for PointerDownThemeAnimation {}
unsafe impl Sync for PointerDownThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PointerUpThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PointerUpThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PointerUpThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl PointerUpThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointerUpThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPointerUpThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPointerUpThemeAnimationStatics<
        R,
        F: FnOnce(&IPointerUpThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PointerUpThemeAnimation,
            IPointerUpThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PointerUpThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPointerUpThemeAnimation>();
}
unsafe impl windows_core::Interface for PointerUpThemeAnimation {
    type Vtable = <IPointerUpThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPointerUpThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PointerUpThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation";
}
unsafe impl Send for PointerUpThemeAnimation {}
unsafe impl Sync for PointerUpThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PopInThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PopInThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PopInThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl PopInThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopInThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPopInThemeAnimationStatics<
        R,
        F: FnOnce(&IPopInThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopInThemeAnimation,
            IPopInThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PopInThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPopInThemeAnimation>();
}
unsafe impl windows_core::Interface for PopInThemeAnimation {
    type Vtable = <IPopInThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPopInThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PopInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation";
}
unsafe impl Send for PopInThemeAnimation {}
unsafe impl Sync for PopInThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PopOutThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PopOutThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PopOutThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl PopOutThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopOutThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPopOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IPopOutThemeAnimationStatics<
        R,
        F: FnOnce(&IPopOutThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopOutThemeAnimation,
            IPopOutThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PopOutThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPopOutThemeAnimation>();
}
unsafe impl windows_core::Interface for PopOutThemeAnimation {
    type Vtable = <IPopOutThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPopOutThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PopOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation";
}
unsafe impl Send for PopOutThemeAnimation {}
unsafe impl Sync for PopOutThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PopupThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PopupThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PopupThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl PopupThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopupThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FromHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::IPopupThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPopupThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPopupThemeTransitionStatics<
        R,
        F: FnOnce(&IPopupThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PopupThemeTransition,
            IPopupThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PopupThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPopupThemeTransition>();
}
unsafe impl windows_core::Interface for PopupThemeTransition {
    type Vtable = <IPopupThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPopupThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PopupThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition";
}
unsafe impl Send for PopupThemeTransition {}
unsafe impl Sync for PopupThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PowerEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PowerEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PowerEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl PowerEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PowerEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Power(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Power)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetPower(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPower)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PowerProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPowerEaseStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PowerProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPowerEaseStatics<R, F: FnOnce(&IPowerEaseStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PowerEase, IPowerEaseStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PowerEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPowerEase>();
}
unsafe impl windows_core::Interface for PowerEase {
    type Vtable = <IPowerEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPowerEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PowerEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PowerEase";
}
unsafe impl Send for PowerEase {}
unsafe impl Sync for PowerEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct QuadraticEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    QuadraticEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    QuadraticEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl QuadraticEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            QuadraticEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for QuadraticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IQuadraticEase>();
}
unsafe impl windows_core::Interface for QuadraticEase {
    type Vtable = <IQuadraticEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IQuadraticEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for QuadraticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuadraticEase";
}
unsafe impl Send for QuadraticEase {}
unsafe impl Sync for QuadraticEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct QuarticEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    QuarticEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    QuarticEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl QuarticEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            QuarticEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for QuarticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IQuarticEase>();
}
unsafe impl windows_core::Interface for QuarticEase {
    type Vtable = <IQuarticEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IQuarticEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for QuarticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuarticEase";
}
unsafe impl Send for QuarticEase {}
unsafe impl Sync for QuarticEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct QuinticEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    QuinticEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    QuinticEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl QuinticEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            QuinticEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for QuinticEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IQuinticEase>();
}
unsafe impl windows_core::Interface for QuinticEase {
    type Vtable = <IQuinticEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IQuinticEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for QuinticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuinticEase";
}
unsafe impl Send for QuinticEase {}
unsafe impl Sync for QuinticEase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ReorderThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ReorderThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ReorderThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl ReorderThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ReorderThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for ReorderThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IReorderThemeTransition>();
}
unsafe impl windows_core::Interface for ReorderThemeTransition {
    type Vtable = <IReorderThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IReorderThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ReorderThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition";
}
unsafe impl Send for ReorderThemeTransition {}
unsafe impl Sync for ReorderThemeTransition {}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct RepeatBehavior {
    pub Count: f64,
    pub Duration: windows::Foundation::TimeSpan,
    pub Type: RepeatBehaviorType,
}
impl windows_core::TypeKind for RepeatBehavior {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for RepeatBehavior {
    const SIGNATURE :windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice ( b"struct(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior;f8;struct(Windows.Foundation.TimeSpan;i8);enum(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType;i4))" ) ;
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RepeatBehaviorHelper(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RepeatBehaviorHelper,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl RepeatBehaviorHelper {
    pub fn Forever() -> windows_core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Forever)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn FromCount(count: f64) -> windows_core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromCount)(
                windows_core::Interface::as_raw(this),
                count,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn FromDuration(
        duration: windows::Foundation::TimeSpan,
    ) -> windows_core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromDuration)(
                windows_core::Interface::as_raw(this),
                duration,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn GetHasCount(target: RepeatBehavior) -> windows_core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHasCount)(
                windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn GetHasDuration(target: RepeatBehavior) -> windows_core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHasDuration)(
                windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn Equals(target: RepeatBehavior, value: RepeatBehavior) -> windows_core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Equals)(
                windows_core::Interface::as_raw(this),
                target,
                value,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn IRepeatBehaviorHelperStatics<
        R,
        F: FnOnce(&IRepeatBehaviorHelperStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RepeatBehaviorHelper,
            IRepeatBehaviorHelperStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for RepeatBehaviorHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRepeatBehaviorHelper>();
}
unsafe impl windows_core::Interface for RepeatBehaviorHelper {
    type Vtable = <IRepeatBehaviorHelper as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRepeatBehaviorHelper as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RepeatBehaviorHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorHelper";
}
unsafe impl Send for RepeatBehaviorHelper {}
unsafe impl Sync for RepeatBehaviorHelper {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct RepeatBehaviorType(pub i32);
impl RepeatBehaviorType {
    pub const Count: Self = Self(0i32);
    pub const Duration: Self = Self(1i32);
    pub const Forever: Self = Self(2i32);
}
impl windows_core::TypeKind for RepeatBehaviorType {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for RepeatBehaviorType {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RepositionThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RepositionThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    RepositionThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl RepositionThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RepositionThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IRepositionThemeAnimationStatics<
        R,
        F: FnOnce(&IRepositionThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RepositionThemeAnimation,
            IRepositionThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for RepositionThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRepositionThemeAnimation>();
}
unsafe impl windows_core::Interface for RepositionThemeAnimation {
    type Vtable = <IRepositionThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRepositionThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RepositionThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation";
}
unsafe impl Send for RepositionThemeAnimation {}
unsafe impl Sync for RepositionThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RepositionThemeTransition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RepositionThemeTransition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    RepositionThemeTransition,
    Transition,
    super::super::DependencyObject
);
impl RepositionThemeTransition {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RepositionThemeTransition,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsStaggeringEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsStaggeringEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabledProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IRepositionThemeTransitionStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsStaggeringEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IRepositionThemeTransitionStatics<
        R,
        F: FnOnce(&IRepositionThemeTransitionStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RepositionThemeTransition,
            IRepositionThemeTransitionStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for RepositionThemeTransition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRepositionThemeTransition>();
}
unsafe impl windows_core::Interface for RepositionThemeTransition {
    type Vtable = <IRepositionThemeTransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRepositionThemeTransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RepositionThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition";
}
unsafe impl Send for RepositionThemeTransition {}
unsafe impl Sync for RepositionThemeTransition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SineEase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SineEase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SineEase,
    EasingFunctionBase,
    super::super::DependencyObject
);
impl SineEase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SineEase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EasingMode(&self) -> windows_core::Result<EasingMode> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EasingMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetEasingMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ease)(
                windows_core::Interface::as_raw(this),
                normalizedtime,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for SineEase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISineEase>();
}
unsafe impl windows_core::Interface for SineEase {
    type Vtable = <ISineEase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISineEase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SineEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SineEase";
}
unsafe impl Send for SineEase {}
unsafe impl Sync for SineEase {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SlideNavigationTransitionEffect(pub i32);
impl SlideNavigationTransitionEffect {
    pub const FromBottom: Self = Self(0i32);
    pub const FromLeft: Self = Self(1i32);
    pub const FromRight: Self = Self(2i32);
}
impl windows_core::TypeKind for SlideNavigationTransitionEffect {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SlideNavigationTransitionEffect {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SlideNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SlideNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SlideNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl SlideNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SlideNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
    pub fn Effect(&self) -> windows_core::Result<SlideNavigationTransitionEffect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Effect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetEffect(&self, value: SlideNavigationTransitionEffect) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetEffect)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EffectProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISlideNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EffectProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISlideNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&ISlideNavigationTransitionInfoStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SlideNavigationTransitionInfo,
            ISlideNavigationTransitionInfoStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SlideNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISlideNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for SlideNavigationTransitionInfo {
    type Vtable = <ISlideNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISlideNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SlideNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo";
}
unsafe impl Send for SlideNavigationTransitionInfo {}
unsafe impl Sync for SlideNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SplineColorKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SplineColorKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SplineColorKeyFrame,
    ColorKeyFrame,
    super::super::DependencyObject
);
impl SplineColorKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplineColorKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> windows_core::Result<windows::UI::Color> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: windows::UI::Color) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue2<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn KeySpline(&self) -> windows_core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySpline)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeySpline<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<KeySpline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeySpline)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplineColorKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySplineProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISplineColorKeyFrameStatics<
        R,
        F: FnOnce(&ISplineColorKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplineColorKeyFrame,
            ISplineColorKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SplineColorKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISplineColorKeyFrame>();
}
unsafe impl windows_core::Interface for SplineColorKeyFrame {
    type Vtable = <ISplineColorKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISplineColorKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SplineColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame";
}
unsafe impl Send for SplineColorKeyFrame {}
unsafe impl Sync for SplineColorKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SplineDoubleKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SplineDoubleKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SplineDoubleKeyFrame,
    DoubleKeyFrame,
    super::super::DependencyObject
);
impl SplineDoubleKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplineDoubleKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeySpline(&self) -> windows_core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySpline)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeySpline<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<KeySpline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeySpline)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplineDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySplineProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISplineDoubleKeyFrameStatics<
        R,
        F: FnOnce(&ISplineDoubleKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplineDoubleKeyFrame,
            ISplineDoubleKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SplineDoubleKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISplineDoubleKeyFrame>();
}
unsafe impl windows_core::Interface for SplineDoubleKeyFrame {
    type Vtable = <ISplineDoubleKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISplineDoubleKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SplineDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame";
}
unsafe impl Send for SplineDoubleKeyFrame {}
unsafe impl Sync for SplineDoubleKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SplinePointKeyFrame(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SplinePointKeyFrame,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SplinePointKeyFrame,
    PointKeyFrame,
    super::super::DependencyObject
);
impl SplinePointKeyFrame {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplinePointKeyFrame,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue2(&self, value: windows::Foundation::Point) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> windows_core::Result<KeyTime> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTime)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeySpline(&self) -> windows_core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySpline)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeySpline<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<KeySpline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeySpline)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplinePointKeyFrameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeySplineProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISplinePointKeyFrameStatics<
        R,
        F: FnOnce(&ISplinePointKeyFrameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplinePointKeyFrame,
            ISplinePointKeyFrameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SplinePointKeyFrame {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISplinePointKeyFrame>();
}
unsafe impl windows_core::Interface for SplinePointKeyFrame {
    type Vtable = <ISplinePointKeyFrame as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISplinePointKeyFrame as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SplinePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame";
}
unsafe impl Send for SplinePointKeyFrame {}
unsafe impl Sync for SplinePointKeyFrame {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SplitCloseThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SplitCloseThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SplitCloseThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl SplitCloseThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplitCloseThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OpenedTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetOpenedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn OpenedTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetOpenedTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClosedTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetClosedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ClosedTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClosedTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetContentTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ContentTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContentTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OpenedLength(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpenedLength(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClosedLength(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetClosedLength(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetFromCenter(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetFromCenter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffsetFromCenter(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffsetFromCenter)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContentTranslationDirection(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTranslationDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentTranslationOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetContentTranslationOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTranslationOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpenedTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OpenedTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OpenedLengthProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedLengthProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedLengthProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedLengthProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OffsetFromCenterProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetFromCenterProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTranslationDirectionProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationDirectionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTranslationOffsetProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn ISplitCloseThemeAnimationStatics<
        R,
        F: FnOnce(&ISplitCloseThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplitCloseThemeAnimation,
            ISplitCloseThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SplitCloseThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISplitCloseThemeAnimation>();
}
unsafe impl windows_core::Interface for SplitCloseThemeAnimation {
    type Vtable = <ISplitCloseThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISplitCloseThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SplitCloseThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation";
}
unsafe impl Send for SplitCloseThemeAnimation {}
unsafe impl Sync for SplitCloseThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SplitOpenThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SplitOpenThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SplitOpenThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl SplitOpenThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplitOpenThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OpenedTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetOpenedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn OpenedTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetOpenedTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClosedTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetClosedTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ClosedTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetClosedTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetContentTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ContentTarget(&self) -> windows_core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetContentTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OpenedLength(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpenedLength(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpenedLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClosedLength(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedLength)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetClosedLength(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClosedLength)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetFromCenter(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetFromCenter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffsetFromCenter(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffsetFromCenter)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContentTranslationDirection(
        &self,
    ) -> windows_core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTranslationDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentTranslationOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetContentTranslationOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContentTranslationOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpenedTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OpenedTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTargetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OpenedLengthProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpenedLengthProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClosedLengthProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClosedLengthProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OffsetFromCenterProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetFromCenterProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTranslationDirectionProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationDirectionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContentTranslationOffsetProperty(
    ) -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentTranslationOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn ISplitOpenThemeAnimationStatics<
        R,
        F: FnOnce(&ISplitOpenThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SplitOpenThemeAnimation,
            ISplitOpenThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SplitOpenThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISplitOpenThemeAnimation>();
}
unsafe impl windows_core::Interface for SplitOpenThemeAnimation {
    type Vtable = <ISplitOpenThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISplitOpenThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SplitOpenThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation";
}
unsafe impl Send for SplitOpenThemeAnimation {}
unsafe impl Sync for SplitOpenThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Storyboard(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Storyboard,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Storyboard, Timeline, super::super::DependencyObject);
impl Storyboard {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            Storyboard,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Children(&self) -> windows_core::Result<TimelineCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Seek(&self, offset: windows::Foundation::TimeSpan) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Seek)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn Stop(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Stop)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn Begin(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Begin)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Pause(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Pause)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Resume(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resume)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetCurrentState(&self) -> windows_core::Result<ClockState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCurrentState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetCurrentTime(&self) -> windows_core::Result<windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCurrentTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SeekAlignedToLastTick(
        &self,
        offset: windows::Foundation::TimeSpan,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SeekAlignedToLastTick)(
                windows_core::Interface::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn SkipToFill(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SkipToFill)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn TargetPropertyProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetPropertyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetTargetProperty<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<Timeline>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTargetProperty)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetTargetProperty<P0>(
        element: P0,
        path: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Timeline>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetTargetProperty)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(path),
            )
            .ok()
        })
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetTargetName<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<Timeline>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetTargetName)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetTargetName<P0>(element: P0, name: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Timeline>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(name),
            )
            .ok()
        })
    }
    pub fn SetTarget<P0, P1>(timeline: P0, target: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Timeline>,
        P1: windows_core::Param<super::super::DependencyObject>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetTarget)(
                windows_core::Interface::as_raw(this),
                timeline.param().abi(),
                target.param().abi(),
            )
            .ok()
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn IStoryboardStatics<R, F: FnOnce(&IStoryboardStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Storyboard, IStoryboardStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Storyboard {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IStoryboard>();
}
unsafe impl windows_core::Interface for Storyboard {
    type Vtable = <IStoryboard as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IStoryboard as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Storyboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Storyboard";
}
unsafe impl Send for Storyboard {}
unsafe impl Sync for Storyboard {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SuppressNavigationTransitionInfo(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SuppressNavigationTransitionInfo,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SuppressNavigationTransitionInfo,
    NavigationTransitionInfo,
    super::super::DependencyObject
);
impl SuppressNavigationTransitionInfo {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SuppressNavigationTransitionInfo,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetNavigationStateCore(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetNavigationStateCore(
        &self,
        navigationstate: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<INavigationTransitionInfoOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigationStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(navigationstate),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for SuppressNavigationTransitionInfo {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISuppressNavigationTransitionInfo>();
}
unsafe impl windows_core::Interface for SuppressNavigationTransitionInfo {
    type Vtable = <ISuppressNavigationTransitionInfo as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISuppressNavigationTransitionInfo as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SuppressNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo";
}
unsafe impl Send for SuppressNavigationTransitionInfo {}
unsafe impl Sync for SuppressNavigationTransitionInfo {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SwipeBackThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SwipeBackThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SwipeBackThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl SwipeBackThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SwipeBackThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFromVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty>
    {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FromVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn ISwipeBackThemeAnimationStatics<
        R,
        F: FnOnce(&ISwipeBackThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SwipeBackThemeAnimation,
            ISwipeBackThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SwipeBackThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISwipeBackThemeAnimation>();
}
unsafe impl windows_core::Interface for SwipeBackThemeAnimation {
    type Vtable = <ISwipeBackThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISwipeBackThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SwipeBackThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation";
}
unsafe impl Send for SwipeBackThemeAnimation {}
unsafe impl Sync for SwipeBackThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SwipeHintThemeAnimation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SwipeHintThemeAnimation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    SwipeHintThemeAnimation,
    Timeline,
    super::super::DependencyObject
);
impl SwipeHintThemeAnimation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SwipeHintThemeAnimation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TargetName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetTargetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTargetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ToHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetToHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetToHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ToVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetToVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetToVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToHorizontalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ToVerticalOffsetProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    fn ISwipeHintThemeAnimationStatics<
        R,
        F: FnOnce(&ISwipeHintThemeAnimationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SwipeHintThemeAnimation,
            ISwipeHintThemeAnimationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SwipeHintThemeAnimation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISwipeHintThemeAnimation>();
}
unsafe impl windows_core::Interface for SwipeHintThemeAnimation {
    type Vtable = <ISwipeHintThemeAnimation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISwipeHintThemeAnimation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SwipeHintThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation";
}
unsafe impl Send for SwipeHintThemeAnimation {}
unsafe impl Sync for SwipeHintThemeAnimation {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Timeline(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Timeline,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Timeline, super::super::DependencyObject);
impl Timeline {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AutoReverse(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverse)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutoReverse)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<windows::Foundation::TimeSpan>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetBeginTime<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<windows::Foundation::TimeSpan>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBeginTime)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> windows_core::Result<super::super::Duration> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Duration)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDuration)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatio)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSpeedRatio)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> windows_core::Result<FillBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFillBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> windows_core::Result<RepeatBehavior> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehavior)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRepeatBehavior)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Completed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Timeline> {
        Self::ITimelineFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AllowDependentAnimations() -> windows_core::Result<bool> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDependentAnimations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetAllowDependentAnimations(value: bool) -> windows_core::Result<()> {
        Self::ITimelineStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAllowDependentAnimations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        })
    }
    pub fn AutoReverseProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutoReverseProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn BeginTimeProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BeginTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DurationProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DurationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SpeedRatioProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SpeedRatioProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FillBehaviorProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillBehaviorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RepeatBehaviorProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RepeatBehaviorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITimelineFactory<R, F: FnOnce(&ITimelineFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Timeline, ITimelineFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ITimelineStatics<R, F: FnOnce(&ITimelineStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Timeline, ITimelineStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Timeline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITimeline>();
}
unsafe impl windows_core::Interface for Timeline {
    type Vtable = <ITimeline as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITimeline as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Timeline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Timeline";
}
unsafe impl Send for Timeline {}
unsafe impl Sync for Timeline {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TimelineCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TimelineCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<Timeline>
);
windows_core::imp::required_hierarchy!(
    TimelineCollection,
    windows_collections::IIterable<Timeline>
);
impl TimelineCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TimelineCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Timeline>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<Timeline>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<Timeline> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<Timeline>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<Timeline>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Timeline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Timeline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Timeline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<Timeline>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<Timeline>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for TimelineCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, windows_collections::IVector<Timeline>>();
}
unsafe impl windows_core::Interface for TimelineCollection {
    type Vtable = <windows_collections::IVector<Timeline> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<Timeline> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TimelineCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.TimelineCollection";
}
unsafe impl Send for TimelineCollection {}
unsafe impl Sync for TimelineCollection {}
impl IntoIterator for TimelineCollection {
    type Item = Timeline;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &TimelineCollection {
    type Item = Timeline;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Transition(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Transition,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Transition, super::super::DependencyObject);
impl Transition {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for Transition {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITransition>();
}
unsafe impl windows_core::Interface for Transition {
    type Vtable = <ITransition as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITransition as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Transition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Transition";
}
unsafe impl Send for Transition {}
unsafe impl Sync for Transition {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TransitionCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TransitionCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<Transition>
);
windows_core::imp::required_hierarchy!(
    TransitionCollection,
    windows_collections::IIterable<Transition>
);
impl TransitionCollection {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TransitionCollection,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Transition>> {
        let this =
            &windows_core::Interface::cast::<windows_collections::IIterable<Transition>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<Transition> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<Transition>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<Transition>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Transition>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Transition>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Transition>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<Transition>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<Transition>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for TransitionCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        windows_collections::IVector<Transition>,
    >();
}
unsafe impl windows_core::Interface for TransitionCollection {
    type Vtable = <windows_collections::IVector<Transition> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<Transition> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TransitionCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.TransitionCollection";
}
unsafe impl Send for TransitionCollection {}
unsafe impl Sync for TransitionCollection {}
impl IntoIterator for TransitionCollection {
    type Item = Transition;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &TransitionCollection {
    type Item = Transition;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
