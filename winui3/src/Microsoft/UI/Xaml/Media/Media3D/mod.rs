// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CompositeTransform3D(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    CompositeTransform3D,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    CompositeTransform3D,
    Transform3D,
    super::super::DependencyObject
);
impl CompositeTransform3D {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositeTransform3D,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CenterX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterZ(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterZ)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterZ(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterZ)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationZ(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationZ)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationZ(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationZ)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleZ(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleZ)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScaleZ(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleZ)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslateX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslateX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslateX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslateY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslateY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslateY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslateZ(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateZ)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslateZ(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslateZ)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterXProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CenterYProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CenterZProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterZProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RotationXProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RotationYProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RotationZProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationZProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ScaleXProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ScaleYProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ScaleZProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleZProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TranslateXProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TranslateYProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TranslateZProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::ICompositeTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslateZProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn ICompositeTransform3DStatics<
        R,
        F: FnOnce(&ICompositeTransform3DStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            CompositeTransform3D,
            ICompositeTransform3DStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for CompositeTransform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ICompositeTransform3D>();
}
unsafe impl windows_core::Interface for CompositeTransform3D {
    type Vtable = <ICompositeTransform3D as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ICompositeTransform3D as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for CompositeTransform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D";
}
unsafe impl Send for CompositeTransform3D {}
unsafe impl Sync for CompositeTransform3D {}
windows_core::imp::define_interface!(
    ICompositeTransform3D,
    ICompositeTransform3D_Vtbl,
    0xcbaf163f_c254_5dcf_8ae4_40e21ce1b4ca
);
impl windows_core::RuntimeType for ICompositeTransform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositeTransform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3D";
}
pub trait ICompositeTransform3D_Impl: windows_core::IUnknownImpl {
    fn CenterX(&self) -> windows_core::Result<f64>;
    fn SetCenterX(&self, value: f64) -> windows_core::Result<()>;
    fn CenterY(&self) -> windows_core::Result<f64>;
    fn SetCenterY(&self, value: f64) -> windows_core::Result<()>;
    fn CenterZ(&self) -> windows_core::Result<f64>;
    fn SetCenterZ(&self, value: f64) -> windows_core::Result<()>;
    fn RotationX(&self) -> windows_core::Result<f64>;
    fn SetRotationX(&self, value: f64) -> windows_core::Result<()>;
    fn RotationY(&self) -> windows_core::Result<f64>;
    fn SetRotationY(&self, value: f64) -> windows_core::Result<()>;
    fn RotationZ(&self) -> windows_core::Result<f64>;
    fn SetRotationZ(&self, value: f64) -> windows_core::Result<()>;
    fn ScaleX(&self) -> windows_core::Result<f64>;
    fn SetScaleX(&self, value: f64) -> windows_core::Result<()>;
    fn ScaleY(&self) -> windows_core::Result<f64>;
    fn SetScaleY(&self, value: f64) -> windows_core::Result<()>;
    fn ScaleZ(&self) -> windows_core::Result<f64>;
    fn SetScaleZ(&self, value: f64) -> windows_core::Result<()>;
    fn TranslateX(&self) -> windows_core::Result<f64>;
    fn SetTranslateX(&self, value: f64) -> windows_core::Result<()>;
    fn TranslateY(&self) -> windows_core::Result<f64>;
    fn SetTranslateY(&self, value: f64) -> windows_core::Result<()>;
    fn TranslateZ(&self) -> windows_core::Result<f64>;
    fn SetTranslateZ(&self, value: f64) -> windows_core::Result<()>;
}
impl ICompositeTransform3D_Vtbl {
    pub const fn new<Identity: ICompositeTransform3D_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CenterX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::CenterX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetCenterX(this, value).into()
            }
        }
        unsafe extern "system" fn CenterY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::CenterY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetCenterY(this, value).into()
            }
        }
        unsafe extern "system" fn CenterZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::CenterZ(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCenterZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetCenterZ(this, value).into()
            }
        }
        unsafe extern "system" fn RotationX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::RotationX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetRotationX(this, value).into()
            }
        }
        unsafe extern "system" fn RotationY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::RotationY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetRotationY(this, value).into()
            }
        }
        unsafe extern "system" fn RotationZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::RotationZ(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetRotationZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetRotationZ(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::ScaleX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetScaleX(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::ScaleY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetScaleY(this, value).into()
            }
        }
        unsafe extern "system" fn ScaleZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::ScaleZ(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetScaleZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetScaleZ(this, value).into()
            }
        }
        unsafe extern "system" fn TranslateX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::TranslateX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTranslateX<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetTranslateX(this, value).into()
            }
        }
        unsafe extern "system" fn TranslateY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::TranslateY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTranslateY<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetTranslateY(this, value).into()
            }
        }
        unsafe extern "system" fn TranslateZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3D_Impl::TranslateZ(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTranslateZ<
            Identity: ICompositeTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ICompositeTransform3D_Impl::SetTranslateZ(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ICompositeTransform3D, OFFSET>(
            ),
            CenterX: CenterX::<Identity, OFFSET>,
            SetCenterX: SetCenterX::<Identity, OFFSET>,
            CenterY: CenterY::<Identity, OFFSET>,
            SetCenterY: SetCenterY::<Identity, OFFSET>,
            CenterZ: CenterZ::<Identity, OFFSET>,
            SetCenterZ: SetCenterZ::<Identity, OFFSET>,
            RotationX: RotationX::<Identity, OFFSET>,
            SetRotationX: SetRotationX::<Identity, OFFSET>,
            RotationY: RotationY::<Identity, OFFSET>,
            SetRotationY: SetRotationY::<Identity, OFFSET>,
            RotationZ: RotationZ::<Identity, OFFSET>,
            SetRotationZ: SetRotationZ::<Identity, OFFSET>,
            ScaleX: ScaleX::<Identity, OFFSET>,
            SetScaleX: SetScaleX::<Identity, OFFSET>,
            ScaleY: ScaleY::<Identity, OFFSET>,
            SetScaleY: SetScaleY::<Identity, OFFSET>,
            ScaleZ: ScaleZ::<Identity, OFFSET>,
            SetScaleZ: SetScaleZ::<Identity, OFFSET>,
            TranslateX: TranslateX::<Identity, OFFSET>,
            SetTranslateX: SetTranslateX::<Identity, OFFSET>,
            TranslateY: TranslateY::<Identity, OFFSET>,
            SetTranslateY: SetTranslateY::<Identity, OFFSET>,
            TranslateZ: TranslateZ::<Identity, OFFSET>,
            SetTranslateZ: SetTranslateZ::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositeTransform3D as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositeTransform3D_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CenterX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetCenterX: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub CenterY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetCenterY: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub CenterZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetCenterZ: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub RotationX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetRotationX:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub RotationY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetRotationY:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub RotationZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetRotationZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ScaleX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetScaleX: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ScaleY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetScaleY: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ScaleZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetScaleZ: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub TranslateX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetTranslateX:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub TranslateY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetTranslateY:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub TranslateZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetTranslateZ:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICompositeTransform3DStatics,
    ICompositeTransform3DStatics_Vtbl,
    0xb64d4181_6988_5d46_858a_224db7089dc4
);
impl windows_core::RuntimeType for ICompositeTransform3DStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ICompositeTransform3DStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics";
}
pub trait ICompositeTransform3DStatics_Impl: windows_core::IUnknownImpl {
    fn CenterXProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn CenterYProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn CenterZProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn RotationXProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn RotationYProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn RotationZProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ScaleXProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ScaleYProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn ScaleZProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn TranslateXProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn TranslateYProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn TranslateZProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl ICompositeTransform3DStatics_Vtbl {
    pub const fn new<Identity: ICompositeTransform3DStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CenterXProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::CenterXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CenterYProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::CenterYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CenterZProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::CenterZProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RotationXProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::RotationXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RotationYProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::RotationYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RotationZProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::RotationZProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleXProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::ScaleXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleYProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::ScaleYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ScaleZProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::ScaleZProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TranslateXProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::TranslateXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TranslateYProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::TranslateYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TranslateZProperty<
            Identity: ICompositeTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICompositeTransform3DStatics_Impl::TranslateZProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICompositeTransform3DStatics,
                OFFSET,
            >(),
            CenterXProperty: CenterXProperty::<Identity, OFFSET>,
            CenterYProperty: CenterYProperty::<Identity, OFFSET>,
            CenterZProperty: CenterZProperty::<Identity, OFFSET>,
            RotationXProperty: RotationXProperty::<Identity, OFFSET>,
            RotationYProperty: RotationYProperty::<Identity, OFFSET>,
            RotationZProperty: RotationZProperty::<Identity, OFFSET>,
            ScaleXProperty: ScaleXProperty::<Identity, OFFSET>,
            ScaleYProperty: ScaleYProperty::<Identity, OFFSET>,
            ScaleZProperty: ScaleZProperty::<Identity, OFFSET>,
            TranslateXProperty: TranslateXProperty::<Identity, OFFSET>,
            TranslateYProperty: TranslateYProperty::<Identity, OFFSET>,
            TranslateZProperty: TranslateZProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICompositeTransform3DStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositeTransform3DStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CenterXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CenterYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CenterZProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RotationXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RotationYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RotationZProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ScaleXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ScaleYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ScaleZProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TranslateXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TranslateYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TranslateZProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IMatrix3DHelper,
    IMatrix3DHelper_Vtbl,
    0xd2909be1_9c28_5b38_b63c_88e838644533
);
impl windows_core::RuntimeType for IMatrix3DHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IMatrix3DHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.IMatrix3DHelper";
}
pub trait IMatrix3DHelper_Impl: windows_core::IUnknownImpl {}
impl IMatrix3DHelper_Vtbl {
    pub const fn new<Identity: IMatrix3DHelper_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IMatrix3DHelper, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMatrix3DHelper as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMatrix3DHelper_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IMatrix3DHelperStatics,
    IMatrix3DHelperStatics_Vtbl,
    0x930e447b_265c_5ded_9e64_57b8933c55c3
);
impl windows_core::RuntimeType for IMatrix3DHelperStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IMatrix3DHelperStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics";
}
pub trait IMatrix3DHelperStatics_Impl: windows_core::IUnknownImpl {
    fn Identity(&self) -> windows_core::Result<Matrix3D>;
    fn Multiply(&self, matrix1: &Matrix3D, matrix2: &Matrix3D) -> windows_core::Result<Matrix3D>;
    fn FromElements(
        &self,
        m11: f64,
        m12: f64,
        m13: f64,
        m14: f64,
        m21: f64,
        m22: f64,
        m23: f64,
        m24: f64,
        m31: f64,
        m32: f64,
        m33: f64,
        m34: f64,
        offsetX: f64,
        offsetY: f64,
        offsetZ: f64,
        m44: f64,
    ) -> windows_core::Result<Matrix3D>;
    fn GetHasInverse(&self, target: &Matrix3D) -> windows_core::Result<bool>;
    fn GetIsIdentity(&self, target: &Matrix3D) -> windows_core::Result<bool>;
    fn Invert(&self, target: &Matrix3D) -> windows_core::Result<Matrix3D>;
}
impl IMatrix3DHelperStatics_Vtbl {
    pub const fn new<Identity: IMatrix3DHelperStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Identity<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut Matrix3D,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::Identity(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Multiply<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            matrix1: Matrix3D,
            matrix2: Matrix3D,
            result__: *mut Matrix3D,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::Multiply(
                    this,
                    core::mem::transmute(&matrix1),
                    core::mem::transmute(&matrix2),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FromElements<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            m11: f64,
            m12: f64,
            m13: f64,
            m14: f64,
            m21: f64,
            m22: f64,
            m23: f64,
            m24: f64,
            m31: f64,
            m32: f64,
            m33: f64,
            m34: f64,
            offsetx: f64,
            offsety: f64,
            offsetz: f64,
            m44: f64,
            result__: *mut Matrix3D,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::FromElements(
                    this, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetx,
                    offsety, offsetz, m44,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHasInverse<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: Matrix3D,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::GetHasInverse(
                    this,
                    core::mem::transmute(&target),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsIdentity<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: Matrix3D,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::GetIsIdentity(
                    this,
                    core::mem::transmute(&target),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Invert<
            Identity: IMatrix3DHelperStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            target: Matrix3D,
            result__: *mut Matrix3D,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMatrix3DHelperStatics_Impl::Invert(this, core::mem::transmute(&target)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IMatrix3DHelperStatics, OFFSET>(
            ),
            Identity: Identity::<Identity, OFFSET>,
            Multiply: Multiply::<Identity, OFFSET>,
            FromElements: FromElements::<Identity, OFFSET>,
            GetHasInverse: GetHasInverse::<Identity, OFFSET>,
            GetIsIdentity: GetIsIdentity::<Identity, OFFSET>,
            Invert: Invert::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMatrix3DHelperStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMatrix3DHelperStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Identity:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut Matrix3D) -> windows_core::HRESULT,
    pub Multiply: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        Matrix3D,
        Matrix3D,
        *mut Matrix3D,
    ) -> windows_core::HRESULT,
    pub FromElements: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        f64,
        *mut Matrix3D,
    ) -> windows_core::HRESULT,
    pub GetHasInverse: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        Matrix3D,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub GetIsIdentity: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        Matrix3D,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub Invert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        Matrix3D,
        *mut Matrix3D,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPerspectiveTransform3D,
    IPerspectiveTransform3D_Vtbl,
    0x4006cc46_684e_54ea_a421_dae5b0556b85
);
impl windows_core::RuntimeType for IPerspectiveTransform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPerspectiveTransform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3D";
}
pub trait IPerspectiveTransform3D_Impl: windows_core::IUnknownImpl {
    fn Depth(&self) -> windows_core::Result<f64>;
    fn SetDepth(&self, value: f64) -> windows_core::Result<()>;
    fn OffsetX(&self) -> windows_core::Result<f64>;
    fn SetOffsetX(&self, value: f64) -> windows_core::Result<()>;
    fn OffsetY(&self) -> windows_core::Result<f64>;
    fn SetOffsetY(&self, value: f64) -> windows_core::Result<()>;
}
impl IPerspectiveTransform3D_Vtbl {
    pub const fn new<Identity: IPerspectiveTransform3D_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Depth<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3D_Impl::Depth(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDepth<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPerspectiveTransform3D_Impl::SetDepth(this, value).into()
            }
        }
        unsafe extern "system" fn OffsetX<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3D_Impl::OffsetX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffsetX<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPerspectiveTransform3D_Impl::SetOffsetX(this, value).into()
            }
        }
        unsafe extern "system" fn OffsetY<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3D_Impl::OffsetY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOffsetY<
            Identity: IPerspectiveTransform3D_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IPerspectiveTransform3D_Impl::SetOffsetY(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPerspectiveTransform3D, OFFSET>(
            ),
            Depth: Depth::<Identity, OFFSET>,
            SetDepth: SetDepth::<Identity, OFFSET>,
            OffsetX: OffsetX::<Identity, OFFSET>,
            SetOffsetX: SetOffsetX::<Identity, OFFSET>,
            OffsetY: OffsetY::<Identity, OFFSET>,
            SetOffsetY: SetOffsetY::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPerspectiveTransform3D as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPerspectiveTransform3D_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Depth: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetDepth: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OffsetX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOffsetX: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OffsetY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOffsetY: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPerspectiveTransform3DStatics,
    IPerspectiveTransform3DStatics_Vtbl,
    0x3b16aa8d_0ee2_5d46_a723_dc8e5c1c0b19
);
impl windows_core::RuntimeType for IPerspectiveTransform3DStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPerspectiveTransform3DStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics";
}
pub trait IPerspectiveTransform3DStatics_Impl: windows_core::IUnknownImpl {
    fn DepthProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OffsetXProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
    fn OffsetYProperty(&self) -> windows_core::Result<super::super::DependencyProperty>;
}
impl IPerspectiveTransform3DStatics_Vtbl {
    pub const fn new<Identity: IPerspectiveTransform3DStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DepthProperty<
            Identity: IPerspectiveTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3DStatics_Impl::DepthProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OffsetXProperty<
            Identity: IPerspectiveTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3DStatics_Impl::OffsetXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OffsetYProperty<
            Identity: IPerspectiveTransform3DStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPerspectiveTransform3DStatics_Impl::OffsetYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IPerspectiveTransform3DStatics,
                OFFSET,
            >(),
            DepthProperty: DepthProperty::<Identity, OFFSET>,
            OffsetXProperty: OffsetXProperty::<Identity, OFFSET>,
            OffsetYProperty: OffsetYProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPerspectiveTransform3DStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPerspectiveTransform3DStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DepthProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OffsetXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OffsetYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransform3D,
    ITransform3D_Vtbl,
    0xafea4941_2e49_533c_9f8f_2c126ef9893a
);
impl windows_core::RuntimeType for ITransform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.ITransform3D";
}
pub trait ITransform3D_Impl: windows_core::IUnknownImpl {}
impl ITransform3D_Vtbl {
    pub const fn new<Identity: ITransform3D_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransform3D, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransform3D as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransform3D_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITransform3DFactory,
    ITransform3DFactory_Vtbl,
    0x9bcce0a1_10ac_5319_bdf1_548d2e5ae504
);
impl windows_core::RuntimeType for ITransform3DFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransform3DFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactory";
}
pub trait ITransform3DFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Transform3D>;
}
impl ITransform3DFactory_Vtbl {
    pub const fn new<Identity: ITransform3DFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ITransform3DFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransform3DFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransform3DFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransform3DFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransform3DFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct Matrix3D {
    pub M11: f64,
    pub M12: f64,
    pub M13: f64,
    pub M14: f64,
    pub M21: f64,
    pub M22: f64,
    pub M23: f64,
    pub M24: f64,
    pub M31: f64,
    pub M32: f64,
    pub M33: f64,
    pub M34: f64,
    pub OffsetX: f64,
    pub OffsetY: f64,
    pub OffsetZ: f64,
    pub M44: f64,
}
impl windows_core::TypeKind for Matrix3D {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for Matrix3D {
    const SIGNATURE :windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice ( b"struct(Microsoft.UI.Xaml.Media.Media3D.Matrix3D;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8;f8)" ) ;
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Matrix3DHelper(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Matrix3DHelper,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl Matrix3DHelper {
    pub fn Identity() -> windows_core::Result<Matrix3D> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Identity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn Multiply(matrix1: Matrix3D, matrix2: Matrix3D) -> windows_core::Result<Matrix3D> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Multiply)(
                windows_core::Interface::as_raw(this),
                matrix1,
                matrix2,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn FromElements(
        m11: f64,
        m12: f64,
        m13: f64,
        m14: f64,
        m21: f64,
        m22: f64,
        m23: f64,
        m24: f64,
        m31: f64,
        m32: f64,
        m33: f64,
        m34: f64,
        offsetx: f64,
        offsety: f64,
        offsetz: f64,
        m44: f64,
    ) -> windows_core::Result<Matrix3D> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FromElements)(
                windows_core::Interface::as_raw(this),
                m11,
                m12,
                m13,
                m14,
                m21,
                m22,
                m23,
                m24,
                m31,
                m32,
                m33,
                m34,
                offsetx,
                offsety,
                offsetz,
                m44,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn GetHasInverse(target: Matrix3D) -> windows_core::Result<bool> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHasInverse)(
                windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn GetIsIdentity(target: Matrix3D) -> windows_core::Result<bool> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsIdentity)(
                windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn Invert(target: Matrix3D) -> windows_core::Result<Matrix3D> {
        Self::IMatrix3DHelperStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Invert)(
                windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn IMatrix3DHelperStatics<R, F: FnOnce(&IMatrix3DHelperStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Matrix3DHelper, IMatrix3DHelperStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Matrix3DHelper {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IMatrix3DHelper>();
}
unsafe impl windows_core::Interface for Matrix3DHelper {
    type Vtable = <IMatrix3DHelper as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IMatrix3DHelper as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Matrix3DHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper";
}
unsafe impl Send for Matrix3DHelper {}
unsafe impl Sync for Matrix3DHelper {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PerspectiveTransform3D(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PerspectiveTransform3D,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    PerspectiveTransform3D,
    Transform3D,
    super::super::DependencyObject
);
impl PerspectiveTransform3D {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PerspectiveTransform3D,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Depth(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Depth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDepth(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDepth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffsetX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffsetX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOffsetY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOffsetY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DepthProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPerspectiveTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DepthProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OffsetXProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPerspectiveTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OffsetYProperty() -> windows_core::Result<super::super::DependencyProperty> {
        Self::IPerspectiveTransform3DStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OffsetYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPerspectiveTransform3DStatics<
        R,
        F: FnOnce(&IPerspectiveTransform3DStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            PerspectiveTransform3D,
            IPerspectiveTransform3DStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PerspectiveTransform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPerspectiveTransform3D>();
}
unsafe impl windows_core::Interface for PerspectiveTransform3D {
    type Vtable = <IPerspectiveTransform3D as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPerspectiveTransform3D as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PerspectiveTransform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D";
}
unsafe impl Send for PerspectiveTransform3D {}
unsafe impl Sync for PerspectiveTransform3D {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Transform3D(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Transform3D,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Transform3D, super::super::DependencyObject);
impl Transform3D {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn new() -> windows_core::Result<Transform3D> {
        Self::ITransform3DFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITransform3DFactory<R, F: FnOnce(&ITransform3DFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Transform3D, ITransform3DFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Transform3D {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITransform3D>();
}
unsafe impl windows_core::Interface for Transform3D {
    type Vtable = <ITransform3D as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITransform3D as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Transform3D {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Media3D.Transform3D";
}
unsafe impl Send for Transform3D {}
unsafe impl Sync for Transform3D {}
