// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct FrameNavigationOptions(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    FrameNavigationOptions,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl FrameNavigationOptions {
    pub fn IsNavigationStackEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsNavigationStackEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsNavigationStackEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsNavigationStackEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn TransitionInfoOverride(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransitionInfoOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitionInfoOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Animation::NavigationTransitionInfo>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransitionInfoOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<FrameNavigationOptions> {
        Self::IFrameNavigationOptionsFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IFrameNavigationOptionsFactory<
        R,
        F: FnOnce(&IFrameNavigationOptionsFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            FrameNavigationOptions,
            IFrameNavigationOptionsFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for FrameNavigationOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IFrameNavigationOptions>();
}
unsafe impl windows_core::Interface for FrameNavigationOptions {
    type Vtable = <IFrameNavigationOptions as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IFrameNavigationOptions as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for FrameNavigationOptions {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.FrameNavigationOptions";
}
unsafe impl Send for FrameNavigationOptions {}
unsafe impl Sync for FrameNavigationOptions {}
windows_core::imp::define_interface!(
    IFrameNavigationOptions,
    IFrameNavigationOptions_Vtbl,
    0x390de593_14cf_5312_af99_6cd8d59ec5d5
);
impl windows_core::RuntimeType for IFrameNavigationOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl windows_core::RuntimeName for IFrameNavigationOptions {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.IFrameNavigationOptions";
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
pub trait IFrameNavigationOptions_Impl: windows_core::IUnknownImpl {
    fn IsNavigationStackEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsNavigationStackEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn TransitionInfoOverride(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo>;
    fn SetTransitionInfoOverride(
        &self,
        value: windows_core::Ref<'_, super::Media::Animation::NavigationTransitionInfo>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl IFrameNavigationOptions_Vtbl {
    pub const fn new<Identity: IFrameNavigationOptions_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsNavigationStackEnabled<
            Identity: IFrameNavigationOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFrameNavigationOptions_Impl::IsNavigationStackEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsNavigationStackEnabled<
            Identity: IFrameNavigationOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IFrameNavigationOptions_Impl::SetIsNavigationStackEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn TransitionInfoOverride<
            Identity: IFrameNavigationOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFrameNavigationOptions_Impl::TransitionInfoOverride(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTransitionInfoOverride<
            Identity: IFrameNavigationOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IFrameNavigationOptions_Impl::SetTransitionInfoOverride(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IFrameNavigationOptions, OFFSET>(
            ),
            IsNavigationStackEnabled: IsNavigationStackEnabled::<Identity, OFFSET>,
            SetIsNavigationStackEnabled: SetIsNavigationStackEnabled::<Identity, OFFSET>,
            TransitionInfoOverride: TransitionInfoOverride::<Identity, OFFSET>,
            SetTransitionInfoOverride: SetTransitionInfoOverride::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFrameNavigationOptions as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameNavigationOptions_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsNavigationStackEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsNavigationStackEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub TransitionInfoOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    TransitionInfoOverride: usize,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub SetTransitionInfoOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    SetTransitionInfoOverride: usize,
}
windows_core::imp::define_interface!(
    IFrameNavigationOptionsFactory,
    IFrameNavigationOptionsFactory_Vtbl,
    0xddf3f748_7127_5cee_9f79_ac281a234632
);
impl windows_core::RuntimeType for IFrameNavigationOptionsFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IFrameNavigationOptionsFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.IFrameNavigationOptionsFactory";
}
pub trait IFrameNavigationOptionsFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<FrameNavigationOptions>;
}
impl IFrameNavigationOptionsFactory_Vtbl {
    pub const fn new<Identity: IFrameNavigationOptionsFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IFrameNavigationOptionsFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IFrameNavigationOptionsFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IFrameNavigationOptionsFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFrameNavigationOptionsFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameNavigationOptionsFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INavigatingCancelEventArgs,
    INavigatingCancelEventArgs_Vtbl,
    0x172fde12_e06f_5df6_930e_5facf7b3fbe7
);
impl windows_core::RuntimeType for INavigatingCancelEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl windows_core::RuntimeName for INavigatingCancelEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.INavigatingCancelEventArgs";
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
pub trait INavigatingCancelEventArgs_Impl: windows_core::IUnknownImpl {
    fn Cancel(&self) -> windows_core::Result<bool>;
    fn SetCancel(&self, value: bool) -> windows_core::Result<()>;
    fn NavigationMode(&self) -> windows_core::Result<NavigationMode>;
    fn SourcePageType(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
    fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo>;
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl INavigatingCancelEventArgs_Vtbl {
    pub const fn new<Identity: INavigatingCancelEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Cancel<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigatingCancelEventArgs_Impl::Cancel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCancel<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INavigatingCancelEventArgs_Impl::SetCancel(this, value).into()
            }
        }
        unsafe extern "system" fn NavigationMode<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut NavigationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigatingCancelEventArgs_Impl::NavigationMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SourcePageType<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigatingCancelEventArgs_Impl::SourcePageType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Parameter<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigatingCancelEventArgs_Impl::Parameter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationTransitionInfo<
            Identity: INavigatingCancelEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigatingCancelEventArgs_Impl::NavigationTransitionInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigatingCancelEventArgs,
                OFFSET,
            >(),
            Cancel: Cancel::<Identity, OFFSET>,
            SetCancel: SetCancel::<Identity, OFFSET>,
            NavigationMode: NavigationMode::<Identity, OFFSET>,
            SourcePageType: SourcePageType::<Identity, OFFSET>,
            Parameter: Parameter::<Identity, OFFSET>,
            NavigationTransitionInfo: NavigationTransitionInfo::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigatingCancelEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigatingCancelEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Cancel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub NavigationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut NavigationMode,
    ) -> windows_core::HRESULT,
    pub SourcePageType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
    pub Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub NavigationTransitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    NavigationTransitionInfo: usize,
}
windows_core::imp::define_interface!(
    INavigationEventArgs,
    INavigationEventArgs_Vtbl,
    0x876b70b4_2923_5785_9cea_2e44aa0761bd
);
impl windows_core::RuntimeType for INavigationEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl windows_core::RuntimeName for INavigationEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.INavigationEventArgs";
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
pub trait INavigationEventArgs_Impl: windows_core::IUnknownImpl {
    fn Content(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo>;
    fn SourcePageType(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
    fn NavigationMode(&self) -> windows_core::Result<NavigationMode>;
    fn Uri(&self) -> windows_core::Result<windows::Foundation::Uri>;
    fn SetUri(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::Uri>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl INavigationEventArgs_Vtbl {
    pub const fn new<Identity: INavigationEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Content<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::Content(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Parameter<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::Parameter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationTransitionInfo<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::NavigationTransitionInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SourcePageType<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::SourcePageType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationMode<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut NavigationMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::NavigationMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Uri<Identity: INavigationEventArgs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationEventArgs_Impl::Uri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUri<
            Identity: INavigationEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INavigationEventArgs_Impl::SetUri(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INavigationEventArgs, OFFSET>(
            ),
            Content: Content::<Identity, OFFSET>,
            Parameter: Parameter::<Identity, OFFSET>,
            NavigationTransitionInfo: NavigationTransitionInfo::<Identity, OFFSET>,
            SourcePageType: SourcePageType::<Identity, OFFSET>,
            NavigationMode: NavigationMode::<Identity, OFFSET>,
            Uri: Uri::<Identity, OFFSET>,
            SetUri: SetUri::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub NavigationTransitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    NavigationTransitionInfo: usize,
    pub SourcePageType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
    pub NavigationMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut NavigationMode,
    ) -> windows_core::HRESULT,
    pub Uri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INavigationFailedEventArgs,
    INavigationFailedEventArgs_Vtbl,
    0xf808f9a0_130c_5974_87f8_4433271a35a9
);
impl windows_core::RuntimeType for INavigationFailedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for INavigationFailedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.INavigationFailedEventArgs";
}
pub trait INavigationFailedEventArgs_Impl: windows_core::IUnknownImpl {
    fn Exception(&self) -> windows_core::Result<windows_core::HRESULT>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
    fn SourcePageType(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
}
impl INavigationFailedEventArgs_Vtbl {
    pub const fn new<Identity: INavigationFailedEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Exception<
            Identity: INavigationFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationFailedEventArgs_Impl::Exception(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Handled<
            Identity: INavigationFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationFailedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: INavigationFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INavigationFailedEventArgs_Impl::SetHandled(this, value).into()
            }
        }
        unsafe extern "system" fn SourcePageType<
            Identity: INavigationFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match INavigationFailedEventArgs_Impl::SourcePageType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                INavigationFailedEventArgs,
                OFFSET,
            >(),
            Exception: Exception::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
            SourcePageType: SourcePageType::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INavigationFailedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationFailedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Exception: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub SourcePageType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IPageStackEntry,
    IPageStackEntry_Vtbl,
    0xd591f56e_4262_5c91_9d79_29165cd82100
);
impl windows_core::RuntimeType for IPageStackEntry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl windows_core::RuntimeName for IPageStackEntry {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.IPageStackEntry";
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
pub trait IPageStackEntry_Impl: windows_core::IUnknownImpl {
    fn SourcePageType(&self) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName>;
    fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo>;
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl IPageStackEntry_Vtbl {
    pub const fn new<Identity: IPageStackEntry_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SourcePageType<
            Identity: IPageStackEntry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPageStackEntry_Impl::SourcePageType(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Parameter<Identity: IPageStackEntry_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPageStackEntry_Impl::Parameter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NavigationTransitionInfo<
            Identity: IPageStackEntry_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPageStackEntry_Impl::NavigationTransitionInfo(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPageStackEntry, OFFSET>(),
            SourcePageType: SourcePageType::<Identity, OFFSET>,
            Parameter: Parameter::<Identity, OFFSET>,
            NavigationTransitionInfo: NavigationTransitionInfo::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPageStackEntry as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageStackEntry_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SourcePageType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
    ) -> windows_core::HRESULT,
    pub Parameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub NavigationTransitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    NavigationTransitionInfo: usize,
}
windows_core::imp::define_interface!(
    IPageStackEntryFactory,
    IPageStackEntryFactory_Vtbl,
    0x7e5a9469_6108_5e92_a499_5ee9f065a68a
);
impl windows_core::RuntimeType for IPageStackEntryFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl windows_core::RuntimeName for IPageStackEntryFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.IPageStackEntryFactory";
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
pub trait IPageStackEntryFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        sourcePageType: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: windows_core::Ref<'_, windows_core::IInspectable>,
        navigationTransitionInfo: windows_core::Ref<
            '_,
            super::Media::Animation::NavigationTransitionInfo,
        >,
    ) -> windows_core::Result<PageStackEntry>;
}
#[cfg(feature = "UI_Xaml_Media_Animation")]
impl IPageStackEntryFactory_Vtbl {
    pub const fn new<Identity: IPageStackEntryFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IPageStackEntryFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sourcepagetype: core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
            parameter: *mut core::ffi::c_void,
            navigationtransitioninfo: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPageStackEntryFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&sourcepagetype),
                    core::mem::transmute_copy(&parameter),
                    core::mem::transmute_copy(&navigationtransitioninfo),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPageStackEntryFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPageStackEntryFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageStackEntryFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        core::mem::MaybeUninit<crate::Windows::UI::Xaml::Interop::TypeName>,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media_Animation"))]
    CreateInstance: usize,
}
windows_core::imp::define_interface!(
    IPageStackEntryStatics,
    IPageStackEntryStatics_Vtbl,
    0x2f1d4cb7_923b_59bb_bfc4_750933f28385
);
impl windows_core::RuntimeType for IPageStackEntryStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IPageStackEntryStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.IPageStackEntryStatics";
}
pub trait IPageStackEntryStatics_Impl: windows_core::IUnknownImpl {
    fn SourcePageTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IPageStackEntryStatics_Vtbl {
    pub const fn new<Identity: IPageStackEntryStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SourcePageTypeProperty<
            Identity: IPageStackEntryStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IPageStackEntryStatics_Impl::SourcePageTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IPageStackEntryStatics, OFFSET>(
            ),
            SourcePageTypeProperty: SourcePageTypeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IPageStackEntryStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IPageStackEntryStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SourcePageTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    NavigatedEventHandler,
    NavigatedEventHandler_Vtbl,
    0x8631b517_6d8e_58ee_82fe_d4034d1bd7c1
);
impl windows_core::RuntimeType for NavigatedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl NavigatedEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = NavigatedEventHandlerBox {
            vtable: &NavigatedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<NavigationEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct NavigatedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct NavigatedEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, NavigationEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const NavigatedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > NavigatedEventHandlerBox<F>
{
    const VTABLE: NavigatedEventHandler_Vtbl = NavigatedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <NavigatedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NavigatingCancelEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NavigatingCancelEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl NavigatingCancelEventArgs {
    pub fn Cancel(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Cancel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCancel)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn NavigationMode(&self) -> windows_core::Result<NavigationMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SourcePageType(
        &self,
    ) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePageType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationTransitionInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for NavigatingCancelEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INavigatingCancelEventArgs>();
}
unsafe impl windows_core::Interface for NavigatingCancelEventArgs {
    type Vtable = <INavigatingCancelEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INavigatingCancelEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NavigatingCancelEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.NavigatingCancelEventArgs";
}
unsafe impl Send for NavigatingCancelEventArgs {}
unsafe impl Sync for NavigatingCancelEventArgs {}
windows_core::imp::define_interface!(
    NavigatingCancelEventHandler,
    NavigatingCancelEventHandler_Vtbl,
    0xfcae1401_ec94_565f_9f48_7c4b6272b3b1
);
impl windows_core::RuntimeType for NavigatingCancelEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl NavigatingCancelEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigatingCancelEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = NavigatingCancelEventHandlerBox {
            vtable: &NavigatingCancelEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<NavigatingCancelEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct NavigatingCancelEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct NavigatingCancelEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, NavigatingCancelEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const NavigatingCancelEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigatingCancelEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > NavigatingCancelEventHandlerBox<F>
{
    const VTABLE: NavigatingCancelEventHandler_Vtbl = NavigatingCancelEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <NavigatingCancelEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct NavigationCacheMode(pub i32);
impl NavigationCacheMode {
    pub const Disabled: Self = Self(0i32);
    pub const Required: Self = Self(1i32);
    pub const Enabled: Self = Self(2i32);
}
impl windows_core::TypeKind for NavigationCacheMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for NavigationCacheMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Navigation.NavigationCacheMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NavigationEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NavigationEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl NavigationEventArgs {
    pub fn Content(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationTransitionInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SourcePageType(
        &self,
    ) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePageType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn NavigationMode(&self) -> windows_core::Result<NavigationMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Uri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Uri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for NavigationEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INavigationEventArgs>();
}
unsafe impl windows_core::Interface for NavigationEventArgs {
    type Vtable = <INavigationEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INavigationEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NavigationEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.NavigationEventArgs";
}
unsafe impl Send for NavigationEventArgs {}
unsafe impl Sync for NavigationEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct NavigationFailedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    NavigationFailedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl NavigationFailedEventArgs {
    pub fn Exception(&self) -> windows_core::Result<windows_core::HRESULT> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Exception)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SourcePageType(
        &self,
    ) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePageType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for NavigationFailedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, INavigationFailedEventArgs>();
}
unsafe impl windows_core::Interface for NavigationFailedEventArgs {
    type Vtable = <INavigationFailedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <INavigationFailedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for NavigationFailedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.NavigationFailedEventArgs";
}
unsafe impl Send for NavigationFailedEventArgs {}
unsafe impl Sync for NavigationFailedEventArgs {}
windows_core::imp::define_interface!(
    NavigationFailedEventHandler,
    NavigationFailedEventHandler_Vtbl,
    0x97ca2b56_d6eb_5fd2_a675_a339640eedba
);
impl windows_core::RuntimeType for NavigationFailedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl NavigationFailedEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationFailedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = NavigationFailedEventHandlerBox {
            vtable: &NavigationFailedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<NavigationFailedEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct NavigationFailedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct NavigationFailedEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, NavigationFailedEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const NavigationFailedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationFailedEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > NavigationFailedEventHandlerBox<F>
{
    const VTABLE: NavigationFailedEventHandler_Vtbl = NavigationFailedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <NavigationFailedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct NavigationMode(pub i32);
impl NavigationMode {
    pub const New: Self = Self(0i32);
    pub const Back: Self = Self(1i32);
    pub const Forward: Self = Self(2i32);
    pub const Refresh: Self = Self(3i32);
}
impl windows_core::TypeKind for NavigationMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for NavigationMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Navigation.NavigationMode;i4)",
    );
}
windows_core::imp::define_interface!(
    NavigationStoppedEventHandler,
    NavigationStoppedEventHandler_Vtbl,
    0xb9e796a6_7ffe_5a63_aef4_cbc331663b66
);
impl windows_core::RuntimeType for NavigationStoppedEventHandler {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl NavigationStoppedEventHandler {
    pub fn new<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = NavigationStoppedEventHandlerBox {
            vtable: &NavigationStoppedEventHandlerBox::<F>::VTABLE,
            count: windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { core::mem::transmute(windows_core::imp::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
        P1: windows_core::Param<NavigationEventArgs>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(
                windows_core::Interface::as_raw(this),
                sender.param().abi(),
                e.param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct NavigationStoppedEventHandler_Vtbl {
    base__: windows_core::IUnknown_Vtbl,
    Invoke: unsafe extern "system" fn(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
struct NavigationStoppedEventHandlerBox<
    F: FnMut(
            windows_core::Ref<'_, windows_core::IInspectable>,
            windows_core::Ref<'_, NavigationEventArgs>,
        ) -> windows_core::Result<()>
        + Send
        + 'static,
> {
    vtable: *const NavigationStoppedEventHandler_Vtbl,
    invoke: F,
    count: windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                windows_core::Ref<'_, windows_core::IInspectable>,
                windows_core::Ref<'_, NavigationEventArgs>,
            ) -> windows_core::Result<()>
            + Send
            + 'static,
    > NavigationStoppedEventHandlerBox<F>
{
    const VTABLE: NavigationStoppedEventHandler_Vtbl = NavigationStoppedEventHandler_Vtbl {
        base__: windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut core::ffi::c_void,
        iid: *const windows_core::GUID,
        interface: *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            if iid.is_null() || interface.is_null() {
                return windows_core::HRESULT(-2147467261);
            }
            *interface = if *iid == <NavigationStoppedEventHandler as windows_core::Interface>::IID
                || *iid == <windows_core::IUnknown as windows_core::Interface>::IID
                || *iid == <windows_core::imp::IAgileObject as windows_core::Interface>::IID
            {
                &mut (*this).vtable as *mut _ as _
            } else if *iid == <windows_core::imp::IMarshal as windows_core::Interface>::IID {
                (*this).count.add_ref();
                return windows_core::imp::marshaler(
                    core::mem::transmute(&mut (*this).vtable as *mut _ as *mut core::ffi::c_void),
                    interface,
                );
            } else {
                core::ptr::null_mut()
            };
            if (*interface).is_null() {
                windows_core::HRESULT(-2147467262)
            } else {
                (*this).count.add_ref();
                windows_core::HRESULT(0)
            }
        }
    }
    unsafe extern "system" fn AddRef(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            (*this).count.add_ref()
        }
    }
    unsafe extern "system" fn Release(this: *mut core::ffi::c_void) -> u32 {
        unsafe {
            let this = this as *mut *mut core::ffi::c_void as *mut Self;
            let remaining = (*this).count.release();
            if remaining == 0 {
                let _ = windows_core::imp::Box::from_raw(this);
            }
            remaining
        }
    }
    unsafe extern "system" fn Invoke(
        this: *mut core::ffi::c_void,
        sender: *mut core::ffi::c_void,
        e: *mut core::ffi::c_void,
    ) -> windows_core::HRESULT {
        unsafe {
            let this = &mut *(this as *mut *mut core::ffi::c_void as *mut Self);
            (this.invoke)(
                core::mem::transmute_copy(&sender),
                core::mem::transmute_copy(&e),
            )
            .into()
        }
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct PageStackEntry(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    PageStackEntry,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(PageStackEntry, super::DependencyObject);
impl PageStackEntry {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SourcePageType(
        &self,
    ) -> windows_core::Result<crate::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePageType)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Parameter(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parameter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn NavigationTransitionInfo(
        &self,
    ) -> windows_core::Result<super::Media::Animation::NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigationTransitionInfo)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn CreateInstance<P1, P2>(
        sourcepagetype: &crate::Windows::UI::Xaml::Interop::TypeName,
        parameter: P1,
        navigationtransitioninfo: P2,
    ) -> windows_core::Result<PageStackEntry>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
        P2: windows_core::Param<super::Media::Animation::NavigationTransitionInfo>,
    {
        Self::IPageStackEntryFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(sourcepagetype),
                parameter.param().abi(),
                navigationtransitioninfo.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SourcePageTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IPageStackEntryStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SourcePageTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IPageStackEntryFactory<R, F: FnOnce(&IPageStackEntryFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PageStackEntry, IPageStackEntryFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IPageStackEntryStatics<R, F: FnOnce(&IPageStackEntryStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<PageStackEntry, IPageStackEntryStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for PageStackEntry {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IPageStackEntry>();
}
unsafe impl windows_core::Interface for PageStackEntry {
    type Vtable = <IPageStackEntry as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IPageStackEntry as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for PageStackEntry {
    const NAME: &'static str = "Microsoft.UI.Xaml.Navigation.PageStackEntry";
}
unsafe impl Send for PageStackEntry {}
unsafe impl Sync for PageStackEntry {}
